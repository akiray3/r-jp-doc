x
+ x- xx + yx - yx * yx / yx ^ yx %% yx %/% y
date + xx + datedate - xdate1 lop date2
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
from:to   a:b
pkg::namepkg:::name
pkg::namepkg:::name
! xx & yx && yx | yx || yxor(x, y)isTRUE (x)isFALSE(x)
as.hexmode(x)## S3 method for class 'hexmode'as.character(x, ...)## S3 method for class 'hexmode'format(x, width = NULL, upper.case = FALSE, ...)## S3 method for class 'hexmode'print(x, ...)
as.octmode(x)## S3 method for class 'octmode'as.character(x, ...)## S3 method for class 'octmode'format(x, width = NULL, ...)## S3 method for class 'octmode'print(x, ...)
x < yx > yx <= yx >= yx == yx != y
( ... ){ ... }
x[i]x[i, j, ... , drop = TRUE]x[[i, exact = TRUE]]x[[i, j, ..., exact = TRUE]]x$namegetElement(object, name)x[i] <- valuex[i, j, ...] <- valuex[[i]] <- valuex$name <- value
I(x)
## S3 method for class 'data.frame'x[i, j, drop = ]## S3 replacement method for class 'data.frame'x[i, j] <- value## S3 method for class 'data.frame'x[[..., exact = TRUE]]## S3 replacement method for class 'data.frame'x[[i, j]] <- value## S3 replacement method for class 'data.frame'x$name <- value
## S3 method for class 'Date'summary(object, digits = 12, ...)## S3 method for class 'Date'print(x, max = NULL, ...)
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
x[i]x[i, j, ... , drop = TRUE]x[[i, exact = TRUE]]x[[i, j, ..., exact = TRUE]]x$namegetElement(object, name)x[i] <- valuex[i, j, ...] <- valuex[[i]] <- valuex$name <- value
getLoadedDLLs()
## S3 method for class 'factor'x[..., drop = FALSE]## S3 method for class 'factor'x[[...]]## S3 replacement method for class 'factor'x[...] <- value## S3 replacement method for class 'factor'x[[...]] <- value
as.hexmode(x)## S3 method for class 'hexmode'as.character(x, ...)## S3 method for class 'hexmode'format(x, width = NULL, upper.case = FALSE, ...)## S3 method for class 'hexmode'print(x, ...)
x[i]x[i, j, ... , drop = TRUE]x[[i, exact = TRUE]]x[[i, j, ..., exact = TRUE]]x$namegetElement(object, name)x[i] <- valuex[i, j, ...] <- valuex[[i]] <- valuex$name <- value
noquote(obj, right = FALSE)## S3 method for class 'noquote'print(x, quote = FALSE, right = FALSE, ...)## S3 method for class 'noquote'c(..., recursive = FALSE)
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
as.octmode(x)## S3 method for class 'octmode'as.character(x, ...)## S3 method for class 'octmode'format(x, width = NULL, ...)## S3 method for class 'octmode'print(x, ...)
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
x[i]x[i, j, ... , drop = TRUE]x[[i, exact = TRUE]]x[[i, j, ..., exact = TRUE]]x$namegetElement(object, name)x[i] <- valuex[i, j, ...] <- valuex[[i]] <- valuex$name <- value
table(...,      exclude = if (useNA == "no") c(NA, NaN),      useNA = c("no", "ifany", "always"),      dnn = list.names(...), deparse.level = 1)as.table(x, ...)is.table(x)## S3 method for class 'table'as.data.frame(x, row.names = NULL, ...,              responseName = "Freq", stringsAsFactors = TRUE,              sep = "", base = list(LETTERS))
warnings(...)## S3 method for class 'warnings'summary(object, ...)## S3 method for class 'warnings'print(x, tags,      header = ngettext(n, "Warning message:\n", "Warning messages:\n"),      ...)## S3 method for class 'summary.warnings'print(x, ...)
x[i]x[i, j, ... , drop = TRUE]x[[i, exact = TRUE]]x[[i, j, ..., exact = TRUE]]x$namegetElement(object, name)x[i] <- valuex[i, j, ...] <- valuex[[i]] <- valuex$name <- value
## S3 method for class 'data.frame'x[i, j, drop = ]## S3 replacement method for class 'data.frame'x[i, j] <- value## S3 method for class 'data.frame'x[[..., exact = TRUE]]## S3 replacement method for class 'data.frame'x[[i, j]] <- value## S3 replacement method for class 'data.frame'x$name <- value
## S3 method for class 'Date'summary(object, digits = 12, ...)## S3 method for class 'Date'print(x, max = NULL, ...)
## S3 method for class 'factor'x[..., drop = FALSE]## S3 method for class 'factor'x[[...]]## S3 replacement method for class 'factor'x[...] <- value## S3 replacement method for class 'factor'x[[...]] <- value
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
x[i]x[i, j, ... , drop = TRUE]x[[i, exact = TRUE]]x[[i, j, ..., exact = TRUE]]x$namegetElement(object, name)x[i] <- valuex[i, j, ...] <- valuex[[i]] <- valuex$name <- value
## S3 method for class 'data.frame'x[i, j, drop = ]## S3 replacement method for class 'data.frame'x[i, j] <- value## S3 method for class 'data.frame'x[[..., exact = TRUE]]## S3 replacement method for class 'data.frame'x[[i, j]] <- value## S3 replacement method for class 'data.frame'x$name <- value
## S3 method for class 'factor'x[..., drop = FALSE]## S3 method for class 'factor'x[[...]]## S3 replacement method for class 'factor'x[...] <- value## S3 replacement method for class 'factor'x[[...]] <- value
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
x[i]x[i, j, ... , drop = TRUE]x[[i, exact = TRUE]]x[[i, j, ..., exact = TRUE]]x$namegetElement(object, name)x[i] <- valuex[i, j, ...] <- valuex[[i]] <- valuex$name <- value
## S3 method for class 'data.frame'x[i, j, drop = ]## S3 replacement method for class 'data.frame'x[i, j] <- value## S3 method for class 'data.frame'x[[..., exact = TRUE]]## S3 replacement method for class 'data.frame'x[[i, j]] <- value## S3 replacement method for class 'data.frame'x$name <- value
## S3 method for class 'Date'summary(object, digits = 12, ...)## S3 method for class 'Date'print(x, max = NULL, ...)
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
## S3 method for class 'factor'x[..., drop = FALSE]## S3 method for class 'factor'x[[...]]## S3 replacement method for class 'factor'x[...] <- value## S3 replacement method for class 'factor'x[[...]] <- value
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
( ... ){ ... }
object@nameobject@name <- value
object@nameobject@name <- value
+ x- xx + yx - yx * yx / yx ^ yx %% yx %/% y
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
+ x- xx + yx - yx * yx / yx ^ yx %% yx %/% y
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
! xx & yx && yx | yx || yxor(x, y)isTRUE (x)isFALSE(x)
as.hexmode(x)## S3 method for class 'hexmode'as.character(x, ...)## S3 method for class 'hexmode'format(x, width = NULL, upper.case = FALSE, ...)## S3 method for class 'hexmode'print(x, ...)
as.octmode(x)## S3 method for class 'octmode'as.character(x, ...)## S3 method for class 'octmode'format(x, width = NULL, ...)## S3 method for class 'octmode'print(x, ...)
! xx & yx && yx | yx || yxor(x, y)isTRUE (x)isFALSE(x)
x %*% y
+ x- xx + yx - yx * yx / yx ^ yx %% yx %/% y
+ x- xx + yx - yx * yx / yx ^ yx %% yx %/% y
match(x, table, nomatch = NA_integer_, incomparables = NULL)x %in% table
outer(X, Y, FUN = "*", ...)X %o% Y
kronecker(X, Y, FUN = "*", make.dimnames = FALSE, ...)X %x% Y
+ x- xx + yx - yx * yx / yx ^ yx %% yx %/% y
+ x- xx + yx - yx * yx / yx ^ yx %% yx %/% y
date + xx + datedate - xdate1 lop date2
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
x < yx > yx <= yx >= yx == yx != y
x <- valuex <<- valuevalue -> xvalue ->> xx = value
x <- valuex <<- valuevalue -> xvalue ->> xx = value
x < yx > yx <= yx >= yx == yx != y
x <- valuex <<- valuevalue -> xvalue ->> xx = value
x < yx > yx <= yx >= yx == yx != y
x < yx > yx <= yx >= yx == yx != y
x < yx > yx <= yx >= yx == yx != y
! xx & yx && yx | yx || yxor(x, y)isTRUE (x)isFALSE(x)
as.hexmode(x)## S3 method for class 'hexmode'as.character(x, ...)## S3 method for class 'hexmode'format(x, width = NULL, upper.case = FALSE, ...)## S3 method for class 'hexmode'print(x, ...)
as.octmode(x)## S3 method for class 'octmode'as.character(x, ...)## S3 method for class 'octmode'format(x, width = NULL, ...)## S3 method for class 'octmode'print(x, ...)
! xx & yx && yx | yx || yxor(x, y)isTRUE (x)isFALSE(x)
y ~ model
x[i]x[i, j, ... , drop = TRUE]x[[i, exact = TRUE]]x[[i, j, ..., exact = TRUE]]x$namegetElement(object, name)x[i] <- valuex[i, j, ...] <- valuex[[i]] <- valuex$name <- value
getLoadedDLLs()
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
x[i]x[i, j, ... , drop = TRUE]x[[i, exact = TRUE]]x[[i, j, ..., exact = TRUE]]x$namegetElement(object, name)x[i] <- valuex[i, j, ...] <- valuex[[i]] <- valuex$name <- value
## S3 method for class 'data.frame'x[i, j, drop = ]## S3 replacement method for class 'data.frame'x[i, j] <- value## S3 method for class 'data.frame'x[[..., exact = TRUE]]## S3 replacement method for class 'data.frame'x[[i, j]] <- value## S3 replacement method for class 'data.frame'x$name <- value
abbreviate(names.arg, minlength = 4, use.classes = TRUE,           dot = FALSE, strict = FALSE,           method = c("left.kept", "both.sides"), named = TRUE)
abs(x)sqrt(x)
cos(x)sin(x)tan(x)acos(x)asin(x)atan(x)atan2(y, x)cospi(x)sinpi(x)tanpi(x)
cosh(x)sinh(x)tanh(x)acosh(x)asinh(x)atanh(x)
lockEnvironment(env, bindings = FALSE)environmentIsLocked(env)lockBinding(sym, env)unlockBinding(sym, env)bindingIsLocked(sym, env)makeActiveBinding(sym, fun, env)bindingIsActive(sym, env)activeBindingFunction(sym, env)
factor(x = character(), levels, labels = levels,       exclude = NA, ordered = is.ordered(x), nmax = NA)ordered(x, ...)is.factor(x)is.ordered(x)as.factor(x)as.ordered(x)addNA(x, ifany = FALSE)
addTaskCallback(f, data = NULL, name = character())removeTaskCallback(id)
agrep(pattern, x, max.distance = 0.1, costs = NULL,      ignore.case = FALSE, value = FALSE, fixed = TRUE,      useBytes = FALSE)agrepl(pattern, x, max.distance = 0.1, costs = NULL,       ignore.case = FALSE, fixed = TRUE, useBytes = FALSE)
agrep(pattern, x, max.distance = 0.1, costs = NULL,      ignore.case = FALSE, value = FALSE, fixed = TRUE,      useBytes = FALSE)agrepl(pattern, x, max.distance = 0.1, costs = NULL,       ignore.case = FALSE, fixed = TRUE, useBytes = FALSE)
list(...)pairlist(...)as.list(x, ...)## S3 method for class 'environment'as.list(x, all.names = FALSE, sorted = FALSE, ...)as.pairlist(x)is.list(x)is.pairlist(x)alist(...)
all(..., na.rm = FALSE)
all.equal(target, current, ...)## S3 method for class 'numeric'all.equal(target, current,          tolerance = sqrt(.Machine$double.eps), scale = NULL,          countEQ = FALSE,          formatFUN = function(err, what) format(err),          ..., check.attributes = TRUE)## S3 method for class 'list'all.equal(target, current, ...,          check.attributes = TRUE, use.names = TRUE)## S3 method for class 'environment'all.equal(target, current, all.names = TRUE,          evaluate = TRUE, ...)## S3 method for class 'function'all.equal(target, current, check.environment=TRUE, ...)## S3 method for class 'POSIXt'all.equal(target, current, ..., tolerance = 1e-3, scale,          check.tzone = TRUE)attr.all.equal(target, current, ...,               check.attributes = TRUE, check.names = TRUE)
all.equal(target, current, ...)## S3 method for class 'numeric'all.equal(target, current,          tolerance = sqrt(.Machine$double.eps), scale = NULL,          countEQ = FALSE,          formatFUN = function(err, what) format(err),          ..., check.attributes = TRUE)## S3 method for class 'list'all.equal(target, current, ...,          check.attributes = TRUE, use.names = TRUE)## S3 method for class 'environment'all.equal(target, current, all.names = TRUE,          evaluate = TRUE, ...)## S3 method for class 'function'all.equal(target, current, check.environment=TRUE, ...)## S3 method for class 'POSIXt'all.equal(target, current, ..., tolerance = 1e-3, scale,          check.tzone = TRUE)attr.all.equal(target, current, ...,               check.attributes = TRUE, check.names = TRUE)
all.equal(target, current, ...)## S3 method for class 'numeric'all.equal(target, current,          tolerance = sqrt(.Machine$double.eps), scale = NULL,          countEQ = FALSE,          formatFUN = function(err, what) format(err),          ..., check.attributes = TRUE)## S3 method for class 'list'all.equal(target, current, ...,          check.attributes = TRUE, use.names = TRUE)## S3 method for class 'environment'all.equal(target, current, all.names = TRUE,          evaluate = TRUE, ...)## S3 method for class 'function'all.equal(target, current, check.environment=TRUE, ...)## S3 method for class 'POSIXt'all.equal(target, current, ..., tolerance = 1e-3, scale,          check.tzone = TRUE)attr.all.equal(target, current, ...,               check.attributes = TRUE, check.names = TRUE)
all.equal(target, current, ...)## S3 method for class 'numeric'all.equal(target, current,          tolerance = sqrt(.Machine$double.eps), scale = NULL,          countEQ = FALSE,          formatFUN = function(err, what) format(err),          ..., check.attributes = TRUE)## S3 method for class 'list'all.equal(target, current, ...,          check.attributes = TRUE, use.names = TRUE)## S3 method for class 'environment'all.equal(target, current, all.names = TRUE,          evaluate = TRUE, ...)## S3 method for class 'function'all.equal(target, current, check.environment=TRUE, ...)## S3 method for class 'POSIXt'all.equal(target, current, ..., tolerance = 1e-3, scale,          check.tzone = TRUE)attr.all.equal(target, current, ...,               check.attributes = TRUE, check.names = TRUE)
all.equal(target, current, ...)## S3 method for class 'numeric'all.equal(target, current,          tolerance = sqrt(.Machine$double.eps), scale = NULL,          countEQ = FALSE,          formatFUN = function(err, what) format(err),          ..., check.attributes = TRUE)## S3 method for class 'list'all.equal(target, current, ...,          check.attributes = TRUE, use.names = TRUE)## S3 method for class 'environment'all.equal(target, current, all.names = TRUE,          evaluate = TRUE, ...)## S3 method for class 'function'all.equal(target, current, check.environment=TRUE, ...)## S3 method for class 'POSIXt'all.equal(target, current, ..., tolerance = 1e-3, scale,          check.tzone = TRUE)attr.all.equal(target, current, ...,               check.attributes = TRUE, check.names = TRUE)
all.equal(target, current, ...)## S3 method for class 'numeric'all.equal(target, current,          tolerance = sqrt(.Machine$double.eps), scale = NULL,          countEQ = FALSE,          formatFUN = function(err, what) format(err),          ..., check.attributes = TRUE)## S3 method for class 'list'all.equal(target, current, ...,          check.attributes = TRUE, use.names = TRUE)## S3 method for class 'environment'all.equal(target, current, all.names = TRUE,          evaluate = TRUE, ...)## S3 method for class 'function'all.equal(target, current, check.environment=TRUE, ...)## S3 method for class 'POSIXt'all.equal(target, current, ..., tolerance = 1e-3, scale,          check.tzone = TRUE)attr.all.equal(target, current, ...,               check.attributes = TRUE, check.names = TRUE)
all.equal(target, current, ...)## S3 method for class 'numeric'all.equal(target, current,          tolerance = sqrt(.Machine$double.eps), scale = NULL,          countEQ = FALSE,          formatFUN = function(err, what) format(err),          ..., check.attributes = TRUE)## S3 method for class 'list'all.equal(target, current, ...,          check.attributes = TRUE, use.names = TRUE)## S3 method for class 'environment'all.equal(target, current, all.names = TRUE,          evaluate = TRUE, ...)## S3 method for class 'function'all.equal(target, current, check.environment=TRUE, ...)## S3 method for class 'POSIXt'all.equal(target, current, ..., tolerance = 1e-3, scale,          check.tzone = TRUE)attr.all.equal(target, current, ...,               check.attributes = TRUE, check.names = TRUE)
all.equal(target, current, ...)## S3 method for class 'numeric'all.equal(target, current,          tolerance = sqrt(.Machine$double.eps), scale = NULL,          countEQ = FALSE,          formatFUN = function(err, what) format(err),          ..., check.attributes = TRUE)## S3 method for class 'list'all.equal(target, current, ...,          check.attributes = TRUE, use.names = TRUE)## S3 method for class 'environment'all.equal(target, current, all.names = TRUE,          evaluate = TRUE, ...)## S3 method for class 'function'all.equal(target, current, check.environment=TRUE, ...)## S3 method for class 'POSIXt'all.equal(target, current, ..., tolerance = 1e-3, scale,          check.tzone = TRUE)attr.all.equal(target, current, ...,               check.attributes = TRUE, check.names = TRUE)
all.equal(target, current, ...)## S3 method for class 'numeric'all.equal(target, current,          tolerance = sqrt(.Machine$double.eps), scale = NULL,          countEQ = FALSE,          formatFUN = function(err, what) format(err),          ..., check.attributes = TRUE)## S3 method for class 'list'all.equal(target, current, ...,          check.attributes = TRUE, use.names = TRUE)## S3 method for class 'environment'all.equal(target, current, all.names = TRUE,          evaluate = TRUE, ...)## S3 method for class 'function'all.equal(target, current, check.environment=TRUE, ...)## S3 method for class 'POSIXt'all.equal(target, current, ..., tolerance = 1e-3, scale,          check.tzone = TRUE)attr.all.equal(target, current, ...,               check.attributes = TRUE, check.names = TRUE)
all.equal(target, current, ...)## S3 method for class 'numeric'all.equal(target, current,          tolerance = sqrt(.Machine$double.eps), scale = NULL,          countEQ = FALSE,          formatFUN = function(err, what) format(err),          ..., check.attributes = TRUE)## S3 method for class 'list'all.equal(target, current, ...,          check.attributes = TRUE, use.names = TRUE)## S3 method for class 'environment'all.equal(target, current, all.names = TRUE,          evaluate = TRUE, ...)## S3 method for class 'function'all.equal(target, current, check.environment=TRUE, ...)## S3 method for class 'POSIXt'all.equal(target, current, ..., tolerance = 1e-3, scale,          check.tzone = TRUE)attr.all.equal(target, current, ...,               check.attributes = TRUE, check.names = TRUE)
all.equal(target, current, ...)## S3 method for class 'numeric'all.equal(target, current,          tolerance = sqrt(.Machine$double.eps), scale = NULL,          countEQ = FALSE,          formatFUN = function(err, what) format(err),          ..., check.attributes = TRUE)## S3 method for class 'list'all.equal(target, current, ...,          check.attributes = TRUE, use.names = TRUE)## S3 method for class 'environment'all.equal(target, current, all.names = TRUE,          evaluate = TRUE, ...)## S3 method for class 'function'all.equal(target, current, check.environment=TRUE, ...)## S3 method for class 'POSIXt'all.equal(target, current, ..., tolerance = 1e-3, scale,          check.tzone = TRUE)attr.all.equal(target, current, ...,               check.attributes = TRUE, check.names = TRUE)
all.equal(target, current, ...)## S3 method for class 'numeric'all.equal(target, current,          tolerance = sqrt(.Machine$double.eps), scale = NULL,          countEQ = FALSE,          formatFUN = function(err, what) format(err),          ..., check.attributes = TRUE)## S3 method for class 'list'all.equal(target, current, ...,          check.attributes = TRUE, use.names = TRUE)## S3 method for class 'environment'all.equal(target, current, all.names = TRUE,          evaluate = TRUE, ...)## S3 method for class 'function'all.equal(target, current, check.environment=TRUE, ...)## S3 method for class 'POSIXt'all.equal(target, current, ..., tolerance = 1e-3, scale,          check.tzone = TRUE)attr.all.equal(target, current, ...,               check.attributes = TRUE, check.names = TRUE)
all.equal(target, current, ...)## S3 method for class 'numeric'all.equal(target, current,          tolerance = sqrt(.Machine$double.eps), scale = NULL,          countEQ = FALSE,          formatFUN = function(err, what) format(err),          ..., check.attributes = TRUE)## S3 method for class 'list'all.equal(target, current, ...,          check.attributes = TRUE, use.names = TRUE)## S3 method for class 'environment'all.equal(target, current, all.names = TRUE,          evaluate = TRUE, ...)## S3 method for class 'function'all.equal(target, current, check.environment=TRUE, ...)## S3 method for class 'POSIXt'all.equal(target, current, ..., tolerance = 1e-3, scale,          check.tzone = TRUE)attr.all.equal(target, current, ...,               check.attributes = TRUE, check.names = TRUE)
all.names(expr, functions = TRUE, max.names = -1L, unique = FALSE)all.vars(expr, functions = FALSE, max.names = -1L, unique = TRUE)
all.names(expr, functions = TRUE, max.names = -1L, unique = FALSE)all.vars(expr, functions = FALSE, max.names = -1L, unique = TRUE)
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
any(..., na.rm = FALSE)
duplicated(x, incomparables = FALSE, ...)## Default S3 method:duplicated(x, incomparables = FALSE,           fromLast = FALSE, nmax = NA, ...)## S3 method for class 'array'duplicated(x, incomparables = FALSE, MARGIN = 1,           fromLast = FALSE, ...)anyDuplicated(x, incomparables = FALSE, ...)## Default S3 method:anyDuplicated(x, incomparables = FALSE,           fromLast = FALSE, ...)## S3 method for class 'array'anyDuplicated(x, incomparables = FALSE,           MARGIN = 1, fromLast = FALSE, ...)
duplicated(x, incomparables = FALSE, ...)## Default S3 method:duplicated(x, incomparables = FALSE,           fromLast = FALSE, nmax = NA, ...)## S3 method for class 'array'duplicated(x, incomparables = FALSE, MARGIN = 1,           fromLast = FALSE, ...)anyDuplicated(x, incomparables = FALSE, ...)## Default S3 method:anyDuplicated(x, incomparables = FALSE,           fromLast = FALSE, ...)## S3 method for class 'array'anyDuplicated(x, incomparables = FALSE,           MARGIN = 1, fromLast = FALSE, ...)
duplicated(x, incomparables = FALSE, ...)## Default S3 method:duplicated(x, incomparables = FALSE,           fromLast = FALSE, nmax = NA, ...)## S3 method for class 'array'duplicated(x, incomparables = FALSE, MARGIN = 1,           fromLast = FALSE, ...)anyDuplicated(x, incomparables = FALSE, ...)## Default S3 method:anyDuplicated(x, incomparables = FALSE,           fromLast = FALSE, ...)## S3 method for class 'array'anyDuplicated(x, incomparables = FALSE,           MARGIN = 1, fromLast = FALSE, ...)
duplicated(x, incomparables = FALSE, ...)## Default S3 method:duplicated(x, incomparables = FALSE,           fromLast = FALSE, nmax = NA, ...)## S3 method for class 'array'duplicated(x, incomparables = FALSE, MARGIN = 1,           fromLast = FALSE, ...)anyDuplicated(x, incomparables = FALSE, ...)## Default S3 method:anyDuplicated(x, incomparables = FALSE,           fromLast = FALSE, ...)## S3 method for class 'array'anyDuplicated(x, incomparables = FALSE,           MARGIN = 1, fromLast = FALSE, ...)
duplicated(x, incomparables = FALSE, ...)## Default S3 method:duplicated(x, incomparables = FALSE,           fromLast = FALSE, nmax = NA, ...)## S3 method for class 'array'duplicated(x, incomparables = FALSE, MARGIN = 1,           fromLast = FALSE, ...)anyDuplicated(x, incomparables = FALSE, ...)## Default S3 method:anyDuplicated(x, incomparables = FALSE,           fromLast = FALSE, ...)## S3 method for class 'array'anyDuplicated(x, incomparables = FALSE,           MARGIN = 1, fromLast = FALSE, ...)
NAis.na(x)anyNA(x, recursive = FALSE)## S3 method for class 'data.frame'is.na(x)is.na(x) <- value
NAis.na(x)anyNA(x, recursive = FALSE)## S3 method for class 'data.frame'is.na(x)is.na(x) <- value
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
aperm(a, perm, ...)## Default S3 method:aperm(a, perm = NULL, resize = TRUE, ...)## S3 method for class 'table'aperm(a, perm = NULL, resize = TRUE, keep.class = TRUE, ...)
aperm(a, perm, ...)## Default S3 method:aperm(a, perm = NULL, resize = TRUE, ...)## S3 method for class 'table'aperm(a, perm = NULL, resize = TRUE, keep.class = TRUE, ...)
aperm(a, perm, ...)## Default S3 method:aperm(a, perm = NULL, resize = TRUE, ...)## S3 method for class 'table'aperm(a, perm = NULL, resize = TRUE, keep.class = TRUE, ...)
append(x, values, after = length(x))
apply(X, MARGIN, FUN, ..., simplify = TRUE)
complex(length.out = 0, real = numeric(), imaginary = numeric(),        modulus = 1, argument = 0)as.complex(x, ...)is.complex(x)Re(z)Im(z)Mod(z)Arg(z)Conj(z)
args(name)
array(data = NA, dim = length(data), dimnames = NULL)as.array(x, ...)is.array(x)
which(x, arr.ind = FALSE, useNames = TRUE)arrayInd(ind, .dim, .dimnames = NULL, useNames = FALSE)
array(data = NA, dim = length(data), dimnames = NULL)as.array(x, ...)is.array(x)
array(data = NA, dim = length(data), dimnames = NULL)as.array(x, ...)is.array(x)
call(name, ...)is.call(x)as.call(x)
character(length = 0)as.character(x, ...)is.character(x)
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
as.Date(x, ...)## S3 method for class 'character'as.Date(x, format, tryFormats = c("%Y-%m-%d", "%Y/%m/%d"),        optional = FALSE, ...)## S3 method for class 'numeric'as.Date(x, origin, ...)## S3 method for class 'POSIXct'as.Date(x, tz = "UTC", ...)## S3 method for class 'Date'format(x, ...)## S3 method for class 'Date'as.character(x, ...)
character(length = 0)as.character(x, ...)is.character(x)
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
character(length = 0)as.character(x, ...)is.character(x)
as.hexmode(x)## S3 method for class 'hexmode'as.character(x, ...)## S3 method for class 'hexmode'format(x, width = NULL, upper.case = FALSE, ...)## S3 method for class 'hexmode'print(x, ...)
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
as.octmode(x)## S3 method for class 'octmode'as.character(x, ...)## S3 method for class 'octmode'format(x, width = NULL, ...)## S3 method for class 'octmode'print(x, ...)
## S3 method for class 'POSIXct'format(x, format = "", tz = "", usetz = FALSE, ...)## S3 method for class 'POSIXlt'format(x, format = "", usetz = FALSE, ...)## S3 method for class 'POSIXt'as.character(x, ...)strftime(x, format = "", tz = "", usetz = FALSE, ...)strptime(x, format, tz = "")
srcfile(filename, encoding = getOption("encoding"), Enc = "unknown")srcfilecopy(filename, lines, timestamp = Sys.time(), isFile = FALSE)srcfilealias(filename, srcfile)getSrcLines(srcfile, first, last)srcref(srcfile, lloc)## S3 method for class 'srcfile'print(x, ...)## S3 method for class 'srcfile'summary(object, ...)## S3 method for class 'srcfile'open(con, line, ...)## S3 method for class 'srcfile'close(con, ...)## S3 method for class 'srcref'print(x, useSource = TRUE, ...)## S3 method for class 'srcref'summary(object, useSource = FALSE, ...)## S3 method for class 'srcref'as.character(x, useSource = TRUE, to = x, ...).isOpen(srcfile)
complex(length.out = 0, real = numeric(), imaginary = numeric(),        modulus = 1, argument = 0)as.complex(x, ...)is.complex(x)Re(z)Im(z)Mod(z)Arg(z)Conj(z)
as.data.frame(x, row.names = NULL, optional = FALSE, ...)## S3 method for class 'character'as.data.frame(x, ...,              stringsAsFactors = FALSE)## S3 method for class 'list'as.data.frame(x, row.names = NULL, optional = FALSE, ...,              cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE,              check.names = !optional,              stringsAsFactors = FALSE)## S3 method for class 'matrix'as.data.frame(x, row.names = NULL, optional = FALSE,              make.names = TRUE, ...,              stringsAsFactors = FALSE)is.data.frame(x)
as.data.frame(x, row.names = NULL, optional = FALSE, ...)## S3 method for class 'character'as.data.frame(x, ...,              stringsAsFactors = FALSE)## S3 method for class 'list'as.data.frame(x, row.names = NULL, optional = FALSE, ...,              cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE,              check.names = !optional,              stringsAsFactors = FALSE)## S3 method for class 'matrix'as.data.frame(x, row.names = NULL, optional = FALSE,              make.names = TRUE, ...,              stringsAsFactors = FALSE)is.data.frame(x)
as.data.frame(x, row.names = NULL, optional = FALSE, ...)## S3 method for class 'character'as.data.frame(x, ...,              stringsAsFactors = FALSE)## S3 method for class 'list'as.data.frame(x, row.names = NULL, optional = FALSE, ...,              cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE,              check.names = !optional,              stringsAsFactors = FALSE)## S3 method for class 'matrix'as.data.frame(x, row.names = NULL, optional = FALSE,              make.names = TRUE, ...,              stringsAsFactors = FALSE)is.data.frame(x)
as.data.frame(x, row.names = NULL, optional = FALSE, ...)## S3 method for class 'character'as.data.frame(x, ...,              stringsAsFactors = FALSE)## S3 method for class 'list'as.data.frame(x, row.names = NULL, optional = FALSE, ...,              cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE,              check.names = !optional,              stringsAsFactors = FALSE)## S3 method for class 'matrix'as.data.frame(x, row.names = NULL, optional = FALSE,              make.names = TRUE, ...,              stringsAsFactors = FALSE)is.data.frame(x)
as.data.frame(x, row.names = NULL, optional = FALSE, ...)## S3 method for class 'character'as.data.frame(x, ...,              stringsAsFactors = FALSE)## S3 method for class 'list'as.data.frame(x, row.names = NULL, optional = FALSE, ...,              cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE,              check.names = !optional,              stringsAsFactors = FALSE)## S3 method for class 'matrix'as.data.frame(x, row.names = NULL, optional = FALSE,              make.names = TRUE, ...,              stringsAsFactors = FALSE)is.data.frame(x)
as.data.frame(x, row.names = NULL, optional = FALSE, ...)## S3 method for class 'character'as.data.frame(x, ...,              stringsAsFactors = FALSE)## S3 method for class 'list'as.data.frame(x, row.names = NULL, optional = FALSE, ...,              cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE,              check.names = !optional,              stringsAsFactors = FALSE)## S3 method for class 'matrix'as.data.frame(x, row.names = NULL, optional = FALSE,              make.names = TRUE, ...,              stringsAsFactors = FALSE)is.data.frame(x)
## S3 method for class 'Date'summary(object, digits = 12, ...)## S3 method for class 'Date'print(x, max = NULL, ...)
as.data.frame(x, row.names = NULL, optional = FALSE, ...)## S3 method for class 'character'as.data.frame(x, ...,              stringsAsFactors = FALSE)## S3 method for class 'list'as.data.frame(x, row.names = NULL, optional = FALSE, ...,              cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE,              check.names = !optional,              stringsAsFactors = FALSE)## S3 method for class 'matrix'as.data.frame(x, row.names = NULL, optional = FALSE,              make.names = TRUE, ...,              stringsAsFactors = FALSE)is.data.frame(x)
as.data.frame(x, row.names = NULL, optional = FALSE, ...)## S3 method for class 'character'as.data.frame(x, ...,              stringsAsFactors = FALSE)## S3 method for class 'list'as.data.frame(x, row.names = NULL, optional = FALSE, ...,              cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE,              check.names = !optional,              stringsAsFactors = FALSE)## S3 method for class 'matrix'as.data.frame(x, row.names = NULL, optional = FALSE,              make.names = TRUE, ...,              stringsAsFactors = FALSE)is.data.frame(x)
as.data.frame(x, row.names = NULL, optional = FALSE, ...)## S3 method for class 'character'as.data.frame(x, ...,              stringsAsFactors = FALSE)## S3 method for class 'list'as.data.frame(x, row.names = NULL, optional = FALSE, ...,              cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE,              check.names = !optional,              stringsAsFactors = FALSE)## S3 method for class 'matrix'as.data.frame(x, row.names = NULL, optional = FALSE,              make.names = TRUE, ...,              stringsAsFactors = FALSE)is.data.frame(x)
as.data.frame(x, row.names = NULL, optional = FALSE, ...)## S3 method for class 'character'as.data.frame(x, ...,              stringsAsFactors = FALSE)## S3 method for class 'list'as.data.frame(x, row.names = NULL, optional = FALSE, ...,              cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE,              check.names = !optional,              stringsAsFactors = FALSE)## S3 method for class 'matrix'as.data.frame(x, row.names = NULL, optional = FALSE,              make.names = TRUE, ...,              stringsAsFactors = FALSE)is.data.frame(x)
as.data.frame(x, row.names = NULL, optional = FALSE, ...)## S3 method for class 'character'as.data.frame(x, ...,              stringsAsFactors = FALSE)## S3 method for class 'list'as.data.frame(x, row.names = NULL, optional = FALSE, ...,              cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE,              check.names = !optional,              stringsAsFactors = FALSE)## S3 method for class 'matrix'as.data.frame(x, row.names = NULL, optional = FALSE,              make.names = TRUE, ...,              stringsAsFactors = FALSE)is.data.frame(x)
as.data.frame(x, row.names = NULL, optional = FALSE, ...)## S3 method for class 'character'as.data.frame(x, ...,              stringsAsFactors = FALSE)## S3 method for class 'list'as.data.frame(x, row.names = NULL, optional = FALSE, ...,              cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE,              check.names = !optional,              stringsAsFactors = FALSE)## S3 method for class 'matrix'as.data.frame(x, row.names = NULL, optional = FALSE,              make.names = TRUE, ...,              stringsAsFactors = FALSE)is.data.frame(x)
as.data.frame(x, row.names = NULL, optional = FALSE, ...)## S3 method for class 'character'as.data.frame(x, ...,              stringsAsFactors = FALSE)## S3 method for class 'list'as.data.frame(x, row.names = NULL, optional = FALSE, ...,              cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE,              check.names = !optional,              stringsAsFactors = FALSE)## S3 method for class 'matrix'as.data.frame(x, row.names = NULL, optional = FALSE,              make.names = TRUE, ...,              stringsAsFactors = FALSE)is.data.frame(x)
as.data.frame(x, row.names = NULL, optional = FALSE, ...)## S3 method for class 'character'as.data.frame(x, ...,              stringsAsFactors = FALSE)## S3 method for class 'list'as.data.frame(x, row.names = NULL, optional = FALSE, ...,              cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE,              check.names = !optional,              stringsAsFactors = FALSE)## S3 method for class 'matrix'as.data.frame(x, row.names = NULL, optional = FALSE,              make.names = TRUE, ...,              stringsAsFactors = FALSE)is.data.frame(x)
as.data.frame(x, row.names = NULL, optional = FALSE, ...)## S3 method for class 'character'as.data.frame(x, ...,              stringsAsFactors = FALSE)## S3 method for class 'list'as.data.frame(x, row.names = NULL, optional = FALSE, ...,              cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE,              check.names = !optional,              stringsAsFactors = FALSE)## S3 method for class 'matrix'as.data.frame(x, row.names = NULL, optional = FALSE,              make.names = TRUE, ...,              stringsAsFactors = FALSE)is.data.frame(x)
as.data.frame(x, row.names = NULL, optional = FALSE, ...)## S3 method for class 'character'as.data.frame(x, ...,              stringsAsFactors = FALSE)## S3 method for class 'list'as.data.frame(x, row.names = NULL, optional = FALSE, ...,              cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE,              check.names = !optional,              stringsAsFactors = FALSE)## S3 method for class 'matrix'as.data.frame(x, row.names = NULL, optional = FALSE,              make.names = TRUE, ...,              stringsAsFactors = FALSE)is.data.frame(x)
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
as.data.frame(x, row.names = NULL, optional = FALSE, ...)## S3 method for class 'character'as.data.frame(x, ...,              stringsAsFactors = FALSE)## S3 method for class 'list'as.data.frame(x, row.names = NULL, optional = FALSE, ...,              cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE,              check.names = !optional,              stringsAsFactors = FALSE)## S3 method for class 'matrix'as.data.frame(x, row.names = NULL, optional = FALSE,              make.names = TRUE, ...,              stringsAsFactors = FALSE)is.data.frame(x)
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
as.data.frame(x, row.names = NULL, optional = FALSE, ...)## S3 method for class 'character'as.data.frame(x, ...,              stringsAsFactors = FALSE)## S3 method for class 'list'as.data.frame(x, row.names = NULL, optional = FALSE, ...,              cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE,              check.names = !optional,              stringsAsFactors = FALSE)## S3 method for class 'matrix'as.data.frame(x, row.names = NULL, optional = FALSE,              make.names = TRUE, ...,              stringsAsFactors = FALSE)is.data.frame(x)
table(...,      exclude = if (useNA == "no") c(NA, NaN),      useNA = c("no", "ifany", "always"),      dnn = list.names(...), deparse.level = 1)as.table(x, ...)is.table(x)## S3 method for class 'table'as.data.frame(x, row.names = NULL, ...,              responseName = "Freq", stringsAsFactors = TRUE,              sep = "", base = list(LETTERS))
as.data.frame(x, row.names = NULL, optional = FALSE, ...)## S3 method for class 'character'as.data.frame(x, ...,              stringsAsFactors = FALSE)## S3 method for class 'list'as.data.frame(x, row.names = NULL, optional = FALSE, ...,              cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE,              check.names = !optional,              stringsAsFactors = FALSE)## S3 method for class 'matrix'as.data.frame(x, row.names = NULL, optional = FALSE,              make.names = TRUE, ...,              stringsAsFactors = FALSE)is.data.frame(x)
as.data.frame(x, row.names = NULL, optional = FALSE, ...)## S3 method for class 'character'as.data.frame(x, ...,              stringsAsFactors = FALSE)## S3 method for class 'list'as.data.frame(x, row.names = NULL, optional = FALSE, ...,              cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE,              check.names = !optional,              stringsAsFactors = FALSE)## S3 method for class 'matrix'as.data.frame(x, row.names = NULL, optional = FALSE,              make.names = TRUE, ...,              stringsAsFactors = FALSE)is.data.frame(x)
as.Date(x, ...)## S3 method for class 'character'as.Date(x, format, tryFormats = c("%Y-%m-%d", "%Y/%m/%d"),        optional = FALSE, ...)## S3 method for class 'numeric'as.Date(x, origin, ...)## S3 method for class 'POSIXct'as.Date(x, tz = "UTC", ...)## S3 method for class 'Date'format(x, ...)## S3 method for class 'Date'as.character(x, ...)
as.Date(x, ...)## S3 method for class 'character'as.Date(x, format, tryFormats = c("%Y-%m-%d", "%Y/%m/%d"),        optional = FALSE, ...)## S3 method for class 'numeric'as.Date(x, origin, ...)## S3 method for class 'POSIXct'as.Date(x, tz = "UTC", ...)## S3 method for class 'Date'format(x, ...)## S3 method for class 'Date'as.character(x, ...)
as.Date(x, ...)## S3 method for class 'character'as.Date(x, format, tryFormats = c("%Y-%m-%d", "%Y/%m/%d"),        optional = FALSE, ...)## S3 method for class 'numeric'as.Date(x, origin, ...)## S3 method for class 'POSIXct'as.Date(x, tz = "UTC", ...)## S3 method for class 'Date'format(x, ...)## S3 method for class 'Date'as.character(x, ...)
as.Date(x, ...)## S3 method for class 'character'as.Date(x, format, tryFormats = c("%Y-%m-%d", "%Y/%m/%d"),        optional = FALSE, ...)## S3 method for class 'numeric'as.Date(x, origin, ...)## S3 method for class 'POSIXct'as.Date(x, tz = "UTC", ...)## S3 method for class 'Date'format(x, ...)## S3 method for class 'Date'as.character(x, ...)
as.Date(x, ...)## S3 method for class 'character'as.Date(x, format, tryFormats = c("%Y-%m-%d", "%Y/%m/%d"),        optional = FALSE, ...)## S3 method for class 'numeric'as.Date(x, origin, ...)## S3 method for class 'POSIXct'as.Date(x, tz = "UTC", ...)## S3 method for class 'Date'format(x, ...)## S3 method for class 'Date'as.character(x, ...)
as.Date(x, ...)## S3 method for class 'character'as.Date(x, format, tryFormats = c("%Y-%m-%d", "%Y/%m/%d"),        optional = FALSE, ...)## S3 method for class 'numeric'as.Date(x, origin, ...)## S3 method for class 'POSIXct'as.Date(x, tz = "UTC", ...)## S3 method for class 'Date'format(x, ...)## S3 method for class 'Date'as.character(x, ...)
as.Date(x, ...)## S3 method for class 'character'as.Date(x, format, tryFormats = c("%Y-%m-%d", "%Y/%m/%d"),        optional = FALSE, ...)## S3 method for class 'numeric'as.Date(x, origin, ...)## S3 method for class 'POSIXct'as.Date(x, tz = "UTC", ...)## S3 method for class 'Date'format(x, ...)## S3 method for class 'Date'as.character(x, ...)
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
double(length = 0)as.double(x, ...)is.double(x)single(length = 0)as.single(x, ...)
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
as.POSIXct(x, tz = "", ...)as.POSIXlt(x, tz = "", ...)## S3 method for class 'character'as.POSIXlt(x, tz = "", format,           tryFormats = c("%Y-%m-%d %H:%M:%OS",                          "%Y/%m/%d %H:%M:%OS",                          "%Y-%m-%d %H:%M",                          "%Y/%m/%d %H:%M",                          "%Y-%m-%d",                          "%Y/%m/%d"),           optional = FALSE, ...)## Default S3 method:as.POSIXlt(x, tz = "",           optional = FALSE, ...)## S3 method for class 'numeric'as.POSIXlt(x, tz = "", origin, ...)## S3 method for class 'POSIXlt'as.double(x, ...)
as.environment(x)
expression(...)is.expression(x)as.expression(x, ...)
expression(...)is.expression(x)as.expression(x, ...)
factor(x = character(), levels, labels = levels,       exclude = NA, ordered = is.ordered(x), nmax = NA)ordered(x, ...)is.factor(x)is.ordered(x)as.factor(x)as.ordered(x)addNA(x, ifany = FALSE)
as.function(x, ...)## Default S3 method:as.function(x, envir = parent.frame(), ...)
as.function(x, ...)## Default S3 method:as.function(x, envir = parent.frame(), ...)
as.hexmode(x)## S3 method for class 'hexmode'as.character(x, ...)## S3 method for class 'hexmode'format(x, width = NULL, upper.case = FALSE, ...)## S3 method for class 'hexmode'print(x, ...)
integer(length = 0)as.integer(x, ...)is.integer(x)
list(...)pairlist(...)as.list(x, ...)## S3 method for class 'environment'as.list(x, all.names = FALSE, sorted = FALSE, ...)as.pairlist(x)is.list(x)is.pairlist(x)alist(...)
list(...)pairlist(...)as.list(x, ...)## S3 method for class 'environment'as.list(x, all.names = FALSE, sorted = FALSE, ...)as.pairlist(x)is.list(x)is.pairlist(x)alist(...)
## S3 method for class 'Date'summary(object, digits = 12, ...)## S3 method for class 'Date'print(x, max = NULL, ...)
list(...)pairlist(...)as.list(x, ...)## S3 method for class 'environment'as.list(x, all.names = FALSE, sorted = FALSE, ...)as.pairlist(x)is.list(x)is.pairlist(x)alist(...)
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
list(...)pairlist(...)as.list(x, ...)## S3 method for class 'environment'as.list(x, all.names = FALSE, sorted = FALSE, ...)as.pairlist(x)is.list(x)is.pairlist(x)alist(...)
list(...)pairlist(...)as.list(x, ...)## S3 method for class 'environment'as.list(x, all.names = FALSE, sorted = FALSE, ...)as.pairlist(x)is.list(x)is.pairlist(x)alist(...)
list(...)pairlist(...)as.list(x, ...)## S3 method for class 'environment'as.list(x, all.names = FALSE, sorted = FALSE, ...)as.pairlist(x)is.list(x)is.pairlist(x)alist(...)
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
TRUEFALSET; Flogical(length = 0)as.logical(x, ...)is.logical(x)
TRUEFALSET; Flogical(length = 0)as.logical(x, ...)is.logical(x)
matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE,       dimnames = NULL)as.matrix(x, ...)## S3 method for class 'data.frame'as.matrix(x, rownames.force = NA, ...)is.matrix(x)
matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE,       dimnames = NULL)as.matrix(x, ...)## S3 method for class 'data.frame'as.matrix(x, rownames.force = NA, ...)is.matrix(x)
matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE,       dimnames = NULL)as.matrix(x, ...)## S3 method for class 'data.frame'as.matrix(x, rownames.force = NA, ...)is.matrix(x)
noquote(obj, right = FALSE)## S3 method for class 'noquote'print(x, quote = FALSE, right = FALSE, ...)## S3 method for class 'noquote'c(..., recursive = FALSE)
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
as.symbol(x)is.symbol(x)as.name(x)is.name(x)
NULLas.null(x, ...)is.null(x)
NULLas.null(x, ...)is.null(x)
numeric(length = 0)as.numeric(x, ...)is.numeric(x)
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
as.octmode(x)## S3 method for class 'octmode'as.character(x, ...)## S3 method for class 'octmode'format(x, width = NULL, ...)## S3 method for class 'octmode'print(x, ...)
factor(x = character(), levels, labels = levels,       exclude = NA, ordered = is.ordered(x), nmax = NA)ordered(x, ...)is.factor(x)is.ordered(x)as.factor(x)as.ordered(x)addNA(x, ifany = FALSE)
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
list(...)pairlist(...)as.list(x, ...)## S3 method for class 'environment'as.list(x, all.names = FALSE, sorted = FALSE, ...)as.pairlist(x)is.list(x)is.pairlist(x)alist(...)
as.POSIXct(x, tz = "", ...)as.POSIXlt(x, tz = "", ...)## S3 method for class 'character'as.POSIXlt(x, tz = "", format,           tryFormats = c("%Y-%m-%d %H:%M:%OS",                          "%Y/%m/%d %H:%M:%OS",                          "%Y-%m-%d %H:%M",                          "%Y/%m/%d %H:%M",                          "%Y-%m-%d",                          "%Y/%m/%d"),           optional = FALSE, ...)## Default S3 method:as.POSIXlt(x, tz = "",           optional = FALSE, ...)## S3 method for class 'numeric'as.POSIXlt(x, tz = "", origin, ...)## S3 method for class 'POSIXlt'as.double(x, ...)
as.POSIXct(x, tz = "", ...)as.POSIXlt(x, tz = "", ...)## S3 method for class 'character'as.POSIXlt(x, tz = "", format,           tryFormats = c("%Y-%m-%d %H:%M:%OS",                          "%Y/%m/%d %H:%M:%OS",                          "%Y-%m-%d %H:%M",                          "%Y/%m/%d %H:%M",                          "%Y-%m-%d",                          "%Y/%m/%d"),           optional = FALSE, ...)## Default S3 method:as.POSIXlt(x, tz = "",           optional = FALSE, ...)## S3 method for class 'numeric'as.POSIXlt(x, tz = "", origin, ...)## S3 method for class 'POSIXlt'as.double(x, ...)
as.POSIXct(x, tz = "", ...)as.POSIXlt(x, tz = "", ...)## S3 method for class 'character'as.POSIXlt(x, tz = "", format,           tryFormats = c("%Y-%m-%d %H:%M:%OS",                          "%Y/%m/%d %H:%M:%OS",                          "%Y-%m-%d %H:%M",                          "%Y/%m/%d %H:%M",                          "%Y-%m-%d",                          "%Y/%m/%d"),           optional = FALSE, ...)## Default S3 method:as.POSIXlt(x, tz = "",           optional = FALSE, ...)## S3 method for class 'numeric'as.POSIXlt(x, tz = "", origin, ...)## S3 method for class 'POSIXlt'as.double(x, ...)
as.POSIXct(x, tz = "", ...)as.POSIXlt(x, tz = "", ...)## S3 method for class 'character'as.POSIXlt(x, tz = "", format,           tryFormats = c("%Y-%m-%d %H:%M:%OS",                          "%Y/%m/%d %H:%M:%OS",                          "%Y-%m-%d %H:%M",                          "%Y/%m/%d %H:%M",                          "%Y-%m-%d",                          "%Y/%m/%d"),           optional = FALSE, ...)## Default S3 method:as.POSIXlt(x, tz = "",           optional = FALSE, ...)## S3 method for class 'numeric'as.POSIXlt(x, tz = "", origin, ...)## S3 method for class 'POSIXlt'as.double(x, ...)
as.POSIXct(x, tz = "", ...)as.POSIXlt(x, tz = "", ...)## S3 method for class 'character'as.POSIXlt(x, tz = "", format,           tryFormats = c("%Y-%m-%d %H:%M:%OS",                          "%Y/%m/%d %H:%M:%OS",                          "%Y-%m-%d %H:%M",                          "%Y/%m/%d %H:%M",                          "%Y-%m-%d",                          "%Y/%m/%d"),           optional = FALSE, ...)## Default S3 method:as.POSIXlt(x, tz = "",           optional = FALSE, ...)## S3 method for class 'numeric'as.POSIXlt(x, tz = "", origin, ...)## S3 method for class 'POSIXlt'as.double(x, ...)
as.POSIXct(x, tz = "", ...)as.POSIXlt(x, tz = "", ...)## S3 method for class 'character'as.POSIXlt(x, tz = "", format,           tryFormats = c("%Y-%m-%d %H:%M:%OS",                          "%Y/%m/%d %H:%M:%OS",                          "%Y-%m-%d %H:%M",                          "%Y/%m/%d %H:%M",                          "%Y-%m-%d",                          "%Y/%m/%d"),           optional = FALSE, ...)## Default S3 method:as.POSIXlt(x, tz = "",           optional = FALSE, ...)## S3 method for class 'numeric'as.POSIXlt(x, tz = "", origin, ...)## S3 method for class 'POSIXlt'as.double(x, ...)
as.POSIXct(x, tz = "", ...)as.POSIXlt(x, tz = "", ...)## S3 method for class 'character'as.POSIXlt(x, tz = "", format,           tryFormats = c("%Y-%m-%d %H:%M:%OS",                          "%Y/%m/%d %H:%M:%OS",                          "%Y-%m-%d %H:%M",                          "%Y/%m/%d %H:%M",                          "%Y-%m-%d",                          "%Y/%m/%d"),           optional = FALSE, ...)## Default S3 method:as.POSIXlt(x, tz = "",           optional = FALSE, ...)## S3 method for class 'numeric'as.POSIXlt(x, tz = "", origin, ...)## S3 method for class 'POSIXlt'as.double(x, ...)
as.POSIXct(x, tz = "", ...)as.POSIXlt(x, tz = "", ...)## S3 method for class 'character'as.POSIXlt(x, tz = "", format,           tryFormats = c("%Y-%m-%d %H:%M:%OS",                          "%Y/%m/%d %H:%M:%OS",                          "%Y-%m-%d %H:%M",                          "%Y/%m/%d %H:%M",                          "%Y-%m-%d",                          "%Y/%m/%d"),           optional = FALSE, ...)## Default S3 method:as.POSIXlt(x, tz = "",           optional = FALSE, ...)## S3 method for class 'numeric'as.POSIXlt(x, tz = "", origin, ...)## S3 method for class 'POSIXlt'as.double(x, ...)
as.POSIXct(x, tz = "", ...)as.POSIXlt(x, tz = "", ...)## S3 method for class 'character'as.POSIXlt(x, tz = "", format,           tryFormats = c("%Y-%m-%d %H:%M:%OS",                          "%Y/%m/%d %H:%M:%OS",                          "%Y-%m-%d %H:%M",                          "%Y/%m/%d %H:%M",                          "%Y-%m-%d",                          "%Y/%m/%d"),           optional = FALSE, ...)## Default S3 method:as.POSIXlt(x, tz = "",           optional = FALSE, ...)## S3 method for class 'numeric'as.POSIXlt(x, tz = "", origin, ...)## S3 method for class 'POSIXlt'as.double(x, ...)
as.POSIXct(x, tz = "", ...)as.POSIXlt(x, tz = "", ...)## S3 method for class 'character'as.POSIXlt(x, tz = "", format,           tryFormats = c("%Y-%m-%d %H:%M:%OS",                          "%Y/%m/%d %H:%M:%OS",                          "%Y-%m-%d %H:%M",                          "%Y/%m/%d %H:%M",                          "%Y-%m-%d",                          "%Y/%m/%d"),           optional = FALSE, ...)## Default S3 method:as.POSIXlt(x, tz = "",           optional = FALSE, ...)## S3 method for class 'numeric'as.POSIXlt(x, tz = "", origin, ...)## S3 method for class 'POSIXlt'as.double(x, ...)
as.POSIXct(x, tz = "", ...)as.POSIXlt(x, tz = "", ...)## S3 method for class 'character'as.POSIXlt(x, tz = "", format,           tryFormats = c("%Y-%m-%d %H:%M:%OS",                          "%Y/%m/%d %H:%M:%OS",                          "%Y-%m-%d %H:%M",                          "%Y/%m/%d %H:%M",                          "%Y-%m-%d",                          "%Y/%m/%d"),           optional = FALSE, ...)## Default S3 method:as.POSIXlt(x, tz = "",           optional = FALSE, ...)## S3 method for class 'numeric'as.POSIXlt(x, tz = "", origin, ...)## S3 method for class 'POSIXlt'as.double(x, ...)
as.POSIXct(x, tz = "", ...)as.POSIXlt(x, tz = "", ...)## S3 method for class 'character'as.POSIXlt(x, tz = "", format,           tryFormats = c("%Y-%m-%d %H:%M:%OS",                          "%Y/%m/%d %H:%M:%OS",                          "%Y-%m-%d %H:%M",                          "%Y/%m/%d %H:%M",                          "%Y-%m-%d",                          "%Y/%m/%d"),           optional = FALSE, ...)## Default S3 method:as.POSIXlt(x, tz = "",           optional = FALSE, ...)## S3 method for class 'numeric'as.POSIXlt(x, tz = "", origin, ...)## S3 method for class 'POSIXlt'as.double(x, ...)
qr(x, ...)## Default S3 method:qr(x, tol = 1e-07 , LAPACK = FALSE, ...)qr.coef(qr, y)qr.qy(qr, y)qr.qty(qr, y)qr.resid(qr, y)qr.fitted(qr, y, k = qr$rank)qr.solve(a, b, tol = 1e-7)## S3 method for class 'qr'solve(a, b, ...)is.qr(x)as.qr(x)
raw(length = 0)as.raw(x)is.raw(x)
double(length = 0)as.double(x, ...)is.double(x)single(length = 0)as.single(x, ...)
double(length = 0)as.double(x, ...)is.double(x)single(length = 0)as.single(x, ...)
as.symbol(x)is.symbol(x)as.name(x)is.name(x)
table(...,      exclude = if (useNA == "no") c(NA, NaN),      useNA = c("no", "ifany", "always"),      dnn = list.names(...), deparse.level = 1)as.table(x, ...)is.table(x)## S3 method for class 'table'as.data.frame(x, row.names = NULL, ...,              responseName = "Freq", stringsAsFactors = TRUE,              sep = "", base = list(LETTERS))
table(...,      exclude = if (useNA == "no") c(NA, NaN),      useNA = c("no", "ifany", "always"),      dnn = list.names(...), deparse.level = 1)as.table(x, ...)is.table(x)## S3 method for class 'table'as.data.frame(x, row.names = NULL, ...,              responseName = "Freq", stringsAsFactors = TRUE,              sep = "", base = list(LETTERS))
vector(mode = "logical", length = 0)as.vector(x, mode = "any")is.vector(x, mode = "any")
vector(mode = "logical", length = 0)as.vector(x, mode = "any")is.vector(x, mode = "any")
cos(x)sin(x)tan(x)acos(x)asin(x)atan(x)atan2(y, x)cospi(x)sinpi(x)tanpi(x)
cosh(x)sinh(x)tanh(x)acosh(x)asinh(x)atanh(x)
asNamespace(ns, base.OK = TRUE)getNamespaceInfo (ns, which).getNamespaceInfo(ns, which)importIntoEnv(impenv, impnames, expenv, expnames)isBaseNamespace(ns)isNamespace(ns)namespaceExport(ns, vars)namespaceImport(self, ..., from = NULL, except = character(0L))namespaceImportFrom(self, ns, vars, generics, packages,                    from = "non-package environment",                    except = character(0L))namespaceImportClasses(self, ns, vars, from = NULL)namespaceImportMethods(self, ns, vars, from = NULL)packageHasNamespace(package, package.lib)parseNamespaceFile(package, package.lib, mustExist = TRUE)registerS3method(genname, class, method, envir = parent.frame())registerS3methods(info, package, env)setNamespaceInfo(ns, which, val).mergeExportMethods(new, ns).mergeImportMethods(impenv, expenv, metaname).knownS3GenericsloadingNamespaceInfo().getNamespace(name)..getNamespace(name, where)
asplit(x, MARGIN)
isS4(object)asS4(object, flag = TRUE, complete = TRUE)asS3(object, flag = TRUE, complete = TRUE)
isS4(object)asS4(object, flag = TRUE, complete = TRUE)asS3(object, flag = TRUE, complete = TRUE)
assign(x, value, pos = -1, envir = as.environment(pos),       inherits = FALSE, immediate = TRUE)
cos(x)sin(x)tan(x)acos(x)asin(x)atan(x)atan2(y, x)cospi(x)sinpi(x)tanpi(x)
cos(x)sin(x)tan(x)acos(x)asin(x)atan(x)atan2(y, x)cospi(x)sinpi(x)tanpi(x)
cosh(x)sinh(x)tanh(x)acosh(x)asinh(x)atanh(x)
attach(what, pos = 2L, name = deparse1(substitute(what), backtick=FALSE),       warn.conflicts = TRUE)
attachNamespace(ns, pos = 2L, depends = NULL, exclude, include.only)loadNamespace(package, lib.loc = NULL,              keep.source = getOption("keep.source.pkgs"),              partial = FALSE, versionCheck = NULL,              keep.parse.data = getOption("keep.parse.data.pkgs"))requireNamespace(package, ..., quietly = FALSE)loadedNamespaces()unloadNamespace(ns)isNamespaceLoaded(name)
attr(x, which, exact = FALSE)attr(x, which) <- value
all.equal(target, current, ...)## S3 method for class 'numeric'all.equal(target, current,          tolerance = sqrt(.Machine$double.eps), scale = NULL,          countEQ = FALSE,          formatFUN = function(err, what) format(err),          ..., check.attributes = TRUE)## S3 method for class 'list'all.equal(target, current, ...,          check.attributes = TRUE, use.names = TRUE)## S3 method for class 'environment'all.equal(target, current, all.names = TRUE,          evaluate = TRUE, ...)## S3 method for class 'function'all.equal(target, current, check.environment=TRUE, ...)## S3 method for class 'POSIXt'all.equal(target, current, ..., tolerance = 1e-3, scale,          check.tzone = TRUE)attr.all.equal(target, current, ...,               check.attributes = TRUE, check.names = TRUE)
attr(x, which, exact = FALSE)attr(x, which) <- value
attributes(x)attributes(x) <- valuemostattributes(x) <- value
attributes(x)attributes(x) <- valuemostattributes(x) <- value
autoload(name, package, reset = FALSE, ...)autoloader(name, package, ...).AutoloadEnv.Autoloaded
autoload(name, package, reset = FALSE, ...)autoloader(name, package, ...).AutoloadEnv.Autoloaded
   backsolve(r, x, k = ncol(r), upper.tri = TRUE,             transpose = FALSE)forwardsolve(l, x, k = ncol(l), upper.tri = FALSE,             transpose = FALSE)
environment(fun = NULL)environment(fun) <- valueis.environment(x).GlobalEnvglobalenv().BaseNamespaceEnvemptyenv()baseenv()new.env(hash = TRUE, parent = parent.frame(), size = 29L)parent.env(env)parent.env(env) <- valueenvironmentName(env)env.profile(env)
basename(path)dirname(path)
besselI(x, nu, expon.scaled = FALSE)besselK(x, nu, expon.scaled = FALSE)besselJ(x, nu)besselY(x, nu)
besselI(x, nu, expon.scaled = FALSE)besselK(x, nu, expon.scaled = FALSE)besselJ(x, nu)besselY(x, nu)
besselI(x, nu, expon.scaled = FALSE)besselK(x, nu, expon.scaled = FALSE)besselJ(x, nu)besselY(x, nu)
besselI(x, nu, expon.scaled = FALSE)besselK(x, nu, expon.scaled = FALSE)besselJ(x, nu)besselY(x, nu)
beta(a, b)lbeta(a, b)gamma(x)lgamma(x)psigamma(x, deriv = 0)digamma(x)trigamma(x)choose(n, k)lchoose(n, k)factorial(x)lfactorial(x)
lockEnvironment(env, bindings = FALSE)environmentIsLocked(env)lockBinding(sym, env)unlockBinding(sym, env)bindingIsLocked(sym, env)makeActiveBinding(sym, fun, env)bindingIsActive(sym, env)activeBindingFunction(sym, env)
lockEnvironment(env, bindings = FALSE)environmentIsLocked(env)lockBinding(sym, env)unlockBinding(sym, env)bindingIsLocked(sym, env)makeActiveBinding(sym, fun, env)bindingIsActive(sym, env)activeBindingFunction(sym, env)
gettext(..., domain = NULL)ngettext(n, msg1, msg2, domain = NULL)bindtextdomain(domain, dirname = NULL)
bitwNot(a)bitwAnd(a, b)bitwOr(a, b)bitwXor(a, b)bitwShiftL(a, n)bitwShiftR(a, n)
bitwNot(a)bitwAnd(a, b)bitwOr(a, b)bitwXor(a, b)bitwShiftL(a, n)bitwShiftR(a, n)
bitwNot(a)bitwAnd(a, b)bitwOr(a, b)bitwXor(a, b)bitwShiftL(a, n)bitwShiftR(a, n)
bitwNot(a)bitwAnd(a, b)bitwOr(a, b)bitwXor(a, b)bitwShiftL(a, n)bitwShiftR(a, n)
bitwNot(a)bitwAnd(a, b)bitwOr(a, b)bitwXor(a, b)bitwShiftL(a, n)bitwShiftR(a, n)
bitwNot(a)bitwAnd(a, b)bitwOr(a, b)bitwXor(a, b)bitwShiftL(a, n)bitwShiftR(a, n)
body(fun = sys.function(sys.parent()))body(fun, envir = environment(fun)) <- value
body(fun = sys.function(sys.parent()))body(fun, envir = environment(fun)) <- value
bquote(expr, where = parent.frame(), splice = FALSE)
if(cond) exprif(cond) cons.expr  else  alt.exprfor(var in seq) exprwhile(cond) exprrepeat exprbreaknext
browser(text = "", condition = NULL, expr = TRUE, skipCalls = 0L)
browserText(n = 1)browserCondition(n = 1)browserSetDebug(n = 1)
browserText(n = 1)browserCondition(n = 1)browserSetDebug(n = 1)
browserText(n = 1)browserCondition(n = 1)browserSetDebug(n = 1)
builtins(internal = FALSE)
by(data, INDICES, FUN, ..., simplify = TRUE)
by(data, INDICES, FUN, ..., simplify = TRUE)
by(data, INDICES, FUN, ..., simplify = TRUE)
file(description = "", open = "", blocking = TRUE,     encoding = getOption("encoding"), raw = FALSE,     method = getOption("url.method", "default"))url(description, open = "", blocking = TRUE,    encoding = getOption("encoding"),    method = getOption("url.method", "default"),    headers = NULL)gzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)bzfile(description, open = "", encoding = getOption("encoding"),       compression = 9)xzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)unz(description, filename, open = "", encoding = getOption("encoding"))pipe(description, open = "", encoding = getOption("encoding"))fifo(description, open = "", blocking = FALSE,     encoding = getOption("encoding"))socketConnection(host = "localhost", port, server = FALSE,                 blocking = FALSE, open = "a+",                 encoding = getOption("encoding"),                 timeout = getOption("timeout"),                 options = getOption("socketOptions"))serverSocket(port)socketAccept(socket, blocking = FALSE, open = "a+",             encoding = getOption("encoding"),             timeout = getOption("timeout"),             options = getOption("socketOptions"))open(con, ...)## S3 method for class 'connection'open(con, open = "r", blocking = TRUE, ...)close(con, ...)## S3 method for class 'connection'close(con, type = "rw", ...)flush(con)isOpen(con, rw = "")isIncomplete(con)socketTimeout(socket, timeout = -1)
## S3 Generic functionc(...)## Default S3 method:c(..., recursive = FALSE, use.names = TRUE)
## S3 method for class 'Date'summary(object, digits = 12, ...)## S3 method for class 'Date'print(x, max = NULL, ...)
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
factor(x = character(), levels, labels = levels,       exclude = NA, ordered = is.ordered(x), nmax = NA)ordered(x, ...)is.factor(x)is.ordered(x)as.factor(x)as.ordered(x)addNA(x, ifany = FALSE)
noquote(obj, right = FALSE)## S3 method for class 'noquote'print(x, quote = FALSE, right = FALSE, ...)## S3 method for class 'noquote'c(..., recursive = FALSE)
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
warnings(...)## S3 method for class 'warnings'summary(object, ...)## S3 method for class 'warnings'print(x, tags,      header = ngettext(n, "Warning message:\n", "Warning messages:\n"),      ...)## S3 method for class 'summary.warnings'print(x, ...)
call(name, ...)is.call(x)as.call(x)
callCC(fun)
capabilities(what = NULL,             Xchk = any(nas %in% c("X11", "jpeg", "png", "tiff")))
chartr(old, new, x)tolower(x)toupper(x)casefold(x, upper = FALSE)
cat(... , file = "", sep = " ", fill = FALSE, labels = NULL,    append = FALSE)
cbind(..., deparse.level = 1)rbind(..., deparse.level = 1)## S3 method for class 'data.frame'rbind(..., deparse.level = 1, make.row.names = TRUE,      stringsAsFactors = FALSE, factor.exclude = TRUE)
cbind(..., deparse.level = 1)rbind(..., deparse.level = 1)## S3 method for class 'data.frame'rbind(..., deparse.level = 1, make.row.names = TRUE,      stringsAsFactors = FALSE, factor.exclude = TRUE)
ceiling(x)floor(x)trunc(x, ...)round(x, digits = 0)signif(x, digits = 6)
char.expand(input, target, nomatch = stop("no match"))
character(length = 0)as.character(x, ...)is.character(x)
charmatch(x, table, nomatch = NA_integer_)
charToRaw(x)rawToChar(x, multiple = FALSE)rawShift(x, n)rawToBits(x)intToBits(x)packBits(x, type = c("raw", "integer", "double"))numToInts(x)numToBits(x)
chartr(old, new, x)tolower(x)toupper(x)casefold(x, upper = FALSE)
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
chkDots(..., which.call = -1, allowed = character(0))
chol(x, ...)## Default S3 method:chol(x, pivot = FALSE,  LINPACK = FALSE, tol = -1, ...)
chol(x, ...)## Default S3 method:chol(x, pivot = FALSE,  LINPACK = FALSE, tol = -1, ...)
chol2inv(x, size = NCOL(x), LINPACK = FALSE)
beta(a, b)lbeta(a, b)gamma(x)lgamma(x)psigamma(x, deriv = 0)digamma(x)trigamma(x)choose(n, k)lchoose(n, k)factorial(x)lfactorial(x)
class(x)class(x) <- valueunclass(x)inherits(x, what, which = FALSE)isa(x, what)oldClass(x)oldClass(x) <- value.class2(x)
class(x)class(x) <- valueunclass(x)inherits(x, what, which = FALSE)isa(x, what)oldClass(x)oldClass(x) <- value.class2(x)
pushBack(data, connection, newLine = TRUE,         encoding = c("", "bytes", "UTF-8"))pushBackLength(connection)clearPushBack(connection)
file(description = "", open = "", blocking = TRUE,     encoding = getOption("encoding"), raw = FALSE,     method = getOption("url.method", "default"))url(description, open = "", blocking = TRUE,    encoding = getOption("encoding"),    method = getOption("url.method", "default"),    headers = NULL)gzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)bzfile(description, open = "", encoding = getOption("encoding"),       compression = 9)xzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)unz(description, filename, open = "", encoding = getOption("encoding"))pipe(description, open = "", encoding = getOption("encoding"))fifo(description, open = "", blocking = FALSE,     encoding = getOption("encoding"))socketConnection(host = "localhost", port, server = FALSE,                 blocking = FALSE, open = "a+",                 encoding = getOption("encoding"),                 timeout = getOption("timeout"),                 options = getOption("socketOptions"))serverSocket(port)socketAccept(socket, blocking = FALSE, open = "a+",             encoding = getOption("encoding"),             timeout = getOption("timeout"),             options = getOption("socketOptions"))open(con, ...)## S3 method for class 'connection'open(con, open = "r", blocking = TRUE, ...)close(con, ...)## S3 method for class 'connection'close(con, type = "rw", ...)flush(con)isOpen(con, rw = "")isIncomplete(con)socketTimeout(socket, timeout = -1)
file(description = "", open = "", blocking = TRUE,     encoding = getOption("encoding"), raw = FALSE,     method = getOption("url.method", "default"))url(description, open = "", blocking = TRUE,    encoding = getOption("encoding"),    method = getOption("url.method", "default"),    headers = NULL)gzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)bzfile(description, open = "", encoding = getOption("encoding"),       compression = 9)xzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)unz(description, filename, open = "", encoding = getOption("encoding"))pipe(description, open = "", encoding = getOption("encoding"))fifo(description, open = "", blocking = FALSE,     encoding = getOption("encoding"))socketConnection(host = "localhost", port, server = FALSE,                 blocking = FALSE, open = "a+",                 encoding = getOption("encoding"),                 timeout = getOption("timeout"),                 options = getOption("socketOptions"))serverSocket(port)socketAccept(socket, blocking = FALSE, open = "a+",             encoding = getOption("encoding"),             timeout = getOption("timeout"),             options = getOption("socketOptions"))open(con, ...)## S3 method for class 'connection'open(con, open = "r", blocking = TRUE, ...)close(con, ...)## S3 method for class 'connection'close(con, type = "rw", ...)flush(con)isOpen(con, rw = "")isIncomplete(con)socketTimeout(socket, timeout = -1)
srcfile(filename, encoding = getOption("encoding"), Enc = "unknown")srcfilecopy(filename, lines, timestamp = Sys.time(), isFile = FALSE)srcfilealias(filename, srcfile)getSrcLines(srcfile, first, last)srcref(srcfile, lloc)## S3 method for class 'srcfile'print(x, ...)## S3 method for class 'srcfile'summary(object, ...)## S3 method for class 'srcfile'open(con, line, ...)## S3 method for class 'srcfile'close(con, ...)## S3 method for class 'srcref'print(x, useSource = TRUE, ...)## S3 method for class 'srcref'summary(object, useSource = FALSE, ...)## S3 method for class 'srcref'as.character(x, useSource = TRUE, to = x, ...).isOpen(srcfile)
srcfile(filename, encoding = getOption("encoding"), Enc = "unknown")srcfilecopy(filename, lines, timestamp = Sys.time(), isFile = FALSE)srcfilealias(filename, srcfile)getSrcLines(srcfile, first, last)srcref(srcfile, lloc)## S3 method for class 'srcfile'print(x, ...)## S3 method for class 'srcfile'summary(object, ...)## S3 method for class 'srcfile'open(con, line, ...)## S3 method for class 'srcfile'close(con, ...)## S3 method for class 'srcref'print(x, useSource = TRUE, ...)## S3 method for class 'srcref'summary(object, useSource = FALSE, ...)## S3 method for class 'srcref'as.character(x, useSource = TRUE, to = x, ...).isOpen(srcfile)
showConnections(all = FALSE)getConnection(what)closeAllConnections()stdin()stdout()stderr()nullfile()isatty(con)
col(x, as.factor = FALSE).col(dim)
colSums (x, na.rm = FALSE, dims = 1)rowSums (x, na.rm = FALSE, dims = 1)colMeans(x, na.rm = FALSE, dims = 1)rowMeans(x, na.rm = FALSE, dims = 1).colSums(x, m, n, na.rm = FALSE).rowSums(x, m, n, na.rm = FALSE).colMeans(x, m, n, na.rm = FALSE).rowMeans(x, m, n, na.rm = FALSE)
rownames(x, do.NULL = TRUE, prefix = "row")rownames(x) <- valuecolnames(x, do.NULL = TRUE, prefix = "col")colnames(x) <- value
rownames(x, do.NULL = TRUE, prefix = "row")rownames(x) <- valuecolnames(x, do.NULL = TRUE, prefix = "col")colnames(x) <- value
colSums (x, na.rm = FALSE, dims = 1)rowSums (x, na.rm = FALSE, dims = 1)colMeans(x, na.rm = FALSE, dims = 1)rowMeans(x, na.rm = FALSE, dims = 1).colSums(x, m, n, na.rm = FALSE).rowSums(x, m, n, na.rm = FALSE).colMeans(x, m, n, na.rm = FALSE).rowMeans(x, m, n, na.rm = FALSE)
commandArgs(trailingOnly = FALSE)
comment(x)comment(x) <- value
comment(x)comment(x) <- value
complex(length.out = 0, real = numeric(), imaginary = numeric(),        modulus = 1, argument = 0)as.complex(x, ...)is.complex(x)Re(z)Im(z)Mod(z)Arg(z)Conj(z)
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
library(package, help, pos = 2, lib.loc = NULL,        character.only = FALSE, logical.return = FALSE,        warn.conflicts, quietly = FALSE,        verbose = getOption("verbose"),        mask.ok, exclude, include.only,        attach.required = missing(include.only))require(package, lib.loc = NULL, quietly = FALSE,        warn.conflicts,        character.only = FALSE,        mask.ok, exclude, include.only,        attach.required = missing(include.only))conflictRules(pkg, mask.ok = NULL, exclude = NULL)
conflicts(where = search(), detail = FALSE)
complex(length.out = 0, real = numeric(), imaginary = numeric(),        modulus = 1, argument = 0)as.complex(x, ...)is.complex(x)Re(z)Im(z)Mod(z)Arg(z)Conj(z)
contributors()
cos(x)sin(x)tan(x)acos(x)asin(x)atan(x)atan2(y, x)cospi(x)sinpi(x)tanpi(x)
cosh(x)sinh(x)tanh(x)acosh(x)asinh(x)atanh(x)
cos(x)sin(x)tan(x)acos(x)asin(x)atan(x)atan2(y, x)cospi(x)sinpi(x)tanpi(x)
crossprod(x, y = NULL)tcrossprod(x, y = NULL)
Cstack_info()
cumsum(x)cumprod(x)cummax(x)cummin(x)
cumsum(x)cumprod(x)cummax(x)cummin(x)
cumsum(x)cumprod(x)cummax(x)cummin(x)
cumsum(x)cumprod(x)cummax(x)cummin(x)
curlGetHeaders(url, redirect = TRUE, verify = TRUE,               timeout = 0L, TLS = "")
cut(x, ...)## Default S3 method:cut(x, breaks, labels = NULL,    include.lowest = FALSE, right = TRUE, dig.lab = 3,    ordered_result = FALSE, ...)
## S3 method for class 'POSIXt'cut(x, breaks, labels = NULL, start.on.monday = TRUE,    right = FALSE, ...)## S3 method for class 'Date'cut(x, breaks, labels = NULL, start.on.monday = TRUE,    right = FALSE, ...)
cut(x, ...)## Default S3 method:cut(x, breaks, labels = NULL,    include.lowest = FALSE, right = TRUE, dig.lab = 3,    ordered_result = FALSE, ...)
## S3 method for class 'POSIXt'cut(x, breaks, labels = NULL, start.on.monday = TRUE,    right = FALSE, ...)## S3 method for class 'Date'cut(x, breaks, labels = NULL, start.on.monday = TRUE,    right = FALSE, ...)
data.class(x)
data.frame(..., row.names = NULL, check.rows = FALSE,           check.names = TRUE, fix.empty.names = TRUE,           stringsAsFactors = FALSE)default.stringsAsFactors() # << this is deprecated !
data.matrix(frame, rownames.force = NA)
date()
debug(fun, text = "", condition = NULL, signature = NULL)debugonce(fun, text = "", condition = NULL, signature = NULL)undebug(fun, signature = NULL)isdebugged(fun, signature = NULL)debuggingState(on = NULL)
debug(fun, text = "", condition = NULL, signature = NULL)debugonce(fun, text = "", condition = NULL, signature = NULL)undebug(fun, signature = NULL)isdebugged(fun, signature = NULL)debuggingState(on = NULL)
debug(fun, text = "", condition = NULL, signature = NULL)debugonce(fun, text = "", condition = NULL, signature = NULL)undebug(fun, signature = NULL)isdebugged(fun, signature = NULL)debuggingState(on = NULL)
data.frame(..., row.names = NULL, check.rows = FALSE,           check.names = TRUE, fix.empty.names = TRUE,           stringsAsFactors = FALSE)default.stringsAsFactors() # << this is deprecated !
delayedAssign(x, value, eval.env = parent.frame(1),              assign.env = parent.frame(1))
deparse(expr, width.cutoff = 60L,        backtick = mode(expr) %in% c("call", "expression", "(", "function"),        control = c("keepNA", "keepInteger", "niceNames", "showAttributes"),        nlines = -1L)deparse1(expr, collapse = " ", width.cutoff = 500L, ...)
deparse(expr, width.cutoff = 60L,        backtick = mode(expr) %in% c("call", "expression", "(", "function"),        control = c("keepNA", "keepInteger", "niceNames", "showAttributes"),        nlines = -1L)deparse1(expr, collapse = " ", width.cutoff = 500L, ...)
det(x, ...)determinant(x, logarithm = TRUE, ...)
detach(name, pos = 2L, unload = FALSE, character.only = FALSE,       force = FALSE)
det(x, ...)determinant(x, logarithm = TRUE, ...)
det(x, ...)determinant(x, logarithm = TRUE, ...)
dput(x, file = "",     control = c("keepNA", "keepInteger", "niceNames", "showAttributes"))dget(file, keep.source = FALSE)
diag(x = 1, nrow, ncol, names = TRUE)diag(x) <- value
diag(x = 1, nrow, ncol, names = TRUE)diag(x) <- value
diff(x, ...)## Default S3 method:diff(x, lag = 1, differences = 1, ...)## S3 method for class 'POSIXt'diff(x, lag = 1, differences = 1, ...)## S3 method for class 'Date'diff(x, lag = 1, differences = 1, ...)
diff(x, ...)## Default S3 method:diff(x, lag = 1, differences = 1, ...)## S3 method for class 'POSIXt'diff(x, lag = 1, differences = 1, ...)## S3 method for class 'Date'diff(x, lag = 1, differences = 1, ...)
diff(x, ...)## Default S3 method:diff(x, lag = 1, differences = 1, ...)## S3 method for class 'POSIXt'diff(x, lag = 1, differences = 1, ...)## S3 method for class 'Date'diff(x, lag = 1, differences = 1, ...)
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
diff(x, ...)## Default S3 method:diff(x, lag = 1, differences = 1, ...)## S3 method for class 'POSIXt'diff(x, lag = 1, differences = 1, ...)## S3 method for class 'Date'diff(x, lag = 1, differences = 1, ...)
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
beta(a, b)lbeta(a, b)gamma(x)lgamma(x)psigamma(x, deriv = 0)digamma(x)trigamma(x)choose(n, k)lchoose(n, k)factorial(x)lfactorial(x)
dim(x)dim(x) <- value
dim(x)dim(x) <- value
dim(x)dim(x) <- value
dimnames(x)dimnames(x) <- valueprovideDimnames(x, sep = "", base = list(LETTERS), unique = TRUE)
dimnames(x)dimnames(x) <- valueprovideDimnames(x, sep = "", base = list(LETTERS), unique = TRUE)
dimnames(x)dimnames(x) <- valueprovideDimnames(x, sep = "", base = list(LETTERS), unique = TRUE)
dimnames(x)dimnames(x) <- valueprovideDimnames(x, sep = "", base = list(LETTERS), unique = TRUE)
list.files(path = ".", pattern = NULL, all.files = FALSE,           full.names = FALSE, recursive = FALSE,           ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)       dir(path = ".", pattern = NULL, all.files = FALSE,           full.names = FALSE, recursive = FALSE,           ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)list.dirs(path = ".", full.names = TRUE, recursive = TRUE)
dir.exists(paths)dir.create(path, showWarnings = TRUE, recursive = FALSE, mode = "0777")Sys.chmod(paths, mode = "0777", use_umask = TRUE)Sys.umask(mode = NA)
dir.exists(paths)dir.create(path, showWarnings = TRUE, recursive = FALSE, mode = "0777")Sys.chmod(paths, mode = "0777", use_umask = TRUE)Sys.umask(mode = NA)
basename(path)dirname(path)
do.call(what, args, quote = FALSE, envir = parent.frame())
dontCheck(x)
double(length = 0)as.double(x, ...)is.double(x)single(length = 0)as.single(x, ...)
dput(x, file = "",     control = c("keepNA", "keepInteger", "niceNames", "showAttributes"))dget(file, keep.source = FALSE)
sQuote(x, q = getOption("useFancyQuotes"))dQuote(x, q = getOption("useFancyQuotes"))
drop(x)
## S3 method for class 'factor'droplevels(x, exclude = if(anyNA(levels(x))) NULL else NA, ...)## S3 method for class 'data.frame'droplevels(x, except, exclude, ...)
## S3 method for class 'factor'droplevels(x, exclude = if(anyNA(levels(x))) NULL else NA, ...)## S3 method for class 'data.frame'droplevels(x, except, exclude, ...)
## S3 method for class 'factor'droplevels(x, exclude = if(anyNA(levels(x))) NULL else NA, ...)## S3 method for class 'data.frame'droplevels(x, except, exclude, ...)
dump(list, file = "dumpdata.R", append = FALSE,     control = "all", envir = parent.frame(), evaluate = TRUE)
duplicated(x, incomparables = FALSE, ...)## Default S3 method:duplicated(x, incomparables = FALSE,           fromLast = FALSE, nmax = NA, ...)## S3 method for class 'array'duplicated(x, incomparables = FALSE, MARGIN = 1,           fromLast = FALSE, ...)anyDuplicated(x, incomparables = FALSE, ...)## Default S3 method:anyDuplicated(x, incomparables = FALSE,           fromLast = FALSE, ...)## S3 method for class 'array'anyDuplicated(x, incomparables = FALSE,           MARGIN = 1, fromLast = FALSE, ...)
duplicated(x, incomparables = FALSE, ...)## Default S3 method:duplicated(x, incomparables = FALSE,           fromLast = FALSE, nmax = NA, ...)## S3 method for class 'array'duplicated(x, incomparables = FALSE, MARGIN = 1,           fromLast = FALSE, ...)anyDuplicated(x, incomparables = FALSE, ...)## Default S3 method:anyDuplicated(x, incomparables = FALSE,           fromLast = FALSE, ...)## S3 method for class 'array'anyDuplicated(x, incomparables = FALSE,           MARGIN = 1, fromLast = FALSE, ...)
duplicated(x, incomparables = FALSE, ...)## Default S3 method:duplicated(x, incomparables = FALSE,           fromLast = FALSE, nmax = NA, ...)## S3 method for class 'array'duplicated(x, incomparables = FALSE, MARGIN = 1,           fromLast = FALSE, ...)anyDuplicated(x, incomparables = FALSE, ...)## Default S3 method:anyDuplicated(x, incomparables = FALSE,           fromLast = FALSE, ...)## S3 method for class 'array'anyDuplicated(x, incomparables = FALSE,           MARGIN = 1, fromLast = FALSE, ...)
duplicated(x, incomparables = FALSE, ...)## Default S3 method:duplicated(x, incomparables = FALSE,           fromLast = FALSE, nmax = NA, ...)## S3 method for class 'array'duplicated(x, incomparables = FALSE, MARGIN = 1,           fromLast = FALSE, ...)anyDuplicated(x, incomparables = FALSE, ...)## Default S3 method:anyDuplicated(x, incomparables = FALSE,           fromLast = FALSE, ...)## S3 method for class 'array'anyDuplicated(x, incomparables = FALSE,           MARGIN = 1, fromLast = FALSE, ...)
duplicated(x, incomparables = FALSE, ...)## Default S3 method:duplicated(x, incomparables = FALSE,           fromLast = FALSE, nmax = NA, ...)## S3 method for class 'array'duplicated(x, incomparables = FALSE, MARGIN = 1,           fromLast = FALSE, ...)anyDuplicated(x, incomparables = FALSE, ...)## Default S3 method:anyDuplicated(x, incomparables = FALSE,           fromLast = FALSE, ...)## S3 method for class 'array'anyDuplicated(x, incomparables = FALSE,           MARGIN = 1, fromLast = FALSE, ...)
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
warnings(...)## S3 method for class 'warnings'summary(object, ...)## S3 method for class 'warnings'print(x, tags,      header = ngettext(n, "Warning message:\n", "Warning messages:\n"),      ...)## S3 method for class 'summary.warnings'print(x, ...)
dyn.load(x, local = TRUE, now = TRUE, ...)dyn.unload(x)is.loaded(symbol, PACKAGE = "", type = "")
dyn.load(x, local = TRUE, now = TRUE, ...)dyn.unload(x)is.loaded(symbol, PACKAGE = "", type = "")
get(x, pos = -1, envir = as.environment(pos), mode = "any",    inherits = TRUE)mget(x, envir = as.environment(-1), mode = "any", ifnotfound,     inherits = FALSE)dynGet(x, ifnotfound = , minframe = 1L, inherits = FALSE)
eapply(env, FUN, ..., all.names = FALSE, USE.NAMES = TRUE)
eigen(x, symmetric, only.values = FALSE, EISPACK = FALSE)
environment(fun = NULL)environment(fun) <- valueis.environment(x).GlobalEnvglobalenv().BaseNamespaceEnvemptyenv()baseenv()new.env(hash = TRUE, parent = parent.frame(), size = 29L)parent.env(env)parent.env(env) <- valueenvironmentName(env)env.profile(env)
Encoding(x)Encoding(x) <- valueenc2native(x)enc2utf8(x)
Encoding(x)Encoding(x) <- valueenc2native(x)enc2utf8(x)
encodeString(x, width = 0, quote = "", na.encode = TRUE,             justify = c("left", "right", "centre", "none"))
Encoding(x)Encoding(x) <- valueenc2native(x)enc2utf8(x)
Encoding(x)Encoding(x) <- valueenc2native(x)enc2utf8(x)
startsWith(x, prefix)  endsWith(x, suffix)
substitute(expr, env)quote(expr)enquote(cl)
environment(fun = NULL)environment(fun) <- valueis.environment(x).GlobalEnvglobalenv().BaseNamespaceEnvemptyenv()baseenv()new.env(hash = TRUE, parent = parent.frame(), size = 29L)parent.env(env)parent.env(env) <- valueenvironmentName(env)env.profile(env)
environment(fun = NULL)environment(fun) <- valueis.environment(x).GlobalEnvglobalenv().BaseNamespaceEnvemptyenv()baseenv()new.env(hash = TRUE, parent = parent.frame(), size = 29L)parent.env(env)parent.env(env) <- valueenvironmentName(env)env.profile(env)
environment(fun = NULL)environment(fun) <- valueis.environment(x).GlobalEnvglobalenv().BaseNamespaceEnvemptyenv()baseenv()new.env(hash = TRUE, parent = parent.frame(), size = 29L)parent.env(env)parent.env(env) <- valueenvironmentName(env)env.profile(env)
lockEnvironment(env, bindings = FALSE)environmentIsLocked(env)lockBinding(sym, env)unlockBinding(sym, env)bindingIsLocked(sym, env)makeActiveBinding(sym, fun, env)bindingIsActive(sym, env)activeBindingFunction(sym, env)
environment(fun = NULL)environment(fun) <- valueis.environment(x).GlobalEnvglobalenv().BaseNamespaceEnvemptyenv()baseenv()new.env(hash = TRUE, parent = parent.frame(), size = 29L)parent.env(env)parent.env(env) <- valueenvironmentName(env)env.profile(env)
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
eval(expr, envir = parent.frame(),           enclos = if(is.list(envir) || is.pairlist(envir))                       parent.frame() else baseenv())evalq(expr, envir, enclos)eval.parent(expr, n = 1)local(expr, envir = new.env())
eval(expr, envir = parent.frame(),           enclos = if(is.list(envir) || is.pairlist(envir))                       parent.frame() else baseenv())evalq(expr, envir, enclos)eval.parent(expr, n = 1)local(expr, envir = new.env())
eval(expr, envir = parent.frame(),           enclos = if(is.list(envir) || is.pairlist(envir))                       parent.frame() else baseenv())evalq(expr, envir, enclos)eval.parent(expr, n = 1)local(expr, envir = new.env())
exists(x, where = -1, envir = , frame, mode = "any",       inherits = TRUE)get0(x, envir = pos.to.env(-1L), mode = "any", inherits = TRUE,     ifnotfound = NULL)
log(x, base = exp(1))logb(x, base = exp(1))log10(x)log2(x)log1p(x)exp(x)expm1(x)
expand.grid(..., KEEP.OUT.ATTRS = TRUE, stringsAsFactors = TRUE)
log(x, base = exp(1))logb(x, base = exp(1))log10(x)log2(x)log1p(x)exp(x)expm1(x)
expression(...)is.expression(x)as.expression(x, ...)
extSoftVersion()
TRUEFALSET; Flogical(length = 0)as.logical(x, ...)is.logical(x)
factor(x = character(), levels, labels = levels,       exclude = NA, ordered = is.ordered(x), nmax = NA)ordered(x, ...)is.factor(x)is.ordered(x)as.factor(x)as.ordered(x)addNA(x, ifany = FALSE)
beta(a, b)lbeta(a, b)gamma(x)lgamma(x)psigamma(x, deriv = 0)digamma(x)trigamma(x)choose(n, k)lchoose(n, k)factorial(x)lfactorial(x)
file(description = "", open = "", blocking = TRUE,     encoding = getOption("encoding"), raw = FALSE,     method = getOption("url.method", "default"))url(description, open = "", blocking = TRUE,    encoding = getOption("encoding"),    method = getOption("url.method", "default"),    headers = NULL)gzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)bzfile(description, open = "", encoding = getOption("encoding"),       compression = 9)xzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)unz(description, filename, open = "", encoding = getOption("encoding"))pipe(description, open = "", encoding = getOption("encoding"))fifo(description, open = "", blocking = FALSE,     encoding = getOption("encoding"))socketConnection(host = "localhost", port, server = FALSE,                 blocking = FALSE, open = "a+",                 encoding = getOption("encoding"),                 timeout = getOption("timeout"),                 options = getOption("socketOptions"))serverSocket(port)socketAccept(socket, blocking = FALSE, open = "a+",             encoding = getOption("encoding"),             timeout = getOption("timeout"),             options = getOption("socketOptions"))open(con, ...)## S3 method for class 'connection'open(con, open = "r", blocking = TRUE, ...)close(con, ...)## S3 method for class 'connection'close(con, type = "rw", ...)flush(con)isOpen(con, rw = "")isIncomplete(con)socketTimeout(socket, timeout = -1)
file(description = "", open = "", blocking = TRUE,     encoding = getOption("encoding"), raw = FALSE,     method = getOption("url.method", "default"))url(description, open = "", blocking = TRUE,    encoding = getOption("encoding"),    method = getOption("url.method", "default"),    headers = NULL)gzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)bzfile(description, open = "", encoding = getOption("encoding"),       compression = 9)xzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)unz(description, filename, open = "", encoding = getOption("encoding"))pipe(description, open = "", encoding = getOption("encoding"))fifo(description, open = "", blocking = FALSE,     encoding = getOption("encoding"))socketConnection(host = "localhost", port, server = FALSE,                 blocking = FALSE, open = "a+",                 encoding = getOption("encoding"),                 timeout = getOption("timeout"),                 options = getOption("socketOptions"))serverSocket(port)socketAccept(socket, blocking = FALSE, open = "a+",             encoding = getOption("encoding"),             timeout = getOption("timeout"),             options = getOption("socketOptions"))open(con, ...)## S3 method for class 'connection'open(con, open = "r", blocking = TRUE, ...)close(con, ...)## S3 method for class 'connection'close(con, type = "rw", ...)flush(con)isOpen(con, rw = "")isIncomplete(con)socketTimeout(socket, timeout = -1)
file.access(names, mode = 0)
file.create(..., showWarnings = TRUE)file.exists(...)file.remove(...)file.rename(from, to)file.append(file1, file2)file.copy(from, to, overwrite = recursive, recursive = FALSE,          copy.mode = TRUE, copy.date = FALSE)file.symlink(from, to)file.link(from, to)
file.choose(new = FALSE)
file.create(..., showWarnings = TRUE)file.exists(...)file.remove(...)file.rename(from, to)file.append(file1, file2)file.copy(from, to, overwrite = recursive, recursive = FALSE,          copy.mode = TRUE, copy.date = FALSE)file.symlink(from, to)file.link(from, to)
file.create(..., showWarnings = TRUE)file.exists(...)file.remove(...)file.rename(from, to)file.append(file1, file2)file.copy(from, to, overwrite = recursive, recursive = FALSE,          copy.mode = TRUE, copy.date = FALSE)file.symlink(from, to)file.link(from, to)
file.create(..., showWarnings = TRUE)file.exists(...)file.remove(...)file.rename(from, to)file.append(file1, file2)file.copy(from, to, overwrite = recursive, recursive = FALSE,          copy.mode = TRUE, copy.date = FALSE)file.symlink(from, to)file.link(from, to)
file.info(..., extra_cols = TRUE)file.mode(...)file.mtime(...)file.size(...)
file.create(..., showWarnings = TRUE)file.exists(...)file.remove(...)file.rename(from, to)file.append(file1, file2)file.copy(from, to, overwrite = recursive, recursive = FALSE,          copy.mode = TRUE, copy.date = FALSE)file.symlink(from, to)file.link(from, to)
file.info(..., extra_cols = TRUE)file.mode(...)file.mtime(...)file.size(...)
file.info(..., extra_cols = TRUE)file.mode(...)file.mtime(...)file.size(...)
file.path(..., fsep = .Platform$file.sep)
file.create(..., showWarnings = TRUE)file.exists(...)file.remove(...)file.rename(from, to)file.append(file1, file2)file.copy(from, to, overwrite = recursive, recursive = FALSE,          copy.mode = TRUE, copy.date = FALSE)file.symlink(from, to)file.link(from, to)
file.create(..., showWarnings = TRUE)file.exists(...)file.remove(...)file.rename(from, to)file.append(file1, file2)file.copy(from, to, overwrite = recursive, recursive = FALSE,          copy.mode = TRUE, copy.date = FALSE)file.symlink(from, to)file.link(from, to)
file.show(..., header = rep("", nfiles),          title = "R Information",          delete.file = FALSE, pager = getOption("pager"),          encoding = "")
file.info(..., extra_cols = TRUE)file.mode(...)file.mtime(...)file.size(...)
file.create(..., showWarnings = TRUE)file.exists(...)file.remove(...)file.rename(from, to)file.append(file1, file2)file.copy(from, to, overwrite = recursive, recursive = FALSE,          copy.mode = TRUE, copy.date = FALSE)file.symlink(from, to)file.link(from, to)
Reduce(f, x, init, right = FALSE, accumulate = FALSE)Filter(f, x)Find(f, x, right = FALSE, nomatch = NULL)Map(f, ...)Negate(f)Position(f, x, right = FALSE, nomatch = NA_integer_)
Reduce(f, x, init, right = FALSE, accumulate = FALSE)Filter(f, x)Find(f, x, right = FALSE, nomatch = NULL)Map(f, ...)Negate(f)Position(f, x, right = FALSE, nomatch = NA_integer_)
find.package(package, lib.loc = NULL, quiet = FALSE,             verbose = getOption("verbose"))path.package(package, quiet = FALSE)packageNotFoundError(package, lib.loc, call = NULL)
findInterval(x, vec, rightmost.closed = FALSE, all.inside = FALSE,             left.open = FALSE)
.subset(x, ...).subset2(x, ...).getRequiredPackages(file = "DESCRIPTION", lib.loc = NULL,                     quietly = FALSE, useImports = FALSE).getRequiredPackages2(pkgInfo, quietly = FALSE, lib.loc = NULL,                      useImports = FALSE).isMethodsDispatchOn(onOff = NULL)sys.load.image(name, quiet)sys.save.image(name).row_names_info(x, type = 1L).set_row_names(n)findPackageEnv(info)lazyLoadDBfetch(key, file, compressed, hook).TAOCP1997init(seed).gt(x, i, j).gtn(x, strictly).primTrace(obj).primUntrace(obj).Date(xx, cl = "Date").POSIXct(xx, tz = NULL, cl = c("POSIXct", "POSIXt")).POSIXlt(xx, tz = NULL, cl = c("POSIXlt", "POSIXt")).difftime(xx, units, cl = "difftime").cache_class(class, extends).popath.detach(pos).maskedMsg(same, pkg, by)## Only on Windows:.fixupGFortranStdout().fixupGFortranStderr()
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
ceiling(x)floor(x)trunc(x, ...)round(x, digits = 0)signif(x, digits = 6)
file(description = "", open = "", blocking = TRUE,     encoding = getOption("encoding"), raw = FALSE,     method = getOption("url.method", "default"))url(description, open = "", blocking = TRUE,    encoding = getOption("encoding"),    method = getOption("url.method", "default"),    headers = NULL)gzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)bzfile(description, open = "", encoding = getOption("encoding"),       compression = 9)xzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)unz(description, filename, open = "", encoding = getOption("encoding"))pipe(description, open = "", encoding = getOption("encoding"))fifo(description, open = "", blocking = FALSE,     encoding = getOption("encoding"))socketConnection(host = "localhost", port, server = FALSE,                 blocking = FALSE, open = "a+",                 encoding = getOption("encoding"),                 timeout = getOption("timeout"),                 options = getOption("socketOptions"))serverSocket(port)socketAccept(socket, blocking = FALSE, open = "a+",             encoding = getOption("encoding"),             timeout = getOption("timeout"),             options = getOption("socketOptions"))open(con, ...)## S3 method for class 'connection'open(con, open = "r", blocking = TRUE, ...)close(con, ...)## S3 method for class 'connection'close(con, type = "rw", ...)flush(con)isOpen(con, rw = "")isIncomplete(con)socketTimeout(socket, timeout = -1)
file(description = "", open = "", blocking = TRUE,     encoding = getOption("encoding"), raw = FALSE,     method = getOption("url.method", "default"))url(description, open = "", blocking = TRUE,    encoding = getOption("encoding"),    method = getOption("url.method", "default"),    headers = NULL)gzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)bzfile(description, open = "", encoding = getOption("encoding"),       compression = 9)xzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)unz(description, filename, open = "", encoding = getOption("encoding"))pipe(description, open = "", encoding = getOption("encoding"))fifo(description, open = "", blocking = FALSE,     encoding = getOption("encoding"))socketConnection(host = "localhost", port, server = FALSE,                 blocking = FALSE, open = "a+",                 encoding = getOption("encoding"),                 timeout = getOption("timeout"),                 options = getOption("socketOptions"))serverSocket(port)socketAccept(socket, blocking = FALSE, open = "a+",             encoding = getOption("encoding"),             timeout = getOption("timeout"),             options = getOption("socketOptions"))open(con, ...)## S3 method for class 'connection'open(con, open = "r", blocking = TRUE, ...)close(con, ...)## S3 method for class 'connection'close(con, type = "rw", ...)flush(con)isOpen(con, rw = "")isIncomplete(con)socketTimeout(socket, timeout = -1)
if(cond) exprif(cond) cons.expr  else  alt.exprfor(var in seq) exprwhile(cond) exprrepeat exprbreaknext
force(x)
forceAndCall(n, FUN, ...)
formals(fun = sys.function(sys.parent()), envir = parent.frame())formals(fun, envir = environment(fun)) <- value
formals(fun = sys.function(sys.parent()), envir = parent.frame())formals(fun, envir = environment(fun)) <- value
format(x, ...)## Default S3 method:format(x, trim = FALSE, digits = NULL, nsmall = 0L,       justify = c("left", "right", "centre", "none"),       width = NULL, na.encode = TRUE, scientific = NA,       big.mark   = "",   big.interval = 3L,       small.mark = "", small.interval = 5L,       decimal.mark = getOption("OutDec"),       zero.print = NULL, drop0trailing = FALSE, ...)## S3 method for class 'data.frame'format(x, ..., justify = "none")## S3 method for class 'factor'format(x, ...)## S3 method for class 'AsIs'format(x, width = 12, ...)
format(x, ...)## Default S3 method:format(x, trim = FALSE, digits = NULL, nsmall = 0L,       justify = c("left", "right", "centre", "none"),       width = NULL, na.encode = TRUE, scientific = NA,       big.mark   = "",   big.interval = 3L,       small.mark = "", small.interval = 5L,       decimal.mark = getOption("OutDec"),       zero.print = NULL, drop0trailing = FALSE, ...)## S3 method for class 'data.frame'format(x, ..., justify = "none")## S3 method for class 'factor'format(x, ...)## S3 method for class 'AsIs'format(x, width = 12, ...)
format(x, ...)## Default S3 method:format(x, trim = FALSE, digits = NULL, nsmall = 0L,       justify = c("left", "right", "centre", "none"),       width = NULL, na.encode = TRUE, scientific = NA,       big.mark   = "",   big.interval = 3L,       small.mark = "", small.interval = 5L,       decimal.mark = getOption("OutDec"),       zero.print = NULL, drop0trailing = FALSE, ...)## S3 method for class 'data.frame'format(x, ..., justify = "none")## S3 method for class 'factor'format(x, ...)## S3 method for class 'AsIs'format(x, width = 12, ...)
as.Date(x, ...)## S3 method for class 'character'as.Date(x, format, tryFormats = c("%Y-%m-%d", "%Y/%m/%d"),        optional = FALSE, ...)## S3 method for class 'numeric'as.Date(x, origin, ...)## S3 method for class 'POSIXct'as.Date(x, tz = "UTC", ...)## S3 method for class 'Date'format(x, ...)## S3 method for class 'Date'as.character(x, ...)
format(x, ...)## Default S3 method:format(x, trim = FALSE, digits = NULL, nsmall = 0L,       justify = c("left", "right", "centre", "none"),       width = NULL, na.encode = TRUE, scientific = NA,       big.mark   = "",   big.interval = 3L,       small.mark = "", small.interval = 5L,       decimal.mark = getOption("OutDec"),       zero.print = NULL, drop0trailing = FALSE, ...)## S3 method for class 'data.frame'format(x, ..., justify = "none")## S3 method for class 'factor'format(x, ...)## S3 method for class 'AsIs'format(x, width = 12, ...)
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
format(x, ...)## Default S3 method:format(x, trim = FALSE, digits = NULL, nsmall = 0L,       justify = c("left", "right", "centre", "none"),       width = NULL, na.encode = TRUE, scientific = NA,       big.mark   = "",   big.interval = 3L,       small.mark = "", small.interval = 5L,       decimal.mark = getOption("OutDec"),       zero.print = NULL, drop0trailing = FALSE, ...)## S3 method for class 'data.frame'format(x, ..., justify = "none")## S3 method for class 'factor'format(x, ...)## S3 method for class 'AsIs'format(x, width = 12, ...)
as.hexmode(x)## S3 method for class 'hexmode'as.character(x, ...)## S3 method for class 'hexmode'format(x, width = NULL, upper.case = FALSE, ...)## S3 method for class 'hexmode'print(x, ...)
format.info(x, digits = NULL, nsmall = 0)
library(package, help, pos = 2, lib.loc = NULL,        character.only = FALSE, logical.return = FALSE,        warn.conflicts, quietly = FALSE,        verbose = getOption("verbose"),        mask.ok, exclude, include.only,        attach.required = missing(include.only))require(package, lib.loc = NULL, quietly = FALSE,        warn.conflicts,        character.only = FALSE,        mask.ok, exclude, include.only,        attach.required = missing(include.only))conflictRules(pkg, mask.ok = NULL, exclude = NULL)
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
as.octmode(x)## S3 method for class 'octmode'as.character(x, ...)## S3 method for class 'octmode'format(x, width = NULL, ...)## S3 method for class 'octmode'print(x, ...)
library(package, help, pos = 2, lib.loc = NULL,        character.only = FALSE, logical.return = FALSE,        warn.conflicts, quietly = FALSE,        verbose = getOption("verbose"),        mask.ok, exclude, include.only,        attach.required = missing(include.only))require(package, lib.loc = NULL, quietly = FALSE,        warn.conflicts,        character.only = FALSE,        mask.ok, exclude, include.only,        attach.required = missing(include.only))conflictRules(pkg, mask.ok = NULL, exclude = NULL)
## S3 method for class 'POSIXct'format(x, format = "", tz = "", usetz = FALSE, ...)## S3 method for class 'POSIXlt'format(x, format = "", usetz = FALSE, ...)## S3 method for class 'POSIXt'as.character(x, ...)strftime(x, format = "", tz = "", usetz = FALSE, ...)strptime(x, format, tz = "")
## S3 method for class 'POSIXct'format(x, format = "", tz = "", usetz = FALSE, ...)## S3 method for class 'POSIXlt'format(x, format = "", usetz = FALSE, ...)## S3 method for class 'POSIXt'as.character(x, ...)strftime(x, format = "", tz = "", usetz = FALSE, ...)strptime(x, format, tz = "")
format.pval(pv, digits = max(1, getOption("digits") - 2),            eps = .Machine$double.eps, na.form = "NA", ...)
summary(object, ...)## Default S3 method:summary(object, ..., digits, quantile.type = 7)## S3 method for class 'data.frame'summary(object, maxsum = 7,       digits = max(3, getOption("digits")-3), ...)## S3 method for class 'factor'summary(object, maxsum = 100, ...)## S3 method for class 'matrix'summary(object, ...)## S3 method for class 'summaryDefault'format(x, digits = max(3L, getOption("digits") - 3L), ...) ## S3 method for class 'summaryDefault'print(x, digits = max(3L, getOption("digits") - 3L), ...)
formatC(x, digits = NULL, width = NULL,        format = NULL, flag = "", mode = NULL,        big.mark = "", big.interval = 3L,        small.mark = "", small.interval = 5L,        decimal.mark = getOption("OutDec"),        preserve.width = "individual",        zero.print = NULL, replace.zero = TRUE,        drop0trailing = FALSE)prettyNum(x, big.mark = "",   big.interval = 3L,          small.mark  = "", small.interval = 5L,          decimal.mark = getOption("OutDec"), input.d.mark = decimal.mark,          preserve.width = c("common", "individual", "none"),          zero.print = NULL, replace.zero = FALSE,          drop0trailing = FALSE, is.cmplx = NA,          ...).format.zeros(x, zero.print, nx = suppressWarnings(as.numeric(x)),              replace = FALSE, warn.non.fitting = TRUE)
formatDL(x, y, style = c("table", "list"),         width = 0.9 * getOption("width"), indent = NULL)
   backsolve(r, x, k = ncol(r), upper.tri = TRUE,             transpose = FALSE)forwardsolve(l, x, k = ncol(l), upper.tri = FALSE,             transpose = FALSE)
function( arglist ) expr\( arglist ) exprreturn(value)
beta(a, b)lbeta(a, b)gamma(x)lgamma(x)psigamma(x, deriv = 0)digamma(x)trigamma(x)choose(n, k)lchoose(n, k)factorial(x)lfactorial(x)
gc(verbose = getOption("verbose"), reset = FALSE, full = TRUE)gcinfo(verbose)
gc.time(on = TRUE)
gc(verbose = getOption("verbose"), reset = FALSE, full = TRUE)gcinfo(verbose)
gctorture(on = TRUE)gctorture2(step, wait = step, inhibit_release = FALSE)
gctorture(on = TRUE)gctorture2(step, wait = step, inhibit_release = FALSE)
get(x, pos = -1, envir = as.environment(pos), mode = "any",    inherits = TRUE)mget(x, envir = as.environment(-1), mode = "any", ifnotfound,     inherits = FALSE)dynGet(x, ifnotfound = , minframe = 1L, inherits = FALSE)
exists(x, where = -1, envir = , frame, mode = "any",       inherits = TRUE)get0(x, envir = pos.to.env(-1L), mode = "any", inherits = TRUE,     ifnotfound = NULL)
showConnections(all = FALSE)getConnection(what)closeAllConnections()stdin()stdout()stderr()nullfile()isatty(con)
getCallingDLL(f = sys.function(-1), doStop = FALSE)getCallingDLLe(e)
getCallingDLL(f = sys.function(-1), doStop = FALSE)getCallingDLLe(e)
showConnections(all = FALSE)getConnection(what)closeAllConnections()stdin()stdout()stderr()nullfile()isatty(con)
getDLLRegisteredRoutines(dll, addNames = TRUE)
getDLLRegisteredRoutines(dll, addNames = TRUE)
getDLLRegisteredRoutines(dll, addNames = TRUE)
x[i]x[i, j, ... , drop = TRUE]x[[i, exact = TRUE]]x[[i, j, ..., exact = TRUE]]x$namegetElement(object, name)x[i] <- valuex[i, j, ...] <- valuex[[i]] <- valuex$name <- value
stop(..., call. = TRUE, domain = NULL)geterrmessage()
getExportedValue(ns, name)getNamespace(name)getNamespaceExports(ns)getNamespaceImports(ns)getNamespaceName(ns)getNamespaceUsers(ns)getNamespaceVersion(ns)
getHook(hookName)setHook(hookName, value,        action = c("append", "prepend", "replace"))packageEvent(pkgname,             event = c("onLoad", "attach", "detach", "onUnload"))
getLoadedDLLs()
getExportedValue(ns, name)getNamespace(name)getNamespaceExports(ns)getNamespaceImports(ns)getNamespaceName(ns)getNamespaceUsers(ns)getNamespaceVersion(ns)
getExportedValue(ns, name)getNamespace(name)getNamespaceExports(ns)getNamespaceImports(ns)getNamespaceName(ns)getNamespaceUsers(ns)getNamespaceVersion(ns)
getExportedValue(ns, name)getNamespace(name)getNamespaceExports(ns)getNamespaceImports(ns)getNamespaceName(ns)getNamespaceUsers(ns)getNamespaceVersion(ns)
asNamespace(ns, base.OK = TRUE)getNamespaceInfo (ns, which).getNamespaceInfo(ns, which)importIntoEnv(impenv, impnames, expenv, expnames)isBaseNamespace(ns)isNamespace(ns)namespaceExport(ns, vars)namespaceImport(self, ..., from = NULL, except = character(0L))namespaceImportFrom(self, ns, vars, generics, packages,                    from = "non-package environment",                    except = character(0L))namespaceImportClasses(self, ns, vars, from = NULL)namespaceImportMethods(self, ns, vars, from = NULL)packageHasNamespace(package, package.lib)parseNamespaceFile(package, package.lib, mustExist = TRUE)registerS3method(genname, class, method, envir = parent.frame())registerS3methods(info, package, env)setNamespaceInfo(ns, which, val).mergeExportMethods(new, ns).mergeImportMethods(impenv, expenv, metaname).knownS3GenericsloadingNamespaceInfo().getNamespace(name)..getNamespace(name, where)
getExportedValue(ns, name)getNamespace(name)getNamespaceExports(ns)getNamespaceImports(ns)getNamespaceName(ns)getNamespaceUsers(ns)getNamespaceVersion(ns)
getExportedValue(ns, name)getNamespace(name)getNamespaceExports(ns)getNamespaceImports(ns)getNamespaceName(ns)getNamespaceUsers(ns)getNamespaceVersion(ns)
getExportedValue(ns, name)getNamespace(name)getNamespaceExports(ns)getNamespaceImports(ns)getNamespaceName(ns)getNamespaceUsers(ns)getNamespaceVersion(ns)
getNativeSymbolInfo(name, PACKAGE, unlist = TRUE,                    withRegistrationInfo = FALSE)
options(...)getOption(x, default = NULL).Options
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
srcfile(filename, encoding = getOption("encoding"), Enc = "unknown")srcfilecopy(filename, lines, timestamp = Sys.time(), isFile = FALSE)srcfilealias(filename, srcfile)getSrcLines(srcfile, first, last)srcref(srcfile, lloc)## S3 method for class 'srcfile'print(x, ...)## S3 method for class 'srcfile'summary(object, ...)## S3 method for class 'srcfile'open(con, line, ...)## S3 method for class 'srcfile'close(con, ...)## S3 method for class 'srcref'print(x, useSource = TRUE, ...)## S3 method for class 'srcref'summary(object, useSource = FALSE, ...)## S3 method for class 'srcref'as.character(x, useSource = TRUE, to = x, ...).isOpen(srcfile)
getTaskCallbackNames()
gettext(..., domain = NULL)ngettext(n, msg1, msg2, domain = NULL)bindtextdomain(domain, dirname = NULL)
sprintf(fmt, ...)gettextf(fmt, ..., domain = NULL)
getwd()setwd(dir)
gl(n, k, length = n*k, labels = seq_len(n), ordered = FALSE)
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
environment(fun = NULL)environment(fun) <- valueis.environment(x).GlobalEnvglobalenv().BaseNamespaceEnvemptyenv()baseenv()new.env(hash = TRUE, parent = parent.frame(), size = 29L)parent.env(env)parent.env(env) <- valueenvironmentName(env)env.profile(env)
grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE,     fixed = FALSE, useBytes = FALSE, invert = FALSE)grepl(pattern, x, ignore.case = FALSE, perl = FALSE,      fixed = FALSE, useBytes = FALSE)sub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,    fixed = FALSE, useBytes = FALSE)gsub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,     fixed = FALSE, useBytes = FALSE)regexpr(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)gregexpr(pattern, text, ignore.case = FALSE, perl = FALSE,         fixed = FALSE, useBytes = FALSE)regexec(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)gregexec(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)
grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE,     fixed = FALSE, useBytes = FALSE, invert = FALSE)grepl(pattern, x, ignore.case = FALSE, perl = FALSE,      fixed = FALSE, useBytes = FALSE)sub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,    fixed = FALSE, useBytes = FALSE)gsub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,     fixed = FALSE, useBytes = FALSE)regexpr(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)gregexpr(pattern, text, ignore.case = FALSE, perl = FALSE,         fixed = FALSE, useBytes = FALSE)regexec(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)gregexec(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)
grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE,     fixed = FALSE, useBytes = FALSE, invert = FALSE)grepl(pattern, x, ignore.case = FALSE, perl = FALSE,      fixed = FALSE, useBytes = FALSE)sub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,    fixed = FALSE, useBytes = FALSE)gsub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,     fixed = FALSE, useBytes = FALSE)regexpr(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)gregexpr(pattern, text, ignore.case = FALSE, perl = FALSE,         fixed = FALSE, useBytes = FALSE)regexec(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)gregexec(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)
grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE,     fixed = FALSE, useBytes = FALSE, invert = FALSE)grepl(pattern, x, ignore.case = FALSE, perl = FALSE,      fixed = FALSE, useBytes = FALSE)sub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,    fixed = FALSE, useBytes = FALSE)gsub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,     fixed = FALSE, useBytes = FALSE)regexpr(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)gregexpr(pattern, text, ignore.case = FALSE, perl = FALSE,         fixed = FALSE, useBytes = FALSE)regexec(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)gregexec(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)
grepRaw(pattern, x, offset = 1L, ignore.case = FALSE,        value = FALSE, fixed = FALSE, all = FALSE, invert = FALSE)
grouping(...)
grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE,     fixed = FALSE, useBytes = FALSE, invert = FALSE)grepl(pattern, x, ignore.case = FALSE, perl = FALSE,      fixed = FALSE, useBytes = FALSE)sub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,    fixed = FALSE, useBytes = FALSE)gsub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,     fixed = FALSE, useBytes = FALSE)regexpr(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)gregexpr(pattern, text, ignore.case = FALSE, perl = FALSE,         fixed = FALSE, useBytes = FALSE)regexec(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)gregexec(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)
gzcon(con, level = 6, allowNonCompressed = TRUE, text = FALSE)
file(description = "", open = "", blocking = TRUE,     encoding = getOption("encoding"), raw = FALSE,     method = getOption("url.method", "default"))url(description, open = "", blocking = TRUE,    encoding = getOption("encoding"),    method = getOption("url.method", "default"),    headers = NULL)gzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)bzfile(description, open = "", encoding = getOption("encoding"),       compression = 9)xzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)unz(description, filename, open = "", encoding = getOption("encoding"))pipe(description, open = "", encoding = getOption("encoding"))fifo(description, open = "", blocking = FALSE,     encoding = getOption("encoding"))socketConnection(host = "localhost", port, server = FALSE,                 blocking = FALSE, open = "a+",                 encoding = getOption("encoding"),                 timeout = getOption("timeout"),                 options = getOption("socketOptions"))serverSocket(port)socketAccept(socket, blocking = FALSE, open = "a+",             encoding = getOption("encoding"),             timeout = getOption("timeout"),             options = getOption("socketOptions"))open(con, ...)## S3 method for class 'connection'open(con, open = "r", blocking = TRUE, ...)close(con, ...)## S3 method for class 'connection'close(con, type = "rw", ...)flush(con)isOpen(con, rw = "")isIncomplete(con)socketTimeout(socket, timeout = -1)
I(x)
iconv(x, from = "", to = "", sub = NA, mark = TRUE, toRaw = FALSE)iconvlist()
iconv(x, from = "", to = "", sub = NA, mark = TRUE, toRaw = FALSE)iconvlist()
icuSetCollate(...)icuGetCollate(type = c("actual", "valid"))
icuSetCollate(...)icuGetCollate(type = c("actual", "valid"))
identical(x, y, num.eq = TRUE, single.NA = TRUE, attrib.as.set = TRUE,          ignore.bytecode = TRUE, ignore.environment = FALSE,          ignore.srcref = TRUE)
identity(x)
if(cond) exprif(cond) cons.expr  else  alt.exprfor(var in seq) exprwhile(cond) exprrepeat exprbreaknext
ifelse(test, yes, no)
complex(length.out = 0, real = numeric(), imaginary = numeric(),        modulus = 1, argument = 0)as.complex(x, ...)is.complex(x)Re(z)Im(z)Mod(z)Arg(z)Conj(z)
asNamespace(ns, base.OK = TRUE)getNamespaceInfo (ns, which).getNamespaceInfo(ns, which)importIntoEnv(impenv, impnames, expenv, expnames)isBaseNamespace(ns)isNamespace(ns)namespaceExport(ns, vars)namespaceImport(self, ..., from = NULL, except = character(0L))namespaceImportFrom(self, ns, vars, generics, packages,                    from = "non-package environment",                    except = character(0L))namespaceImportClasses(self, ns, vars, from = NULL)namespaceImportMethods(self, ns, vars, from = NULL)packageHasNamespace(package, package.lib)parseNamespaceFile(package, package.lib, mustExist = TRUE)registerS3method(genname, class, method, envir = parent.frame())registerS3methods(info, package, env)setNamespaceInfo(ns, which, val).mergeExportMethods(new, ns).mergeImportMethods(impenv, expenv, metaname).knownS3GenericsloadingNamespaceInfo().getNamespace(name)..getNamespace(name, where)
saveRDS(object, file = "", ascii = FALSE, version = NULL,        compress = TRUE, refhook = NULL)readRDS(file, refhook = NULL)infoRDS(file)
class(x)class(x) <- valueunclass(x)inherits(x, what, which = FALSE)isa(x, what)oldClass(x)oldClass(x) <- value.class2(x)
integer(length = 0)as.integer(x, ...)is.integer(x)
interaction(..., drop = FALSE, sep = ".", lex.order = FALSE)
interactive()
union(x, y)intersect(x, y)setdiff(x, y)setequal(x, y)is.element(el, set)
charToRaw(x)rawToChar(x, multiple = FALSE)rawShift(x, n)rawToBits(x)intToBits(x)packBits(x, type = c("raw", "integer", "double"))numToInts(x)numToBits(x)
utf8ToInt(x)intToUtf8(x, multiple = FALSE, allow_surrogate_pairs = FALSE)
rle(x)inverse.rle(x, ...)## S3 method for class 'rle'print(x, digits = getOption("digits"), prefix = "", ...)
invisible(x)
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
array(data = NA, dim = length(data), dimnames = NULL)as.array(x, ...)is.array(x)
is.atomic(x)is.recursive(x)
call(name, ...)is.call(x)as.call(x)
character(length = 0)as.character(x, ...)is.character(x)
complex(length.out = 0, real = numeric(), imaginary = numeric(),        modulus = 1, argument = 0)as.complex(x, ...)is.complex(x)Re(z)Im(z)Mod(z)Arg(z)Conj(z)
as.data.frame(x, row.names = NULL, optional = FALSE, ...)## S3 method for class 'character'as.data.frame(x, ...,              stringsAsFactors = FALSE)## S3 method for class 'list'as.data.frame(x, row.names = NULL, optional = FALSE, ...,              cut.names = FALSE, col.names = names(x), fix.empty.names = TRUE,              check.names = !optional,              stringsAsFactors = FALSE)## S3 method for class 'matrix'as.data.frame(x, row.names = NULL, optional = FALSE,              make.names = TRUE, ...,              stringsAsFactors = FALSE)is.data.frame(x)
double(length = 0)as.double(x, ...)is.double(x)single(length = 0)as.single(x, ...)
union(x, y)intersect(x, y)setdiff(x, y)setequal(x, y)is.element(el, set)
environment(fun = NULL)environment(fun) <- valueis.environment(x).GlobalEnvglobalenv().BaseNamespaceEnvemptyenv()baseenv()new.env(hash = TRUE, parent = parent.frame(), size = 29L)parent.env(env)parent.env(env) <- valueenvironmentName(env)env.profile(env)
expression(...)is.expression(x)as.expression(x, ...)
factor(x = character(), levels, labels = levels,       exclude = NA, ordered = is.ordered(x), nmax = NA)ordered(x, ...)is.factor(x)is.ordered(x)as.factor(x)as.ordered(x)addNA(x, ifany = FALSE)
is.finite(x)is.infinite(x)is.nan(x)InfNaN
is.function(x)is.primitive(x)
is.finite(x)is.infinite(x)is.nan(x)InfNaN
integer(length = 0)as.integer(x, ...)is.integer(x)
is.language(x)
list(...)pairlist(...)as.list(x, ...)## S3 method for class 'environment'as.list(x, all.names = FALSE, sorted = FALSE, ...)as.pairlist(x)is.list(x)is.pairlist(x)alist(...)
dyn.load(x, local = TRUE, now = TRUE, ...)dyn.unload(x)is.loaded(symbol, PACKAGE = "", type = "")
TRUEFALSET; Flogical(length = 0)as.logical(x, ...)is.logical(x)
matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE,       dimnames = NULL)as.matrix(x, ...)## S3 method for class 'data.frame'as.matrix(x, rownames.force = NA, ...)is.matrix(x)
NAis.na(x)anyNA(x, recursive = FALSE)## S3 method for class 'data.frame'is.na(x)is.na(x) <- value
NAis.na(x)anyNA(x, recursive = FALSE)## S3 method for class 'data.frame'is.na(x)is.na(x) <- value
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
NAis.na(x)anyNA(x, recursive = FALSE)## S3 method for class 'data.frame'is.na(x)is.na(x) <- value
NAis.na(x)anyNA(x, recursive = FALSE)## S3 method for class 'data.frame'is.na(x)is.na(x) <- value
factor(x = character(), levels, labels = levels,       exclude = NA, ordered = is.ordered(x), nmax = NA)ordered(x, ...)is.factor(x)is.ordered(x)as.factor(x)as.ordered(x)addNA(x, ifany = FALSE)
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
as.symbol(x)is.symbol(x)as.name(x)is.name(x)
is.finite(x)is.infinite(x)is.nan(x)InfNaN
NULLas.null(x, ...)is.null(x)
numeric(length = 0)as.numeric(x, ...)is.numeric(x)
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
numeric(length = 0)as.numeric(x, ...)is.numeric(x)
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
numeric(length = 0)as.numeric(x, ...)is.numeric(x)
is.object(x)
factor(x = character(), levels, labels = levels,       exclude = NA, ordered = is.ordered(x), nmax = NA)ordered(x, ...)is.factor(x)is.ordered(x)as.factor(x)as.ordered(x)addNA(x, ifany = FALSE)
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
list(...)pairlist(...)as.list(x, ...)## S3 method for class 'environment'as.list(x, all.names = FALSE, sorted = FALSE, ...)as.pairlist(x)is.list(x)is.pairlist(x)alist(...)
is.function(x)is.primitive(x)
qr(x, ...)## Default S3 method:qr(x, tol = 1e-07 , LAPACK = FALSE, ...)qr.coef(qr, y)qr.qy(qr, y)qr.qty(qr, y)qr.resid(qr, y)qr.fitted(qr, y, k = qr$rank)qr.solve(a, b, tol = 1e-7)## S3 method for class 'qr'solve(a, b, ...)is.qr(x)as.qr(x)
is.R()
raw(length = 0)as.raw(x)is.raw(x)
is.atomic(x)is.recursive(x)
is.single(x)
as.symbol(x)is.symbol(x)as.name(x)is.name(x)
table(...,      exclude = if (useNA == "no") c(NA, NaN),      useNA = c("no", "ifany", "always"),      dnn = list.names(...), deparse.level = 1)as.table(x, ...)is.table(x)## S3 method for class 'table'as.data.frame(x, row.names = NULL, ...,              responseName = "Freq", stringsAsFactors = TRUE,              sep = "", base = list(LETTERS))
is.unsorted(x, na.rm = FALSE, strictly = FALSE)
vector(mode = "logical", length = 0)as.vector(x, mode = "any")is.vector(x, mode = "any")
class(x)class(x) <- valueunclass(x)inherits(x, what, which = FALSE)isa(x, what)oldClass(x)oldClass(x) <- value.class2(x)
showConnections(all = FALSE)getConnection(what)closeAllConnections()stdin()stdout()stderr()nullfile()isatty(con)
asNamespace(ns, base.OK = TRUE)getNamespaceInfo (ns, which).getNamespaceInfo(ns, which)importIntoEnv(impenv, impnames, expenv, expnames)isBaseNamespace(ns)isNamespace(ns)namespaceExport(ns, vars)namespaceImport(self, ..., from = NULL, except = character(0L))namespaceImportFrom(self, ns, vars, generics, packages,                    from = "non-package environment",                    except = character(0L))namespaceImportClasses(self, ns, vars, from = NULL)namespaceImportMethods(self, ns, vars, from = NULL)packageHasNamespace(package, package.lib)parseNamespaceFile(package, package.lib, mustExist = TRUE)registerS3method(genname, class, method, envir = parent.frame())registerS3methods(info, package, env)setNamespaceInfo(ns, which, val).mergeExportMethods(new, ns).mergeImportMethods(impenv, expenv, metaname).knownS3GenericsloadingNamespaceInfo().getNamespace(name)..getNamespace(name, where)
debug(fun, text = "", condition = NULL, signature = NULL)debugonce(fun, text = "", condition = NULL, signature = NULL)undebug(fun, signature = NULL)isdebugged(fun, signature = NULL)debuggingState(on = NULL)
! xx & yx && yx | yx || yxor(x, y)isTRUE (x)isFALSE(x)
file(description = "", open = "", blocking = TRUE,     encoding = getOption("encoding"), raw = FALSE,     method = getOption("url.method", "default"))url(description, open = "", blocking = TRUE,    encoding = getOption("encoding"),    method = getOption("url.method", "default"),    headers = NULL)gzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)bzfile(description, open = "", encoding = getOption("encoding"),       compression = 9)xzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)unz(description, filename, open = "", encoding = getOption("encoding"))pipe(description, open = "", encoding = getOption("encoding"))fifo(description, open = "", blocking = FALSE,     encoding = getOption("encoding"))socketConnection(host = "localhost", port, server = FALSE,                 blocking = FALSE, open = "a+",                 encoding = getOption("encoding"),                 timeout = getOption("timeout"),                 options = getOption("socketOptions"))serverSocket(port)socketAccept(socket, blocking = FALSE, open = "a+",             encoding = getOption("encoding"),             timeout = getOption("timeout"),             options = getOption("socketOptions"))open(con, ...)## S3 method for class 'connection'open(con, open = "r", blocking = TRUE, ...)close(con, ...)## S3 method for class 'connection'close(con, type = "rw", ...)flush(con)isOpen(con, rw = "")isIncomplete(con)socketTimeout(socket, timeout = -1)
asNamespace(ns, base.OK = TRUE)getNamespaceInfo (ns, which).getNamespaceInfo(ns, which)importIntoEnv(impenv, impnames, expenv, expnames)isBaseNamespace(ns)isNamespace(ns)namespaceExport(ns, vars)namespaceImport(self, ..., from = NULL, except = character(0L))namespaceImportFrom(self, ns, vars, generics, packages,                    from = "non-package environment",                    except = character(0L))namespaceImportClasses(self, ns, vars, from = NULL)namespaceImportMethods(self, ns, vars, from = NULL)packageHasNamespace(package, package.lib)parseNamespaceFile(package, package.lib, mustExist = TRUE)registerS3method(genname, class, method, envir = parent.frame())registerS3methods(info, package, env)setNamespaceInfo(ns, which, val).mergeExportMethods(new, ns).mergeImportMethods(impenv, expenv, metaname).knownS3GenericsloadingNamespaceInfo().getNamespace(name)..getNamespace(name, where)
attachNamespace(ns, pos = 2L, depends = NULL, exclude, include.only)loadNamespace(package, lib.loc = NULL,              keep.source = getOption("keep.source.pkgs"),              partial = FALSE, versionCheck = NULL,              keep.parse.data = getOption("keep.parse.data.pkgs"))requireNamespace(package, ..., quietly = FALSE)loadedNamespaces()unloadNamespace(ns)isNamespaceLoaded(name)
ISOdatetime(year, month, day, hour, min, sec, tz = "")ISOdate(year, month, day, hour = 12, min = 0, sec = 0, tz = "GMT")
ISOdatetime(year, month, day, hour, min, sec, tz = "")ISOdate(year, month, day, hour = 12, min = 0, sec = 0, tz = "GMT")
file(description = "", open = "", blocking = TRUE,     encoding = getOption("encoding"), raw = FALSE,     method = getOption("url.method", "default"))url(description, open = "", blocking = TRUE,    encoding = getOption("encoding"),    method = getOption("url.method", "default"),    headers = NULL)gzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)bzfile(description, open = "", encoding = getOption("encoding"),       compression = 9)xzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)unz(description, filename, open = "", encoding = getOption("encoding"))pipe(description, open = "", encoding = getOption("encoding"))fifo(description, open = "", blocking = FALSE,     encoding = getOption("encoding"))socketConnection(host = "localhost", port, server = FALSE,                 blocking = FALSE, open = "a+",                 encoding = getOption("encoding"),                 timeout = getOption("timeout"),                 options = getOption("socketOptions"))serverSocket(port)socketAccept(socket, blocking = FALSE, open = "a+",             encoding = getOption("encoding"),             timeout = getOption("timeout"),             options = getOption("socketOptions"))open(con, ...)## S3 method for class 'connection'open(con, open = "r", blocking = TRUE, ...)close(con, ...)## S3 method for class 'connection'close(con, type = "rw", ...)flush(con)isOpen(con, rw = "")isIncomplete(con)socketTimeout(socket, timeout = -1)
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
isS4(object)asS4(object, flag = TRUE, complete = TRUE)asS3(object, flag = TRUE, complete = TRUE)
seek(con, ...)## S3 method for class 'connection'seek(con, where = NA, origin = "start", rw = "", ...)isSeekable(con)truncate(con, ...)
isSymmetric(object, ...)## S3 method for class 'matrix'isSymmetric(object, tol = 100 * .Machine$double.eps,            tol1 = 8 * tol, ...)
isSymmetric(object, ...)## S3 method for class 'matrix'isSymmetric(object, tol = 100 * .Machine$double.eps,            tol1 = 8 * tol, ...)
! xx & yx && yx | yx || yxor(x, y)isTRUE (x)isFALSE(x)
jitter(x, factor = 1, amount = NULL)
weekdays(x, abbreviate)## S3 method for class 'POSIXt'weekdays(x, abbreviate = FALSE)## S3 method for class 'Date'weekdays(x, abbreviate = FALSE)months(x, abbreviate)## S3 method for class 'POSIXt'months(x, abbreviate = FALSE)## S3 method for class 'Date'months(x, abbreviate = FALSE)quarters(x, abbreviate)## S3 method for class 'POSIXt'quarters(x, ...)## S3 method for class 'Date'quarters(x, ...)julian(x, ...)## S3 method for class 'POSIXt'julian(x, origin = as.POSIXct("1970-01-01", tz = "GMT"), ...)## S3 method for class 'Date'julian(x, origin = as.Date("1970-01-01"), ...)
weekdays(x, abbreviate)## S3 method for class 'POSIXt'weekdays(x, abbreviate = FALSE)## S3 method for class 'Date'weekdays(x, abbreviate = FALSE)months(x, abbreviate)## S3 method for class 'POSIXt'months(x, abbreviate = FALSE)## S3 method for class 'Date'months(x, abbreviate = FALSE)quarters(x, abbreviate)## S3 method for class 'POSIXt'quarters(x, ...)## S3 method for class 'Date'quarters(x, ...)julian(x, ...)## S3 method for class 'POSIXt'julian(x, origin = as.POSIXct("1970-01-01", tz = "GMT"), ...)## S3 method for class 'Date'julian(x, origin = as.Date("1970-01-01"), ...)
weekdays(x, abbreviate)## S3 method for class 'POSIXt'weekdays(x, abbreviate = FALSE)## S3 method for class 'Date'weekdays(x, abbreviate = FALSE)months(x, abbreviate)## S3 method for class 'POSIXt'months(x, abbreviate = FALSE)## S3 method for class 'Date'months(x, abbreviate = FALSE)quarters(x, abbreviate)## S3 method for class 'POSIXt'quarters(x, ...)## S3 method for class 'Date'quarters(x, ...)julian(x, ...)## S3 method for class 'POSIXt'julian(x, origin = as.POSIXct("1970-01-01", tz = "GMT"), ...)## S3 method for class 'Date'julian(x, origin = as.Date("1970-01-01"), ...)
kappa(z, ...)## Default S3 method:kappa(z, exact = FALSE,      norm = NULL, method = c("qr", "direct"), ...)## S3 method for class 'lm'kappa(z, ...)## S3 method for class 'qr'kappa(z, ...).kappa_tri(z, exact = FALSE, LINPACK = TRUE, norm = NULL, ...)rcond(x, norm = c("O","I","1"), triangular = FALSE, ...)
kappa(z, ...)## Default S3 method:kappa(z, exact = FALSE,      norm = NULL, method = c("qr", "direct"), ...)## S3 method for class 'lm'kappa(z, ...)## S3 method for class 'qr'kappa(z, ...).kappa_tri(z, exact = FALSE, LINPACK = TRUE, norm = NULL, ...)rcond(x, norm = c("O","I","1"), triangular = FALSE, ...)
kappa(z, ...)## Default S3 method:kappa(z, exact = FALSE,      norm = NULL, method = c("qr", "direct"), ...)## S3 method for class 'lm'kappa(z, ...)## S3 method for class 'qr'kappa(z, ...).kappa_tri(z, exact = FALSE, LINPACK = TRUE, norm = NULL, ...)rcond(x, norm = c("O","I","1"), triangular = FALSE, ...)
kappa(z, ...)## Default S3 method:kappa(z, exact = FALSE,      norm = NULL, method = c("qr", "direct"), ...)## S3 method for class 'lm'kappa(z, ...)## S3 method for class 'qr'kappa(z, ...).kappa_tri(z, exact = FALSE, LINPACK = TRUE, norm = NULL, ...)rcond(x, norm = c("O","I","1"), triangular = FALSE, ...)
kronecker(X, Y, FUN = "*", make.dimnames = FALSE, ...)X %x% Y
l10n_info()
La_library()
La_version()
svd(x, nu = min(n, p), nv = min(n, p), LINPACK = FALSE)La.svd(x, nu = min(n, p), nv = min(n, p))
labels(object, ...)
labels(object, ...)
lapply(X, FUN, ...)sapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)vapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)replicate(n, expr, simplify = "array")simplify2array(x, higher = TRUE)
lazyLoad(filebase, envir = parent.frame(), filter)lazyLoadDBexec(filebase, fun, filter)
lazyLoad(filebase, envir = parent.frame(), filter)lazyLoadDBexec(filebase, fun, filter)
.subset(x, ...).subset2(x, ...).getRequiredPackages(file = "DESCRIPTION", lib.loc = NULL,                     quietly = FALSE, useImports = FALSE).getRequiredPackages2(pkgInfo, quietly = FALSE, lib.loc = NULL,                      useImports = FALSE).isMethodsDispatchOn(onOff = NULL)sys.load.image(name, quiet)sys.save.image(name).row_names_info(x, type = 1L).set_row_names(n)findPackageEnv(info)lazyLoadDBfetch(key, file, compressed, hook).TAOCP1997init(seed).gt(x, i, j).gtn(x, strictly).primTrace(obj).primUntrace(obj).Date(xx, cl = "Date").POSIXct(xx, tz = NULL, cl = c("POSIXct", "POSIXt")).POSIXlt(xx, tz = NULL, cl = c("POSIXlt", "POSIXt")).difftime(xx, units, cl = "difftime").cache_class(class, extends).popath.detach(pos).maskedMsg(same, pkg, by)## Only on Windows:.fixupGFortranStdout().fixupGFortranStderr()
beta(a, b)lbeta(a, b)gamma(x)lgamma(x)psigamma(x, deriv = 0)digamma(x)trigamma(x)choose(n, k)lchoose(n, k)factorial(x)lfactorial(x)
beta(a, b)lbeta(a, b)gamma(x)lgamma(x)psigamma(x, deriv = 0)digamma(x)trigamma(x)choose(n, k)lchoose(n, k)factorial(x)lfactorial(x)
length(x)length(x) <- value
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
length(x)length(x) <- value
## S3 method for class 'Date'summary(object, digits = 12, ...)## S3 method for class 'Date'print(x, max = NULL, ...)
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
length(x)length(x) <- value
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
lengths(x, use.names = TRUE)
LETTERSlettersmonth.abbmonth.namepi
LETTERSlettersmonth.abbmonth.namepi
levels(x)levels(x) <- value
levels(x)levels(x) <- value
levels(x)levels(x) <- value
levels(x)levels(x) <- value
beta(a, b)lbeta(a, b)gamma(x)lgamma(x)psigamma(x, deriv = 0)digamma(x)trigamma(x)choose(n, k)lchoose(n, k)factorial(x)lfactorial(x)
beta(a, b)lbeta(a, b)gamma(x)lgamma(x)psigamma(x, deriv = 0)digamma(x)trigamma(x)choose(n, k)lchoose(n, k)factorial(x)lfactorial(x)
libcurlVersion()
library(package, help, pos = 2, lib.loc = NULL,        character.only = FALSE, logical.return = FALSE,        warn.conflicts, quietly = FALSE,        verbose = getOption("verbose"),        mask.ok, exclude, include.only,        attach.required = missing(include.only))require(package, lib.loc = NULL, quietly = FALSE,        warn.conflicts,        character.only = FALSE,        mask.ok, exclude, include.only,        attach.required = missing(include.only))conflictRules(pkg, mask.ok = NULL, exclude = NULL)
library.dynam(chname, package, lib.loc,              verbose = getOption("verbose"),              file.ext = .Platform$dynlib.ext, ...)library.dynam.unload(chname, libpath,                     verbose = getOption("verbose"),                     file.ext = .Platform$dynlib.ext).dynLibs(new)
library.dynam(chname, package, lib.loc,              verbose = getOption("verbose"),              file.ext = .Platform$dynlib.ext, ...)library.dynam.unload(chname, libpath,                     verbose = getOption("verbose"),                     file.ext = .Platform$dynlib.ext).dynLibs(new)
license()licence()
license()licence()
list(...)pairlist(...)as.list(x, ...)## S3 method for class 'environment'as.list(x, all.names = FALSE, sorted = FALSE, ...)as.pairlist(x)is.list(x)is.pairlist(x)alist(...)
list.files(path = ".", pattern = NULL, all.files = FALSE,           full.names = FALSE, recursive = FALSE,           ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)       dir(path = ".", pattern = NULL, all.files = FALSE,           full.names = FALSE, recursive = FALSE,           ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)list.dirs(path = ".", full.names = TRUE, recursive = TRUE)
list.files(path = ".", pattern = NULL, all.files = FALSE,           full.names = FALSE, recursive = FALSE,           ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)       dir(path = ".", pattern = NULL, all.files = FALSE,           full.names = FALSE, recursive = FALSE,           ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE)list.dirs(path = ".", full.names = TRUE, recursive = TRUE)
list2DF(x = list(), nrow = NULL)
list2env(x, envir = NULL, parent = parent.frame(),         hash = (length(x) > 100), size = max(29L, length(x)))
load(file, envir = parent.frame(), verbose = FALSE)
attachNamespace(ns, pos = 2L, depends = NULL, exclude, include.only)loadNamespace(package, lib.loc = NULL,              keep.source = getOption("keep.source.pkgs"),              partial = FALSE, versionCheck = NULL,              keep.parse.data = getOption("keep.parse.data.pkgs"))requireNamespace(package, ..., quietly = FALSE)loadedNamespaces()unloadNamespace(ns)isNamespaceLoaded(name)
asNamespace(ns, base.OK = TRUE)getNamespaceInfo (ns, which).getNamespaceInfo(ns, which)importIntoEnv(impenv, impnames, expenv, expnames)isBaseNamespace(ns)isNamespace(ns)namespaceExport(ns, vars)namespaceImport(self, ..., from = NULL, except = character(0L))namespaceImportFrom(self, ns, vars, generics, packages,                    from = "non-package environment",                    except = character(0L))namespaceImportClasses(self, ns, vars, from = NULL)namespaceImportMethods(self, ns, vars, from = NULL)packageHasNamespace(package, package.lib)parseNamespaceFile(package, package.lib, mustExist = TRUE)registerS3method(genname, class, method, envir = parent.frame())registerS3methods(info, package, env)setNamespaceInfo(ns, which, val).mergeExportMethods(new, ns).mergeImportMethods(impenv, expenv, metaname).knownS3GenericsloadingNamespaceInfo().getNamespace(name)..getNamespace(name, where)
attachNamespace(ns, pos = 2L, depends = NULL, exclude, include.only)loadNamespace(package, lib.loc = NULL,              keep.source = getOption("keep.source.pkgs"),              partial = FALSE, versionCheck = NULL,              keep.parse.data = getOption("keep.parse.data.pkgs"))requireNamespace(package, ..., quietly = FALSE)loadedNamespaces()unloadNamespace(ns)isNamespaceLoaded(name)
eval(expr, envir = parent.frame(),           enclos = if(is.list(envir) || is.pairlist(envir))                       parent.frame() else baseenv())evalq(expr, envir, enclos)eval.parent(expr, n = 1)local(expr, envir = new.env())
lockEnvironment(env, bindings = FALSE)environmentIsLocked(env)lockBinding(sym, env)unlockBinding(sym, env)bindingIsLocked(sym, env)makeActiveBinding(sym, fun, env)bindingIsActive(sym, env)activeBindingFunction(sym, env)
lockEnvironment(env, bindings = FALSE)environmentIsLocked(env)lockBinding(sym, env)unlockBinding(sym, env)bindingIsLocked(sym, env)makeActiveBinding(sym, fun, env)bindingIsActive(sym, env)activeBindingFunction(sym, env)
log(x, base = exp(1))logb(x, base = exp(1))log10(x)log2(x)log1p(x)exp(x)expm1(x)
log(x, base = exp(1))logb(x, base = exp(1))log10(x)log2(x)log1p(x)exp(x)expm1(x)
log(x, base = exp(1))logb(x, base = exp(1))log10(x)log2(x)log1p(x)exp(x)expm1(x)
log(x, base = exp(1))logb(x, base = exp(1))log10(x)log2(x)log1p(x)exp(x)expm1(x)
log(x, base = exp(1))logb(x, base = exp(1))log10(x)log2(x)log1p(x)exp(x)expm1(x)
TRUEFALSET; Flogical(length = 0)as.logical(x, ...)is.logical(x)
lower.tri(x, diag = FALSE)upper.tri(x, diag = FALSE)
ls(name, pos = -1L, envir = as.environment(pos),   all.names = FALSE, pattern, sorted = TRUE)objects(name, pos= -1L, envir = as.environment(pos),        all.names = FALSE, pattern, sorted = TRUE)
make.names(names, unique = FALSE, allow_ = TRUE)
make.unique(names, sep = ".")
lockEnvironment(env, bindings = FALSE)environmentIsLocked(env)lockBinding(sym, env)unlockBinding(sym, env)bindingIsLocked(sym, env)makeActiveBinding(sym, fun, env)bindingIsActive(sym, env)activeBindingFunction(sym, env)
Reduce(f, x, init, right = FALSE, accumulate = FALSE)Filter(f, x)Find(f, x, right = FALSE, nomatch = NULL)Map(f, ...)Negate(f)Position(f, x, right = FALSE, nomatch = NA_integer_)
mapply(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE,       USE.NAMES = TRUE).mapply(FUN, dots, MoreArgs)
marginSums(x, margin = NULL)margin.table(x, margin = NULL)
marginSums(x, margin = NULL)margin.table(x, margin = NULL)
mat.or.vec(nr, nc)
match(x, table, nomatch = NA_integer_, incomparables = NULL)x %in% table
match.arg(arg, choices, several.ok = FALSE)
match.call(definition = sys.function(sys.parent()),           call = sys.call(sys.parent()),           expand.dots = TRUE,           envir = parent.frame(2L))
match.fun(FUN, descend = TRUE)
## S3 methods for group generics have prototypes:Math(x, ...)Ops(e1, e2)Complex(z)Summary(..., na.rm = FALSE)
## S3 method for class 'Date'summary(object, digits = 12, ...)## S3 method for class 'Date'print(x, max = NULL, ...)
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
factor(x = character(), levels, labels = levels,       exclude = NA, ordered = is.ordered(x), nmax = NA)ordered(x, ...)is.factor(x)is.ordered(x)as.factor(x)as.ordered(x)addNA(x, ifany = FALSE)
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE,       dimnames = NULL)as.matrix(x, ...)## S3 method for class 'data.frame'as.matrix(x, rownames.force = NA, ...)is.matrix(x)
max(..., na.rm = FALSE)min(..., na.rm = FALSE)pmax(..., na.rm = FALSE)pmin(..., na.rm = FALSE)pmax.int(..., na.rm = FALSE)pmin.int(..., na.rm = FALSE)
max.col(m, ties.method = c("random", "first", "last"))
mean(x, ...)## Default S3 method:mean(x, trim = 0, na.rm = FALSE, ...)
## S3 method for class 'Date'summary(object, digits = 12, ...)## S3 method for class 'Date'print(x, max = NULL, ...)
mean(x, ...)## Default S3 method:mean(x, trim = 0, na.rm = FALSE, ...)
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
mem.maxVSize(vsize = 0)mem.maxNSize(nsize = 0)
mem.maxVSize(vsize = 0)mem.maxNSize(nsize = 0)
memCompress(from, type = c("gzip", "bzip2", "xz", "none"))memDecompress(from,              type = c("unknown", "gzip", "bzip2", "xz", "none"),              asChar = FALSE)
memCompress(from, type = c("gzip", "bzip2", "xz", "none"))memDecompress(from,              type = c("unknown", "gzip", "bzip2", "xz", "none"),              asChar = FALSE)
memory.profile()
merge(x, y, ...)## Default S3 method:merge(x, y, ...)## S3 method for class 'data.frame'merge(x, y, by = intersect(names(x), names(y)),      by.x = by, by.y = by, all = FALSE, all.x = all, all.y = all,      sort = TRUE, suffixes = c(".x",".y"), no.dups = TRUE,      incomparables = NULL, ...)
merge(x, y, ...)## Default S3 method:merge(x, y, ...)## S3 method for class 'data.frame'merge(x, y, by = intersect(names(x), names(y)),      by.x = by, by.y = by, all = FALSE, all.x = all, all.y = all,      sort = TRUE, suffixes = c(".x",".y"), no.dups = TRUE,      incomparables = NULL, ...)
merge(x, y, ...)## Default S3 method:merge(x, y, ...)## S3 method for class 'data.frame'merge(x, y, by = intersect(names(x), names(y)),      by.x = by, by.y = by, all = FALSE, all.x = all, all.y = all,      sort = TRUE, suffixes = c(".x",".y"), no.dups = TRUE,      incomparables = NULL, ...)
message(..., domain = NULL, appendLF = TRUE)suppressMessages(expr, classes = "message")packageStartupMessage(..., domain = NULL, appendLF = TRUE)suppressPackageStartupMessages(expr).makeMessage(..., domain = NULL, appendLF = FALSE)
get(x, pos = -1, envir = as.environment(pos), mode = "any",    inherits = TRUE)mget(x, envir = as.environment(-1), mode = "any", ifnotfound,     inherits = FALSE)dynGet(x, ifnotfound = , minframe = 1L, inherits = FALSE)
max(..., na.rm = FALSE)min(..., na.rm = FALSE)pmax(..., na.rm = FALSE)pmin(..., na.rm = FALSE)pmax.int(..., na.rm = FALSE)pmin.int(..., na.rm = FALSE)
missing(x)
complex(length.out = 0, real = numeric(), imaginary = numeric(),        modulus = 1, argument = 0)as.complex(x, ...)is.complex(x)Re(z)Im(z)Mod(z)Arg(z)Conj(z)
mode(x)mode(x) <- valuestorage.mode(x)storage.mode(x) <- value
mode(x)mode(x) <- valuestorage.mode(x)storage.mode(x) <- value
LETTERSlettersmonth.abbmonth.namepi
LETTERSlettersmonth.abbmonth.namepi
weekdays(x, abbreviate)## S3 method for class 'POSIXt'weekdays(x, abbreviate = FALSE)## S3 method for class 'Date'weekdays(x, abbreviate = FALSE)months(x, abbreviate)## S3 method for class 'POSIXt'months(x, abbreviate = FALSE)## S3 method for class 'Date'months(x, abbreviate = FALSE)quarters(x, abbreviate)## S3 method for class 'POSIXt'quarters(x, ...)## S3 method for class 'Date'quarters(x, ...)julian(x, ...)## S3 method for class 'POSIXt'julian(x, origin = as.POSIXct("1970-01-01", tz = "GMT"), ...)## S3 method for class 'Date'julian(x, origin = as.Date("1970-01-01"), ...)
weekdays(x, abbreviate)## S3 method for class 'POSIXt'weekdays(x, abbreviate = FALSE)## S3 method for class 'Date'weekdays(x, abbreviate = FALSE)months(x, abbreviate)## S3 method for class 'POSIXt'months(x, abbreviate = FALSE)## S3 method for class 'Date'months(x, abbreviate = FALSE)quarters(x, abbreviate)## S3 method for class 'POSIXt'quarters(x, ...)## S3 method for class 'Date'quarters(x, ...)julian(x, ...)## S3 method for class 'POSIXt'julian(x, origin = as.POSIXct("1970-01-01", tz = "GMT"), ...)## S3 method for class 'Date'julian(x, origin = as.Date("1970-01-01"), ...)
weekdays(x, abbreviate)## S3 method for class 'POSIXt'weekdays(x, abbreviate = FALSE)## S3 method for class 'Date'weekdays(x, abbreviate = FALSE)months(x, abbreviate)## S3 method for class 'POSIXt'months(x, abbreviate = FALSE)## S3 method for class 'Date'months(x, abbreviate = FALSE)quarters(x, abbreviate)## S3 method for class 'POSIXt'quarters(x, ...)## S3 method for class 'Date'quarters(x, ...)julian(x, ...)## S3 method for class 'POSIXt'julian(x, origin = as.POSIXct("1970-01-01", tz = "GMT"), ...)## S3 method for class 'Date'julian(x, origin = as.Date("1970-01-01"), ...)
attributes(x)attributes(x) <- valuemostattributes(x) <- value
names(x)names(x) <- value
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
names(x)names(x) <- value
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
asNamespace(ns, base.OK = TRUE)getNamespaceInfo (ns, which).getNamespaceInfo(ns, which)importIntoEnv(impenv, impnames, expenv, expnames)isBaseNamespace(ns)isNamespace(ns)namespaceExport(ns, vars)namespaceImport(self, ..., from = NULL, except = character(0L))namespaceImportFrom(self, ns, vars, generics, packages,                    from = "non-package environment",                    except = character(0L))namespaceImportClasses(self, ns, vars, from = NULL)namespaceImportMethods(self, ns, vars, from = NULL)packageHasNamespace(package, package.lib)parseNamespaceFile(package, package.lib, mustExist = TRUE)registerS3method(genname, class, method, envir = parent.frame())registerS3methods(info, package, env)setNamespaceInfo(ns, which, val).mergeExportMethods(new, ns).mergeImportMethods(impenv, expenv, metaname).knownS3GenericsloadingNamespaceInfo().getNamespace(name)..getNamespace(name, where)
asNamespace(ns, base.OK = TRUE)getNamespaceInfo (ns, which).getNamespaceInfo(ns, which)importIntoEnv(impenv, impnames, expenv, expnames)isBaseNamespace(ns)isNamespace(ns)namespaceExport(ns, vars)namespaceImport(self, ..., from = NULL, except = character(0L))namespaceImportFrom(self, ns, vars, generics, packages,                    from = "non-package environment",                    except = character(0L))namespaceImportClasses(self, ns, vars, from = NULL)namespaceImportMethods(self, ns, vars, from = NULL)packageHasNamespace(package, package.lib)parseNamespaceFile(package, package.lib, mustExist = TRUE)registerS3method(genname, class, method, envir = parent.frame())registerS3methods(info, package, env)setNamespaceInfo(ns, which, val).mergeExportMethods(new, ns).mergeImportMethods(impenv, expenv, metaname).knownS3GenericsloadingNamespaceInfo().getNamespace(name)..getNamespace(name, where)
asNamespace(ns, base.OK = TRUE)getNamespaceInfo (ns, which).getNamespaceInfo(ns, which)importIntoEnv(impenv, impnames, expenv, expnames)isBaseNamespace(ns)isNamespace(ns)namespaceExport(ns, vars)namespaceImport(self, ..., from = NULL, except = character(0L))namespaceImportFrom(self, ns, vars, generics, packages,                    from = "non-package environment",                    except = character(0L))namespaceImportClasses(self, ns, vars, from = NULL)namespaceImportMethods(self, ns, vars, from = NULL)packageHasNamespace(package, package.lib)parseNamespaceFile(package, package.lib, mustExist = TRUE)registerS3method(genname, class, method, envir = parent.frame())registerS3methods(info, package, env)setNamespaceInfo(ns, which, val).mergeExportMethods(new, ns).mergeImportMethods(impenv, expenv, metaname).knownS3GenericsloadingNamespaceInfo().getNamespace(name)..getNamespace(name, where)
asNamespace(ns, base.OK = TRUE)getNamespaceInfo (ns, which).getNamespaceInfo(ns, which)importIntoEnv(impenv, impnames, expenv, expnames)isBaseNamespace(ns)isNamespace(ns)namespaceExport(ns, vars)namespaceImport(self, ..., from = NULL, except = character(0L))namespaceImportFrom(self, ns, vars, generics, packages,                    from = "non-package environment",                    except = character(0L))namespaceImportClasses(self, ns, vars, from = NULL)namespaceImportMethods(self, ns, vars, from = NULL)packageHasNamespace(package, package.lib)parseNamespaceFile(package, package.lib, mustExist = TRUE)registerS3method(genname, class, method, envir = parent.frame())registerS3methods(info, package, env)setNamespaceInfo(ns, which, val).mergeExportMethods(new, ns).mergeImportMethods(impenv, expenv, metaname).knownS3GenericsloadingNamespaceInfo().getNamespace(name)..getNamespace(name, where)
asNamespace(ns, base.OK = TRUE)getNamespaceInfo (ns, which).getNamespaceInfo(ns, which)importIntoEnv(impenv, impnames, expenv, expnames)isBaseNamespace(ns)isNamespace(ns)namespaceExport(ns, vars)namespaceImport(self, ..., from = NULL, except = character(0L))namespaceImportFrom(self, ns, vars, generics, packages,                    from = "non-package environment",                    except = character(0L))namespaceImportClasses(self, ns, vars, from = NULL)namespaceImportMethods(self, ns, vars, from = NULL)packageHasNamespace(package, package.lib)parseNamespaceFile(package, package.lib, mustExist = TRUE)registerS3method(genname, class, method, envir = parent.frame())registerS3methods(info, package, env)setNamespaceInfo(ns, which, val).mergeExportMethods(new, ns).mergeImportMethods(impenv, expenv, metaname).knownS3GenericsloadingNamespaceInfo().getNamespace(name)..getNamespace(name, where)
nargs()
nchar(x, type = "chars", allowNA = FALSE, keepNA = NA)nzchar(x, keepNA = FALSE)
nrow(x)ncol(x)NCOL(x)NROW(x)
nrow(x)ncol(x)NCOL(x)NROW(x)
Reduce(f, x, init, right = FALSE, accumulate = FALSE)Filter(f, x)Find(f, x, right = FALSE, nomatch = NULL)Map(f, ...)Negate(f)Position(f, x, right = FALSE, nomatch = NA_integer_)
environment(fun = NULL)environment(fun) <- valueis.environment(x).GlobalEnvglobalenv().BaseNamespaceEnvemptyenv()baseenv()new.env(hash = TRUE, parent = parent.frame(), size = 29L)parent.env(env)parent.env(env) <- valueenvironmentName(env)env.profile(env)
if(cond) exprif(cond) cons.expr  else  alt.exprfor(var in seq) exprwhile(cond) exprrepeat exprbreaknext
UseMethod(generic, object)NextMethod(generic = NULL, object = NULL, ...)
gettext(..., domain = NULL)ngettext(n, msg1, msg2, domain = NULL)bindtextdomain(domain, dirname = NULL)
nlevels(x)
noquote(obj, right = FALSE)## S3 method for class 'noquote'print(x, quote = FALSE, right = FALSE, ...)## S3 method for class 'noquote'c(..., recursive = FALSE)
norm(x, type = c("O", "I", "F", "M", "2"))
normalizePath(path, winslash = "\\", mustWork = NA)
nrow(x)ncol(x)NCOL(x)NROW(x)
nrow(x)ncol(x)NCOL(x)NROW(x)
showConnections(all = FALSE)getConnection(what)closeAllConnections()stdin()stdout()stderr()nullfile()isatty(con)
numeric(length = 0)as.numeric(x, ...)is.numeric(x)
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
charToRaw(x)rawToChar(x, multiple = FALSE)rawShift(x, n)rawToBits(x)intToBits(x)packBits(x, type = c("raw", "integer", "double"))numToInts(x)numToBits(x)
charToRaw(x)rawToChar(x, multiple = FALSE)rawShift(x, n)rawToBits(x)intToBits(x)packBits(x, type = c("raw", "integer", "double"))numToInts(x)numToBits(x)
nchar(x, type = "chars", allowNA = FALSE, keepNA = NA)nzchar(x, keepNA = FALSE)
ls(name, pos = -1L, envir = as.environment(pos),   all.names = FALSE, pattern, sorted = TRUE)objects(name, pos= -1L, envir = as.environment(pos),        all.names = FALSE, pattern, sorted = TRUE)
class(x)class(x) <- valueunclass(x)inherits(x, what, which = FALSE)isa(x, what)oldClass(x)oldClass(x) <- value.class2(x)
class(x)class(x) <- valueunclass(x)inherits(x, what, which = FALSE)isa(x, what)oldClass(x)oldClass(x) <- value.class2(x)
Sys.timezone(location = TRUE)OlsonNames(tzdir = NULL)
on.exit(expr = NULL, add = FALSE, after = TRUE)
file(description = "", open = "", blocking = TRUE,     encoding = getOption("encoding"), raw = FALSE,     method = getOption("url.method", "default"))url(description, open = "", blocking = TRUE,    encoding = getOption("encoding"),    method = getOption("url.method", "default"),    headers = NULL)gzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)bzfile(description, open = "", encoding = getOption("encoding"),       compression = 9)xzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)unz(description, filename, open = "", encoding = getOption("encoding"))pipe(description, open = "", encoding = getOption("encoding"))fifo(description, open = "", blocking = FALSE,     encoding = getOption("encoding"))socketConnection(host = "localhost", port, server = FALSE,                 blocking = FALSE, open = "a+",                 encoding = getOption("encoding"),                 timeout = getOption("timeout"),                 options = getOption("socketOptions"))serverSocket(port)socketAccept(socket, blocking = FALSE, open = "a+",             encoding = getOption("encoding"),             timeout = getOption("timeout"),             options = getOption("socketOptions"))open(con, ...)## S3 method for class 'connection'open(con, open = "r", blocking = TRUE, ...)close(con, ...)## S3 method for class 'connection'close(con, type = "rw", ...)flush(con)isOpen(con, rw = "")isIncomplete(con)socketTimeout(socket, timeout = -1)
file(description = "", open = "", blocking = TRUE,     encoding = getOption("encoding"), raw = FALSE,     method = getOption("url.method", "default"))url(description, open = "", blocking = TRUE,    encoding = getOption("encoding"),    method = getOption("url.method", "default"),    headers = NULL)gzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)bzfile(description, open = "", encoding = getOption("encoding"),       compression = 9)xzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)unz(description, filename, open = "", encoding = getOption("encoding"))pipe(description, open = "", encoding = getOption("encoding"))fifo(description, open = "", blocking = FALSE,     encoding = getOption("encoding"))socketConnection(host = "localhost", port, server = FALSE,                 blocking = FALSE, open = "a+",                 encoding = getOption("encoding"),                 timeout = getOption("timeout"),                 options = getOption("socketOptions"))serverSocket(port)socketAccept(socket, blocking = FALSE, open = "a+",             encoding = getOption("encoding"),             timeout = getOption("timeout"),             options = getOption("socketOptions"))open(con, ...)## S3 method for class 'connection'open(con, open = "r", blocking = TRUE, ...)close(con, ...)## S3 method for class 'connection'close(con, type = "rw", ...)flush(con)isOpen(con, rw = "")isIncomplete(con)socketTimeout(socket, timeout = -1)
srcfile(filename, encoding = getOption("encoding"), Enc = "unknown")srcfilecopy(filename, lines, timestamp = Sys.time(), isFile = FALSE)srcfilealias(filename, srcfile)getSrcLines(srcfile, first, last)srcref(srcfile, lloc)## S3 method for class 'srcfile'print(x, ...)## S3 method for class 'srcfile'summary(object, ...)## S3 method for class 'srcfile'open(con, line, ...)## S3 method for class 'srcfile'close(con, ...)## S3 method for class 'srcref'print(x, useSource = TRUE, ...)## S3 method for class 'srcref'summary(object, useSource = FALSE, ...)## S3 method for class 'srcref'as.character(x, useSource = TRUE, to = x, ...).isOpen(srcfile)
srcfile(filename, encoding = getOption("encoding"), Enc = "unknown")srcfilecopy(filename, lines, timestamp = Sys.time(), isFile = FALSE)srcfilealias(filename, srcfile)getSrcLines(srcfile, first, last)srcref(srcfile, lloc)## S3 method for class 'srcfile'print(x, ...)## S3 method for class 'srcfile'summary(object, ...)## S3 method for class 'srcfile'open(con, line, ...)## S3 method for class 'srcfile'close(con, ...)## S3 method for class 'srcref'print(x, useSource = TRUE, ...)## S3 method for class 'srcref'summary(object, useSource = FALSE, ...)## S3 method for class 'srcref'as.character(x, useSource = TRUE, to = x, ...).isOpen(srcfile)
srcfile(filename, encoding = getOption("encoding"), Enc = "unknown")srcfilecopy(filename, lines, timestamp = Sys.time(), isFile = FALSE)srcfilealias(filename, srcfile)getSrcLines(srcfile, first, last)srcref(srcfile, lloc)## S3 method for class 'srcfile'print(x, ...)## S3 method for class 'srcfile'summary(object, ...)## S3 method for class 'srcfile'open(con, line, ...)## S3 method for class 'srcfile'close(con, ...)## S3 method for class 'srcref'print(x, useSource = TRUE, ...)## S3 method for class 'srcref'summary(object, useSource = FALSE, ...)## S3 method for class 'srcref'as.character(x, useSource = TRUE, to = x, ...).isOpen(srcfile)
## S3 methods for group generics have prototypes:Math(x, ...)Ops(e1, e2)Complex(z)Summary(..., na.rm = FALSE)
date + xx + datedate - xdate1 lop date2
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
factor(x = character(), levels, labels = levels,       exclude = NA, ordered = is.ordered(x), nmax = NA)ordered(x, ...)is.factor(x)is.ordered(x)as.factor(x)as.ordered(x)addNA(x, ifany = FALSE)
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
factor(x = character(), levels, labels = levels,       exclude = NA, ordered = is.ordered(x), nmax = NA)ordered(x, ...)is.factor(x)is.ordered(x)as.factor(x)as.ordered(x)addNA(x, ifany = FALSE)
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
options(...)getOption(x, default = NULL).Options
order(..., na.last = TRUE, decreasing = FALSE,      method = c("auto", "shell", "radix"))sort.list(x, partial = NULL, na.last = TRUE, decreasing = FALSE,          method = c("auto", "shell", "quick", "radix"))
factor(x = character(), levels, labels = levels,       exclude = NA, ordered = is.ordered(x), nmax = NA)ordered(x, ...)is.factor(x)is.ordered(x)as.factor(x)as.ordered(x)addNA(x, ifany = FALSE)
outer(X, Y, FUN = "*", ...)X %o% Y
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
getHook(hookName)setHook(hookName, value,        action = c("append", "prepend", "replace"))packageEvent(pkgname,             event = c("onLoad", "attach", "detach", "onUnload"))
asNamespace(ns, base.OK = TRUE)getNamespaceInfo (ns, which).getNamespaceInfo(ns, which)importIntoEnv(impenv, impnames, expenv, expnames)isBaseNamespace(ns)isNamespace(ns)namespaceExport(ns, vars)namespaceImport(self, ..., from = NULL, except = character(0L))namespaceImportFrom(self, ns, vars, generics, packages,                    from = "non-package environment",                    except = character(0L))namespaceImportClasses(self, ns, vars, from = NULL)namespaceImportMethods(self, ns, vars, from = NULL)packageHasNamespace(package, package.lib)parseNamespaceFile(package, package.lib, mustExist = TRUE)registerS3method(genname, class, method, envir = parent.frame())registerS3methods(info, package, env)setNamespaceInfo(ns, which, val).mergeExportMethods(new, ns).mergeImportMethods(impenv, expenv, metaname).knownS3GenericsloadingNamespaceInfo().getNamespace(name)..getNamespace(name, where)
find.package(package, lib.loc = NULL, quiet = FALSE,             verbose = getOption("verbose"))path.package(package, quiet = FALSE)packageNotFoundError(package, lib.loc, call = NULL)
message(..., domain = NULL, appendLF = TRUE)suppressMessages(expr, classes = "message")packageStartupMessage(..., domain = NULL, appendLF = TRUE)suppressPackageStartupMessages(expr).makeMessage(..., domain = NULL, appendLF = FALSE)
charToRaw(x)rawToChar(x, multiple = FALSE)rawShift(x, n)rawToBits(x)intToBits(x)packBits(x, type = c("raw", "integer", "double"))numToInts(x)numToBits(x)
list(...)pairlist(...)as.list(x, ...)## S3 method for class 'environment'as.list(x, all.names = FALSE, sorted = FALSE, ...)as.pairlist(x)is.list(x)is.pairlist(x)alist(...)
environment(fun = NULL)environment(fun) <- valueis.environment(x).GlobalEnvglobalenv().BaseNamespaceEnvemptyenv()baseenv()new.env(hash = TRUE, parent = parent.frame(), size = 29L)parent.env(env)parent.env(env) <- valueenvironmentName(env)env.profile(env)
environment(fun = NULL)environment(fun) <- valueis.environment(x).GlobalEnvglobalenv().BaseNamespaceEnvemptyenv()baseenv()new.env(hash = TRUE, parent = parent.frame(), size = 29L)parent.env(env)parent.env(env) <- valueenvironmentName(env)env.profile(env)
sys.call(which = 0)sys.frame(which = 0)sys.nframe()sys.function(which = 0)sys.parent(n = 1)sys.calls()sys.frames()sys.parents()sys.on.exit()sys.status()parent.frame(n = 1)
parse(file = "", n = NULL, text = NULL, prompt = "?",      keep.source = getOption("keep.source"), srcfile,      encoding = "unknown")str2lang(s)str2expression(text)
asNamespace(ns, base.OK = TRUE)getNamespaceInfo (ns, which).getNamespaceInfo(ns, which)importIntoEnv(impenv, impnames, expenv, expnames)isBaseNamespace(ns)isNamespace(ns)namespaceExport(ns, vars)namespaceImport(self, ..., from = NULL, except = character(0L))namespaceImportFrom(self, ns, vars, generics, packages,                    from = "non-package environment",                    except = character(0L))namespaceImportClasses(self, ns, vars, from = NULL)namespaceImportMethods(self, ns, vars, from = NULL)packageHasNamespace(package, package.lib)parseNamespaceFile(package, package.lib, mustExist = TRUE)registerS3method(genname, class, method, envir = parent.frame())registerS3methods(info, package, env)setNamespaceInfo(ns, which, val).mergeExportMethods(new, ns).mergeImportMethods(impenv, expenv, metaname).knownS3GenericsloadingNamespaceInfo().getNamespace(name)..getNamespace(name, where)
paste (..., sep = " ", collapse = NULL, recycle0 = FALSE)paste0(...,            collapse = NULL, recycle0 = FALSE)
paste (..., sep = " ", collapse = NULL, recycle0 = FALSE)paste0(...,            collapse = NULL, recycle0 = FALSE)
path.expand(path)
find.package(package, lib.loc = NULL, quiet = FALSE,             verbose = getOption("verbose"))path.package(package, quiet = FALSE)packageNotFoundError(package, lib.loc, call = NULL)
pcre_config()
LETTERSlettersmonth.abbmonth.namepi
file(description = "", open = "", blocking = TRUE,     encoding = getOption("encoding"), raw = FALSE,     method = getOption("url.method", "default"))url(description, open = "", blocking = TRUE,    encoding = getOption("encoding"),    method = getOption("url.method", "default"),    headers = NULL)gzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)bzfile(description, open = "", encoding = getOption("encoding"),       compression = 9)xzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)unz(description, filename, open = "", encoding = getOption("encoding"))pipe(description, open = "", encoding = getOption("encoding"))fifo(description, open = "", blocking = FALSE,     encoding = getOption("encoding"))socketConnection(host = "localhost", port, server = FALSE,                 blocking = FALSE, open = "a+",                 encoding = getOption("encoding"),                 timeout = getOption("timeout"),                 options = getOption("socketOptions"))serverSocket(port)socketAccept(socket, blocking = FALSE, open = "a+",             encoding = getOption("encoding"),             timeout = getOption("timeout"),             options = getOption("socketOptions"))open(con, ...)## S3 method for class 'connection'open(con, open = "r", blocking = TRUE, ...)close(con, ...)## S3 method for class 'connection'close(con, type = "rw", ...)flush(con)isOpen(con, rw = "")isIncomplete(con)socketTimeout(socket, timeout = -1)
plot(x, y, ...)
pmatch(x, table, nomatch = NA_integer_, duplicates.ok = FALSE)
max(..., na.rm = FALSE)min(..., na.rm = FALSE)pmax(..., na.rm = FALSE)pmin(..., na.rm = FALSE)pmax.int(..., na.rm = FALSE)pmin.int(..., na.rm = FALSE)
max(..., na.rm = FALSE)min(..., na.rm = FALSE)pmax(..., na.rm = FALSE)pmin(..., na.rm = FALSE)pmax.int(..., na.rm = FALSE)pmin.int(..., na.rm = FALSE)
max(..., na.rm = FALSE)min(..., na.rm = FALSE)pmax(..., na.rm = FALSE)pmin(..., na.rm = FALSE)pmax.int(..., na.rm = FALSE)pmin.int(..., na.rm = FALSE)
max(..., na.rm = FALSE)min(..., na.rm = FALSE)pmax(..., na.rm = FALSE)pmin(..., na.rm = FALSE)pmax.int(..., na.rm = FALSE)pmin.int(..., na.rm = FALSE)
polyroot(z)
pos.to.env(x)
Reduce(f, x, init, right = FALSE, accumulate = FALSE)Filter(f, x)Find(f, x, right = FALSE, nomatch = NULL)Map(f, ...)Negate(f)Position(f, x, right = FALSE, nomatch = NA_integer_)
pretty(x, ...)## Default S3 method:pretty(x, n = 5, min.n = n %/% 3,  shrink.sml = 0.75,       high.u.bias = 1.5, u5.bias = .5 + 1.5*high.u.bias,       eps.correct = 0, ...)
pretty(x, ...)## Default S3 method:pretty(x, n = 5, min.n = n %/% 3,  shrink.sml = 0.75,       high.u.bias = 1.5, u5.bias = .5 + 1.5*high.u.bias,       eps.correct = 0, ...)
formatC(x, digits = NULL, width = NULL,        format = NULL, flag = "", mode = NULL,        big.mark = "", big.interval = 3L,        small.mark = "", small.interval = 5L,        decimal.mark = getOption("OutDec"),        preserve.width = "individual",        zero.print = NULL, replace.zero = TRUE,        drop0trailing = FALSE)prettyNum(x, big.mark = "",   big.interval = 3L,          small.mark  = "", small.interval = 5L,          decimal.mark = getOption("OutDec"), input.d.mark = decimal.mark,          preserve.width = c("common", "individual", "none"),          zero.print = NULL, replace.zero = FALSE,          drop0trailing = FALSE, is.cmplx = NA,          ...).format.zeros(x, zero.print, nx = suppressWarnings(as.numeric(x)),              replace = FALSE, warn.non.fitting = TRUE)
print(x, ...)## S3 method for class 'factor'print(x, quote = FALSE, max.levels = NULL,      width = getOption("width"), ...)## S3 method for class 'table'print(x, digits = getOption("digits"), quote = FALSE,      na.print = "", zero.print = "0",      right = is.numeric(x) || is.complex(x),      justify = "none", ...)## S3 method for class 'function'print(x, useSource = TRUE, ...)
I(x)
by(data, INDICES, FUN, ..., simplify = TRUE)
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
file(description = "", open = "", blocking = TRUE,     encoding = getOption("encoding"), raw = FALSE,     method = getOption("url.method", "default"))url(description, open = "", blocking = TRUE,    encoding = getOption("encoding"),    method = getOption("url.method", "default"),    headers = NULL)gzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)bzfile(description, open = "", encoding = getOption("encoding"),       compression = 9)xzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)unz(description, filename, open = "", encoding = getOption("encoding"))pipe(description, open = "", encoding = getOption("encoding"))fifo(description, open = "", blocking = FALSE,     encoding = getOption("encoding"))socketConnection(host = "localhost", port, server = FALSE,                 blocking = FALSE, open = "a+",                 encoding = getOption("encoding"),                 timeout = getOption("timeout"),                 options = getOption("socketOptions"))serverSocket(port)socketAccept(socket, blocking = FALSE, open = "a+",             encoding = getOption("encoding"),             timeout = getOption("timeout"),             options = getOption("socketOptions"))open(con, ...)## S3 method for class 'connection'open(con, open = "r", blocking = TRUE, ...)close(con, ...)## S3 method for class 'connection'close(con, type = "rw", ...)flush(con)isOpen(con, rw = "")isIncomplete(con)socketTimeout(socket, timeout = -1)
## S3 method for class 'data.frame'print(x, ..., digits = NULL,      quote = FALSE, right = TRUE, row.names = TRUE, max = NULL)
## S3 method for class 'Date'summary(object, digits = 12, ...)## S3 method for class 'Date'print(x, max = NULL, ...)
## Default S3 method:print(x, digits = NULL, quote = TRUE,      na.print = NULL, print.gap = NULL, right = FALSE,      max = NULL, width = NULL, useSource = TRUE, ...)
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
print(x, ...)## S3 method for class 'factor'print(x, quote = FALSE, max.levels = NULL,      width = getOption("width"), ...)## S3 method for class 'table'print(x, digits = getOption("digits"), quote = FALSE,      na.print = "", zero.print = "0",      right = is.numeric(x) || is.complex(x),      justify = "none", ...)## S3 method for class 'function'print(x, useSource = TRUE, ...)
getLoadedDLLs()
getLoadedDLLs()
getDLLRegisteredRoutines(dll, addNames = TRUE)
eigen(x, symmetric, only.values = FALSE, EISPACK = FALSE)
print(x, ...)## S3 method for class 'factor'print(x, quote = FALSE, max.levels = NULL,      width = getOption("width"), ...)## S3 method for class 'table'print(x, digits = getOption("digits"), quote = FALSE,      na.print = "", zero.print = "0",      right = is.numeric(x) || is.complex(x),      justify = "none", ...)## S3 method for class 'function'print(x, useSource = TRUE, ...)
print(x, ...)## S3 method for class 'factor'print(x, quote = FALSE, max.levels = NULL,      width = getOption("width"), ...)## S3 method for class 'table'print(x, digits = getOption("digits"), quote = FALSE,      na.print = "", zero.print = "0",      right = is.numeric(x) || is.complex(x),      justify = "none", ...)## S3 method for class 'function'print(x, useSource = TRUE, ...)
as.hexmode(x)## S3 method for class 'hexmode'as.character(x, ...)## S3 method for class 'hexmode'format(x, width = NULL, upper.case = FALSE, ...)## S3 method for class 'hexmode'print(x, ...)
library(package, help, pos = 2, lib.loc = NULL,        character.only = FALSE, logical.return = FALSE,        warn.conflicts, quietly = FALSE,        verbose = getOption("verbose"),        mask.ok, exclude, include.only,        attach.required = missing(include.only))require(package, lib.loc = NULL, quietly = FALSE,        warn.conflicts,        character.only = FALSE,        mask.ok, exclude, include.only,        attach.required = missing(include.only))conflictRules(pkg, mask.ok = NULL, exclude = NULL)
print(x, ...)## S3 method for class 'factor'print(x, quote = FALSE, max.levels = NULL,      width = getOption("width"), ...)## S3 method for class 'table'print(x, digits = getOption("digits"), quote = FALSE,      na.print = "", zero.print = "0",      right = is.numeric(x) || is.complex(x),      justify = "none", ...)## S3 method for class 'function'print(x, useSource = TRUE, ...)
getDLLRegisteredRoutines(dll, addNames = TRUE)
noquote(obj, right = FALSE)## S3 method for class 'noquote'print(x, quote = FALSE, right = FALSE, ...)## S3 method for class 'noquote'c(..., recursive = FALSE)
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
as.octmode(x)## S3 method for class 'octmode'as.character(x, ...)## S3 method for class 'octmode'format(x, width = NULL, ...)## S3 method for class 'octmode'print(x, ...)
library(package, help, pos = 2, lib.loc = NULL,        character.only = FALSE, logical.return = FALSE,        warn.conflicts, quietly = FALSE,        verbose = getOption("verbose"),        mask.ok, exclude, include.only,        attach.required = missing(include.only))require(package, lib.loc = NULL, quietly = FALSE,        warn.conflicts,        character.only = FALSE,        mask.ok, exclude, include.only,        attach.required = missing(include.only))conflictRules(pkg, mask.ok = NULL, exclude = NULL)
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
proc.time()
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
rle(x)inverse.rle(x, ...)## S3 method for class 'rle'print(x, digits = getOption("digits"), prefix = "", ...)
print(x, ...)## S3 method for class 'factor'print(x, quote = FALSE, max.levels = NULL,      width = getOption("width"), ...)## S3 method for class 'table'print(x, digits = getOption("digits"), quote = FALSE,      na.print = "", zero.print = "0",      right = is.numeric(x) || is.complex(x),      justify = "none", ...)## S3 method for class 'function'print(x, useSource = TRUE, ...)
srcfile(filename, encoding = getOption("encoding"), Enc = "unknown")srcfilecopy(filename, lines, timestamp = Sys.time(), isFile = FALSE)srcfilealias(filename, srcfile)getSrcLines(srcfile, first, last)srcref(srcfile, lloc)## S3 method for class 'srcfile'print(x, ...)## S3 method for class 'srcfile'summary(object, ...)## S3 method for class 'srcfile'open(con, line, ...)## S3 method for class 'srcfile'close(con, ...)## S3 method for class 'srcref'print(x, useSource = TRUE, ...)## S3 method for class 'srcref'summary(object, useSource = FALSE, ...)## S3 method for class 'srcref'as.character(x, useSource = TRUE, to = x, ...).isOpen(srcfile)
srcfile(filename, encoding = getOption("encoding"), Enc = "unknown")srcfilecopy(filename, lines, timestamp = Sys.time(), isFile = FALSE)srcfilealias(filename, srcfile)getSrcLines(srcfile, first, last)srcref(srcfile, lloc)## S3 method for class 'srcfile'print(x, ...)## S3 method for class 'srcfile'summary(object, ...)## S3 method for class 'srcfile'open(con, line, ...)## S3 method for class 'srcfile'close(con, ...)## S3 method for class 'srcref'print(x, useSource = TRUE, ...)## S3 method for class 'srcref'summary(object, useSource = FALSE, ...)## S3 method for class 'srcref'as.character(x, useSource = TRUE, to = x, ...).isOpen(srcfile)
table(...,      exclude = if (useNA == "no") c(NA, NaN),      useNA = c("no", "ifany", "always"),      dnn = list.names(...), deparse.level = 1)as.table(x, ...)is.table(x)## S3 method for class 'table'as.data.frame(x, row.names = NULL, ...,              responseName = "Freq", stringsAsFactors = TRUE,              sep = "", base = list(LETTERS))
warnings(...)## S3 method for class 'warnings'summary(object, ...)## S3 method for class 'warnings'print(x, tags,      header = ngettext(n, "Warning message:\n", "Warning messages:\n"),      ...)## S3 method for class 'summary.warnings'print(x, ...)
summary(object, ...)## Default S3 method:summary(object, ..., digits, quantile.type = 7)## S3 method for class 'data.frame'summary(object, maxsum = 7,       digits = max(3, getOption("digits")-3), ...)## S3 method for class 'factor'summary(object, maxsum = 100, ...)## S3 method for class 'matrix'summary(object, ...)## S3 method for class 'summaryDefault'format(x, digits = max(3L, getOption("digits") - 3L), ...) ## S3 method for class 'summaryDefault'print(x, digits = max(3L, getOption("digits") - 3L), ...)
print(x, ...)## S3 method for class 'factor'print(x, quote = FALSE, max.levels = NULL,      width = getOption("width"), ...)## S3 method for class 'table'print(x, digits = getOption("digits"), quote = FALSE,      na.print = "", zero.print = "0",      right = is.numeric(x) || is.complex(x),      justify = "none", ...)## S3 method for class 'function'print(x, useSource = TRUE, ...)
warnings(...)## S3 method for class 'warnings'summary(object, ...)## S3 method for class 'warnings'print(x, tags,      header = ngettext(n, "Warning message:\n", "Warning messages:\n"),      ...)## S3 method for class 'summary.warnings'print(x, ...)
prmatrix(x, rowlab =, collab =,         quote = TRUE, right = FALSE, na.print = NULL, ...)
proc.time()
prod(..., na.rm = FALSE)
proportions(x, margin = NULL)prop.table(x, margin = NULL)
proportions(x, margin = NULL)prop.table(x, margin = NULL)
dimnames(x)dimnames(x) <- valueprovideDimnames(x, sep = "", base = list(LETTERS), unique = TRUE)
beta(a, b)lbeta(a, b)gamma(x)lgamma(x)psigamma(x, deriv = 0)digamma(x)trigamma(x)choose(n, k)lchoose(n, k)factorial(x)lfactorial(x)
pushBack(data, connection, newLine = TRUE,         encoding = c("", "bytes", "UTF-8"))pushBackLength(connection)clearPushBack(connection)
pushBack(data, connection, newLine = TRUE,         encoding = c("", "bytes", "UTF-8"))pushBackLength(connection)clearPushBack(connection)
quit(save = "default", status = 0, runLast = TRUE)   q(save = "default", status = 0, runLast = TRUE)
qr(x, ...)## Default S3 method:qr(x, tol = 1e-07 , LAPACK = FALSE, ...)qr.coef(qr, y)qr.qy(qr, y)qr.qty(qr, y)qr.resid(qr, y)qr.fitted(qr, y, k = qr$rank)qr.solve(a, b, tol = 1e-7)## S3 method for class 'qr'solve(a, b, ...)is.qr(x)as.qr(x)
qr(x, ...)## Default S3 method:qr(x, tol = 1e-07 , LAPACK = FALSE, ...)qr.coef(qr, y)qr.qy(qr, y)qr.qty(qr, y)qr.resid(qr, y)qr.fitted(qr, y, k = qr$rank)qr.solve(a, b, tol = 1e-7)## S3 method for class 'qr'solve(a, b, ...)is.qr(x)as.qr(x)
qr(x, ...)## Default S3 method:qr(x, tol = 1e-07 , LAPACK = FALSE, ...)qr.coef(qr, y)qr.qy(qr, y)qr.qty(qr, y)qr.resid(qr, y)qr.fitted(qr, y, k = qr$rank)qr.solve(a, b, tol = 1e-7)## S3 method for class 'qr'solve(a, b, ...)is.qr(x)as.qr(x)
qr(x, ...)## Default S3 method:qr(x, tol = 1e-07 , LAPACK = FALSE, ...)qr.coef(qr, y)qr.qy(qr, y)qr.qty(qr, y)qr.resid(qr, y)qr.fitted(qr, y, k = qr$rank)qr.solve(a, b, tol = 1e-7)## S3 method for class 'qr'solve(a, b, ...)is.qr(x)as.qr(x)
qr.X(qr, complete = FALSE, ncol =)qr.Q(qr, complete = FALSE, Dvec =)qr.R(qr, complete = FALSE)
qr(x, ...)## Default S3 method:qr(x, tol = 1e-07 , LAPACK = FALSE, ...)qr.coef(qr, y)qr.qy(qr, y)qr.qty(qr, y)qr.resid(qr, y)qr.fitted(qr, y, k = qr$rank)qr.solve(a, b, tol = 1e-7)## S3 method for class 'qr'solve(a, b, ...)is.qr(x)as.qr(x)
qr(x, ...)## Default S3 method:qr(x, tol = 1e-07 , LAPACK = FALSE, ...)qr.coef(qr, y)qr.qy(qr, y)qr.qty(qr, y)qr.resid(qr, y)qr.fitted(qr, y, k = qr$rank)qr.solve(a, b, tol = 1e-7)## S3 method for class 'qr'solve(a, b, ...)is.qr(x)as.qr(x)
qr.X(qr, complete = FALSE, ncol =)qr.Q(qr, complete = FALSE, Dvec =)qr.R(qr, complete = FALSE)
qr(x, ...)## Default S3 method:qr(x, tol = 1e-07 , LAPACK = FALSE, ...)qr.coef(qr, y)qr.qy(qr, y)qr.qty(qr, y)qr.resid(qr, y)qr.fitted(qr, y, k = qr$rank)qr.solve(a, b, tol = 1e-7)## S3 method for class 'qr'solve(a, b, ...)is.qr(x)as.qr(x)
qr(x, ...)## Default S3 method:qr(x, tol = 1e-07 , LAPACK = FALSE, ...)qr.coef(qr, y)qr.qy(qr, y)qr.qty(qr, y)qr.resid(qr, y)qr.fitted(qr, y, k = qr$rank)qr.solve(a, b, tol = 1e-7)## S3 method for class 'qr'solve(a, b, ...)is.qr(x)as.qr(x)
qr.X(qr, complete = FALSE, ncol =)qr.Q(qr, complete = FALSE, Dvec =)qr.R(qr, complete = FALSE)
weekdays(x, abbreviate)## S3 method for class 'POSIXt'weekdays(x, abbreviate = FALSE)## S3 method for class 'Date'weekdays(x, abbreviate = FALSE)months(x, abbreviate)## S3 method for class 'POSIXt'months(x, abbreviate = FALSE)## S3 method for class 'Date'months(x, abbreviate = FALSE)quarters(x, abbreviate)## S3 method for class 'POSIXt'quarters(x, ...)## S3 method for class 'Date'quarters(x, ...)julian(x, ...)## S3 method for class 'POSIXt'julian(x, origin = as.POSIXct("1970-01-01", tz = "GMT"), ...)## S3 method for class 'Date'julian(x, origin = as.Date("1970-01-01"), ...)
weekdays(x, abbreviate)## S3 method for class 'POSIXt'weekdays(x, abbreviate = FALSE)## S3 method for class 'Date'weekdays(x, abbreviate = FALSE)months(x, abbreviate)## S3 method for class 'POSIXt'months(x, abbreviate = FALSE)## S3 method for class 'Date'months(x, abbreviate = FALSE)quarters(x, abbreviate)## S3 method for class 'POSIXt'quarters(x, ...)## S3 method for class 'Date'quarters(x, ...)julian(x, ...)## S3 method for class 'POSIXt'julian(x, origin = as.POSIXct("1970-01-01", tz = "GMT"), ...)## S3 method for class 'Date'julian(x, origin = as.Date("1970-01-01"), ...)
weekdays(x, abbreviate)## S3 method for class 'POSIXt'weekdays(x, abbreviate = FALSE)## S3 method for class 'Date'weekdays(x, abbreviate = FALSE)months(x, abbreviate)## S3 method for class 'POSIXt'months(x, abbreviate = FALSE)## S3 method for class 'Date'months(x, abbreviate = FALSE)quarters(x, abbreviate)## S3 method for class 'POSIXt'quarters(x, ...)## S3 method for class 'Date'quarters(x, ...)julian(x, ...)## S3 method for class 'POSIXt'julian(x, origin = as.POSIXct("1970-01-01", tz = "GMT"), ...)## S3 method for class 'Date'julian(x, origin = as.Date("1970-01-01"), ...)
quit(save = "default", status = 0, runLast = TRUE)   q(save = "default", status = 0, runLast = TRUE)
substitute(expr, env)quote(expr)enquote(cl)
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
R.home(component = "home")
R.Version()R.versionR.version.stringversion
R.Version()R.versionR.version.stringversion
R.Version()R.versionR.version.stringversion
range(..., na.rm = FALSE)## Default S3 method:range(..., na.rm = FALSE, finite = FALSE)
range(..., na.rm = FALSE)## Default S3 method:range(..., na.rm = FALSE, finite = FALSE)
rank(x, na.last = TRUE,     ties.method = c("average", "first", "last", "random", "max", "min"))
rapply(object, f, classes = "ANY", deflt = NULL,       how = c("unlist", "replace", "list"), ...)
raw(length = 0)as.raw(x)is.raw(x)
rawConnection(object, open = "r")rawConnectionValue(con)
rawConnection(object, open = "r")rawConnectionValue(con)
charToRaw(x)rawToChar(x, multiple = FALSE)rawShift(x, n)rawToBits(x)intToBits(x)packBits(x, type = c("raw", "integer", "double"))numToInts(x)numToBits(x)
charToRaw(x)rawToChar(x, multiple = FALSE)rawShift(x, n)rawToBits(x)intToBits(x)packBits(x, type = c("raw", "integer", "double"))numToInts(x)numToBits(x)
charToRaw(x)rawToChar(x, multiple = FALSE)rawShift(x, n)rawToBits(x)intToBits(x)packBits(x, type = c("raw", "integer", "double"))numToInts(x)numToBits(x)
cbind(..., deparse.level = 1)rbind(..., deparse.level = 1)## S3 method for class 'data.frame'rbind(..., deparse.level = 1, make.row.names = TRUE,      stringsAsFactors = FALSE, factor.exclude = TRUE)
cbind(..., deparse.level = 1)rbind(..., deparse.level = 1)## S3 method for class 'data.frame'rbind(..., deparse.level = 1, make.row.names = TRUE,      stringsAsFactors = FALSE, factor.exclude = TRUE)
kappa(z, ...)## Default S3 method:kappa(z, exact = FALSE,      norm = NULL, method = c("qr", "direct"), ...)## S3 method for class 'lm'kappa(z, ...)## S3 method for class 'qr'kappa(z, ...).kappa_tri(z, exact = FALSE, LINPACK = TRUE, norm = NULL, ...)rcond(x, norm = c("O","I","1"), triangular = FALSE, ...)
complex(length.out = 0, real = numeric(), imaginary = numeric(),        modulus = 1, argument = 0)as.complex(x, ...)is.complex(x)Re(z)Im(z)Mod(z)Arg(z)Conj(z)
read.dcf(file, fields = NULL, all = FALSE, keep.white = NULL)write.dcf(x, file = "", append = FALSE, useBytes = FALSE,          indent = 0.1 * getOption("width"),          width = 0.9 * getOption("width"),          keep.white = NULL)
readBin(con, what, n = 1L, size = NA_integer_, signed = TRUE,        endian = .Platform$endian)writeBin(object, con, size = NA_integer_,         endian = .Platform$endian, useBytes = FALSE)
readChar(con, nchars, useBytes = FALSE)writeChar(object, con, nchars = nchar(object, type = "chars"),          eos = "", useBytes = FALSE)
readline(prompt = "")
readLines(con = stdin(), n = -1L, ok = TRUE, warn = TRUE,          encoding = "unknown", skipNul = FALSE)
saveRDS(object, file = "", ascii = FALSE, version = NULL,        compress = TRUE, refhook = NULL)readRDS(file, refhook = NULL)infoRDS(file)
readRenviron(path)
Recall(...)
Reduce(f, x, init, right = FALSE, accumulate = FALSE)Filter(f, x)Find(f, x, right = FALSE, nomatch = NULL)Map(f, ...)Negate(f)Position(f, x, right = FALSE, nomatch = NA_integer_)
  reg.finalizer(e, f, onexit = FALSE)
grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE,     fixed = FALSE, useBytes = FALSE, invert = FALSE)grepl(pattern, x, ignore.case = FALSE, perl = FALSE,      fixed = FALSE, useBytes = FALSE)sub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,    fixed = FALSE, useBytes = FALSE)gsub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,     fixed = FALSE, useBytes = FALSE)regexpr(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)gregexpr(pattern, text, ignore.case = FALSE, perl = FALSE,         fixed = FALSE, useBytes = FALSE)regexec(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)gregexec(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)
grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE,     fixed = FALSE, useBytes = FALSE, invert = FALSE)grepl(pattern, x, ignore.case = FALSE, perl = FALSE,      fixed = FALSE, useBytes = FALSE)sub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,    fixed = FALSE, useBytes = FALSE)gsub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,     fixed = FALSE, useBytes = FALSE)regexpr(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)gregexpr(pattern, text, ignore.case = FALSE, perl = FALSE,         fixed = FALSE, useBytes = FALSE)regexec(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)gregexec(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)
asNamespace(ns, base.OK = TRUE)getNamespaceInfo (ns, which).getNamespaceInfo(ns, which)importIntoEnv(impenv, impnames, expenv, expnames)isBaseNamespace(ns)isNamespace(ns)namespaceExport(ns, vars)namespaceImport(self, ..., from = NULL, except = character(0L))namespaceImportFrom(self, ns, vars, generics, packages,                    from = "non-package environment",                    except = character(0L))namespaceImportClasses(self, ns, vars, from = NULL)namespaceImportMethods(self, ns, vars, from = NULL)packageHasNamespace(package, package.lib)parseNamespaceFile(package, package.lib, mustExist = TRUE)registerS3method(genname, class, method, envir = parent.frame())registerS3methods(info, package, env)setNamespaceInfo(ns, which, val).mergeExportMethods(new, ns).mergeImportMethods(impenv, expenv, metaname).knownS3GenericsloadingNamespaceInfo().getNamespace(name)..getNamespace(name, where)
asNamespace(ns, base.OK = TRUE)getNamespaceInfo (ns, which).getNamespaceInfo(ns, which)importIntoEnv(impenv, impnames, expenv, expnames)isBaseNamespace(ns)isNamespace(ns)namespaceExport(ns, vars)namespaceImport(self, ..., from = NULL, except = character(0L))namespaceImportFrom(self, ns, vars, generics, packages,                    from = "non-package environment",                    except = character(0L))namespaceImportClasses(self, ns, vars, from = NULL)namespaceImportMethods(self, ns, vars, from = NULL)packageHasNamespace(package, package.lib)parseNamespaceFile(package, package.lib, mustExist = TRUE)registerS3method(genname, class, method, envir = parent.frame())registerS3methods(info, package, env)setNamespaceInfo(ns, which, val).mergeExportMethods(new, ns).mergeImportMethods(impenv, expenv, metaname).knownS3GenericsloadingNamespaceInfo().getNamespace(name)..getNamespace(name, where)
regmatches(x, m, invert = FALSE)regmatches(x, m, invert = FALSE) <- value
regmatches(x, m, invert = FALSE)regmatches(x, m, invert = FALSE) <- value
remove(..., list = character(), pos = -1,       envir = as.environment(pos), inherits = FALSE)rm    (..., list = character(), pos = -1,       envir = as.environment(pos), inherits = FALSE)
addTaskCallback(f, data = NULL, name = character())removeTaskCallback(id)
rep(x, ...)rep.int(x, times)rep_len(x, length.out)
rep(x, ...)rep.int(x, times)rep_len(x, length.out)
rep(x, ...)rep.int(x, times)rep_len(x, length.out)
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
rep(x, ...)rep.int(x, times)rep_len(x, length.out)
rep(x, ...)rep.int(x, times)rep_len(x, length.out)
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
rep(x, ...)rep.int(x, times)rep_len(x, length.out)
rep(x, ...)rep.int(x, times)rep_len(x, length.out)
if(cond) exprif(cond) cons.expr  else  alt.exprfor(var in seq) exprwhile(cond) exprrepeat exprbreaknext
replace(x, list, values)
lapply(X, FUN, ...)sapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)vapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)replicate(n, expr, simplify = "array")simplify2array(x, higher = TRUE)
library(package, help, pos = 2, lib.loc = NULL,        character.only = FALSE, logical.return = FALSE,        warn.conflicts, quietly = FALSE,        verbose = getOption("verbose"),        mask.ok, exclude, include.only,        attach.required = missing(include.only))require(package, lib.loc = NULL, quietly = FALSE,        warn.conflicts,        character.only = FALSE,        mask.ok, exclude, include.only,        attach.required = missing(include.only))conflictRules(pkg, mask.ok = NULL, exclude = NULL)
attachNamespace(ns, pos = 2L, depends = NULL, exclude, include.only)loadNamespace(package, lib.loc = NULL,              keep.source = getOption("keep.source.pkgs"),              partial = FALSE, versionCheck = NULL,              keep.parse.data = getOption("keep.parse.data.pkgs"))requireNamespace(package, ..., quietly = FALSE)loadedNamespaces()unloadNamespace(ns)isNamespaceLoaded(name)
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
tracemem(x)untracemem(x)retracemem(x, previous = NULL)
function( arglist ) expr\( arglist ) exprreturn(value)
trace(what, tracer, exit, at, print, signature,      where = topenv(parent.frame()), edit = FALSE)untrace(what, signature = NULL, where = topenv(parent.frame()))tracingState(on = NULL).doTrace(expr, msg)returnValue(default = NULL)
rev(x)
rev(x)
rle(x)inverse.rle(x, ...)## S3 method for class 'rle'print(x, digits = getOption("digits"), prefix = "", ...)
remove(..., list = character(), pos = -1,       envir = as.environment(pos), inherits = FALSE)rm    (..., list = character(), pos = -1,       envir = as.environment(pos), inherits = FALSE)
.Random.seed <- c(rng.kind, n1, n2, ...)RNGkind(kind = NULL, normal.kind = NULL, sample.kind = NULL)RNGversion(vstr)set.seed(seed, kind = NULL, normal.kind = NULL, sample.kind = NULL)
.Random.seed <- c(rng.kind, n1, n2, ...)RNGkind(kind = NULL, normal.kind = NULL, sample.kind = NULL)RNGversion(vstr)set.seed(seed, kind = NULL, normal.kind = NULL, sample.kind = NULL)
ceiling(x)floor(x)trunc(x, ...)round(x, digits = 0)signif(x, digits = 6)
## S3 method for class 'POSIXt'round(x,      units = c("secs", "mins", "hours", "days", "months", "years"))## S3 method for class 'POSIXt'trunc(x,      units = c("secs", "mins", "hours", "days", "months", "years"),      ...)## S3 method for class 'Date'round(x, ...)## S3 method for class 'Date'trunc(x, ...)
## S3 method for class 'POSIXt'round(x,      units = c("secs", "mins", "hours", "days", "months", "years"))## S3 method for class 'POSIXt'trunc(x,      units = c("secs", "mins", "hours", "days", "months", "years"),      ...)## S3 method for class 'Date'round(x, ...)## S3 method for class 'Date'trunc(x, ...)
row(x, as.factor = FALSE).row(dim)
row.names(x)row.names(x) <- value.rowNamesDF(x, make.names=FALSE) <- value
row.names(x)row.names(x) <- value.rowNamesDF(x, make.names=FALSE) <- value
row.names(x)row.names(x) <- value.rowNamesDF(x, make.names=FALSE) <- value
row.names(x)row.names(x) <- value.rowNamesDF(x, make.names=FALSE) <- value
row.names(x)row.names(x) <- value.rowNamesDF(x, make.names=FALSE) <- value
row.names(x)row.names(x) <- value.rowNamesDF(x, make.names=FALSE) <- value
colSums (x, na.rm = FALSE, dims = 1)rowSums (x, na.rm = FALSE, dims = 1)colMeans(x, na.rm = FALSE, dims = 1)rowMeans(x, na.rm = FALSE, dims = 1).colSums(x, m, n, na.rm = FALSE).rowSums(x, m, n, na.rm = FALSE).colMeans(x, m, n, na.rm = FALSE).rowMeans(x, m, n, na.rm = FALSE)
rownames(x, do.NULL = TRUE, prefix = "row")rownames(x) <- valuecolnames(x, do.NULL = TRUE, prefix = "col")colnames(x) <- value
rownames(x, do.NULL = TRUE, prefix = "row")rownames(x) <- valuecolnames(x, do.NULL = TRUE, prefix = "col")colnames(x) <- value
rowsum(x, group, reorder = TRUE, ...)## S3 method for class 'data.frame'rowsum(x, group, reorder = TRUE, na.rm = FALSE, ...)## Default S3 method:rowsum(x, group, reorder = TRUE, na.rm = FALSE, ...)
rowsum(x, group, reorder = TRUE, ...)## S3 method for class 'data.frame'rowsum(x, group, reorder = TRUE, na.rm = FALSE, ...)## Default S3 method:rowsum(x, group, reorder = TRUE, na.rm = FALSE, ...)
rowsum(x, group, reorder = TRUE, ...)## S3 method for class 'data.frame'rowsum(x, group, reorder = TRUE, na.rm = FALSE, ...)## Default S3 method:rowsum(x, group, reorder = TRUE, na.rm = FALSE, ...)
colSums (x, na.rm = FALSE, dims = 1)rowSums (x, na.rm = FALSE, dims = 1)colMeans(x, na.rm = FALSE, dims = 1)rowMeans(x, na.rm = FALSE, dims = 1).colSums(x, m, n, na.rm = FALSE).rowSums(x, m, n, na.rm = FALSE).colMeans(x, m, n, na.rm = FALSE).rowMeans(x, m, n, na.rm = FALSE)
sample(x, size, replace = FALSE, prob = NULL)sample.int(n, size = n, replace = FALSE, prob = NULL,           useHash = (!replace && is.null(prob) && size <= n/2 && n > 1e7))
sample(x, size, replace = FALSE, prob = NULL)sample.int(n, size = n, replace = FALSE, prob = NULL,           useHash = (!replace && is.null(prob) && size <= n/2 && n > 1e7))
lapply(X, FUN, ...)sapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)vapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)replicate(n, expr, simplify = "array")simplify2array(x, higher = TRUE)
save(..., list = character(),     file = stop("'file' must be specified"),     ascii = FALSE, version = NULL, envir = parent.frame(),     compress = isTRUE(!ascii), compression_level,     eval.promises = TRUE, precheck = TRUE)save.image(file = ".RData", version = NULL, ascii = FALSE,           compress = !ascii, safe = TRUE)
save(..., list = character(),     file = stop("'file' must be specified"),     ascii = FALSE, version = NULL, envir = parent.frame(),     compress = isTRUE(!ascii), compression_level,     eval.promises = TRUE, precheck = TRUE)save.image(file = ".RData", version = NULL, ascii = FALSE,           compress = !ascii, safe = TRUE)
saveRDS(object, file = "", ascii = FALSE, version = NULL,        compress = TRUE, refhook = NULL)readRDS(file, refhook = NULL)infoRDS(file)
scale(x, center = TRUE, scale = TRUE)
scale(x, center = TRUE, scale = TRUE)
scan(file = "", what = double(), nmax = -1, n = -1, sep = "",     quote = if(identical(sep, "\n")) "" else "'\"", dec = ".",     skip = 0, nlines = 0, na.strings = "NA",     flush = FALSE, fill = FALSE, strip.white = FALSE,     quiet = FALSE, blank.lines.skip = TRUE, multi.line = TRUE,     comment.char = "", allowEscapes = FALSE,     fileEncoding = "", encoding = "unknown", text, skipNul = FALSE)
search()searchpaths()
search()searchpaths()
seek(con, ...)## S3 method for class 'connection'seek(con, where = NA, origin = "start", rw = "", ...)isSeekable(con)truncate(con, ...)
seek(con, ...)## S3 method for class 'connection'seek(con, where = NA, origin = "start", rw = "", ...)isSeekable(con)truncate(con, ...)
seq(...)## Default S3 method:seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)),    length.out = NULL, along.with = NULL, ...)seq.int(from, to, by, length.out, along.with, ...)seq_along(along.with)seq_len(length.out)
seq(...)## Default S3 method:seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)),    length.out = NULL, along.with = NULL, ...)seq.int(from, to, by, length.out, along.with, ...)seq_along(along.with)seq_len(length.out)
seq(...)## Default S3 method:seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)),    length.out = NULL, along.with = NULL, ...)seq.int(from, to, by, length.out, along.with, ...)seq_along(along.with)seq_len(length.out)
## S3 method for class 'Date'seq(from, to, by, length.out = NULL, along.with = NULL, ...)
seq(...)## Default S3 method:seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)),    length.out = NULL, along.with = NULL, ...)seq.int(from, to, by, length.out, along.with, ...)seq_along(along.with)seq_len(length.out)
seq(...)## Default S3 method:seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)),    length.out = NULL, along.with = NULL, ...)seq.int(from, to, by, length.out, along.with, ...)seq_along(along.with)seq_len(length.out)
## S3 method for class 'POSIXt'seq(from, to, by, length.out = NULL, along.with = NULL, ...)
sequence(nvec, ...)## Default S3 method:sequence(nvec, from = 1L, by = 1L, ...)
sequence(nvec, ...)## Default S3 method:sequence(nvec, from = 1L, by = 1L, ...)
serialize(object, connection, ascii, xdr = TRUE,          version = NULL, refhook = NULL)unserialize(connection, refhook = NULL)
file(description = "", open = "", blocking = TRUE,     encoding = getOption("encoding"), raw = FALSE,     method = getOption("url.method", "default"))url(description, open = "", blocking = TRUE,    encoding = getOption("encoding"),    method = getOption("url.method", "default"),    headers = NULL)gzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)bzfile(description, open = "", encoding = getOption("encoding"),       compression = 9)xzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)unz(description, filename, open = "", encoding = getOption("encoding"))pipe(description, open = "", encoding = getOption("encoding"))fifo(description, open = "", blocking = FALSE,     encoding = getOption("encoding"))socketConnection(host = "localhost", port, server = FALSE,                 blocking = FALSE, open = "a+",                 encoding = getOption("encoding"),                 timeout = getOption("timeout"),                 options = getOption("socketOptions"))serverSocket(port)socketAccept(socket, blocking = FALSE, open = "a+",             encoding = getOption("encoding"),             timeout = getOption("timeout"),             options = getOption("socketOptions"))open(con, ...)## S3 method for class 'connection'open(con, open = "r", blocking = TRUE, ...)close(con, ...)## S3 method for class 'connection'close(con, type = "rw", ...)flush(con)isOpen(con, rw = "")isIncomplete(con)socketTimeout(socket, timeout = -1)
.Random.seed <- c(rng.kind, n1, n2, ...)RNGkind(kind = NULL, normal.kind = NULL, sample.kind = NULL)RNGversion(vstr)set.seed(seed, kind = NULL, normal.kind = NULL, sample.kind = NULL)
union(x, y)intersect(x, y)setdiff(x, y)setequal(x, y)is.element(el, set)
union(x, y)intersect(x, y)setdiff(x, y)setequal(x, y)is.element(el, set)
getHook(hookName)setHook(hookName, value,        action = c("append", "prepend", "replace"))packageEvent(pkgname,             event = c("onLoad", "attach", "detach", "onUnload"))
asNamespace(ns, base.OK = TRUE)getNamespaceInfo (ns, which).getNamespaceInfo(ns, which)importIntoEnv(impenv, impnames, expenv, expnames)isBaseNamespace(ns)isNamespace(ns)namespaceExport(ns, vars)namespaceImport(self, ..., from = NULL, except = character(0L))namespaceImportFrom(self, ns, vars, generics, packages,                    from = "non-package environment",                    except = character(0L))namespaceImportClasses(self, ns, vars, from = NULL)namespaceImportMethods(self, ns, vars, from = NULL)packageHasNamespace(package, package.lib)parseNamespaceFile(package, package.lib, mustExist = TRUE)registerS3method(genname, class, method, envir = parent.frame())registerS3methods(info, package, env)setNamespaceInfo(ns, which, val).mergeExportMethods(new, ns).mergeImportMethods(impenv, expenv, metaname).knownS3GenericsloadingNamespaceInfo().getNamespace(name)..getNamespace(name, where)
setTimeLimit(cpu = Inf, elapsed = Inf, transient = FALSE)setSessionTimeLimit(cpu = Inf, elapsed = Inf)
setTimeLimit(cpu = Inf, elapsed = Inf, transient = FALSE)setSessionTimeLimit(cpu = Inf, elapsed = Inf)
getwd()setwd(dir)
showConnections(all = FALSE)getConnection(what)closeAllConnections()stdin()stdout()stderr()nullfile()isatty(con)
shQuote(string, type = c("sh", "csh", "cmd", "cmd2"))
sign(x)
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
ceiling(x)floor(x)trunc(x, ...)round(x, digits = 0)signif(x, digits = 6)
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
lapply(X, FUN, ...)sapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)vapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)replicate(n, expr, simplify = "array")simplify2array(x, higher = TRUE)
cos(x)sin(x)tan(x)acos(x)asin(x)atan(x)atan2(y, x)cospi(x)sinpi(x)tanpi(x)
double(length = 0)as.double(x, ...)is.double(x)single(length = 0)as.single(x, ...)
cosh(x)sinh(x)tanh(x)acosh(x)asinh(x)atanh(x)
sink(file = NULL, append = FALSE, type = c("output", "message"),     split = FALSE)sink.number(type = c("output", "message"))
sink(file = NULL, append = FALSE, type = c("output", "message"),     split = FALSE)sink.number(type = c("output", "message"))
cos(x)sin(x)tan(x)acos(x)asin(x)atan(x)atan2(y, x)cospi(x)sinpi(x)tanpi(x)
slice.index(x, MARGIN)
file(description = "", open = "", blocking = TRUE,     encoding = getOption("encoding"), raw = FALSE,     method = getOption("url.method", "default"))url(description, open = "", blocking = TRUE,    encoding = getOption("encoding"),    method = getOption("url.method", "default"),    headers = NULL)gzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)bzfile(description, open = "", encoding = getOption("encoding"),       compression = 9)xzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)unz(description, filename, open = "", encoding = getOption("encoding"))pipe(description, open = "", encoding = getOption("encoding"))fifo(description, open = "", blocking = FALSE,     encoding = getOption("encoding"))socketConnection(host = "localhost", port, server = FALSE,                 blocking = FALSE, open = "a+",                 encoding = getOption("encoding"),                 timeout = getOption("timeout"),                 options = getOption("socketOptions"))serverSocket(port)socketAccept(socket, blocking = FALSE, open = "a+",             encoding = getOption("encoding"),             timeout = getOption("timeout"),             options = getOption("socketOptions"))open(con, ...)## S3 method for class 'connection'open(con, open = "r", blocking = TRUE, ...)close(con, ...)## S3 method for class 'connection'close(con, type = "rw", ...)flush(con)isOpen(con, rw = "")isIncomplete(con)socketTimeout(socket, timeout = -1)
file(description = "", open = "", blocking = TRUE,     encoding = getOption("encoding"), raw = FALSE,     method = getOption("url.method", "default"))url(description, open = "", blocking = TRUE,    encoding = getOption("encoding"),    method = getOption("url.method", "default"),    headers = NULL)gzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)bzfile(description, open = "", encoding = getOption("encoding"),       compression = 9)xzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)unz(description, filename, open = "", encoding = getOption("encoding"))pipe(description, open = "", encoding = getOption("encoding"))fifo(description, open = "", blocking = FALSE,     encoding = getOption("encoding"))socketConnection(host = "localhost", port, server = FALSE,                 blocking = FALSE, open = "a+",                 encoding = getOption("encoding"),                 timeout = getOption("timeout"),                 options = getOption("socketOptions"))serverSocket(port)socketAccept(socket, blocking = FALSE, open = "a+",             encoding = getOption("encoding"),             timeout = getOption("timeout"),             options = getOption("socketOptions"))open(con, ...)## S3 method for class 'connection'open(con, open = "r", blocking = TRUE, ...)close(con, ...)## S3 method for class 'connection'close(con, type = "rw", ...)flush(con)isOpen(con, rw = "")isIncomplete(con)socketTimeout(socket, timeout = -1)
socketSelect(socklist, write = FALSE, timeout = NULL)
file(description = "", open = "", blocking = TRUE,     encoding = getOption("encoding"), raw = FALSE,     method = getOption("url.method", "default"))url(description, open = "", blocking = TRUE,    encoding = getOption("encoding"),    method = getOption("url.method", "default"),    headers = NULL)gzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)bzfile(description, open = "", encoding = getOption("encoding"),       compression = 9)xzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)unz(description, filename, open = "", encoding = getOption("encoding"))pipe(description, open = "", encoding = getOption("encoding"))fifo(description, open = "", blocking = FALSE,     encoding = getOption("encoding"))socketConnection(host = "localhost", port, server = FALSE,                 blocking = FALSE, open = "a+",                 encoding = getOption("encoding"),                 timeout = getOption("timeout"),                 options = getOption("socketOptions"))serverSocket(port)socketAccept(socket, blocking = FALSE, open = "a+",             encoding = getOption("encoding"),             timeout = getOption("timeout"),             options = getOption("socketOptions"))open(con, ...)## S3 method for class 'connection'open(con, open = "r", blocking = TRUE, ...)close(con, ...)## S3 method for class 'connection'close(con, type = "rw", ...)flush(con)isOpen(con, rw = "")isIncomplete(con)socketTimeout(socket, timeout = -1)
solve(a, b, ...)## Default S3 method:solve(a, b, tol, LINPACK = FALSE, ...)
solve(a, b, ...)## Default S3 method:solve(a, b, tol, LINPACK = FALSE, ...)
qr(x, ...)## Default S3 method:qr(x, tol = 1e-07 , LAPACK = FALSE, ...)qr.coef(qr, y)qr.qy(qr, y)qr.qty(qr, y)qr.resid(qr, y)qr.fitted(qr, y, k = qr$rank)qr.solve(a, b, tol = 1e-7)## S3 method for class 'qr'solve(a, b, ...)is.qr(x)as.qr(x)
sort(x, decreasing = FALSE, ...)## Default S3 method:sort(x, decreasing = FALSE, na.last = NA, ...)sort.int(x, partial = NULL, na.last = NA, decreasing = FALSE,         method = c("auto", "shell", "quick", "radix"), index.return = FALSE)
sort(x, decreasing = FALSE, ...)## Default S3 method:sort(x, decreasing = FALSE, na.last = NA, ...)sort.int(x, partial = NULL, na.last = NA, decreasing = FALSE,         method = c("auto", "shell", "quick", "radix"), index.return = FALSE)
sort(x, decreasing = FALSE, ...)## Default S3 method:sort(x, decreasing = FALSE, na.last = NA, ...)sort.int(x, partial = NULL, na.last = NA, decreasing = FALSE,         method = c("auto", "shell", "quick", "radix"), index.return = FALSE)
order(..., na.last = TRUE, decreasing = FALSE,      method = c("auto", "shell", "radix"))sort.list(x, partial = NULL, na.last = TRUE, decreasing = FALSE,          method = c("auto", "shell", "quick", "radix"))
sort(x, decreasing = FALSE, ...)## Default S3 method:sort(x, decreasing = FALSE, na.last = NA, ...)sort.int(x, partial = NULL, na.last = NA, decreasing = FALSE,         method = c("auto", "shell", "quick", "radix"), index.return = FALSE)
source(file, local = FALSE, echo = verbose, print.eval = echo,       exprs, spaced = use_file,       verbose = getOption("verbose"),       prompt.echo = getOption("prompt"),       max.deparse.length = 150, width.cutoff = 60L,       deparseCtrl = "showAttributes",       chdir = FALSE,       encoding = getOption("encoding"),       continue.echo = getOption("continue"),       skip.echo = 0, keep.source = getOption("keep.source"))withAutoprint(exprs, evaluated = FALSE, local = parent.frame(),              print. = TRUE, echo = TRUE, max.deparse.length = Inf,              width.cutoff = max(20, getOption("width")),              deparseCtrl = c("keepInteger", "showAttributes", "keepNA"),              ...)
split(x, f, drop = FALSE, ...)## Default S3 method:split(x, f, drop = FALSE, sep = ".", lex.order = FALSE, ...)split(x, f, drop = FALSE, ...) <- valueunsplit(value, f, drop = FALSE)
split(x, f, drop = FALSE, ...)## Default S3 method:split(x, f, drop = FALSE, sep = ".", lex.order = FALSE, ...)split(x, f, drop = FALSE, ...) <- valueunsplit(value, f, drop = FALSE)
## S3 method for class 'Date'summary(object, digits = 12, ...)## S3 method for class 'Date'print(x, max = NULL, ...)
split(x, f, drop = FALSE, ...)## Default S3 method:split(x, f, drop = FALSE, sep = ".", lex.order = FALSE, ...)split(x, f, drop = FALSE, ...) <- valueunsplit(value, f, drop = FALSE)
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
split(x, f, drop = FALSE, ...)## Default S3 method:split(x, f, drop = FALSE, sep = ".", lex.order = FALSE, ...)split(x, f, drop = FALSE, ...) <- valueunsplit(value, f, drop = FALSE)
split(x, f, drop = FALSE, ...)## Default S3 method:split(x, f, drop = FALSE, sep = ".", lex.order = FALSE, ...)split(x, f, drop = FALSE, ...) <- valueunsplit(value, f, drop = FALSE)
split(x, f, drop = FALSE, ...)## Default S3 method:split(x, f, drop = FALSE, sep = ".", lex.order = FALSE, ...)split(x, f, drop = FALSE, ...) <- valueunsplit(value, f, drop = FALSE)
sprintf(fmt, ...)gettextf(fmt, ..., domain = NULL)
abs(x)sqrt(x)
sQuote(x, q = getOption("useFancyQuotes"))dQuote(x, q = getOption("useFancyQuotes"))
srcfile(filename, encoding = getOption("encoding"), Enc = "unknown")srcfilecopy(filename, lines, timestamp = Sys.time(), isFile = FALSE)srcfilealias(filename, srcfile)getSrcLines(srcfile, first, last)srcref(srcfile, lloc)## S3 method for class 'srcfile'print(x, ...)## S3 method for class 'srcfile'summary(object, ...)## S3 method for class 'srcfile'open(con, line, ...)## S3 method for class 'srcfile'close(con, ...)## S3 method for class 'srcref'print(x, useSource = TRUE, ...)## S3 method for class 'srcref'summary(object, useSource = FALSE, ...)## S3 method for class 'srcref'as.character(x, useSource = TRUE, to = x, ...).isOpen(srcfile)
srcfile(filename, encoding = getOption("encoding"), Enc = "unknown")srcfilecopy(filename, lines, timestamp = Sys.time(), isFile = FALSE)srcfilealias(filename, srcfile)getSrcLines(srcfile, first, last)srcref(srcfile, lloc)## S3 method for class 'srcfile'print(x, ...)## S3 method for class 'srcfile'summary(object, ...)## S3 method for class 'srcfile'open(con, line, ...)## S3 method for class 'srcfile'close(con, ...)## S3 method for class 'srcref'print(x, useSource = TRUE, ...)## S3 method for class 'srcref'summary(object, useSource = FALSE, ...)## S3 method for class 'srcref'as.character(x, useSource = TRUE, to = x, ...).isOpen(srcfile)
srcfile(filename, encoding = getOption("encoding"), Enc = "unknown")srcfilecopy(filename, lines, timestamp = Sys.time(), isFile = FALSE)srcfilealias(filename, srcfile)getSrcLines(srcfile, first, last)srcref(srcfile, lloc)## S3 method for class 'srcfile'print(x, ...)## S3 method for class 'srcfile'summary(object, ...)## S3 method for class 'srcfile'open(con, line, ...)## S3 method for class 'srcfile'close(con, ...)## S3 method for class 'srcref'print(x, useSource = TRUE, ...)## S3 method for class 'srcref'summary(object, useSource = FALSE, ...)## S3 method for class 'srcref'as.character(x, useSource = TRUE, to = x, ...).isOpen(srcfile)
srcfile(filename, encoding = getOption("encoding"), Enc = "unknown")srcfilecopy(filename, lines, timestamp = Sys.time(), isFile = FALSE)srcfilealias(filename, srcfile)getSrcLines(srcfile, first, last)srcref(srcfile, lloc)## S3 method for class 'srcfile'print(x, ...)## S3 method for class 'srcfile'summary(object, ...)## S3 method for class 'srcfile'open(con, line, ...)## S3 method for class 'srcfile'close(con, ...)## S3 method for class 'srcref'print(x, useSource = TRUE, ...)## S3 method for class 'srcref'summary(object, useSource = FALSE, ...)## S3 method for class 'srcref'as.character(x, useSource = TRUE, to = x, ...).isOpen(srcfile)
standardGeneric(f, fdef)
startsWith(x, prefix)  endsWith(x, suffix)
showConnections(all = FALSE)getConnection(what)closeAllConnections()stdin()stdout()stderr()nullfile()isatty(con)
showConnections(all = FALSE)getConnection(what)closeAllConnections()stdin()stdout()stderr()nullfile()isatty(con)
showConnections(all = FALSE)getConnection(what)closeAllConnections()stdin()stdout()stderr()nullfile()isatty(con)
stop(..., call. = TRUE, domain = NULL)geterrmessage()
stopifnot(..., exprs, exprObject, local = TRUE)
mode(x)mode(x) <- valuestorage.mode(x)storage.mode(x) <- value
mode(x)mode(x) <- valuestorage.mode(x)storage.mode(x) <- value
parse(file = "", n = NULL, text = NULL, prompt = "?",      keep.source = getOption("keep.source"), srcfile,      encoding = "unknown")str2lang(s)str2expression(text)
parse(file = "", n = NULL, text = NULL, prompt = "?",      keep.source = getOption("keep.source"), srcfile,      encoding = "unknown")str2lang(s)str2expression(text)
## S3 method for class 'POSIXct'format(x, format = "", tz = "", usetz = FALSE, ...)## S3 method for class 'POSIXlt'format(x, format = "", usetz = FALSE, ...)## S3 method for class 'POSIXt'as.character(x, ...)strftime(x, format = "", tz = "", usetz = FALSE, ...)strptime(x, format, tz = "")
## S3 method for class 'POSIXct'format(x, format = "", tz = "", usetz = FALSE, ...)## S3 method for class 'POSIXlt'format(x, format = "", usetz = FALSE, ...)## S3 method for class 'POSIXt'as.character(x, ...)strftime(x, format = "", tz = "", usetz = FALSE, ...)strptime(x, format, tz = "")
strrep(x, times)
strsplit(x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE)
strtoi(x, base = 0L)
strtrim(x, width)
structure(.Data, ...)
strwrap(x, width = 0.9 * getOption("width"), indent = 0,        exdent = 0, prefix = "", simplify = TRUE, initial = prefix)
grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE,     fixed = FALSE, useBytes = FALSE, invert = FALSE)grepl(pattern, x, ignore.case = FALSE, perl = FALSE,      fixed = FALSE, useBytes = FALSE)sub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,    fixed = FALSE, useBytes = FALSE)gsub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE,     fixed = FALSE, useBytes = FALSE)regexpr(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)gregexpr(pattern, text, ignore.case = FALSE, perl = FALSE,         fixed = FALSE, useBytes = FALSE)regexec(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)gregexec(pattern, text, ignore.case = FALSE, perl = FALSE,        fixed = FALSE, useBytes = FALSE)
subset(x, ...)## Default S3 method:subset(x, subset, ...)## S3 method for class 'matrix'subset(x, subset, select, drop = FALSE, ...)## S3 method for class 'data.frame'subset(x, subset, select, drop = FALSE, ...)
subset(x, ...)## Default S3 method:subset(x, subset, ...)## S3 method for class 'matrix'subset(x, subset, select, drop = FALSE, ...)## S3 method for class 'data.frame'subset(x, subset, select, drop = FALSE, ...)
subset(x, ...)## Default S3 method:subset(x, subset, ...)## S3 method for class 'matrix'subset(x, subset, select, drop = FALSE, ...)## S3 method for class 'data.frame'subset(x, subset, select, drop = FALSE, ...)
subset(x, ...)## Default S3 method:subset(x, subset, ...)## S3 method for class 'matrix'subset(x, subset, select, drop = FALSE, ...)## S3 method for class 'data.frame'subset(x, subset, select, drop = FALSE, ...)
substitute(expr, env)quote(expr)enquote(cl)
substr(x, start, stop)substring(text, first, last = 1000000L)substr(x, start, stop) <- valuesubstring(text, first, last = 1000000L) <- value
substr(x, start, stop)substring(text, first, last = 1000000L)substr(x, start, stop) <- valuesubstring(text, first, last = 1000000L) <- value
substr(x, start, stop)substring(text, first, last = 1000000L)substr(x, start, stop) <- valuesubstring(text, first, last = 1000000L) <- value
substr(x, start, stop)substring(text, first, last = 1000000L)substr(x, start, stop) <- valuesubstring(text, first, last = 1000000L) <- value
sum(..., na.rm = FALSE)
summary(object, ...)## Default S3 method:summary(object, ..., digits, quantile.type = 7)## S3 method for class 'data.frame'summary(object, maxsum = 7,       digits = max(3, getOption("digits")-3), ...)## S3 method for class 'factor'summary(object, maxsum = 100, ...)## S3 method for class 'matrix'summary(object, ...)## S3 method for class 'summaryDefault'format(x, digits = max(3L, getOption("digits") - 3L), ...) ## S3 method for class 'summaryDefault'print(x, digits = max(3L, getOption("digits") - 3L), ...)
file(description = "", open = "", blocking = TRUE,     encoding = getOption("encoding"), raw = FALSE,     method = getOption("url.method", "default"))url(description, open = "", blocking = TRUE,    encoding = getOption("encoding"),    method = getOption("url.method", "default"),    headers = NULL)gzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)bzfile(description, open = "", encoding = getOption("encoding"),       compression = 9)xzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)unz(description, filename, open = "", encoding = getOption("encoding"))pipe(description, open = "", encoding = getOption("encoding"))fifo(description, open = "", blocking = FALSE,     encoding = getOption("encoding"))socketConnection(host = "localhost", port, server = FALSE,                 blocking = FALSE, open = "a+",                 encoding = getOption("encoding"),                 timeout = getOption("timeout"),                 options = getOption("socketOptions"))serverSocket(port)socketAccept(socket, blocking = FALSE, open = "a+",             encoding = getOption("encoding"),             timeout = getOption("timeout"),             options = getOption("socketOptions"))open(con, ...)## S3 method for class 'connection'open(con, open = "r", blocking = TRUE, ...)close(con, ...)## S3 method for class 'connection'close(con, type = "rw", ...)flush(con)isOpen(con, rw = "")isIncomplete(con)socketTimeout(socket, timeout = -1)
summary(object, ...)## Default S3 method:summary(object, ..., digits, quantile.type = 7)## S3 method for class 'data.frame'summary(object, maxsum = 7,       digits = max(3, getOption("digits")-3), ...)## S3 method for class 'factor'summary(object, maxsum = 100, ...)## S3 method for class 'matrix'summary(object, ...)## S3 method for class 'summaryDefault'format(x, digits = max(3L, getOption("digits") - 3L), ...) ## S3 method for class 'summaryDefault'print(x, digits = max(3L, getOption("digits") - 3L), ...)
## S3 methods for group generics have prototypes:Math(x, ...)Ops(e1, e2)Complex(z)Summary(..., na.rm = FALSE)
## S3 method for class 'Date'summary(object, digits = 12, ...)## S3 method for class 'Date'print(x, max = NULL, ...)
## S3 method for class 'Date'summary(object, digits = 12, ...)## S3 method for class 'Date'print(x, max = NULL, ...)
summary(object, ...)## Default S3 method:summary(object, ..., digits, quantile.type = 7)## S3 method for class 'data.frame'summary(object, maxsum = 7,       digits = max(3, getOption("digits")-3), ...)## S3 method for class 'factor'summary(object, maxsum = 100, ...)## S3 method for class 'matrix'summary(object, ...)## S3 method for class 'summaryDefault'format(x, digits = max(3L, getOption("digits") - 3L), ...) ## S3 method for class 'summaryDefault'print(x, digits = max(3L, getOption("digits") - 3L), ...)
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
summary(object, ...)## Default S3 method:summary(object, ..., digits, quantile.type = 7)## S3 method for class 'data.frame'summary(object, maxsum = 7,       digits = max(3, getOption("digits")-3), ...)## S3 method for class 'factor'summary(object, maxsum = 100, ...)## S3 method for class 'matrix'summary(object, ...)## S3 method for class 'summaryDefault'format(x, digits = max(3L, getOption("digits") - 3L), ...) ## S3 method for class 'summaryDefault'print(x, digits = max(3L, getOption("digits") - 3L), ...)
factor(x = character(), levels, labels = levels,       exclude = NA, ordered = is.ordered(x), nmax = NA)ordered(x, ...)is.factor(x)is.ordered(x)as.factor(x)as.ordered(x)addNA(x, ifany = FALSE)
summary(object, ...)## Default S3 method:summary(object, ..., digits, quantile.type = 7)## S3 method for class 'data.frame'summary(object, maxsum = 7,       digits = max(3, getOption("digits")-3), ...)## S3 method for class 'factor'summary(object, maxsum = 100, ...)## S3 method for class 'matrix'summary(object, ...)## S3 method for class 'summaryDefault'format(x, digits = max(3L, getOption("digits") - 3L), ...) ## S3 method for class 'summaryDefault'print(x, digits = max(3L, getOption("digits") - 3L), ...)
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
factor(x = character(), levels, labels = levels,       exclude = NA, ordered = is.ordered(x), nmax = NA)ordered(x, ...)is.factor(x)is.ordered(x)as.factor(x)as.ordered(x)addNA(x, ifany = FALSE)
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
proc.time()
srcfile(filename, encoding = getOption("encoding"), Enc = "unknown")srcfilecopy(filename, lines, timestamp = Sys.time(), isFile = FALSE)srcfilealias(filename, srcfile)getSrcLines(srcfile, first, last)srcref(srcfile, lloc)## S3 method for class 'srcfile'print(x, ...)## S3 method for class 'srcfile'summary(object, ...)## S3 method for class 'srcfile'open(con, line, ...)## S3 method for class 'srcfile'close(con, ...)## S3 method for class 'srcref'print(x, useSource = TRUE, ...)## S3 method for class 'srcref'summary(object, useSource = FALSE, ...)## S3 method for class 'srcref'as.character(x, useSource = TRUE, to = x, ...).isOpen(srcfile)
srcfile(filename, encoding = getOption("encoding"), Enc = "unknown")srcfilecopy(filename, lines, timestamp = Sys.time(), isFile = FALSE)srcfilealias(filename, srcfile)getSrcLines(srcfile, first, last)srcref(srcfile, lloc)## S3 method for class 'srcfile'print(x, ...)## S3 method for class 'srcfile'summary(object, ...)## S3 method for class 'srcfile'open(con, line, ...)## S3 method for class 'srcfile'close(con, ...)## S3 method for class 'srcref'print(x, useSource = TRUE, ...)## S3 method for class 'srcref'summary(object, useSource = FALSE, ...)## S3 method for class 'srcref'as.character(x, useSource = TRUE, to = x, ...).isOpen(srcfile)
table(...,      exclude = if (useNA == "no") c(NA, NaN),      useNA = c("no", "ifany", "always"),      dnn = list.names(...), deparse.level = 1)as.table(x, ...)is.table(x)## S3 method for class 'table'as.data.frame(x, row.names = NULL, ...,              responseName = "Freq", stringsAsFactors = TRUE,              sep = "", base = list(LETTERS))
warnings(...)## S3 method for class 'warnings'summary(object, ...)## S3 method for class 'warnings'print(x, tags,      header = ngettext(n, "Warning message:\n", "Warning messages:\n"),      ...)## S3 method for class 'summary.warnings'print(x, ...)
message(..., domain = NULL, appendLF = TRUE)suppressMessages(expr, classes = "message")packageStartupMessage(..., domain = NULL, appendLF = TRUE)suppressPackageStartupMessages(expr).makeMessage(..., domain = NULL, appendLF = FALSE)
message(..., domain = NULL, appendLF = TRUE)suppressMessages(expr, classes = "message")packageStartupMessage(..., domain = NULL, appendLF = TRUE)suppressPackageStartupMessages(expr).makeMessage(..., domain = NULL, appendLF = FALSE)
warning(..., call. = TRUE, immediate. = FALSE, noBreaks. = FALSE,        domain = NULL)suppressWarnings(expr, classes = "warning")
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
svd(x, nu = min(n, p), nv = min(n, p), LINPACK = FALSE)La.svd(x, nu = min(n, p), nv = min(n, p))
sweep(x, MARGIN, STATS, FUN = "-", check.margin = TRUE, ...)
switch(EXPR, ...)
sys.call(which = 0)sys.frame(which = 0)sys.nframe()sys.function(which = 0)sys.parent(n = 1)sys.calls()sys.frames()sys.parents()sys.on.exit()sys.status()parent.frame(n = 1)
sys.call(which = 0)sys.frame(which = 0)sys.nframe()sys.function(which = 0)sys.parent(n = 1)sys.calls()sys.frames()sys.parents()sys.on.exit()sys.status()parent.frame(n = 1)
dir.exists(paths)dir.create(path, showWarnings = TRUE, recursive = FALSE, mode = "0777")Sys.chmod(paths, mode = "0777", use_umask = TRUE)Sys.umask(mode = NA)
Sys.time()Sys.Date()
sys.call(which = 0)sys.frame(which = 0)sys.nframe()sys.function(which = 0)sys.parent(n = 1)sys.calls()sys.frames()sys.parents()sys.on.exit()sys.status()parent.frame(n = 1)
sys.call(which = 0)sys.frame(which = 0)sys.nframe()sys.function(which = 0)sys.parent(n = 1)sys.calls()sys.frames()sys.parents()sys.on.exit()sys.status()parent.frame(n = 1)
sys.call(which = 0)sys.frame(which = 0)sys.nframe()sys.function(which = 0)sys.parent(n = 1)sys.calls()sys.frames()sys.parents()sys.on.exit()sys.status()parent.frame(n = 1)
Sys.getenv(x = NULL, unset = "", names = NA)
Sys.getlocale(category = "LC_ALL")Sys.setlocale(category = "LC_ALL", locale = "")
Sys.getpid()
Sys.glob(paths, dirmark = FALSE)
Sys.info()
.subset(x, ...).subset2(x, ...).getRequiredPackages(file = "DESCRIPTION", lib.loc = NULL,                     quietly = FALSE, useImports = FALSE).getRequiredPackages2(pkgInfo, quietly = FALSE, lib.loc = NULL,                      useImports = FALSE).isMethodsDispatchOn(onOff = NULL)sys.load.image(name, quiet)sys.save.image(name).row_names_info(x, type = 1L).set_row_names(n)findPackageEnv(info)lazyLoadDBfetch(key, file, compressed, hook).TAOCP1997init(seed).gt(x, i, j).gtn(x, strictly).primTrace(obj).primUntrace(obj).Date(xx, cl = "Date").POSIXct(xx, tz = NULL, cl = c("POSIXct", "POSIXt")).POSIXlt(xx, tz = NULL, cl = c("POSIXlt", "POSIXt")).difftime(xx, units, cl = "difftime").cache_class(class, extends).popath.detach(pos).maskedMsg(same, pkg, by)## Only on Windows:.fixupGFortranStdout().fixupGFortranStderr()
Sys.localeconv()
sys.call(which = 0)sys.frame(which = 0)sys.nframe()sys.function(which = 0)sys.parent(n = 1)sys.calls()sys.frames()sys.parents()sys.on.exit()sys.status()parent.frame(n = 1)
sys.call(which = 0)sys.frame(which = 0)sys.nframe()sys.function(which = 0)sys.parent(n = 1)sys.calls()sys.frames()sys.parents()sys.on.exit()sys.status()parent.frame(n = 1)
sys.call(which = 0)sys.frame(which = 0)sys.nframe()sys.function(which = 0)sys.parent(n = 1)sys.calls()sys.frames()sys.parents()sys.on.exit()sys.status()parent.frame(n = 1)
sys.call(which = 0)sys.frame(which = 0)sys.nframe()sys.function(which = 0)sys.parent(n = 1)sys.calls()sys.frames()sys.parents()sys.on.exit()sys.status()parent.frame(n = 1)
Sys.readlink(paths)
.subset(x, ...).subset2(x, ...).getRequiredPackages(file = "DESCRIPTION", lib.loc = NULL,                     quietly = FALSE, useImports = FALSE).getRequiredPackages2(pkgInfo, quietly = FALSE, lib.loc = NULL,                      useImports = FALSE).isMethodsDispatchOn(onOff = NULL)sys.load.image(name, quiet)sys.save.image(name).row_names_info(x, type = 1L).set_row_names(n)findPackageEnv(info)lazyLoadDBfetch(key, file, compressed, hook).TAOCP1997init(seed).gt(x, i, j).gtn(x, strictly).primTrace(obj).primUntrace(obj).Date(xx, cl = "Date").POSIXct(xx, tz = NULL, cl = c("POSIXct", "POSIXt")).POSIXlt(xx, tz = NULL, cl = c("POSIXlt", "POSIXt")).difftime(xx, units, cl = "difftime").cache_class(class, extends).popath.detach(pos).maskedMsg(same, pkg, by)## Only on Windows:.fixupGFortranStdout().fixupGFortranStderr()
Sys.setenv(...)Sys.unsetenv(x)
Sys.setFileTime(path, time)
Sys.getlocale(category = "LC_ALL")Sys.setlocale(category = "LC_ALL", locale = "")
Sys.sleep(time)
sys.source(file, envir = baseenv(), chdir = FALSE,           keep.source = getOption("keep.source.pkgs"),           keep.parse.data = getOption("keep.parse.data.pkgs"),           toplevel.env = as.environment(envir))
sys.call(which = 0)sys.frame(which = 0)sys.nframe()sys.function(which = 0)sys.parent(n = 1)sys.calls()sys.frames()sys.parents()sys.on.exit()sys.status()parent.frame(n = 1)
Sys.time()Sys.Date()
Sys.timezone(location = TRUE)OlsonNames(tzdir = NULL)
dir.exists(paths)dir.create(path, showWarnings = TRUE, recursive = FALSE, mode = "0777")Sys.chmod(paths, mode = "0777", use_umask = TRUE)Sys.umask(mode = NA)
Sys.setenv(...)Sys.unsetenv(x)
Sys.which(names)
system(command, intern = FALSE,       ignore.stdout = FALSE, ignore.stderr = FALSE,       wait = TRUE, input = NULL, show.output.on.console = TRUE,       minimized = FALSE, invisible = TRUE, timeout = 0)
system.file(..., package = "base", lib.loc = NULL,            mustWork = FALSE)
system.time(expr, gcFirst = TRUE)
system2(command, args = character(),        stdout = "", stderr = "", stdin = "", input = NULL,        env = character(), wait = TRUE,        minimized = FALSE, invisible = TRUE, timeout = 0)
t(x)
TRUEFALSET; Flogical(length = 0)as.logical(x, ...)is.logical(x)
t(x)
t(x)
table(...,      exclude = if (useNA == "no") c(NA, NaN),      useNA = c("no", "ifany", "always"),      dnn = list.names(...), deparse.level = 1)as.table(x, ...)is.table(x)## S3 method for class 'table'as.data.frame(x, row.names = NULL, ...,              responseName = "Freq", stringsAsFactors = TRUE,              sep = "", base = list(LETTERS))
tabulate(bin, nbins = max(1, bin, na.rm = TRUE))
cos(x)sin(x)tan(x)acos(x)asin(x)atan(x)atan2(y, x)cospi(x)sinpi(x)tanpi(x)
cosh(x)sinh(x)tanh(x)acosh(x)asinh(x)atanh(x)
cos(x)sin(x)tan(x)acos(x)asin(x)atan(x)atan2(y, x)cospi(x)sinpi(x)tanpi(x)
tapply(X, INDEX, FUN = NULL, ..., default = NA, simplify = TRUE)
taskCallbackManager(handlers = list(), registered = FALSE,                    verbose = FALSE)
crossprod(x, y = NULL)tcrossprod(x, y = NULL)
tempfile(pattern = "file", tmpdir = tempdir(), fileext = "")tempdir(check = FALSE)
tempfile(pattern = "file", tmpdir = tempdir(), fileext = "")tempdir(check = FALSE)
textConnection(object, open = "r", local = FALSE,               name = deparse(substitute(object)),               encoding = c("", "bytes", "UTF-8"))textConnectionValue(con)
textConnection(object, open = "r", local = FALSE,               name = deparse(substitute(object)),               encoding = c("", "bytes", "UTF-8"))textConnectionValue(con)
chartr(old, new, x)tolower(x)toupper(x)casefold(x, upper = FALSE)
topenv(envir = parent.frame(),       matchThisEnv = getOption("topLevelEnvironment"))
toString(x, ...)## Default S3 method:toString(x, width = NULL, ...)
toString(x, ...)## Default S3 method:toString(x, width = NULL, ...)
chartr(old, new, x)tolower(x)toupper(x)casefold(x, upper = FALSE)
trace(what, tracer, exit, at, print, signature,      where = topenv(parent.frame()), edit = FALSE)untrace(what, signature = NULL, where = topenv(parent.frame()))tracingState(on = NULL).doTrace(expr, msg)returnValue(default = NULL)
 traceback(x = NULL, max.lines = getOption("traceback.max.lines",                                           getOption("deparse.max.lines", -1L))).traceback(x = NULL, max.lines = getOption("traceback.max.lines",                                           getOption("deparse.max.lines", -1L)))
tracemem(x)untracemem(x)retracemem(x, previous = NULL)
trace(what, tracer, exit, at, print, signature,      where = topenv(parent.frame()), edit = FALSE)untrace(what, signature = NULL, where = topenv(parent.frame()))tracingState(on = NULL).doTrace(expr, msg)returnValue(default = NULL)
transform(`_data`, ...)
transform(`_data`, ...)
transform(`_data`, ...)
beta(a, b)lbeta(a, b)gamma(x)lgamma(x)psigamma(x, deriv = 0)digamma(x)trigamma(x)choose(n, k)lchoose(n, k)factorial(x)lfactorial(x)
trimws(x, which = c("both", "left", "right"), whitespace = "[ \t\r\n]")
ceiling(x)floor(x)trunc(x, ...)round(x, digits = 0)signif(x, digits = 6)
## S3 method for class 'POSIXt'round(x,      units = c("secs", "mins", "hours", "days", "months", "years"))## S3 method for class 'POSIXt'trunc(x,      units = c("secs", "mins", "hours", "days", "months", "years"),      ...)## S3 method for class 'Date'round(x, ...)## S3 method for class 'Date'trunc(x, ...)
## S3 method for class 'POSIXt'round(x,      units = c("secs", "mins", "hours", "days", "months", "years"))## S3 method for class 'POSIXt'trunc(x,      units = c("secs", "mins", "hours", "days", "months", "years"),      ...)## S3 method for class 'Date'round(x, ...)## S3 method for class 'Date'trunc(x, ...)
seek(con, ...)## S3 method for class 'connection'seek(con, where = NA, origin = "start", rw = "", ...)isSeekable(con)truncate(con, ...)
seek(con, ...)## S3 method for class 'connection'seek(con, where = NA, origin = "start", rw = "", ...)isSeekable(con)truncate(con, ...)
try(expr, silent = FALSE,    outFile = getOption("try.outFile", default = stderr()))
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
typeof(x)
class(x)class(x) <- valueunclass(x)inherits(x, what, which = FALSE)isa(x, what)oldClass(x)oldClass(x) <- value.class2(x)
debug(fun, text = "", condition = NULL, signature = NULL)debugonce(fun, text = "", condition = NULL, signature = NULL)undebug(fun, signature = NULL)isdebugged(fun, signature = NULL)debuggingState(on = NULL)
union(x, y)intersect(x, y)setdiff(x, y)setequal(x, y)is.element(el, set)
unique(x, incomparables = FALSE, ...)## Default S3 method:unique(x, incomparables = FALSE, fromLast = FALSE,        nmax = NA, ...)## S3 method for class 'matrix'unique(x, incomparables = FALSE, MARGIN = 1,       fromLast = FALSE, ...)## S3 method for class 'array'unique(x, incomparables = FALSE, MARGIN = 1,       fromLast = FALSE, ...)
unique(x, incomparables = FALSE, ...)## Default S3 method:unique(x, incomparables = FALSE, fromLast = FALSE,        nmax = NA, ...)## S3 method for class 'matrix'unique(x, incomparables = FALSE, MARGIN = 1,       fromLast = FALSE, ...)## S3 method for class 'array'unique(x, incomparables = FALSE, MARGIN = 1,       fromLast = FALSE, ...)
unique(x, incomparables = FALSE, ...)## Default S3 method:unique(x, incomparables = FALSE, fromLast = FALSE,        nmax = NA, ...)## S3 method for class 'matrix'unique(x, incomparables = FALSE, MARGIN = 1,       fromLast = FALSE, ...)## S3 method for class 'array'unique(x, incomparables = FALSE, MARGIN = 1,       fromLast = FALSE, ...)
unique(x, incomparables = FALSE, ...)## Default S3 method:unique(x, incomparables = FALSE, fromLast = FALSE,        nmax = NA, ...)## S3 method for class 'matrix'unique(x, incomparables = FALSE, MARGIN = 1,       fromLast = FALSE, ...)## S3 method for class 'array'unique(x, incomparables = FALSE, MARGIN = 1,       fromLast = FALSE, ...)
unique(x, incomparables = FALSE, ...)## Default S3 method:unique(x, incomparables = FALSE, fromLast = FALSE,        nmax = NA, ...)## S3 method for class 'matrix'unique(x, incomparables = FALSE, MARGIN = 1,       fromLast = FALSE, ...)## S3 method for class 'array'unique(x, incomparables = FALSE, MARGIN = 1,       fromLast = FALSE, ...)
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
## S3 method for class 'POSIXct'print(x, tz = "", usetz = TRUE, max = NULL, ...)## S3 method for class 'POSIXct'summary(object, digits = 15, ...)time + zz + timetime - ztime1 lop time2
warnings(...)## S3 method for class 'warnings'summary(object, ...)## S3 method for class 'warnings'print(x, tags,      header = ngettext(n, "Warning message:\n", "Warning messages:\n"),      ...)## S3 method for class 'summary.warnings'print(x, ...)
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
time1 - time2difftime(time1, time2, tz,         units = c("auto", "secs", "mins", "hours",                   "days", "weeks"))as.difftime(tim, format = "%X", units = "auto", tz = "UTC")## S3 method for class 'difftime'format(x, ...)## S3 method for class 'difftime'units(x)## S3 replacement method for class 'difftime'units(x) <- value## S3 method for class 'difftime'as.double(x, units = "auto", ...)## Group methods, notably for round(), signif(), floor(),## ceiling(), trunc(), abs(); called directly, *not* as Math():## S3 method for class 'difftime'Math(x, ...)
unix.time(...)  ### -- use  system.time(...)  instead
unlink(x, recursive = FALSE, force = FALSE, expand = TRUE)
unlist(x, recursive = TRUE, use.names = TRUE)
attachNamespace(ns, pos = 2L, depends = NULL, exclude, include.only)loadNamespace(package, lib.loc = NULL,              keep.source = getOption("keep.source.pkgs"),              partial = FALSE, versionCheck = NULL,              keep.parse.data = getOption("keep.parse.data.pkgs"))requireNamespace(package, ..., quietly = FALSE)loadedNamespaces()unloadNamespace(ns)isNamespaceLoaded(name)
lockEnvironment(env, bindings = FALSE)environmentIsLocked(env)lockBinding(sym, env)unlockBinding(sym, env)bindingIsLocked(sym, env)makeActiveBinding(sym, fun, env)bindingIsActive(sym, env)activeBindingFunction(sym, env)
unname(obj, force = FALSE)
serialize(object, connection, ascii, xdr = TRUE,          version = NULL, refhook = NULL)unserialize(connection, refhook = NULL)
split(x, f, drop = FALSE, ...)## Default S3 method:split(x, f, drop = FALSE, sep = ".", lex.order = FALSE, ...)split(x, f, drop = FALSE, ...) <- valueunsplit(value, f, drop = FALSE)
trace(what, tracer, exit, at, print, signature,      where = topenv(parent.frame()), edit = FALSE)untrace(what, signature = NULL, where = topenv(parent.frame()))tracingState(on = NULL).doTrace(expr, msg)returnValue(default = NULL)
tracemem(x)untracemem(x)retracemem(x, previous = NULL)
file(description = "", open = "", blocking = TRUE,     encoding = getOption("encoding"), raw = FALSE,     method = getOption("url.method", "default"))url(description, open = "", blocking = TRUE,    encoding = getOption("encoding"),    method = getOption("url.method", "default"),    headers = NULL)gzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)bzfile(description, open = "", encoding = getOption("encoding"),       compression = 9)xzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)unz(description, filename, open = "", encoding = getOption("encoding"))pipe(description, open = "", encoding = getOption("encoding"))fifo(description, open = "", blocking = FALSE,     encoding = getOption("encoding"))socketConnection(host = "localhost", port, server = FALSE,                 blocking = FALSE, open = "a+",                 encoding = getOption("encoding"),                 timeout = getOption("timeout"),                 options = getOption("socketOptions"))serverSocket(port)socketAccept(socket, blocking = FALSE, open = "a+",             encoding = getOption("encoding"),             timeout = getOption("timeout"),             options = getOption("socketOptions"))open(con, ...)## S3 method for class 'connection'open(con, open = "r", blocking = TRUE, ...)close(con, ...)## S3 method for class 'connection'close(con, type = "rw", ...)flush(con)isOpen(con, rw = "")isIncomplete(con)socketTimeout(socket, timeout = -1)
lower.tri(x, diag = FALSE)upper.tri(x, diag = FALSE)
file(description = "", open = "", blocking = TRUE,     encoding = getOption("encoding"), raw = FALSE,     method = getOption("url.method", "default"))url(description, open = "", blocking = TRUE,    encoding = getOption("encoding"),    method = getOption("url.method", "default"),    headers = NULL)gzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)bzfile(description, open = "", encoding = getOption("encoding"),       compression = 9)xzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)unz(description, filename, open = "", encoding = getOption("encoding"))pipe(description, open = "", encoding = getOption("encoding"))fifo(description, open = "", blocking = FALSE,     encoding = getOption("encoding"))socketConnection(host = "localhost", port, server = FALSE,                 blocking = FALSE, open = "a+",                 encoding = getOption("encoding"),                 timeout = getOption("timeout"),                 options = getOption("socketOptions"))serverSocket(port)socketAccept(socket, blocking = FALSE, open = "a+",             encoding = getOption("encoding"),             timeout = getOption("timeout"),             options = getOption("socketOptions"))open(con, ...)## S3 method for class 'connection'open(con, open = "r", blocking = TRUE, ...)close(con, ...)## S3 method for class 'connection'close(con, type = "rw", ...)flush(con)isOpen(con, rw = "")isIncomplete(con)socketTimeout(socket, timeout = -1)
UseMethod(generic, object)NextMethod(generic = NULL, object = NULL, ...)
utf8ToInt(x)intToUtf8(x, multiple = FALSE, allow_surrogate_pairs = FALSE)
validUTF8(x)validEnc(x)
validUTF8(x)validEnc(x)
lapply(X, FUN, ...)sapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)vapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE)replicate(n, expr, simplify = "array")simplify2array(x, higher = TRUE)
vector(mode = "logical", length = 0)as.vector(x, mode = "any")is.vector(x, mode = "any")
Vectorize(FUN, vectorize.args = arg.names, SIMPLIFY = TRUE,          USE.NAMES = TRUE)
R.Version()R.versionR.version.stringversion
warning(..., call. = TRUE, immediate. = FALSE, noBreaks. = FALSE,        domain = NULL)suppressWarnings(expr, classes = "warning")
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
warnings(...)## S3 method for class 'warnings'summary(object, ...)## S3 method for class 'warnings'print(x, tags,      header = ngettext(n, "Warning message:\n", "Warning messages:\n"),      ...)## S3 method for class 'summary.warnings'print(x, ...)
weekdays(x, abbreviate)## S3 method for class 'POSIXt'weekdays(x, abbreviate = FALSE)## S3 method for class 'Date'weekdays(x, abbreviate = FALSE)months(x, abbreviate)## S3 method for class 'POSIXt'months(x, abbreviate = FALSE)## S3 method for class 'Date'months(x, abbreviate = FALSE)quarters(x, abbreviate)## S3 method for class 'POSIXt'quarters(x, ...)## S3 method for class 'Date'quarters(x, ...)julian(x, ...)## S3 method for class 'POSIXt'julian(x, origin = as.POSIXct("1970-01-01", tz = "GMT"), ...)## S3 method for class 'Date'julian(x, origin = as.Date("1970-01-01"), ...)
weekdays(x, abbreviate)## S3 method for class 'POSIXt'weekdays(x, abbreviate = FALSE)## S3 method for class 'Date'weekdays(x, abbreviate = FALSE)months(x, abbreviate)## S3 method for class 'POSIXt'months(x, abbreviate = FALSE)## S3 method for class 'Date'months(x, abbreviate = FALSE)quarters(x, abbreviate)## S3 method for class 'POSIXt'quarters(x, ...)## S3 method for class 'Date'quarters(x, ...)julian(x, ...)## S3 method for class 'POSIXt'julian(x, origin = as.POSIXct("1970-01-01", tz = "GMT"), ...)## S3 method for class 'Date'julian(x, origin = as.Date("1970-01-01"), ...)
weekdays(x, abbreviate)## S3 method for class 'POSIXt'weekdays(x, abbreviate = FALSE)## S3 method for class 'Date'weekdays(x, abbreviate = FALSE)months(x, abbreviate)## S3 method for class 'POSIXt'months(x, abbreviate = FALSE)## S3 method for class 'Date'months(x, abbreviate = FALSE)quarters(x, abbreviate)## S3 method for class 'POSIXt'quarters(x, ...)## S3 method for class 'Date'quarters(x, ...)julian(x, ...)## S3 method for class 'POSIXt'julian(x, origin = as.POSIXct("1970-01-01", tz = "GMT"), ...)## S3 method for class 'Date'julian(x, origin = as.Date("1970-01-01"), ...)
which(x, arr.ind = FALSE, useNames = TRUE)arrayInd(ind, .dim, .dimnames = NULL, useNames = FALSE)
which.min(x)which.max(x)
which.min(x)which.max(x)
if(cond) exprif(cond) cons.expr  else  alt.exprfor(var in seq) exprwhile(cond) exprrepeat exprbreaknext
with(data, expr, ...)within(data, expr, ...)## S3 method for class 'list'within(data, expr, keepAttrs = TRUE, ...)
with(data, expr, ...)within(data, expr, ...)## S3 method for class 'list'within(data, expr, keepAttrs = TRUE, ...)
source(file, local = FALSE, echo = verbose, print.eval = echo,       exprs, spaced = use_file,       verbose = getOption("verbose"),       prompt.echo = getOption("prompt"),       max.deparse.length = 150, width.cutoff = 60L,       deparseCtrl = "showAttributes",       chdir = FALSE,       encoding = getOption("encoding"),       continue.echo = getOption("continue"),       skip.echo = 0, keep.source = getOption("keep.source"))withAutoprint(exprs, evaluated = FALSE, local = parent.frame(),              print. = TRUE, echo = TRUE, max.deparse.length = Inf,              width.cutoff = max(20, getOption("width")),              deparseCtrl = c("keepInteger", "showAttributes", "keepNA"),              ...)
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
with(data, expr, ...)within(data, expr, ...)## S3 method for class 'list'within(data, expr, keepAttrs = TRUE, ...)
with(data, expr, ...)within(data, expr, ...)## S3 method for class 'list'within(data, expr, keepAttrs = TRUE, ...)
with(data, expr, ...)within(data, expr, ...)## S3 method for class 'list'within(data, expr, keepAttrs = TRUE, ...)
tryCatch(expr, ..., finally)withCallingHandlers(expr, ...)globalCallingHandlers(...)signalCondition(cond)simpleCondition(message, call = NULL)simpleError    (message, call = NULL)simpleWarning  (message, call = NULL)simpleMessage  (message, call = NULL)errorCondition(message, ..., class = NULL, call = NULL)warningCondition(message, ..., class = NULL, call = NULL)## S3 method for class 'condition'as.character(x, ...)## S3 method for class 'error'as.character(x, ...)## S3 method for class 'condition'print(x, ...)## S3 method for class 'restart'print(x, ...)conditionCall(c)## S3 method for class 'condition'conditionCall(c)conditionMessage(c)## S3 method for class 'condition'conditionMessage(c)withRestarts(expr, ...)computeRestarts(cond = NULL)findRestart(name, cond = NULL)invokeRestart(r, ...)tryInvokeRestart(r, ...)invokeRestartInteractively(r)isRestart(x)restartDescription(r)restartFormals(r)suspendInterrupts(expr)allowInterrupts(expr).signalSimpleWarning(msg, call).handleSimpleError(h, msg, call).tryResumeInterrupt()
withVisible(x)
write(x, file = "data",      ncolumns = if(is.character(x)) 1 else 5,      append = FALSE, sep = " ")
read.dcf(file, fields = NULL, all = FALSE, keep.white = NULL)write.dcf(x, file = "", append = FALSE, useBytes = FALSE,          indent = 0.1 * getOption("width"),          width = 0.9 * getOption("width"),          keep.white = NULL)
readBin(con, what, n = 1L, size = NA_integer_, signed = TRUE,        endian = .Platform$endian)writeBin(object, con, size = NA_integer_,         endian = .Platform$endian, useBytes = FALSE)
readChar(con, nchars, useBytes = FALSE)writeChar(object, con, nchars = nchar(object, type = "chars"),          eos = "", useBytes = FALSE)
writeLines(text, con = stdout(), sep = "\n", useBytes = FALSE)
! xx & yx && yx | yx || yxor(x, y)isTRUE (x)isFALSE(x)
xpdrows.data.frame(x, old.rows, new.rows)
xtfrm(x)
xtfrm(x)
xtfrm(x)
xtfrm(x)
xtfrm(x)
xtfrm(x)
xtfrm(x)
numeric_version(x, strict = TRUE)package_version(x, strict = TRUE)R_system_version(x, strict = TRUE)getRversion()
xtfrm(x)
xtfrm(x)
file(description = "", open = "", blocking = TRUE,     encoding = getOption("encoding"), raw = FALSE,     method = getOption("url.method", "default"))url(description, open = "", blocking = TRUE,    encoding = getOption("encoding"),    method = getOption("url.method", "default"),    headers = NULL)gzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)bzfile(description, open = "", encoding = getOption("encoding"),       compression = 9)xzfile(description, open = "", encoding = getOption("encoding"),       compression = 6)unz(description, filename, open = "", encoding = getOption("encoding"))pipe(description, open = "", encoding = getOption("encoding"))fifo(description, open = "", blocking = FALSE,     encoding = getOption("encoding"))socketConnection(host = "localhost", port, server = FALSE,                 blocking = FALSE, open = "a+",                 encoding = getOption("encoding"),                 timeout = getOption("timeout"),                 options = getOption("socketOptions"))serverSocket(port)socketAccept(socket, blocking = FALSE, open = "a+",             encoding = getOption("encoding"),             timeout = getOption("timeout"),             options = getOption("socketOptions"))open(con, ...)## S3 method for class 'connection'open(con, open = "r", blocking = TRUE, ...)close(con, ...)## S3 method for class 'connection'close(con, type = "rw", ...)flush(con)isOpen(con, rw = "")isIncomplete(con)socketTimeout(socket, timeout = -1)
zapsmall(x, digits = getOption("digits"))
abline(a = NULL, b = NULL, h = NULL, v = NULL, reg = NULL,       coef = NULL, untf = FALSE, ...)
arrows(x0, y0, x1 = x0, y1 = y0, length = 0.25, angle = 30,       code = 2, col = par("fg"), lty = par("lty"),       lwd = par("lwd"), ...)
assocplot(x, col = c("black", "red"), space = 0.3,          main = NULL, xlab = NULL, ylab = NULL)
axis(side, at = NULL, labels = TRUE, tick = TRUE, line = NA,     pos = NA, outer = FALSE, font = NA, lty = "solid",     lwd = 1, lwd.ticks = lwd, col = NULL, col.ticks = NULL,     hadj = NA, padj = NA, gap.axis = NA, ...)
Axis(x = NULL, at = NULL, ..., side, labels = NULL)
axis.POSIXct(side, x, at, format, labels = TRUE, ...)axis.Date(side, x, at, format, labels = TRUE, ...)
axis.POSIXct(side, x, at, format, labels = TRUE, ...)axis.Date(side, x, at, format, labels = TRUE, ...)
axTicks(side, axp = NULL, usr = NULL, log = NULL, nintLog = NULL)
barplot(height, ...)## Default S3 method:barplot(height, width = 1, space = NULL,        names.arg = NULL, legend.text = NULL, beside = FALSE,        horiz = FALSE, density = NULL, angle = 45,        col = NULL, border = par("fg"),        main = NULL, sub = NULL, xlab = NULL, ylab = NULL,        xlim = NULL, ylim = NULL, xpd = TRUE, log = "",        axes = TRUE, axisnames = TRUE,        cex.axis = par("cex.axis"), cex.names = par("cex.axis"),        inside = TRUE, plot = TRUE, axis.lty = 0, offset = 0,        add = FALSE, ann = !add && par("ann"), args.legend = NULL, ...)## S3 method for class 'formula'barplot(formula, data, subset, na.action,        horiz = FALSE, xlab = NULL, ylab = NULL, ...)
barplot(height, ...)## Default S3 method:barplot(height, width = 1, space = NULL,        names.arg = NULL, legend.text = NULL, beside = FALSE,        horiz = FALSE, density = NULL, angle = 45,        col = NULL, border = par("fg"),        main = NULL, sub = NULL, xlab = NULL, ylab = NULL,        xlim = NULL, ylim = NULL, xpd = TRUE, log = "",        axes = TRUE, axisnames = TRUE,        cex.axis = par("cex.axis"), cex.names = par("cex.axis"),        inside = TRUE, plot = TRUE, axis.lty = 0, offset = 0,        add = FALSE, ann = !add && par("ann"), args.legend = NULL, ...)## S3 method for class 'formula'barplot(formula, data, subset, na.action,        horiz = FALSE, xlab = NULL, ylab = NULL, ...)
box(which = "plot", lty = "solid", ...)
boxplot(x, ...)## S3 method for class 'formula'boxplot(formula, data = NULL, ..., subset, na.action = NULL,        xlab = mklab(y_var = horizontal),        ylab = mklab(y_var =!horizontal),        add = FALSE, ann = !add, horizontal = FALSE,        drop = FALSE, sep = ".", lex.order = FALSE)## Default S3 method:boxplot(x, ..., range = 1.5, width = NULL, varwidth = FALSE,        notch = FALSE, outline = TRUE, names, plot = TRUE,        border = par("fg"), col = "lightgray", log = "",        pars = list(boxwex = 0.8, staplewex = 0.5, outwex = 0.5),         ann = !add, horizontal = FALSE, add = FALSE, at = NULL)
boxplot(x, ...)## S3 method for class 'formula'boxplot(formula, data = NULL, ..., subset, na.action = NULL,        xlab = mklab(y_var = horizontal),        ylab = mklab(y_var =!horizontal),        add = FALSE, ann = !add, horizontal = FALSE,        drop = FALSE, sep = ".", lex.order = FALSE)## Default S3 method:boxplot(x, ..., range = 1.5, width = NULL, varwidth = FALSE,        notch = FALSE, outline = TRUE, names, plot = TRUE,        border = par("fg"), col = "lightgray", log = "",        pars = list(boxwex = 0.8, staplewex = 0.5, outwex = 0.5),         ann = !add, horizontal = FALSE, add = FALSE, at = NULL)
## S3 method for class 'matrix'boxplot(x, use.cols = TRUE, ...)
bxp(z, notch = FALSE, width = NULL, varwidth = FALSE,    outline = TRUE, notch.frac = 0.5, log = "",    border = par("fg"), pars = NULL, frame.plot = axes,    horizontal = FALSE, ann = TRUE,    add = FALSE, at = NULL, show.names = NULL,    ...)
cdplot(x, ...)## Default S3 method:cdplot(x, y,  plot = TRUE, tol.ylab = 0.05, ylevels = NULL,  bw = "nrd0", n = 512, from = NULL, to = NULL,  col = NULL, border = 1, main = "", xlab = NULL, ylab = NULL,  yaxlabels = NULL, xlim = NULL, ylim = c(0, 1), ...)## S3 method for class 'formula'cdplot(formula, data = list(),  plot = TRUE, tol.ylab = 0.05, ylevels = NULL,  bw = "nrd0", n = 512, from = NULL, to = NULL,  col = NULL, border = 1, main = "", xlab = NULL, ylab = NULL,  yaxlabels = NULL, xlim = NULL, ylim = c(0, 1), ...,  subset = NULL)
clip(x1, x2, y1, y2)
split.screen(figs, screen, erase = TRUE)screen(n = , new = TRUE)erase.screen(n = )close.screen(n, all.screens = FALSE)
coplot(formula, data, given.values, panel = points, rows, columns,       show.given = TRUE, col = par("fg"), pch = par("pch"),       bar.bg = c(num = gray(0.8), fac = gray(0.95)),       xlab = c(x.name, paste("Given :", a.name)),       ylab = c(y.name, paste("Given :", b.name)),       subscripts = FALSE,       axlabels = function(f) abbreviate(levels(f)),       number = 6, overlap = 0.5, xlim, ylim, ...)co.intervals(x, number = 6, overlap = 0.5)
contour(x, ...)## Default S3 method:contour(x = seq(0, 1, length.out = nrow(z)),        y = seq(0, 1, length.out = ncol(z)),        z,        nlevels = 10, levels = pretty(zlim, nlevels),        labels = NULL,        xlim = range(x, finite = TRUE),        ylim = range(y, finite = TRUE),        zlim = range(z, finite = TRUE),        labcex = 0.6, drawlabels = TRUE, method = "flattest",        vfont, axes = TRUE, frame.plot = axes,        col = par("fg"), lty = par("lty"), lwd = par("lwd"),        add = FALSE, ...)
contour(x, ...)## Default S3 method:contour(x = seq(0, 1, length.out = nrow(z)),        y = seq(0, 1, length.out = ncol(z)),        z,        nlevels = 10, levels = pretty(zlim, nlevels),        labels = NULL,        xlim = range(x, finite = TRUE),        ylim = range(y, finite = TRUE),        zlim = range(z, finite = TRUE),        labcex = 0.6, drawlabels = TRUE, method = "flattest",        vfont, axes = TRUE, frame.plot = axes,        col = par("fg"), lty = par("lty"), lwd = par("lwd"),        add = FALSE, ...)
coplot(formula, data, given.values, panel = points, rows, columns,       show.given = TRUE, col = par("fg"), pch = par("pch"),       bar.bg = c(num = gray(0.8), fac = gray(0.95)),       xlab = c(x.name, paste("Given :", a.name)),       ylab = c(y.name, paste("Given :", b.name)),       subscripts = FALSE,       axlabels = function(f) abbreviate(levels(f)),       number = 6, overlap = 0.5, xlim, ylim, ...)co.intervals(x, number = 6, overlap = 0.5)
curve(expr, from = NULL, to = NULL, n = 101, add = FALSE,      type = "l", xname = "x", xlab = xname, ylab = NULL,      log = NULL, xlim = NULL, ...)## S3 method for class 'function'plot(x, y = 0, to = 1, from = y, xlim = NULL, ylab = NULL, ...)
dotchart(x, labels = NULL, groups = NULL, gdata = NULL, offset = 1/8,         ann = par("ann"), xaxt = par("xaxt"), frame.plot = TRUE, log = "",         cex = par("cex"), pt.cex = cex,         pch = 21, gpch = 21, bg = par("bg"),         color = par("fg"), gcolor = par("fg"), lcolor = "gray",         xlim = range(x[is.finite(x)]),         main = NULL, xlab = NULL, ylab = NULL, ...)
split.screen(figs, screen, erase = TRUE)screen(n = , new = TRUE)erase.screen(n = )close.screen(n, all.screens = FALSE)
filled.contour(x = seq(0, 1, length.out = nrow(z)),               y = seq(0, 1, length.out = ncol(z)),               z,               xlim = range(x, finite = TRUE),               ylim = range(y, finite = TRUE),               zlim = range(z, finite = TRUE),               levels = pretty(zlim, nlevels), nlevels = 20,               color.palette = function(n) hcl.colors(n, "YlOrRd", rev = TRUE),               col = color.palette(length(levels) - 1),               plot.title, plot.axes, key.title, key.axes,               asp = NA, xaxs = "i", yaxs = "i", las = 1,               axes = TRUE, frame.plot = axes, ...).filled.contour(x, y, z, levels, col)
fourfoldplot(x, color = c("#99CCFF", "#6699CC"),             conf.level = 0.95,             std = c("margins", "ind.max", "all.max"),             margin = c(1, 2), space = 0.2, main = NULL,             mfrow = NULL, mfcol = NULL)
plot.new()frame()
grconvertX(x, from = "user", to = "user")grconvertY(y, from = "user", to = "user")
grconvertX(x, from = "user", to = "user")grconvertY(y, from = "user", to = "user")
grid(nx = NULL, ny = nx, col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
hist(x, ...)## Default S3 method:hist(x, breaks = "Sturges",     freq = NULL, probability = !freq,     include.lowest = TRUE, right = TRUE,     density = NULL, angle = 45, col = "lightgray", border = NULL,     main = paste("Histogram of" , xname),     xlim = range(breaks), ylim = NULL,     xlab = xname, ylab,     axes = TRUE, plot = TRUE, labels = FALSE,     nclass = NULL, warn.unused = TRUE, ...)
hist(x, ...)## Default S3 method:hist(x, breaks = "Sturges",     freq = NULL, probability = !freq,     include.lowest = TRUE, right = TRUE,     density = NULL, angle = 45, col = "lightgray", border = NULL,     main = paste("Histogram of" , xname),     xlim = range(breaks), ylim = NULL,     xlab = xname, ylab,     axes = TRUE, plot = TRUE, labels = FALSE,     nclass = NULL, warn.unused = TRUE, ...)
identify(x, ...)## Default S3 method:identify(x, y = NULL, labels = seq_along(x), pos = FALSE,         n = length(x), plot = TRUE, atpen = FALSE, offset = 0.5,         tolerance = 0.25, order = FALSE, ...)
image(x, ...)## Default S3 method:image(x, y, z, zlim, xlim, ylim,      col = hcl.colors(12, "YlOrRd", rev = TRUE),      add = FALSE, xaxs = "i", yaxs = "i", xlab, ylab,      breaks, oldstyle = FALSE, useRaster, ...)
image(x, ...)## Default S3 method:image(x, y, z, zlim, xlim, ylim,      col = hcl.colors(12, "YlOrRd", rev = TRUE),      add = FALSE, xaxs = "i", yaxs = "i", xlab, ylab,      breaks, oldstyle = FALSE, useRaster, ...)
layout(mat, widths = rep.int(1, ncol(mat)),       heights = rep.int(1, nrow(mat)), respect = FALSE)layout.show(n = 1)lcm(x)
layout(mat, widths = rep.int(1, ncol(mat)),       heights = rep.int(1, nrow(mat)), respect = FALSE)layout.show(n = 1)lcm(x)
layout(mat, widths = rep.int(1, ncol(mat)),       heights = rep.int(1, nrow(mat)), respect = FALSE)layout.show(n = 1)lcm(x)
legend(x, y = NULL, legend, fill = NULL, col = par("col"),       border = "black", lty, lwd, pch,       angle = 45, density = NULL, bty = "o", bg = par("bg"),       box.lwd = par("lwd"), box.lty = par("lty"), box.col = par("fg"),       pt.bg = NA, cex = 1, pt.cex = cex, pt.lwd = lwd,       xjust = 0, yjust = 1, x.intersp = 1, y.intersp = 1,       adj = c(0, 0.5), text.width = NULL, text.col = par("col"),       text.font = NULL, merge = do.lines && has.pch, trace = FALSE,       plot = TRUE, ncol = 1, horiz = FALSE, title = NULL,       inset = 0, xpd, title.col = text.col, title.adj = 0.5,       seg.len = 2)
lines(x, ...)## Default S3 method:lines(x, y = NULL, type = "l", ...)
lines(x, ...)## Default S3 method:lines(x, y = NULL, type = "l", ...)
locator(n = 512, type = "n", ...)
matplot(x, y, type = "p", lty = 1:5, lwd = 1, lend = par("lend"),        pch = NULL,        col = 1:6, cex = NULL, bg = NA,        xlab = NULL, ylab = NULL, xlim = NULL, ylim = NULL,        log = "", ..., add = FALSE, verbose = getOption("verbose"))matpoints(x, y, type = "p", lty = 1:5, lwd = 1, pch = NULL,          col = 1:6, ...)matlines (x, y, type = "l", lty = 1:5, lwd = 1, pch = NULL,          col = 1:6, ...)
matplot(x, y, type = "p", lty = 1:5, lwd = 1, lend = par("lend"),        pch = NULL,        col = 1:6, cex = NULL, bg = NA,        xlab = NULL, ylab = NULL, xlim = NULL, ylim = NULL,        log = "", ..., add = FALSE, verbose = getOption("verbose"))matpoints(x, y, type = "p", lty = 1:5, lwd = 1, pch = NULL,          col = 1:6, ...)matlines (x, y, type = "l", lty = 1:5, lwd = 1, pch = NULL,          col = 1:6, ...)
matplot(x, y, type = "p", lty = 1:5, lwd = 1, lend = par("lend"),        pch = NULL,        col = 1:6, cex = NULL, bg = NA,        xlab = NULL, ylab = NULL, xlim = NULL, ylim = NULL,        log = "", ..., add = FALSE, verbose = getOption("verbose"))matpoints(x, y, type = "p", lty = 1:5, lwd = 1, pch = NULL,          col = 1:6, ...)matlines (x, y, type = "l", lty = 1:5, lwd = 1, pch = NULL,          col = 1:6, ...)
mosaicplot(x, ...)## Default S3 method:mosaicplot(x, main = deparse1(substitute(x)),           sub = NULL, xlab = NULL, ylab = NULL,           sort = NULL, off = NULL, dir = NULL,           color = NULL, shade = FALSE, margin = NULL,           cex.axis = 0.66, las = par("las"), border = NULL,           type = c("pearson", "deviance", "FT"), ...)## S3 method for class 'formula'mosaicplot(formula, data = NULL, ...,           main = deparse1(substitute(data)), subset,           na.action = stats::na.omit)
mtext(text, side = 3, line = 0, outer = FALSE, at = NA,      adj = NA, padj = NA, cex = NA, col = NA, font = NA, ...)
pairs(x, ...)## S3 method for class 'formula'pairs(formula, data = NULL, ..., subset,      na.action = stats::na.pass)## Default S3 method:pairs(x, labels, panel = points, ...,      horInd = 1:nc, verInd = 1:nc,      lower.panel = panel, upper.panel = panel,      diag.panel = NULL, text.panel = textPanel,      label.pos = 0.5 + has.diag/3, line.main = 3,      cex.labels = NULL, font.labels = 1,      row1attop = TRUE, gap = 1, log = "",      horOdd = !row1attop, verOdd = !row1attop)
pairs(x, ...)## S3 method for class 'formula'pairs(formula, data = NULL, ..., subset,      na.action = stats::na.pass)## Default S3 method:pairs(x, labels, panel = points, ...,      horInd = 1:nc, verInd = 1:nc,      lower.panel = panel, upper.panel = panel,      diag.panel = NULL, text.panel = textPanel,      label.pos = 0.5 + has.diag/3, line.main = 3,      cex.labels = NULL, font.labels = 1,      row1attop = TRUE, gap = 1, log = "",      horOdd = !row1attop, verOdd = !row1attop)
panel.smooth(x, y, col = par("col"), bg = NA, pch = par("pch"),             cex = 1, col.smooth = 2, span = 2/3, iter = 3,             ...)
par(..., no.readonly = FALSE)<highlevel plot> (..., <tag> = <value>)
persp(x, ...)## Default S3 method:persp(x = seq(0, 1, length.out = nrow(z)),      y = seq(0, 1, length.out = ncol(z)),      z, xlim = range(x), ylim = range(y),      zlim = range(z, na.rm = TRUE),      xlab = NULL, ylab = NULL, zlab = NULL,      main = NULL, sub = NULL,      theta = 0, phi = 15, r = sqrt(3), d = 1,      scale = TRUE, expand = 1,      col = "white", border = NULL, ltheta = -135, lphi = 0,      shade = NA, box = TRUE, axes = TRUE, nticks = 5,      ticktype = "simple", ...)
pie(x, labels = names(x), edges = 200, radius = 0.8,    clockwise = FALSE, init.angle = if(clockwise) 90 else 0,    density = NULL, angle = 45, col = NULL, border = NULL,    lty = NULL, main = NULL, ...)
## Default S3 method:plot(x, y = NULL, type = "p",  xlim = NULL, ylim = NULL,     log = "", main = NULL, sub = NULL, xlab = NULL, ylab = NULL,     ann = par("ann"), axes = TRUE, frame.plot = axes,     panel.first = NULL, panel.last = NULL, asp = NA,     xgap.axis = NA, ygap.axis = NA,     ...)
## Default S3 method:plot(x, y = NULL, type = "p",  xlim = NULL, ylim = NULL,     log = "", main = NULL, sub = NULL, xlab = NULL, ylab = NULL,     ann = par("ann"), axes = TRUE, frame.plot = axes,     panel.first = NULL, panel.last = NULL, asp = NA,     xgap.axis = NA, ygap.axis = NA,     ...)
plot.design(x, y = NULL, fun = mean, data = NULL, ...,            ylim = NULL, xlab = "Factors", ylab = NULL,            main = NULL, ask = NULL, xaxt = par("xaxt"),            axes = TRUE, xtick = FALSE)
curve(expr, from = NULL, to = NULL, n = 101, add = FALSE,      type = "l", xname = "x", xlab = xname, ylab = NULL,      log = NULL, xlim = NULL, ...)## S3 method for class 'function'plot(x, y = 0, to = 1, from = y, xlim = NULL, ylab = NULL, ...)
plot.new()frame()
plot.window(xlim, ylim, log = "", asp = NA, ...)
plot.xy(xy, type, pch = par("pch"), lty = par("lty"),        col = par("col"), bg = NA,        cex = 1, lwd = par("lwd"), ...)
points(x, ...)## Default S3 method:points(x, y = NULL, type = "p", ...)
points(x, ...)## Default S3 method:points(x, y = NULL, type = "p", ...)
polygon(x, y = NULL, density = NULL, angle = 45,        border = NULL, col = NA, lty = par("lty"),        ..., fillOddEven = FALSE)
polypath(x, y = NULL,         border = NULL, col = NA, lty = par("lty"),         rule = "winding", ...)
rasterImage(image,            xleft, ybottom, xright, ytop,            angle = 0, interpolate = TRUE, ...)
rect(xleft, ybottom, xright, ytop, density = NULL, angle = 45,     col = NA, border = NULL, lty = par("lty"), lwd = par("lwd"),     ...)
rug(x, ticksize = 0.03, side = 1, lwd = 0.5, col = par("fg"),    quiet = getOption("warn") < 0, ...)
split.screen(figs, screen, erase = TRUE)screen(n = , new = TRUE)erase.screen(n = )close.screen(n, all.screens = FALSE)
segments(x0, y0, x1 = x0, y1 = y0,         col = par("fg"), lty = par("lty"), lwd = par("lwd"),         ...)
smoothScatter(x, y = NULL, nbin = 128, bandwidth,              colramp = colorRampPalette(c("white", blues9)),              nrpoints = 100, ret.selection = FALSE,              pch = ".", cex = 1, col = "black",              transformation = function(x) x^.25,              postPlotHook = box,              xlab = NULL, ylab = NULL, xlim, ylim,              xaxs = par("xaxs"), yaxs = par("yaxs"), ...)
spineplot(x, ...)## Default S3 method:spineplot(x, y = NULL,          breaks = NULL, tol.ylab = 0.05, off = NULL,          ylevels = NULL, col = NULL,          main = "", xlab = NULL, ylab = NULL,          xaxlabels = NULL, yaxlabels = NULL,          xlim = NULL, ylim = c(0, 1), axes = TRUE, ...)## S3 method for class 'formula'spineplot(formula, data = NULL,          breaks = NULL, tol.ylab = 0.05, off = NULL,          ylevels = NULL, col = NULL,          main = "", xlab = NULL, ylab = NULL,          xaxlabels = NULL, yaxlabels = NULL,          xlim = NULL, ylim = c(0, 1), axes = TRUE, ...,          subset = NULL, drop.unused.levels = FALSE)
split.screen(figs, screen, erase = TRUE)screen(n = , new = TRUE)erase.screen(n = )close.screen(n, all.screens = FALSE)
stars(x, full = TRUE, scale = TRUE, radius = TRUE,      labels = dimnames(x)[[1]], locations = NULL,      nrow = NULL, ncol = NULL, len = 1,      key.loc = NULL, key.labels = dimnames(x)[[2]],      key.xpd = TRUE,      xlim = NULL, ylim = NULL, flip.labels = NULL,      draw.segments = FALSE,      col.segments = 1:n.seg, col.stars = NA, col.lines = NA,      axes = FALSE, frame.plot = axes,      main = NULL, sub = NULL, xlab = "", ylab = "",      cex = 0.8, lwd = 0.25, lty = par("lty"), xpd = FALSE,      mar = pmin(par("mar"),                 1.1+ c(2*axes+ (xlab != ""),                 2*axes+ (ylab != ""), 1, 0)),      add = FALSE, plot = TRUE, ...)
stem(x, scale = 1, width = 80, atom = 1e-08)
strwidth(s, units = "user", cex = NULL, font = NULL, vfont = NULL, ...)strheight(s, units = "user", cex = NULL, font = NULL, vfont = NULL, ...)
stripchart(x, ...)## S3 method for class 'formula'stripchart(x, data = NULL, dlab = NULL, ...,           subset, na.action = NULL)## Default S3 method:stripchart(x, method = "overplot", jitter = 0.1, offset = 1/3,           vertical = FALSE, group.names, add = FALSE,           at = NULL, xlim = NULL, ylim = NULL,           ylab = NULL, xlab = NULL, dlab = "", glab = "",           log = "", pch = 0, col = par("fg"), cex = par("cex"),           axes = TRUE, frame.plot = axes, ...)
strwidth(s, units = "user", cex = NULL, font = NULL, vfont = NULL, ...)strheight(s, units = "user", cex = NULL, font = NULL, vfont = NULL, ...)
sunflowerplot(x, ...)## Default S3 method:sunflowerplot(x, y = NULL, number, log = "", digits = 6,              xlab = NULL, ylab = NULL, xlim = NULL, ylim = NULL,              add = FALSE, rotate = FALSE,              pch = 16, cex = 0.8, cex.fact = 1.5,              col = par("col"), bg = NA, size = 1/8, seg.col = 2,              seg.lwd = 1.5, ...)## S3 method for class 'formula'sunflowerplot(formula, data = NULL, xlab = NULL, ylab = NULL, ...,             subset, na.action = NULL)
symbols(x, y = NULL, circles, squares, rectangles, stars,        thermometers, boxplots, inches = TRUE, add = FALSE,        fg = par("col"), bg = NA,        xlab = NULL, ylab = NULL, main = NULL,        xlim = NULL, ylim = NULL, ...)
text(x, ...)## Default S3 method: text(x, y = NULL, labels = seq_along(x$x), adj = NULL,     pos = NULL, offset = 0.5, vfont = NULL,     cex = 1, col = NULL, font = NULL, ...)
text(x, ...)## Default S3 method: text(x, y = NULL, labels = seq_along(x$x), adj = NULL,     pos = NULL, offset = 0.5, vfont = NULL,     cex = 1, col = NULL, font = NULL, ...)
title(main = NULL, sub = NULL, xlab = NULL, ylab = NULL,      line = NA, outer = FALSE, ...)
xinch(x = 1, warn.log = TRUE)yinch(y = 1, warn.log = TRUE)xyinch(xy = 1, warn.log = TRUE)
xspline(x, y = NULL, shape = 0, open = TRUE, repEnds = TRUE,        draw = TRUE, border = par("fg"), col = NA, ...)
xinch(x = 1, warn.log = TRUE)yinch(y = 1, warn.log = TRUE)xyinch(xy = 1, warn.log = TRUE)
xinch(x = 1, warn.log = TRUE)yinch(y = 1, warn.log = TRUE)xyinch(xy = 1, warn.log = TRUE)
x %+% y 
psych.misc()lowerCor(x,digits=2,use="pairwise",method="pearson",minlength=5)cor2(x,y,digits=2,use="pairwise",method="pearson")lowerMat(R, digits = 2,minlength=5)tableF(x,y)reflect(f,flip=NULL)progressBar(value,max,label=NULL) shannon(x,correct=FALSE,base=2)test.all(pl,package="psych",dependencies       = c("Depends", "Imports", "LinkingTo"),find=FALSE,skip=NULL)  levels2numeric(x)  char2numeric(x,flag=TRUE)  nchar2numeric(x,flag=TRUE) isCorrelation(x,na.rm=FALSE) #test if an object is a symmetric matrix     # with diagonals of 1 and  all values between -1 and 1 isCovariance(x)  #test if an object is a symmetric matrix    fromTo(data,from,to=NULL) #convert character names to locations as specified in colnames #of data cs(...) #convert a list of text words to  character vector acs(...) #convert a list of text words to  a single string
alpha(x, keys=NULL,cumulative=FALSE, title=NULL, max=10,na.rm = TRUE,   check.keys=FALSE,n.iter=1,delete=TRUE,use="pairwise",warnings=TRUE,   n.obs=NULL,impute=NULL   )alpha.ci(alpha,n.obs,n.var=NULL,p.val=.05,digits=2)
alpha(x, keys=NULL,cumulative=FALSE, title=NULL, max=10,na.rm = TRUE,   check.keys=FALSE,n.iter=1,delete=TRUE,use="pairwise",warnings=TRUE,   n.obs=NULL,impute=NULL   )alpha.ci(alpha,n.obs,n.var=NULL,p.val=.05,digits=2)
## S3 method for class 'psych'anova(object,...)
AUC(t=NULL,BR=NULL,SR=NULL,Phi=NULL,VP=NULL,labels=NULL,plot="b",zero=TRUE,correct=.5,      col=c("blue","red"))
mssd(x,group=NULL, lag = 1,na.rm=TRUE)rmssd(x,group=NULL, lag=1, na.rm=TRUE)autoR(x,group=NULL,lag=1,na.rm=TRUE,use="pairwise")
bassAckward(r, nfactors = 1, fm = "minres", rotate = "oblimin", scores = "tenBerge",   adjust=TRUE, plot=TRUE,cut=.3, use = "pairwise", cor = "cor", weight = NULL,   correct = 0.5,...)bassAckward.diagram(x,digits=2,cut = .3,labels=NULL,marg=c(1.5,.5,1.0,.5),   main="BassAckward",items=TRUE,sort=TRUE,lr=TRUE,curves=FALSE,organize=TRUE,   values=FALSE,...) 
bassAckward(r, nfactors = 1, fm = "minres", rotate = "oblimin", scores = "tenBerge",   adjust=TRUE, plot=TRUE,cut=.3, use = "pairwise", cor = "cor", weight = NULL,   correct = 0.5,...)bassAckward.diagram(x,digits=2,cut = .3,labels=NULL,marg=c(1.5,.5,1.0,.5),   main="BassAckward",items=TRUE,sort=TRUE,lr=TRUE,curves=FALSE,organize=TRUE,   values=FALSE,...) 
data(Thurstone)data(Thurstone.33)data(Thurstone.9)data(Holzinger)data(Holzinger.9)data(Bechtoldt)data(Bechtoldt.1)data(Bechtoldt.2)data(Reise)
data(Thurstone)data(Thurstone.33)data(Thurstone.9)data(Holzinger)data(Holzinger.9)data(Bechtoldt)data(Bechtoldt.1)data(Bechtoldt.2)data(Reise)
data(Thurstone)data(Thurstone.33)data(Thurstone.9)data(Holzinger)data(Holzinger.9)data(Bechtoldt)data(Bechtoldt.1)data(Bechtoldt.2)data(Reise)
bestScales(x,criteria,min.item=NULL,max.item=NULL, delta = 0,           cut=.1, n.item =10, wtd.cut=0, wtd.n=10,           n.iter =1, folds=1, p.keyed=.9,          overlap=FALSE, dictionary=NULL, check=TRUE, impute="none",log.p=FALSE,digits=2)bestItems(x,criteria=1,cut=.1, n.item=10,raw=TRUE, abs=TRUE,    dictionary=NULL,check=FALSE,digits=2) 
bestScales(x,criteria,min.item=NULL,max.item=NULL, delta = 0,           cut=.1, n.item =10, wtd.cut=0, wtd.n=10,           n.iter =1, folds=1, p.keyed=.9,          overlap=FALSE, dictionary=NULL, check=TRUE, impute="none",log.p=FALSE,digits=2)bestItems(x,criteria=1,cut=.1, n.item=10,raw=TRUE, abs=TRUE,    dictionary=NULL,check=FALSE,digits=2) 
data(bfi)
data(bfi)
bi.bars(x,var=NULL,grp=NULL,horiz,color,label=NULL,zero=FALSE,xlab,ylab,...) 
faRotate(loadings,rotate="oblimin",...)bifactor(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)biquartimin(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)TargetQ(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)TargetT(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)Promax(x,m=4, normalize=FALSE, pro.m = 4) Procrustes(L,Target) #adapted from Niels Walertarget.rot(x,keys=NULL)varimin(L, Tmat = diag(ncol(L)), normalize = FALSE, eps = 1e-05, maxit = 1000)vgQ.bimin(L)   #called by bifactorvgQ.targetQ(L,Target=NULL)  #called by TargetQvgQ.varimin(L)  #called by variminequamax(L, Tmat=diag(ncol(L)), eps=1e-5, maxit=1000) 
bigCor(x, size = NULL, use = "pairwise",cor="pearson")
## S3 method for class 'psych'biplot(x, labels=NULL,cex=c(.75,1),main="Biplot from fa",hist.col="cyan",xlim.s=c(-3,3),ylim.s=c(-3,3),xlim.f=c(-1,1),ylim.f=c(-1,1),maxpoints=100,adjust=1.2,col,pos, arrow.len = 0.1,pch=16,choose=NULL,cuts=1,cutl=.0,group=NULL,smoother=FALSE,vars=TRUE,...)
faRotate(loadings,rotate="oblimin",...)bifactor(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)biquartimin(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)TargetQ(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)TargetT(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)Promax(x,m=4, normalize=FALSE, pro.m = 4) Procrustes(L,Target) #adapted from Niels Walertarget.rot(x,keys=NULL)varimin(L, Tmat = diag(ncol(L)), normalize = FALSE, eps = 1e-05, maxit = 1000)vgQ.bimin(L)   #called by bifactorvgQ.targetQ(L,Target=NULL)  #called by TargetQvgQ.varimin(L)  #called by variminequamax(L, Tmat=diag(ncol(L)), eps=1e-5, maxit=1000) 
tetrachoric(x,y=NULL,correct=.5,smooth=TRUE,global=TRUE,weight=NULL,na.rm=TRUE,     delete=TRUE)polychoric(x,y=NULL,smooth=TRUE,global=TRUE,polycor=FALSE,ML=FALSE, std.err=FALSE,      weight=NULL,correct=.5,progress=TRUE,na.rm=TRUE,  delete=TRUE,max.cat=8)biserial(x,y)  polyserial(x,y) polydi(p,d,taup,taud,global=TRUE,ML = FALSE, std.err = FALSE,     weight=NULL,progress=TRUE,na.rm=TRUE,delete=TRUE,correct=.5) #deprecated  use polychoric insteadpoly.mat(x, short = TRUE, std.err = FALSE, ML = FALSE) 
block.random(n, ncond = NULL)
data(bock)
data("cattell")
psych.misc()lowerCor(x,digits=2,use="pairwise",method="pearson",minlength=5)cor2(x,y,digits=2,use="pairwise",method="pearson")lowerMat(R, digits = 2,minlength=5)tableF(x,y)reflect(f,flip=NULL)progressBar(value,max,label=NULL) shannon(x,correct=FALSE,base=2)test.all(pl,package="psych",dependencies       = c("Depends", "Imports", "LinkingTo"),find=FALSE,skip=NULL)  levels2numeric(x)  char2numeric(x,flag=TRUE)  nchar2numeric(x,flag=TRUE) isCorrelation(x,na.rm=FALSE) #test if an object is a symmetric matrix     # with diagonals of 1 and  all values between -1 and 1 isCovariance(x)  #test if an object is a symmetric matrix    fromTo(data,from,to=NULL) #convert character names to locations as specified in colnames #of data cs(...) #convert a list of text words to  character vector acs(...) #convert a list of text words to  a single string
data(Schmid)
fisherz(rho)fisherz2r(z)r.con(rho,n,p=.95,twotailed=TRUE)r2t(rho,n)t2r(t,df)g2r(g,df,n)chi2r(chi2,n)r2chi(rho,n)r2c(rho,sigma)cor2cov(rho,sigma)
sim.item(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,  gloading = 0, xbias = 0, ybias = 0, categorical = FALSE, low = -3, high = 3,  truncate = FALSE, cutpoint = 0)sim.circ(nvar = 72, nsub = 500, circum = TRUE, xloading = 0.6, yloading = 0.6,   gloading = 0, xbias = 0, ybias = 0, categorical = FALSE, low = -3, high = 3,   truncate = FALSE, cutpoint = 0)sim.dichot(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,     gloading = 0, xbias = 0, ybias = 0, low = 0, high = 0) item.dichot(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,  gloading = 0, xbias = 0, ybias = 0, low = 0, high = 0) sim.spherical(simple=FALSE, nx=7,ny=12 ,nsub = 500,  xloading =.55, yloading = .55,   zloading=.55, gloading=0, xbias=0,  ybias = 0, zbias=0,categorical=FALSE,    low=-3,high=3,truncate=FALSE,cutpoint=0) con2cat(old,cuts=c(0,1,2,3),where)
simulation.circ(samplesize=c(100,200,400,800), numberofvariables=c(16,32,48,72))circ.sim.plot(x.df)
simulation.circ(samplesize=c(100,200,400,800), numberofvariables=c(16,32,48,72))circ.sim.plot(x.df)
circ.tests(loads, loading = TRUE, sorting = TRUE)
cosinor(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)cosinor.plot(angle,x=NULL,data = NULL, IDloc=NULL, ID=NULL,hours=TRUE, period=24, na.rm=TRUE,ylim=NULL,ylab="observed",xlab="Time (double plotted)", main="Cosine fit",add=FALSE,multi=FALSE,typ="l",...) cosinor.period(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=seq(23,26,1),            plot=FALSE,opti=FALSE,na.rm=TRUE)          circadian.phase(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)circadian.mean(angle,data=NULL, hours=TRUE,na.rm=TRUE)circadian.sd(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.stats(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.F(angle,group,data=NULL,hours=TRUE,na.rm=TRUE)circadian.reliability(angle,x=NULL,code=NULL,data = NULL,min=16,            oddeven=FALSE, hours=TRUE,period=24,plot=FALSE,opti=FALSE,na.rm=TRUE) circular.mean(angle,na.rm=TRUE) #angles in radianscircadian.cor(angle,data=NULL,hours=TRUE,na.rm=TRUE)  #angles in radianscircular.cor(angle,na.rm=TRUE) #angles in radianscircadian.linear.cor(angle,x=NULL,data=NULL,hours=TRUE)
cosinor(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)cosinor.plot(angle,x=NULL,data = NULL, IDloc=NULL, ID=NULL,hours=TRUE, period=24, na.rm=TRUE,ylim=NULL,ylab="observed",xlab="Time (double plotted)", main="Cosine fit",add=FALSE,multi=FALSE,typ="l",...) cosinor.period(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=seq(23,26,1),            plot=FALSE,opti=FALSE,na.rm=TRUE)          circadian.phase(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)circadian.mean(angle,data=NULL, hours=TRUE,na.rm=TRUE)circadian.sd(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.stats(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.F(angle,group,data=NULL,hours=TRUE,na.rm=TRUE)circadian.reliability(angle,x=NULL,code=NULL,data = NULL,min=16,            oddeven=FALSE, hours=TRUE,period=24,plot=FALSE,opti=FALSE,na.rm=TRUE) circular.mean(angle,na.rm=TRUE) #angles in radianscircadian.cor(angle,data=NULL,hours=TRUE,na.rm=TRUE)  #angles in radianscircular.cor(angle,na.rm=TRUE) #angles in radianscircadian.linear.cor(angle,x=NULL,data=NULL,hours=TRUE)
cosinor(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)cosinor.plot(angle,x=NULL,data = NULL, IDloc=NULL, ID=NULL,hours=TRUE, period=24, na.rm=TRUE,ylim=NULL,ylab="observed",xlab="Time (double plotted)", main="Cosine fit",add=FALSE,multi=FALSE,typ="l",...) cosinor.period(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=seq(23,26,1),            plot=FALSE,opti=FALSE,na.rm=TRUE)          circadian.phase(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)circadian.mean(angle,data=NULL, hours=TRUE,na.rm=TRUE)circadian.sd(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.stats(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.F(angle,group,data=NULL,hours=TRUE,na.rm=TRUE)circadian.reliability(angle,x=NULL,code=NULL,data = NULL,min=16,            oddeven=FALSE, hours=TRUE,period=24,plot=FALSE,opti=FALSE,na.rm=TRUE) circular.mean(angle,na.rm=TRUE) #angles in radianscircadian.cor(angle,data=NULL,hours=TRUE,na.rm=TRUE)  #angles in radianscircular.cor(angle,na.rm=TRUE) #angles in radianscircadian.linear.cor(angle,x=NULL,data=NULL,hours=TRUE)
cosinor(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)cosinor.plot(angle,x=NULL,data = NULL, IDloc=NULL, ID=NULL,hours=TRUE, period=24, na.rm=TRUE,ylim=NULL,ylab="observed",xlab="Time (double plotted)", main="Cosine fit",add=FALSE,multi=FALSE,typ="l",...) cosinor.period(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=seq(23,26,1),            plot=FALSE,opti=FALSE,na.rm=TRUE)          circadian.phase(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)circadian.mean(angle,data=NULL, hours=TRUE,na.rm=TRUE)circadian.sd(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.stats(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.F(angle,group,data=NULL,hours=TRUE,na.rm=TRUE)circadian.reliability(angle,x=NULL,code=NULL,data = NULL,min=16,            oddeven=FALSE, hours=TRUE,period=24,plot=FALSE,opti=FALSE,na.rm=TRUE) circular.mean(angle,na.rm=TRUE) #angles in radianscircadian.cor(angle,data=NULL,hours=TRUE,na.rm=TRUE)  #angles in radianscircular.cor(angle,na.rm=TRUE) #angles in radianscircadian.linear.cor(angle,x=NULL,data=NULL,hours=TRUE)
cosinor(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)cosinor.plot(angle,x=NULL,data = NULL, IDloc=NULL, ID=NULL,hours=TRUE, period=24, na.rm=TRUE,ylim=NULL,ylab="observed",xlab="Time (double plotted)", main="Cosine fit",add=FALSE,multi=FALSE,typ="l",...) cosinor.period(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=seq(23,26,1),            plot=FALSE,opti=FALSE,na.rm=TRUE)          circadian.phase(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)circadian.mean(angle,data=NULL, hours=TRUE,na.rm=TRUE)circadian.sd(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.stats(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.F(angle,group,data=NULL,hours=TRUE,na.rm=TRUE)circadian.reliability(angle,x=NULL,code=NULL,data = NULL,min=16,            oddeven=FALSE, hours=TRUE,period=24,plot=FALSE,opti=FALSE,na.rm=TRUE) circular.mean(angle,na.rm=TRUE) #angles in radianscircadian.cor(angle,data=NULL,hours=TRUE,na.rm=TRUE)  #angles in radianscircular.cor(angle,na.rm=TRUE) #angles in radianscircadian.linear.cor(angle,x=NULL,data=NULL,hours=TRUE)
cosinor(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)cosinor.plot(angle,x=NULL,data = NULL, IDloc=NULL, ID=NULL,hours=TRUE, period=24, na.rm=TRUE,ylim=NULL,ylab="observed",xlab="Time (double plotted)", main="Cosine fit",add=FALSE,multi=FALSE,typ="l",...) cosinor.period(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=seq(23,26,1),            plot=FALSE,opti=FALSE,na.rm=TRUE)          circadian.phase(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)circadian.mean(angle,data=NULL, hours=TRUE,na.rm=TRUE)circadian.sd(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.stats(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.F(angle,group,data=NULL,hours=TRUE,na.rm=TRUE)circadian.reliability(angle,x=NULL,code=NULL,data = NULL,min=16,            oddeven=FALSE, hours=TRUE,period=24,plot=FALSE,opti=FALSE,na.rm=TRUE) circular.mean(angle,na.rm=TRUE) #angles in radianscircadian.cor(angle,data=NULL,hours=TRUE,na.rm=TRUE)  #angles in radianscircular.cor(angle,na.rm=TRUE) #angles in radianscircadian.linear.cor(angle,x=NULL,data=NULL,hours=TRUE)
cosinor(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)cosinor.plot(angle,x=NULL,data = NULL, IDloc=NULL, ID=NULL,hours=TRUE, period=24, na.rm=TRUE,ylim=NULL,ylab="observed",xlab="Time (double plotted)", main="Cosine fit",add=FALSE,multi=FALSE,typ="l",...) cosinor.period(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=seq(23,26,1),            plot=FALSE,opti=FALSE,na.rm=TRUE)          circadian.phase(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)circadian.mean(angle,data=NULL, hours=TRUE,na.rm=TRUE)circadian.sd(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.stats(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.F(angle,group,data=NULL,hours=TRUE,na.rm=TRUE)circadian.reliability(angle,x=NULL,code=NULL,data = NULL,min=16,            oddeven=FALSE, hours=TRUE,period=24,plot=FALSE,opti=FALSE,na.rm=TRUE) circular.mean(angle,na.rm=TRUE) #angles in radianscircadian.cor(angle,data=NULL,hours=TRUE,na.rm=TRUE)  #angles in radianscircular.cor(angle,na.rm=TRUE) #angles in radianscircadian.linear.cor(angle,x=NULL,data=NULL,hours=TRUE)
cosinor(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)cosinor.plot(angle,x=NULL,data = NULL, IDloc=NULL, ID=NULL,hours=TRUE, period=24, na.rm=TRUE,ylim=NULL,ylab="observed",xlab="Time (double plotted)", main="Cosine fit",add=FALSE,multi=FALSE,typ="l",...) cosinor.period(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=seq(23,26,1),            plot=FALSE,opti=FALSE,na.rm=TRUE)          circadian.phase(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)circadian.mean(angle,data=NULL, hours=TRUE,na.rm=TRUE)circadian.sd(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.stats(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.F(angle,group,data=NULL,hours=TRUE,na.rm=TRUE)circadian.reliability(angle,x=NULL,code=NULL,data = NULL,min=16,            oddeven=FALSE, hours=TRUE,period=24,plot=FALSE,opti=FALSE,na.rm=TRUE) circular.mean(angle,na.rm=TRUE) #angles in radianscircadian.cor(angle,data=NULL,hours=TRUE,na.rm=TRUE)  #angles in radianscircular.cor(angle,na.rm=TRUE) #angles in radianscircadian.linear.cor(angle,x=NULL,data=NULL,hours=TRUE)
cosinor(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)cosinor.plot(angle,x=NULL,data = NULL, IDloc=NULL, ID=NULL,hours=TRUE, period=24, na.rm=TRUE,ylim=NULL,ylab="observed",xlab="Time (double plotted)", main="Cosine fit",add=FALSE,multi=FALSE,typ="l",...) cosinor.period(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=seq(23,26,1),            plot=FALSE,opti=FALSE,na.rm=TRUE)          circadian.phase(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)circadian.mean(angle,data=NULL, hours=TRUE,na.rm=TRUE)circadian.sd(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.stats(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.F(angle,group,data=NULL,hours=TRUE,na.rm=TRUE)circadian.reliability(angle,x=NULL,code=NULL,data = NULL,min=16,            oddeven=FALSE, hours=TRUE,period=24,plot=FALSE,opti=FALSE,na.rm=TRUE) circular.mean(angle,na.rm=TRUE) #angles in radianscircadian.cor(angle,data=NULL,hours=TRUE,na.rm=TRUE)  #angles in radianscircular.cor(angle,na.rm=TRUE) #angles in radianscircadian.linear.cor(angle,x=NULL,data=NULL,hours=TRUE)
cosinor(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)cosinor.plot(angle,x=NULL,data = NULL, IDloc=NULL, ID=NULL,hours=TRUE, period=24, na.rm=TRUE,ylim=NULL,ylab="observed",xlab="Time (double plotted)", main="Cosine fit",add=FALSE,multi=FALSE,typ="l",...) cosinor.period(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=seq(23,26,1),            plot=FALSE,opti=FALSE,na.rm=TRUE)          circadian.phase(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)circadian.mean(angle,data=NULL, hours=TRUE,na.rm=TRUE)circadian.sd(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.stats(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.F(angle,group,data=NULL,hours=TRUE,na.rm=TRUE)circadian.reliability(angle,x=NULL,code=NULL,data = NULL,min=16,            oddeven=FALSE, hours=TRUE,period=24,plot=FALSE,opti=FALSE,na.rm=TRUE) circular.mean(angle,na.rm=TRUE) #angles in radianscircadian.cor(angle,data=NULL,hours=TRUE,na.rm=TRUE)  #angles in radianscircular.cor(angle,na.rm=TRUE) #angles in radianscircadian.linear.cor(angle,x=NULL,data=NULL,hours=TRUE)
scoreOverlap(keys, r, correct = TRUE, SMC = TRUE, av.r = TRUE, item.smc = NULL,      impute = TRUE,select=TRUE)scoreBy(keys,stats, correct = TRUE, SMC = TRUE, av.r = TRUE, item.smc = NULL,      impute = TRUE,select=TRUE,min.n=3,smooth=FALSE)cluster.cor(keys, r.mat, correct = TRUE,SMC=TRUE,item.smc=NULL,impute=TRUE)
cluster.fit(original, load, clusters, diagonal = FALSE)
cluster.loadings(keys, r.mat, correct = TRUE,SMC=TRUE)
cluster.plot(ic.results, cluster = NULL, cut = 0, labels=NULL,          title = "Cluster plot",pch=18,pos,show.points=TRUE,choose=NULL,...)fa.plot(ic.results, cluster = NULL, cut = 0, labels=NULL,title,     jiggle=FALSE,amount=.02,pch=18,pos,show.points=TRUE,choose=NULL,main=NULL,...)factor.plot(ic.results, cluster = NULL, cut = 0, labels=NULL,title,jiggle=FALSE,                  amount=.02,pch=18,pos,show.points=TRUE,...)  #deprecated
cluster2keys(c)
cohen.d(x, group,alpha=.05,std=TRUE,sort=NULL,dictionary=NULL,MD=TRUE,data=NULL)d.robust(x,group,trim=.2)cohen.d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)cohen.d.by(x,group,group2,alpha=.05,MD=TRUE)d2r(d)r2d(rho)d2t(d,n=NULL,n2=NULL,n1=NULL)t2d(t,n=NULL,n2=NULL,n1=NULL)m2t(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)  #returns d invisibilym2d(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)d2OVL(d)  #Percent overlap for 1 distribtiond2OVL2(d)  #Percent overlap joint distributiond2CL(d)   #Common language effect sized2U3(d)   #Proportion in higher group exceedding median of lower group
cohen.d(x, group,alpha=.05,std=TRUE,sort=NULL,dictionary=NULL,MD=TRUE,data=NULL)d.robust(x,group,trim=.2)cohen.d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)cohen.d.by(x,group,group2,alpha=.05,MD=TRUE)d2r(d)r2d(rho)d2t(d,n=NULL,n2=NULL,n1=NULL)t2d(t,n=NULL,n2=NULL,n1=NULL)m2t(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)  #returns d invisibilym2d(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)d2OVL(d)  #Percent overlap for 1 distribtiond2OVL2(d)  #Percent overlap joint distributiond2CL(d)   #Common language effect sized2U3(d)   #Proportion in higher group exceedding median of lower group
cohen.d(x, group,alpha=.05,std=TRUE,sort=NULL,dictionary=NULL,MD=TRUE,data=NULL)d.robust(x,group,trim=.2)cohen.d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)cohen.d.by(x,group,group2,alpha=.05,MD=TRUE)d2r(d)r2d(rho)d2t(d,n=NULL,n2=NULL,n1=NULL)t2d(t,n=NULL,n2=NULL,n1=NULL)m2t(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)  #returns d invisibilym2d(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)d2OVL(d)  #Percent overlap for 1 distribtiond2OVL2(d)  #Percent overlap joint distributiond2CL(d)   #Common language effect sized2U3(d)   #Proportion in higher group exceedding median of lower group
cohen.kappa(x, w=NULL,n.obs=NULL,alpha=.05,levels=NULL)  wkappa(x, w = NULL)    #deprectated
congruence(x,y=NULL)cohen.profile(x,y=NULL ,M=NULL)distance(x,y=NULL,r=2)
comorbidity(d1, d2, com, labels = NULL)
sim.item(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,  gloading = 0, xbias = 0, ybias = 0, categorical = FALSE, low = -3, high = 3,  truncate = FALSE, cutpoint = 0)sim.circ(nvar = 72, nsub = 500, circum = TRUE, xloading = 0.6, yloading = 0.6,   gloading = 0, xbias = 0, ybias = 0, categorical = FALSE, low = -3, high = 3,   truncate = FALSE, cutpoint = 0)sim.dichot(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,     gloading = 0, xbias = 0, ybias = 0, low = 0, high = 0) item.dichot(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,  gloading = 0, xbias = 0, ybias = 0, low = 0, high = 0) sim.spherical(simple=FALSE, nx=7,ny=12 ,nsub = 500,  xloading =.55, yloading = .55,   zloading=.55, gloading=0, xbias=0,  ybias = 0, zbias=0,categorical=FALSE,    low=-3,high=3,truncate=FALSE,cutpoint=0) con2cat(old,cuts=c(0,1,2,3),where)
sim.congeneric(loads = c(0.8, 0.7, 0.6, 0.5),N = NULL,  err=NULL, short = TRUE,               categorical=FALSE, low=-3,high=3,cuts=NULL)
congruence(x,y=NULL)cohen.profile(x,y=NULL ,M=NULL)distance(x,y=NULL,r=2)
corCi(x, keys = NULL, n.iter = 100,  p = 0.05,overlap = FALSE,  poly = FALSE, method = "pearson", plot=TRUE,minlength=5,n=NULL,...) cor.ci(x, keys = NULL, n.iter = 100,  p = 0.05,overlap = FALSE,  poly = FALSE, method = "pearson", plot=TRUE,minlength=5,n=NULL,...) 
corPlot(r,numbers=TRUE,colors=TRUE,n=51,main=NULL,zlim=c(-1,1),  show.legend=TRUE, labels=NULL,n.legend=10,keep.par=TRUE,select=NULL, pval=NULL,    cuts=c(.001,.01),scale=TRUE,cex,MAR,upper=TRUE,diag=TRUE, symmetric=TRUE,stars=FALSE,   adjust="holm",xaxis=1, xlas=0,ylas=2,gr=NULL,alpha=.75,min.length=NULL,...)corPlotUpperLowerCi(R,numbers=TRUE,cuts=c(.001,.01,.05),select=NULL,      main="Upper and lower confidence intervals of correlations",adjust=FALSE,...)  cor.plot(r,numbers=TRUE,colors=TRUE,n=51,main=NULL,zlim=c(-1,1), show.legend=TRUE, labels=NULL,n.legend=10,keep.par=TRUE,select=NULL, pval=NULL,    cuts=c(.001,.01),scale=TRUE,cex,MAR,upper=TRUE,diag=TRUE, symmetric=TRUE,stars=FALSE,adjust="holm",xaxis=1,xlas=0,ylas=2,gr=NULL,alpha=.75, min.length=NULL,...)  #deprecated           cor.plot.upperLowerCi(R,numbers=TRUE,cuts=c(.001,.01,.05),select=NULL,      main="Upper and lower confidence intervals of correlations",adjust=FALSE,...)      #deprecated
corPlot(r,numbers=TRUE,colors=TRUE,n=51,main=NULL,zlim=c(-1,1),  show.legend=TRUE, labels=NULL,n.legend=10,keep.par=TRUE,select=NULL, pval=NULL,    cuts=c(.001,.01),scale=TRUE,cex,MAR,upper=TRUE,diag=TRUE, symmetric=TRUE,stars=FALSE,   adjust="holm",xaxis=1, xlas=0,ylas=2,gr=NULL,alpha=.75,min.length=NULL,...)corPlotUpperLowerCi(R,numbers=TRUE,cuts=c(.001,.01,.05),select=NULL,      main="Upper and lower confidence intervals of correlations",adjust=FALSE,...)  cor.plot(r,numbers=TRUE,colors=TRUE,n=51,main=NULL,zlim=c(-1,1), show.legend=TRUE, labels=NULL,n.legend=10,keep.par=TRUE,select=NULL, pval=NULL,    cuts=c(.001,.01),scale=TRUE,cex,MAR,upper=TRUE,diag=TRUE, symmetric=TRUE,stars=FALSE,adjust="holm",xaxis=1,xlas=0,ylas=2,gr=NULL,alpha=.75, min.length=NULL,...)  #deprecated           cor.plot.upperLowerCi(R,numbers=TRUE,cuts=c(.001,.01,.05),select=NULL,      main="Upper and lower confidence intervals of correlations",adjust=FALSE,...)      #deprecated
cor.smooth(x,eig.tol=10^-12)cor.smoother(x,cut=.01)
cor.smooth(x,eig.tol=10^-12)cor.smoother(x,cut=.01)
cor.wt(data,vars=NULL, w=NULL,sds=NULL, cor=TRUE)
psych.misc()lowerCor(x,digits=2,use="pairwise",method="pearson",minlength=5)cor2(x,y,digits=2,use="pairwise",method="pearson")lowerMat(R, digits = 2,minlength=5)tableF(x,y)reflect(f,flip=NULL)progressBar(value,max,label=NULL) shannon(x,correct=FALSE,base=2)test.all(pl,package="psych",dependencies       = c("Depends", "Imports", "LinkingTo"),find=FALSE,skip=NULL)  levels2numeric(x)  char2numeric(x,flag=TRUE)  nchar2numeric(x,flag=TRUE) isCorrelation(x,na.rm=FALSE) #test if an object is a symmetric matrix     # with diagonals of 1 and  all values between -1 and 1 isCovariance(x)  #test if an object is a symmetric matrix    fromTo(data,from,to=NULL) #convert character names to locations as specified in colnames #of data cs(...) #convert a list of text words to  character vector acs(...) #convert a list of text words to  a single string
fisherz(rho)fisherz2r(z)r.con(rho,n,p=.95,twotailed=TRUE)r2t(rho,n)t2r(t,df)g2r(g,df,n)chi2r(chi2,n)r2chi(rho,n)r2c(rho,sigma)cor2cov(rho,sigma)
cor2dist(x)
corCi(x, keys = NULL, n.iter = 100,  p = 0.05,overlap = FALSE,  poly = FALSE, method = "pearson", plot=TRUE,minlength=5,n=NULL,...) cor.ci(x, keys = NULL, n.iter = 100,  p = 0.05,overlap = FALSE,  poly = FALSE, method = "pearson", plot=TRUE,minlength=5,n=NULL,...) 
corFiml(x, covar = FALSE,show=FALSE) 
corPlot(r,numbers=TRUE,colors=TRUE,n=51,main=NULL,zlim=c(-1,1),  show.legend=TRUE, labels=NULL,n.legend=10,keep.par=TRUE,select=NULL, pval=NULL,    cuts=c(.001,.01),scale=TRUE,cex,MAR,upper=TRUE,diag=TRUE, symmetric=TRUE,stars=FALSE,   adjust="holm",xaxis=1, xlas=0,ylas=2,gr=NULL,alpha=.75,min.length=NULL,...)corPlotUpperLowerCi(R,numbers=TRUE,cuts=c(.001,.01,.05),select=NULL,      main="Upper and lower confidence intervals of correlations",adjust=FALSE,...)  cor.plot(r,numbers=TRUE,colors=TRUE,n=51,main=NULL,zlim=c(-1,1), show.legend=TRUE, labels=NULL,n.legend=10,keep.par=TRUE,select=NULL, pval=NULL,    cuts=c(.001,.01),scale=TRUE,cex,MAR,upper=TRUE,diag=TRUE, symmetric=TRUE,stars=FALSE,adjust="holm",xaxis=1,xlas=0,ylas=2,gr=NULL,alpha=.75, min.length=NULL,...)  #deprecated           cor.plot.upperLowerCi(R,numbers=TRUE,cuts=c(.001,.01,.05),select=NULL,      main="Upper and lower confidence intervals of correlations",adjust=FALSE,...)      #deprecated
corPlot(r,numbers=TRUE,colors=TRUE,n=51,main=NULL,zlim=c(-1,1),  show.legend=TRUE, labels=NULL,n.legend=10,keep.par=TRUE,select=NULL, pval=NULL,    cuts=c(.001,.01),scale=TRUE,cex,MAR,upper=TRUE,diag=TRUE, symmetric=TRUE,stars=FALSE,   adjust="holm",xaxis=1, xlas=0,ylas=2,gr=NULL,alpha=.75,min.length=NULL,...)corPlotUpperLowerCi(R,numbers=TRUE,cuts=c(.001,.01,.05),select=NULL,      main="Upper and lower confidence intervals of correlations",adjust=FALSE,...)  cor.plot(r,numbers=TRUE,colors=TRUE,n=51,main=NULL,zlim=c(-1,1), show.legend=TRUE, labels=NULL,n.legend=10,keep.par=TRUE,select=NULL, pval=NULL,    cuts=c(.001,.01),scale=TRUE,cex,MAR,upper=TRUE,diag=TRUE, symmetric=TRUE,stars=FALSE,adjust="holm",xaxis=1,xlas=0,ylas=2,gr=NULL,alpha=.75, min.length=NULL,...)  #deprecated           cor.plot.upperLowerCi(R,numbers=TRUE,cuts=c(.001,.01,.05),select=NULL,      main="Upper and lower confidence intervals of correlations",adjust=FALSE,...)      #deprecated
corr.test(x, y = NULL, use = "pairwise",method="pearson",adjust="holm",     alpha=.05,ci=TRUE,minlength=5,normal=TRUE)corr.p(r,n,adjust="holm",alpha=.05,minlength=5,ci=TRUE)
corr.test(x, y = NULL, use = "pairwise",method="pearson",adjust="holm",     alpha=.05,ci=TRUE,minlength=5,normal=TRUE)corr.p(r,n,adjust="holm",alpha=.05,minlength=5,ci=TRUE)
correct.cor(x, y)
cortest.normal(R1, R2 = NULL, n1 = NULL, n2 = NULL, fisher = TRUE) #the steiger testcortest(R1,R2=NULL,n1=NULL,n2 = NULL, fisher = TRUE,cor=TRUE) #same as cortest.normal cortest.jennrich(R1,R2,n1=NULL, n2=NULL)  #the Jennrich testcortest.mat(R1,R2=NULL,n1=NULL,n2 = NULL) #an alternative test
cortest.bartlett(R, n = NULL,diag=TRUE)
cortest.normal(R1, R2 = NULL, n1 = NULL, n2 = NULL, fisher = TRUE) #the steiger testcortest(R1,R2=NULL,n1=NULL,n2 = NULL, fisher = TRUE,cor=TRUE) #same as cortest.normal cortest.jennrich(R1,R2,n1=NULL, n2=NULL)  #the Jennrich testcortest.mat(R1,R2=NULL,n1=NULL,n2 = NULL) #an alternative test
cortest.normal(R1, R2 = NULL, n1 = NULL, n2 = NULL, fisher = TRUE) #the steiger testcortest(R1,R2=NULL,n1=NULL,n2 = NULL, fisher = TRUE,cor=TRUE) #same as cortest.normal cortest.jennrich(R1,R2,n1=NULL, n2=NULL)  #the Jennrich testcortest.mat(R1,R2=NULL,n1=NULL,n2 = NULL) #an alternative test
cortest.normal(R1, R2 = NULL, n1 = NULL, n2 = NULL, fisher = TRUE) #the steiger testcortest(R1,R2=NULL,n1=NULL,n2 = NULL, fisher = TRUE,cor=TRUE) #same as cortest.normal cortest.jennrich(R1,R2,n1=NULL, n2=NULL)  #the Jennrich testcortest.mat(R1,R2=NULL,n1=NULL,n2 = NULL) #an alternative test
cosinor(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)cosinor.plot(angle,x=NULL,data = NULL, IDloc=NULL, ID=NULL,hours=TRUE, period=24, na.rm=TRUE,ylim=NULL,ylab="observed",xlab="Time (double plotted)", main="Cosine fit",add=FALSE,multi=FALSE,typ="l",...) cosinor.period(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=seq(23,26,1),            plot=FALSE,opti=FALSE,na.rm=TRUE)          circadian.phase(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)circadian.mean(angle,data=NULL, hours=TRUE,na.rm=TRUE)circadian.sd(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.stats(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.F(angle,group,data=NULL,hours=TRUE,na.rm=TRUE)circadian.reliability(angle,x=NULL,code=NULL,data = NULL,min=16,            oddeven=FALSE, hours=TRUE,period=24,plot=FALSE,opti=FALSE,na.rm=TRUE) circular.mean(angle,na.rm=TRUE) #angles in radianscircadian.cor(angle,data=NULL,hours=TRUE,na.rm=TRUE)  #angles in radianscircular.cor(angle,na.rm=TRUE) #angles in radianscircadian.linear.cor(angle,x=NULL,data=NULL,hours=TRUE)
cosinor(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)cosinor.plot(angle,x=NULL,data = NULL, IDloc=NULL, ID=NULL,hours=TRUE, period=24, na.rm=TRUE,ylim=NULL,ylab="observed",xlab="Time (double plotted)", main="Cosine fit",add=FALSE,multi=FALSE,typ="l",...) cosinor.period(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=seq(23,26,1),            plot=FALSE,opti=FALSE,na.rm=TRUE)          circadian.phase(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)circadian.mean(angle,data=NULL, hours=TRUE,na.rm=TRUE)circadian.sd(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.stats(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.F(angle,group,data=NULL,hours=TRUE,na.rm=TRUE)circadian.reliability(angle,x=NULL,code=NULL,data = NULL,min=16,            oddeven=FALSE, hours=TRUE,period=24,plot=FALSE,opti=FALSE,na.rm=TRUE) circular.mean(angle,na.rm=TRUE) #angles in radianscircadian.cor(angle,data=NULL,hours=TRUE,na.rm=TRUE)  #angles in radianscircular.cor(angle,na.rm=TRUE) #angles in radianscircadian.linear.cor(angle,x=NULL,data=NULL,hours=TRUE)
cosinor(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)cosinor.plot(angle,x=NULL,data = NULL, IDloc=NULL, ID=NULL,hours=TRUE, period=24, na.rm=TRUE,ylim=NULL,ylab="observed",xlab="Time (double plotted)", main="Cosine fit",add=FALSE,multi=FALSE,typ="l",...) cosinor.period(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=seq(23,26,1),            plot=FALSE,opti=FALSE,na.rm=TRUE)          circadian.phase(angle,x=NULL,code=NULL,data=NULL,hours=TRUE,period=24,            plot=FALSE,opti=FALSE,na.rm=TRUE)circadian.mean(angle,data=NULL, hours=TRUE,na.rm=TRUE)circadian.sd(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.stats(angle,data=NULL,hours=TRUE,na.rm=TRUE)circadian.F(angle,group,data=NULL,hours=TRUE,na.rm=TRUE)circadian.reliability(angle,x=NULL,code=NULL,data = NULL,min=16,            oddeven=FALSE, hours=TRUE,period=24,plot=FALSE,opti=FALSE,na.rm=TRUE) circular.mean(angle,na.rm=TRUE) #angles in radianscircadian.cor(angle,data=NULL,hours=TRUE,na.rm=TRUE)  #angles in radianscircular.cor(angle,na.rm=TRUE) #angles in radianscircadian.linear.cor(angle,x=NULL,data=NULL,hours=TRUE)
pairwiseCount(x, y = NULL,diagonal=TRUE)pairwiseDescribe(x,y,diagonal=FALSE,...) pairwiseZero(x,y=NULL, min=0, short=TRUE)pairwiseImpute(keys,R,fix=FALSE)pairwiseReport(x,y=NULL,cut=0,diagonal=FALSE,...) pairwiseSample(x,y=NULL,diagonal=FALSE,size=100,...)pairwiseCountBig(x,size=NULL)pairwisePlot(x,y=NULL,upper=TRUE,diagonal=TRUE,labels=TRUE,show.legend=TRUE,n.legend=10,colors=FALSE,gr=NULL,minlength=6,xlas=1,ylas=2,main="Relative Frequencies",count=TRUE,...)count.pairwise(x, y = NULL,diagonal=TRUE) #deprecated
setCor(y,x,data,z=NULL,n.obs=NULL,use="pairwise",std=TRUE,square=FALSE,       main="Regression Models",plot=TRUE,show=FALSE,zero=TRUE, alpha = .05,part=FALSE)setCor.diagram(sc,main="Regression model",digits=2,show=FALSE,cex=1,l.cex=1,...)#an alias to setCorset.cor(y,x,data,z=NULL,n.obs=NULL,use="pairwise",std=TRUE,square=FALSE, main="Regression Models",plot=TRUE,show=FALSE,zero=TRUE,part=FALSE)     mat.regress(y, x,data, z=NULL,n.obs=NULL,use="pairwise",square=FALSE) #the old form#does not handle formula inputmatReg(x,y,C,m=NULL,z=NULL,n.obs=0,means=NULL,std=FALSE,raw=TRUE,part=FALSE) crossValidation(model,data,options=NULL,select=NULL)matPlot(x, type = "b", minlength=6, xlas=0,legend=NULL,      lab=NULL,pch=16,col=1:6,lty=NULL,...)
psych.misc()lowerCor(x,digits=2,use="pairwise",method="pearson",minlength=5)cor2(x,y,digits=2,use="pairwise",method="pearson")lowerMat(R, digits = 2,minlength=5)tableF(x,y)reflect(f,flip=NULL)progressBar(value,max,label=NULL) shannon(x,correct=FALSE,base=2)test.all(pl,package="psych",dependencies       = c("Depends", "Imports", "LinkingTo"),find=FALSE,skip=NULL)  levels2numeric(x)  char2numeric(x,flag=TRUE)  nchar2numeric(x,flag=TRUE) isCorrelation(x,na.rm=FALSE) #test if an object is a symmetric matrix     # with diagonals of 1 and  all values between -1 and 1 isCovariance(x)  #test if an object is a symmetric matrix    fromTo(data,from,to=NULL) #convert character names to locations as specified in colnames #of data cs(...) #convert a list of text words to  character vector acs(...) #convert a list of text words to  a single string
cta (n=3,t=5000, cues = NULL, act=NULL, inhibit=NULL,expect = NULL, consume = NULL, tendency = NULL,tstrength=NULL, type="both", fast=2,compare=FALSE,learn=TRUE,reward=NULL) cta.15(n = 3, t = 5000, cues = NULL, act = NULL, inhibit = NULL, consume = NULL,    ten = NULL,  type = "both", fast = 2)
cta (n=3,t=5000, cues = NULL, act=NULL, inhibit=NULL,expect = NULL, consume = NULL, tendency = NULL,tstrength=NULL, type="both", fast=2,compare=FALSE,learn=TRUE,reward=NULL) cta.15(n = 3, t = 5000, cues = NULL, act = NULL, inhibit = NULL, consume = NULL,    ten = NULL,  type = "both", fast = 2)
cohen.d(x, group,alpha=.05,std=TRUE,sort=NULL,dictionary=NULL,MD=TRUE,data=NULL)d.robust(x,group,trim=.2)cohen.d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)cohen.d.by(x,group,group2,alpha=.05,MD=TRUE)d2r(d)r2d(rho)d2t(d,n=NULL,n2=NULL,n1=NULL)t2d(t,n=NULL,n2=NULL,n1=NULL)m2t(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)  #returns d invisibilym2d(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)d2OVL(d)  #Percent overlap for 1 distribtiond2OVL2(d)  #Percent overlap joint distributiond2CL(d)   #Common language effect sized2U3(d)   #Proportion in higher group exceedding median of lower group
cohen.d(x, group,alpha=.05,std=TRUE,sort=NULL,dictionary=NULL,MD=TRUE,data=NULL)d.robust(x,group,trim=.2)cohen.d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)cohen.d.by(x,group,group2,alpha=.05,MD=TRUE)d2r(d)r2d(rho)d2t(d,n=NULL,n2=NULL,n1=NULL)t2d(t,n=NULL,n2=NULL,n1=NULL)m2t(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)  #returns d invisibilym2d(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)d2OVL(d)  #Percent overlap for 1 distribtiond2OVL2(d)  #Percent overlap joint distributiond2CL(d)   #Common language effect sized2U3(d)   #Proportion in higher group exceedding median of lower group
cohen.d(x, group,alpha=.05,std=TRUE,sort=NULL,dictionary=NULL,MD=TRUE,data=NULL)d.robust(x,group,trim=.2)cohen.d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)cohen.d.by(x,group,group2,alpha=.05,MD=TRUE)d2r(d)r2d(rho)d2t(d,n=NULL,n2=NULL,n1=NULL)t2d(t,n=NULL,n2=NULL,n1=NULL)m2t(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)  #returns d invisibilym2d(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)d2OVL(d)  #Percent overlap for 1 distribtiond2OVL2(d)  #Percent overlap joint distributiond2CL(d)   #Common language effect sized2U3(d)   #Proportion in higher group exceedding median of lower group
cohen.d(x, group,alpha=.05,std=TRUE,sort=NULL,dictionary=NULL,MD=TRUE,data=NULL)d.robust(x,group,trim=.2)cohen.d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)cohen.d.by(x,group,group2,alpha=.05,MD=TRUE)d2r(d)r2d(rho)d2t(d,n=NULL,n2=NULL,n1=NULL)t2d(t,n=NULL,n2=NULL,n1=NULL)m2t(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)  #returns d invisibilym2d(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)d2OVL(d)  #Percent overlap for 1 distribtiond2OVL2(d)  #Percent overlap joint distributiond2CL(d)   #Common language effect sized2U3(d)   #Proportion in higher group exceedding median of lower group
cohen.d(x, group,alpha=.05,std=TRUE,sort=NULL,dictionary=NULL,MD=TRUE,data=NULL)d.robust(x,group,trim=.2)cohen.d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)cohen.d.by(x,group,group2,alpha=.05,MD=TRUE)d2r(d)r2d(rho)d2t(d,n=NULL,n2=NULL,n1=NULL)t2d(t,n=NULL,n2=NULL,n1=NULL)m2t(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)  #returns d invisibilym2d(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)d2OVL(d)  #Percent overlap for 1 distribtiond2OVL2(d)  #Percent overlap joint distributiond2CL(d)   #Common language effect sized2U3(d)   #Proportion in higher group exceedding median of lower group
cohen.d(x, group,alpha=.05,std=TRUE,sort=NULL,dictionary=NULL,MD=TRUE,data=NULL)d.robust(x,group,trim=.2)cohen.d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)cohen.d.by(x,group,group2,alpha=.05,MD=TRUE)d2r(d)r2d(rho)d2t(d,n=NULL,n2=NULL,n1=NULL)t2d(t,n=NULL,n2=NULL,n1=NULL)m2t(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)  #returns d invisibilym2d(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)d2OVL(d)  #Percent overlap for 1 distribtiond2OVL2(d)  #Percent overlap joint distributiond2CL(d)   #Common language effect sized2U3(d)   #Proportion in higher group exceedding median of lower group
cohen.d(x, group,alpha=.05,std=TRUE,sort=NULL,dictionary=NULL,MD=TRUE,data=NULL)d.robust(x,group,trim=.2)cohen.d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)cohen.d.by(x,group,group2,alpha=.05,MD=TRUE)d2r(d)r2d(rho)d2t(d,n=NULL,n2=NULL,n1=NULL)t2d(t,n=NULL,n2=NULL,n1=NULL)m2t(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)  #returns d invisibilym2d(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)d2OVL(d)  #Percent overlap for 1 distribtiond2OVL2(d)  #Percent overlap joint distributiond2CL(d)   #Common language effect sized2U3(d)   #Proportion in higher group exceedding median of lower group
cohen.d(x, group,alpha=.05,std=TRUE,sort=NULL,dictionary=NULL,MD=TRUE,data=NULL)d.robust(x,group,trim=.2)cohen.d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)cohen.d.by(x,group,group2,alpha=.05,MD=TRUE)d2r(d)r2d(rho)d2t(d,n=NULL,n2=NULL,n1=NULL)t2d(t,n=NULL,n2=NULL,n1=NULL)m2t(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)  #returns d invisibilym2d(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)d2OVL(d)  #Percent overlap for 1 distribtiond2OVL2(d)  #Percent overlap joint distributiond2CL(d)   #Common language effect sized2U3(d)   #Proportion in higher group exceedding median of lower group
violin(x,data=NULL,var=NULL,grp=NULL,grp.name=NULL,xlab=NULL,ylab=NULL,main="Density plot",vertical=TRUE,dots=FALSE,jitter=.05,alpha=1,errors=FALSE,eyes=TRUE,adjust=1, restrict=TRUE,xlim=NULL, add=FALSE, col=NULL,pch=20,scale=NULL,...)  violinBy(x,var=NULL,grp=NULL,data=NULL,grp.name=NULL,xlab=NULL,ylab=NULL,main="Density plot",vertical=TRUE,dots=FALSE,jitter=.05,alpha= 1,errors=FALSE,eyes=TRUE,adjust=1, restrict=TRUE,xlim=NULL, add=FALSE, col=NULL,pch=20,scale=NULL,...)  densityBy(x,var=NULL,grp=NULL,data=NULL,freq=FALSE,col=c("blue","red","black"),alpha=.5,  adjust=1,ylim=NULL,xlim=NULL,xlab="Variable", ylab="Density",       main="Density Plot",legend=NULL)
describe(x, na.rm = TRUE, interp=FALSE,skew = TRUE, ranges = TRUE,trim=.1,              type=3,check=TRUE,fast=NULL,quant=NULL,IQR=FALSE,omit=FALSE,data=NULL)describeData(x,head=4,tail=4)describeFast(x)  
describeBy(x, group=NULL,mat=FALSE,type=3,digits=15,data,...)describe.by(x, group=NULL,mat=FALSE,type=3,...)  # deprecated
describeBy(x, group=NULL,mat=FALSE,type=3,digits=15,data,...)describe.by(x, group=NULL,mat=FALSE,type=3,...)  # deprecated
describe(x, na.rm = TRUE, interp=FALSE,skew = TRUE, ranges = TRUE,trim=.1,              type=3,check=TRUE,fast=NULL,quant=NULL,IQR=FALSE,omit=FALSE,data=NULL)describeData(x,head=4,tail=4)describeFast(x)  
describe(x, na.rm = TRUE, interp=FALSE,skew = TRUE, ranges = TRUE,trim=.1,              type=3,check=TRUE,fast=NULL,quant=NULL,IQR=FALSE,omit=FALSE,data=NULL)describeData(x,head=4,tail=4)describeFast(x)  
diagram(fit,...)dia.rect(x, y = NULL, labels = NULL,  cex = 1,  xlim = c(0, 1), ylim = c(0, 1),    draw=TRUE, ...)dia.ellipse(x, y = NULL, labels = NULL, cex=1,e.size=.05, xlim=c(0,1),        ylim=c(0,1),draw=TRUE,  ...) dia.triangle(x, y = NULL, labels =NULL,  cex = 1, xlim=c(0,1),ylim=c(0,1),...)dia.ellipse1(x,y,e.size=.05,xlim=c(0,1),ylim=c(0,1),draw=TRUE,...)dia.shape(x, y = NULL, labels = NULL, cex = 1,          e.size=.05, xlim=c(0,1), ylim=c(0,1), shape=1, ...)dia.arrow(from,to,labels=NULL,scale=1,cex=1,adj=2,both=FALSE,pos=NULL,l.cex,        gap.size,draw=TRUE,col="black",lty="solid",...)dia.curve(from,to,labels=NULL,scale=1,...)dia.curved.arrow(from,to,labels=NULL,scale=1,both=FALSE,dir=NULL,draw=TRUE,...)dia.self(location,labels=NULL,scale=.8,side=2,draw=TRUE,...)dia.cone(x=0, y=-2, theta=45, arrow=TRUE,curves=TRUE,add=FALSE,labels=NULL,      xlim = c(-1, 1), ylim=c(-1,1),... ) multi.self(self.list,...)multi.arrow(arrows.list,...)multi.curved.arrow(curved.list,...)multi.rect(rect.list,...)
diagram(fit,...)dia.rect(x, y = NULL, labels = NULL,  cex = 1,  xlim = c(0, 1), ylim = c(0, 1),    draw=TRUE, ...)dia.ellipse(x, y = NULL, labels = NULL, cex=1,e.size=.05, xlim=c(0,1),        ylim=c(0,1),draw=TRUE,  ...) dia.triangle(x, y = NULL, labels =NULL,  cex = 1, xlim=c(0,1),ylim=c(0,1),...)dia.ellipse1(x,y,e.size=.05,xlim=c(0,1),ylim=c(0,1),draw=TRUE,...)dia.shape(x, y = NULL, labels = NULL, cex = 1,          e.size=.05, xlim=c(0,1), ylim=c(0,1), shape=1, ...)dia.arrow(from,to,labels=NULL,scale=1,cex=1,adj=2,both=FALSE,pos=NULL,l.cex,        gap.size,draw=TRUE,col="black",lty="solid",...)dia.curve(from,to,labels=NULL,scale=1,...)dia.curved.arrow(from,to,labels=NULL,scale=1,both=FALSE,dir=NULL,draw=TRUE,...)dia.self(location,labels=NULL,scale=.8,side=2,draw=TRUE,...)dia.cone(x=0, y=-2, theta=45, arrow=TRUE,curves=TRUE,add=FALSE,labels=NULL,      xlim = c(-1, 1), ylim=c(-1,1),... ) multi.self(self.list,...)multi.arrow(arrows.list,...)multi.curved.arrow(curved.list,...)multi.rect(rect.list,...)
diagram(fit,...)dia.rect(x, y = NULL, labels = NULL,  cex = 1,  xlim = c(0, 1), ylim = c(0, 1),    draw=TRUE, ...)dia.ellipse(x, y = NULL, labels = NULL, cex=1,e.size=.05, xlim=c(0,1),        ylim=c(0,1),draw=TRUE,  ...) dia.triangle(x, y = NULL, labels =NULL,  cex = 1, xlim=c(0,1),ylim=c(0,1),...)dia.ellipse1(x,y,e.size=.05,xlim=c(0,1),ylim=c(0,1),draw=TRUE,...)dia.shape(x, y = NULL, labels = NULL, cex = 1,          e.size=.05, xlim=c(0,1), ylim=c(0,1), shape=1, ...)dia.arrow(from,to,labels=NULL,scale=1,cex=1,adj=2,both=FALSE,pos=NULL,l.cex,        gap.size,draw=TRUE,col="black",lty="solid",...)dia.curve(from,to,labels=NULL,scale=1,...)dia.curved.arrow(from,to,labels=NULL,scale=1,both=FALSE,dir=NULL,draw=TRUE,...)dia.self(location,labels=NULL,scale=.8,side=2,draw=TRUE,...)dia.cone(x=0, y=-2, theta=45, arrow=TRUE,curves=TRUE,add=FALSE,labels=NULL,      xlim = c(-1, 1), ylim=c(-1,1),... ) multi.self(self.list,...)multi.arrow(arrows.list,...)multi.curved.arrow(curved.list,...)multi.rect(rect.list,...)
diagram(fit,...)dia.rect(x, y = NULL, labels = NULL,  cex = 1,  xlim = c(0, 1), ylim = c(0, 1),    draw=TRUE, ...)dia.ellipse(x, y = NULL, labels = NULL, cex=1,e.size=.05, xlim=c(0,1),        ylim=c(0,1),draw=TRUE,  ...) dia.triangle(x, y = NULL, labels =NULL,  cex = 1, xlim=c(0,1),ylim=c(0,1),...)dia.ellipse1(x,y,e.size=.05,xlim=c(0,1),ylim=c(0,1),draw=TRUE,...)dia.shape(x, y = NULL, labels = NULL, cex = 1,          e.size=.05, xlim=c(0,1), ylim=c(0,1), shape=1, ...)dia.arrow(from,to,labels=NULL,scale=1,cex=1,adj=2,both=FALSE,pos=NULL,l.cex,        gap.size,draw=TRUE,col="black",lty="solid",...)dia.curve(from,to,labels=NULL,scale=1,...)dia.curved.arrow(from,to,labels=NULL,scale=1,both=FALSE,dir=NULL,draw=TRUE,...)dia.self(location,labels=NULL,scale=.8,side=2,draw=TRUE,...)dia.cone(x=0, y=-2, theta=45, arrow=TRUE,curves=TRUE,add=FALSE,labels=NULL,      xlim = c(-1, 1), ylim=c(-1,1),... ) multi.self(self.list,...)multi.arrow(arrows.list,...)multi.curved.arrow(curved.list,...)multi.rect(rect.list,...)
diagram(fit,...)dia.rect(x, y = NULL, labels = NULL,  cex = 1,  xlim = c(0, 1), ylim = c(0, 1),    draw=TRUE, ...)dia.ellipse(x, y = NULL, labels = NULL, cex=1,e.size=.05, xlim=c(0,1),        ylim=c(0,1),draw=TRUE,  ...) dia.triangle(x, y = NULL, labels =NULL,  cex = 1, xlim=c(0,1),ylim=c(0,1),...)dia.ellipse1(x,y,e.size=.05,xlim=c(0,1),ylim=c(0,1),draw=TRUE,...)dia.shape(x, y = NULL, labels = NULL, cex = 1,          e.size=.05, xlim=c(0,1), ylim=c(0,1), shape=1, ...)dia.arrow(from,to,labels=NULL,scale=1,cex=1,adj=2,both=FALSE,pos=NULL,l.cex,        gap.size,draw=TRUE,col="black",lty="solid",...)dia.curve(from,to,labels=NULL,scale=1,...)dia.curved.arrow(from,to,labels=NULL,scale=1,both=FALSE,dir=NULL,draw=TRUE,...)dia.self(location,labels=NULL,scale=.8,side=2,draw=TRUE,...)dia.cone(x=0, y=-2, theta=45, arrow=TRUE,curves=TRUE,add=FALSE,labels=NULL,      xlim = c(-1, 1), ylim=c(-1,1),... ) multi.self(self.list,...)multi.arrow(arrows.list,...)multi.curved.arrow(curved.list,...)multi.rect(rect.list,...)
diagram(fit,...)dia.rect(x, y = NULL, labels = NULL,  cex = 1,  xlim = c(0, 1), ylim = c(0, 1),    draw=TRUE, ...)dia.ellipse(x, y = NULL, labels = NULL, cex=1,e.size=.05, xlim=c(0,1),        ylim=c(0,1),draw=TRUE,  ...) dia.triangle(x, y = NULL, labels =NULL,  cex = 1, xlim=c(0,1),ylim=c(0,1),...)dia.ellipse1(x,y,e.size=.05,xlim=c(0,1),ylim=c(0,1),draw=TRUE,...)dia.shape(x, y = NULL, labels = NULL, cex = 1,          e.size=.05, xlim=c(0,1), ylim=c(0,1), shape=1, ...)dia.arrow(from,to,labels=NULL,scale=1,cex=1,adj=2,both=FALSE,pos=NULL,l.cex,        gap.size,draw=TRUE,col="black",lty="solid",...)dia.curve(from,to,labels=NULL,scale=1,...)dia.curved.arrow(from,to,labels=NULL,scale=1,both=FALSE,dir=NULL,draw=TRUE,...)dia.self(location,labels=NULL,scale=.8,side=2,draw=TRUE,...)dia.cone(x=0, y=-2, theta=45, arrow=TRUE,curves=TRUE,add=FALSE,labels=NULL,      xlim = c(-1, 1), ylim=c(-1,1),... ) multi.self(self.list,...)multi.arrow(arrows.list,...)multi.curved.arrow(curved.list,...)multi.rect(rect.list,...)
diagram(fit,...)dia.rect(x, y = NULL, labels = NULL,  cex = 1,  xlim = c(0, 1), ylim = c(0, 1),    draw=TRUE, ...)dia.ellipse(x, y = NULL, labels = NULL, cex=1,e.size=.05, xlim=c(0,1),        ylim=c(0,1),draw=TRUE,  ...) dia.triangle(x, y = NULL, labels =NULL,  cex = 1, xlim=c(0,1),ylim=c(0,1),...)dia.ellipse1(x,y,e.size=.05,xlim=c(0,1),ylim=c(0,1),draw=TRUE,...)dia.shape(x, y = NULL, labels = NULL, cex = 1,          e.size=.05, xlim=c(0,1), ylim=c(0,1), shape=1, ...)dia.arrow(from,to,labels=NULL,scale=1,cex=1,adj=2,both=FALSE,pos=NULL,l.cex,        gap.size,draw=TRUE,col="black",lty="solid",...)dia.curve(from,to,labels=NULL,scale=1,...)dia.curved.arrow(from,to,labels=NULL,scale=1,both=FALSE,dir=NULL,draw=TRUE,...)dia.self(location,labels=NULL,scale=.8,side=2,draw=TRUE,...)dia.cone(x=0, y=-2, theta=45, arrow=TRUE,curves=TRUE,add=FALSE,labels=NULL,      xlim = c(-1, 1), ylim=c(-1,1),... ) multi.self(self.list,...)multi.arrow(arrows.list,...)multi.curved.arrow(curved.list,...)multi.rect(rect.list,...)
diagram(fit,...)dia.rect(x, y = NULL, labels = NULL,  cex = 1,  xlim = c(0, 1), ylim = c(0, 1),    draw=TRUE, ...)dia.ellipse(x, y = NULL, labels = NULL, cex=1,e.size=.05, xlim=c(0,1),        ylim=c(0,1),draw=TRUE,  ...) dia.triangle(x, y = NULL, labels =NULL,  cex = 1, xlim=c(0,1),ylim=c(0,1),...)dia.ellipse1(x,y,e.size=.05,xlim=c(0,1),ylim=c(0,1),draw=TRUE,...)dia.shape(x, y = NULL, labels = NULL, cex = 1,          e.size=.05, xlim=c(0,1), ylim=c(0,1), shape=1, ...)dia.arrow(from,to,labels=NULL,scale=1,cex=1,adj=2,both=FALSE,pos=NULL,l.cex,        gap.size,draw=TRUE,col="black",lty="solid",...)dia.curve(from,to,labels=NULL,scale=1,...)dia.curved.arrow(from,to,labels=NULL,scale=1,both=FALSE,dir=NULL,draw=TRUE,...)dia.self(location,labels=NULL,scale=.8,side=2,draw=TRUE,...)dia.cone(x=0, y=-2, theta=45, arrow=TRUE,curves=TRUE,add=FALSE,labels=NULL,      xlim = c(-1, 1), ylim=c(-1,1),... ) multi.self(self.list,...)multi.arrow(arrows.list,...)multi.curved.arrow(curved.list,...)multi.rect(rect.list,...)
diagram(fit,...)dia.rect(x, y = NULL, labels = NULL,  cex = 1,  xlim = c(0, 1), ylim = c(0, 1),    draw=TRUE, ...)dia.ellipse(x, y = NULL, labels = NULL, cex=1,e.size=.05, xlim=c(0,1),        ylim=c(0,1),draw=TRUE,  ...) dia.triangle(x, y = NULL, labels =NULL,  cex = 1, xlim=c(0,1),ylim=c(0,1),...)dia.ellipse1(x,y,e.size=.05,xlim=c(0,1),ylim=c(0,1),draw=TRUE,...)dia.shape(x, y = NULL, labels = NULL, cex = 1,          e.size=.05, xlim=c(0,1), ylim=c(0,1), shape=1, ...)dia.arrow(from,to,labels=NULL,scale=1,cex=1,adj=2,both=FALSE,pos=NULL,l.cex,        gap.size,draw=TRUE,col="black",lty="solid",...)dia.curve(from,to,labels=NULL,scale=1,...)dia.curved.arrow(from,to,labels=NULL,scale=1,both=FALSE,dir=NULL,draw=TRUE,...)dia.self(location,labels=NULL,scale=.8,side=2,draw=TRUE,...)dia.cone(x=0, y=-2, theta=45, arrow=TRUE,curves=TRUE,add=FALSE,labels=NULL,      xlim = c(-1, 1), ylim=c(-1,1),... ) multi.self(self.list,...)multi.arrow(arrows.list,...)multi.curved.arrow(curved.list,...)multi.rect(rect.list,...)
diagram(fit,...)dia.rect(x, y = NULL, labels = NULL,  cex = 1,  xlim = c(0, 1), ylim = c(0, 1),    draw=TRUE, ...)dia.ellipse(x, y = NULL, labels = NULL, cex=1,e.size=.05, xlim=c(0,1),        ylim=c(0,1),draw=TRUE,  ...) dia.triangle(x, y = NULL, labels =NULL,  cex = 1, xlim=c(0,1),ylim=c(0,1),...)dia.ellipse1(x,y,e.size=.05,xlim=c(0,1),ylim=c(0,1),draw=TRUE,...)dia.shape(x, y = NULL, labels = NULL, cex = 1,          e.size=.05, xlim=c(0,1), ylim=c(0,1), shape=1, ...)dia.arrow(from,to,labels=NULL,scale=1,cex=1,adj=2,both=FALSE,pos=NULL,l.cex,        gap.size,draw=TRUE,col="black",lty="solid",...)dia.curve(from,to,labels=NULL,scale=1,...)dia.curved.arrow(from,to,labels=NULL,scale=1,both=FALSE,dir=NULL,draw=TRUE,...)dia.self(location,labels=NULL,scale=.8,side=2,draw=TRUE,...)dia.cone(x=0, y=-2, theta=45, arrow=TRUE,curves=TRUE,add=FALSE,labels=NULL,      xlim = c(-1, 1), ylim=c(-1,1),... ) multi.self(self.list,...)multi.arrow(arrows.list,...)multi.curved.arrow(curved.list,...)multi.rect(rect.list,...)
diagram(fit,...)dia.rect(x, y = NULL, labels = NULL,  cex = 1,  xlim = c(0, 1), ylim = c(0, 1),    draw=TRUE, ...)dia.ellipse(x, y = NULL, labels = NULL, cex=1,e.size=.05, xlim=c(0,1),        ylim=c(0,1),draw=TRUE,  ...) dia.triangle(x, y = NULL, labels =NULL,  cex = 1, xlim=c(0,1),ylim=c(0,1),...)dia.ellipse1(x,y,e.size=.05,xlim=c(0,1),ylim=c(0,1),draw=TRUE,...)dia.shape(x, y = NULL, labels = NULL, cex = 1,          e.size=.05, xlim=c(0,1), ylim=c(0,1), shape=1, ...)dia.arrow(from,to,labels=NULL,scale=1,cex=1,adj=2,both=FALSE,pos=NULL,l.cex,        gap.size,draw=TRUE,col="black",lty="solid",...)dia.curve(from,to,labels=NULL,scale=1,...)dia.curved.arrow(from,to,labels=NULL,scale=1,both=FALSE,dir=NULL,draw=TRUE,...)dia.self(location,labels=NULL,scale=.8,side=2,draw=TRUE,...)dia.cone(x=0, y=-2, theta=45, arrow=TRUE,curves=TRUE,add=FALSE,labels=NULL,      xlim = c(-1, 1), ylim=c(-1,1),... ) multi.self(self.list,...)multi.arrow(arrows.list,...)multi.curved.arrow(curved.list,...)multi.rect(rect.list,...)
omega(m,nfactors=3,fm="minres",n.iter=1,p=.05,poly=FALSE,key=NULL,    flip=TRUE,digits=2, title="Omega",sl=TRUE,labels=NULL,    plot=TRUE,n.obs=NA,rotate="oblimin",Phi=NULL,option="equal",covar=FALSE, ...)omegaSem(m,nfactors=3,fm="minres",key=NULL,flip=TRUE,digits=2,title="Omega",  sl=TRUE,labels=NULL, plot=TRUE,n.obs=NA,rotate="oblimin",  Phi = NULL, option="equal",lavaan=TRUE,...)  omegah(m,nfactors=3,fm="minres",key=NULL,flip=TRUE, digits=2,title="Omega",sl=TRUE,labels=NULL, plot=TRUE,   n.obs=NA,rotate="oblimin",Phi = NULL,option="equal",covar=FALSE,two.ok=FALSE,...) omegaFromSem(fit,m=NULL,flip=TRUE,plot=TRUE)omegaDirect(m,nfactors=3,fm="minres",rotate="oblimin",cut=.3,   plot=TRUE,main="Direct Schmid Leiman")directSl(m,nfactors=3,fm="minres",rotate="oblimin",cut=.3)
congruence(x,y=NULL)cohen.profile(x,y=NULL ,M=NULL)distance(x,y=NULL,r=2)
draw.tetra(r, t1, t2,shade=TRUE)draw.cor(r=.5,expand=10,theta=30,phi=30,N=101,nbcol=30,box=TRUE,main="Bivariate density  rho = ",cuts=NULL,all=TRUE,ellipses=TRUE,ze=.15)
draw.tetra(r, t1, t2,shade=TRUE)draw.cor(r=.5,expand=10,theta=30,phi=30,N=101,nbcol=30,box=TRUE,main="Bivariate density  rho = ",cuts=NULL,all=TRUE,ellipses=TRUE,ze=.15)
dummy.code(x,group=NULL,na.rm=TRUE,top=NULL,min=NULL)
data(Dwyer)
eigen.loadings(x)
ellipses(x, y = NULL, add = FALSE, smooth=TRUE, lm=FALSE,data=TRUE, n = 2, span=2/3, iter=3, col = "red", xlab =NULL,ylab= NULL,size=c(1,2), ...)minkowski(r=2,add=FALSE,main=NULL,xl=1,yl=1) 
faRotate(loadings,rotate="oblimin",...)bifactor(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)biquartimin(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)TargetQ(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)TargetT(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)Promax(x,m=4, normalize=FALSE, pro.m = 4) Procrustes(L,Target) #adapted from Niels Walertarget.rot(x,keys=NULL)varimin(L, Tmat = diag(ncol(L)), normalize = FALSE, eps = 1e-05, maxit = 1000)vgQ.bimin(L)   #called by bifactorvgQ.targetQ(L,Target=NULL)  #called by TargetQvgQ.varimin(L)  #called by variminequamax(L, Tmat=diag(ncol(L)), eps=1e-5, maxit=1000) 
error.bars(x,stats=NULL,data=NULL,group=NULL, ylab = "Dependent Variable",xlab="Independent Variable", main=NULL,eyes=TRUE, ylim = NULL, xlim=NULL,alpha=.05, sd=FALSE, labels = NULL, pos = NULL,  arrow.len = 0.05,arrow.col="black", add = FALSE,bars=FALSE,within=FALSE, col=c("black","blue","red"),density=-10, ...)error.bars.tab(t,way="columns",raw=FALSE,col=c('blue','red'),...)
error.bars.by(x,group,data=NULL, by.var=FALSE,x.cat=TRUE,ylab =NULL,xlab=NULL, main=NULL, ylim= NULL, xlim=NULL, eyes=TRUE,alpha=.05,sd=FALSE,labels=NULL,v.labels=NULL,v2.labels=NULL, add.labels=NULL,pos=NULL,arrow.len=.05,min.size=1,add=FALSE,bars=FALSE,within=FALSE,colors=c("black","blue","red"), lty,lines=TRUE, legend=0,pch=16,density=-10,stats=NULL,...)
error.bars(x,stats=NULL,data=NULL,group=NULL, ylab = "Dependent Variable",xlab="Independent Variable", main=NULL,eyes=TRUE, ylim = NULL, xlim=NULL,alpha=.05, sd=FALSE, labels = NULL, pos = NULL,  arrow.len = 0.05,arrow.col="black", add = FALSE,bars=FALSE,within=FALSE, col=c("black","blue","red"),density=-10, ...)error.bars.tab(t,way="columns",raw=FALSE,col=c('blue','red'),...)
error.crosses(x,y,labels=NULL,main=NULL,xlim=NULL,ylim= NULL, xlab=NULL,ylab=NULL,pos=NULL,offset=1,arrow.len=.2,alpha=.05,sd=FALSE,add=FALSE,colors=NULL,col.arrows=NULL,col.text=NULL,...)  
error.dots(x=NULL, var = NULL, se = NULL, group = NULL, sd = FALSE, effect=NULL,stats=NULL, head = 12, tail = 12, sort = TRUE, decreasing = TRUE, main = NULL, alpha = 0.05, eyes = FALSE, min.n = NULL, max.labels = 40, labels = NULL, label.width=NULL, select=NULL, groups = NULL, gdata = NULL, cex =  par("cex"),  pt.cex = cex, pch = 21, gpch = 21,  bg = par("bg"), fg=par("fg"), color = par("fg"), gcolor = par("fg"),  lcolor = "gray", xlab = NULL, ylab = NULL, xlim = NULL,add=FALSE,order=NULL, ...)
errorCircles(x, y, data, ydata = NULL, group=NULL, paired = FALSE, labels = NULL, main = NULL, xlim = NULL, ylim = NULL, xlab = NULL, ylab = NULL,add=FALSE, pos = NULL, offset = 1, arrow.len = 0.2, alpha = 0.05, sd = FALSE, bars = TRUE, circles = TRUE, colors=NULL,col.arrows=NULL,col.text=NULL,circle.size=1, ...)
esem(r, varsX, varsY, nfX = 1, nfY = 1, n.obs = NULL, fm = "minres",       rotate = "oblimin", plot = TRUE, cor = "cor", use = "pairwise",weight=NULL, ...)esem.diagram(esem=NULL,labels=NULL,cut=.3,errors=FALSE,simple=TRUE,regression=FALSE,lr=TRUE, digits=1,e.size=.1,adj=2,     main="Exploratory Structural Model", ...)interbattery(r, varsX, varsY, nfX = 1, nfY = 1, n.obs = NULL,cor = "cor",        use = "pairwise",weight=NULL)
esem(r, varsX, varsY, nfX = 1, nfY = 1, n.obs = NULL, fm = "minres",       rotate = "oblimin", plot = TRUE, cor = "cor", use = "pairwise",weight=NULL, ...)esem.diagram(esem=NULL,labels=NULL,cut=.3,errors=FALSE,simple=TRUE,regression=FALSE,lr=TRUE, digits=1,e.size=.1,adj=2,     main="Exploratory Structural Model", ...)interbattery(r, varsX, varsY, nfX = 1, nfY = 1, n.obs = NULL,cor = "cor",        use = "pairwise",weight=NULL)
fa.diagram(fa.results,Phi=NULL,fe.results=NULL,sort=TRUE,labels=NULL,cut=.3,     simple=TRUE, errors=FALSE,g=FALSE,digits=1,e.size=.05,rsize=.15,side=2,    main,cex=NULL,marg=c(.5,.5,1,.5),adj=1,ic=FALSE, ...) het.diagram(r,levels,cut=.3,digits=2,both=TRUE,         main="Heterarchy diagram",l.cex,gap.size,...) extension.diagram(fa.results,Phi=NULL,fe.results=NULL,sort=TRUE,labels=NULL,cut=.3,    e.cut=.1,simple=TRUE,e.simple=FALSE,errors=FALSE,g=FALSE,    digits=1,e.size=.05,rsize=.15,side=2,main,cex=NULL,    marg=c(.5,.5,1,.5),adj=1,ic=FALSE, ...)fa.graph(fa.results,out.file=NULL,labels=NULL,cut=.3,simple=TRUE,   size=c(8,6), node.font=c("Helvetica", 14),    edge.font=c("Helvetica", 10), rank.direction=c("RL","TB","LR","BT"),     digits=1,main="Factor Analysis", ...)fa.rgraph(fa.results,out.file=NULL,labels=NULL,cut=.3,simple=TRUE,   size=c(8,6), node.font=c("Helvetica", 14),    edge.font=c("Helvetica", 10), rank.direction=c("RL","TB","LR","BT"),     digits=1,main="Factor Analysis",graphviz=TRUE, ...)
fa(r,nfactors=1,n.obs = NA,n.iter=1, rotate="oblimin", scores="regression", residuals=FALSE, SMC=TRUE, covar=FALSE,missing=FALSE,impute="median",min.err = 0.001,  max.iter = 50,symmetric=TRUE, warnings=TRUE, fm="minres", alpha=.1,p=.05,oblique.scores=FALSE,np.obs=NULL,use="pairwise",cor="cor", correct=.5,weight=NULL,n.rotations=1,hyper=.15,...)fac(r,nfactors=1,n.obs = NA, rotate="oblimin", scores="tenBerge", residuals=FALSE, SMC=TRUE, covar=FALSE,missing=FALSE,impute="median",min.err = 0.001, max.iter=50,symmetric=TRUE,warnings=TRUE,fm="minres",alpha=.1,oblique.scores=FALSE,np.obs=NULL,use="pairwise",cor="cor",correct=.5, weight=NULL,n.rotations=1,hyper=.15,...)fa.pooled(datasets,nfactors=1,rotate="oblimin",scores="regression", residuals=FALSE,SMC=TRUE,covar=FALSE,missing=FALSE,impute="median", min.err = .001,max.iter=50,symmetric=TRUE,warnings=TRUE,fm="minres",alpha=.1, p =.05, oblique.scores=FALSE,np.obs=NULL,use="pairwise",cor="cor",correct=.5,weight=NULL,...) fa.sapa(r,nfactors=1,n.obs = NA,n.iter=1,rotate="oblimin",scores="regression", residuals=FALSE,SMC=TRUE,covar=FALSE,missing=FALSE,impute="median", min.err = .001,max.iter=50,symmetric=TRUE,warnings=TRUE,fm="minres",alpha=.1, p =.05, oblique.scores=FALSE,np.obs=NULL,use="pairwise",cor="cor",correct=.5,weight=NULL,frac=.1,...) 
factor.congruence(x, y=NULL,digits=2,use=NULL,structure=FALSE)fa.congruence(x, y=NULL,digits=2,use=NULL,structure=FALSE)
fa.diagram(fa.results,Phi=NULL,fe.results=NULL,sort=TRUE,labels=NULL,cut=.3,     simple=TRUE, errors=FALSE,g=FALSE,digits=1,e.size=.05,rsize=.15,side=2,    main,cex=NULL,marg=c(.5,.5,1,.5),adj=1,ic=FALSE, ...) het.diagram(r,levels,cut=.3,digits=2,both=TRUE,         main="Heterarchy diagram",l.cex,gap.size,...) extension.diagram(fa.results,Phi=NULL,fe.results=NULL,sort=TRUE,labels=NULL,cut=.3,    e.cut=.1,simple=TRUE,e.simple=FALSE,errors=FALSE,g=FALSE,    digits=1,e.size=.05,rsize=.15,side=2,main,cex=NULL,    marg=c(.5,.5,1,.5),adj=1,ic=FALSE, ...)fa.graph(fa.results,out.file=NULL,labels=NULL,cut=.3,simple=TRUE,   size=c(8,6), node.font=c("Helvetica", 14),    edge.font=c("Helvetica", 10), rank.direction=c("RL","TB","LR","BT"),     digits=1,main="Factor Analysis", ...)fa.rgraph(fa.results,out.file=NULL,labels=NULL,cut=.3,simple=TRUE,   size=c(8,6), node.font=c("Helvetica", 14),    edge.font=c("Helvetica", 10), rank.direction=c("RL","TB","LR","BT"),     digits=1,main="Factor Analysis",graphviz=TRUE, ...)
fa.extension(Roe,fo,correct=TRUE)fa.extend(r,nfactors=1,ov=NULL,ev=NULL,n.obs = NA, np.obs=NULL,  correct=TRUE,rotate="oblimin",SMC=TRUE,   warnings=TRUE, fm="minres",  alpha=.1,omega=FALSE,cor="cor",use="pairwise",cor.correct=.5,weight=NULL, ...) 
fa.extension(Roe,fo,correct=TRUE)fa.extend(r,nfactors=1,ov=NULL,ev=NULL,n.obs = NA, np.obs=NULL,  correct=TRUE,rotate="oblimin",SMC=TRUE,   warnings=TRUE, fm="minres",  alpha=.1,omega=FALSE,cor="cor",use="pairwise",cor.correct=.5,weight=NULL, ...) 
fa.diagram(fa.results,Phi=NULL,fe.results=NULL,sort=TRUE,labels=NULL,cut=.3,     simple=TRUE, errors=FALSE,g=FALSE,digits=1,e.size=.05,rsize=.15,side=2,    main,cex=NULL,marg=c(.5,.5,1,.5),adj=1,ic=FALSE, ...) het.diagram(r,levels,cut=.3,digits=2,both=TRUE,         main="Heterarchy diagram",l.cex,gap.size,...) extension.diagram(fa.results,Phi=NULL,fe.results=NULL,sort=TRUE,labels=NULL,cut=.3,    e.cut=.1,simple=TRUE,e.simple=FALSE,errors=FALSE,g=FALSE,    digits=1,e.size=.05,rsize=.15,side=2,main,cex=NULL,    marg=c(.5,.5,1,.5),adj=1,ic=FALSE, ...)fa.graph(fa.results,out.file=NULL,labels=NULL,cut=.3,simple=TRUE,   size=c(8,6), node.font=c("Helvetica", 14),    edge.font=c("Helvetica", 10), rank.direction=c("RL","TB","LR","BT"),     digits=1,main="Factor Analysis", ...)fa.rgraph(fa.results,out.file=NULL,labels=NULL,cut=.3,simple=TRUE,   size=c(8,6), node.font=c("Helvetica", 14),    edge.font=c("Helvetica", 10), rank.direction=c("RL","TB","LR","BT"),     digits=1,main="Factor Analysis",graphviz=TRUE, ...)
lookup(x,y,criteria=NULL)lookupItems(content=NULL,dictionary=NULL,search=c("Item","Content","item"))fa.lookup(f,dictionary=NULL,digits=2,cut=.0,n=NULL,sort=TRUE)item.lookup(f,m, dictionary,cut=.3, digits = 2) keys.lookup(keys.list,dictionary)lookupFromKeys(keys.list,dictionary,n=20,cors=NULL,sort=TRUE,suppress.names=FALSE,      digits=2)setCorLookup(x,dictionary=NULL,cut=0,digits=2,p=.05) 
fa.multi(r, nfactors = 3, nfact2 = 1, n.obs = NA, n.iter = 1, rotate = "oblimin",  scores = "regression", residuals = FALSE, SMC = TRUE, covar = FALSE, missing =  FALSE,impute = "median", min.err = 0.001, max.iter = 50, symmetric = TRUE, warnings  =TRUE, fm = "minres", alpha = 0.1, p = 0.05, oblique.scores = FALSE, np.obs = NULL,  use ="pairwise", cor = "cor", ...)fa.multi.diagram(multi.results,sort=TRUE,labels=NULL,flabels=NULL,cut=.2,gcut=.2,    simple=TRUE,errors=FALSE,    digits=1,e.size=.1,rsize=.15,side=3,main=NULL,cex=NULL,color.lines=TRUE    ,marg=c(.5,.5,1.5,.5),adj=2, ...) 
fa.multi(r, nfactors = 3, nfact2 = 1, n.obs = NA, n.iter = 1, rotate = "oblimin",  scores = "regression", residuals = FALSE, SMC = TRUE, covar = FALSE, missing =  FALSE,impute = "median", min.err = 0.001, max.iter = 50, symmetric = TRUE, warnings  =TRUE, fm = "minres", alpha = 0.1, p = 0.05, oblique.scores = FALSE, np.obs = NULL,  use ="pairwise", cor = "cor", ...)fa.multi.diagram(multi.results,sort=TRUE,labels=NULL,flabels=NULL,cut=.2,gcut=.2,    simple=TRUE,errors=FALSE,    digits=1,e.size=.1,rsize=.15,side=3,main=NULL,cex=NULL,color.lines=TRUE    ,marg=c(.5,.5,1.5,.5),adj=2, ...) 
fa.sort(fa.results,polar=FALSE)fa.organize(fa.results,o=NULL,i=NULL,cn=NULL,echelon=TRUE,flip=TRUE) 
fa.parallel(x,n.obs=NULL,fm="minres",fa="both",nfactors=1, main="Parallel Analysis Scree Plots",n.iter=20,error.bars=FALSE,se.bars=FALSE,SMC=FALSE,ylabel=NULL,show.legend=TRUE,sim=TRUE,quant=.95,cor="cor",use="pairwise",plot=TRUE,correct=.5)fa.parallel.poly(x ,n.iter=10,SMC=TRUE,  fm = "minres",correct=TRUE,sim=FALSE,       fa="both",global=TRUE)   #deprecated## S3 method for class 'poly.parallel'plot(x,show.legend=TRUE,fa="both",...)
fa.parallel(x,n.obs=NULL,fm="minres",fa="both",nfactors=1, main="Parallel Analysis Scree Plots",n.iter=20,error.bars=FALSE,se.bars=FALSE,SMC=FALSE,ylabel=NULL,show.legend=TRUE,sim=TRUE,quant=.95,cor="cor",use="pairwise",plot=TRUE,correct=.5)fa.parallel.poly(x ,n.iter=10,SMC=TRUE,  fm = "minres",correct=TRUE,sim=FALSE,       fa="both",global=TRUE)   #deprecated## S3 method for class 'poly.parallel'plot(x,show.legend=TRUE,fa="both",...)
cluster.plot(ic.results, cluster = NULL, cut = 0, labels=NULL,          title = "Cluster plot",pch=18,pos,show.points=TRUE,choose=NULL,...)fa.plot(ic.results, cluster = NULL, cut = 0, labels=NULL,title,     jiggle=FALSE,amount=.02,pch=18,pos,show.points=TRUE,choose=NULL,main=NULL,...)factor.plot(ic.results, cluster = NULL, cut = 0, labels=NULL,title,jiggle=FALSE,                  amount=.02,pch=18,pos,show.points=TRUE,...)  #deprecated
fa.poly(x,nfactors=1,n.obs = NA, n.iter=1, rotate="oblimin", SMC=TRUE,  missing=FALSE, impute="median", min.err = .001, max.iter=50, symmetric=TRUE, warnings=TRUE, fm="minres",alpha=.1, p =.05,scores="regression", oblique.scores=TRUE,        weight=NULL,global=TRUE,...)  #deprecated        factor.minres(r, nfactors=1, residuals = FALSE, rotate = "varimax",n.obs = NA,scores = FALSE,SMC=TRUE, missing=FALSE,impute="median",min.err = 0.001, digits = 2, max.iter = 50,symmetric=TRUE,warnings=TRUE,fm="minres")    #deprecatedfactor.wls(r,nfactors=1,residuals=FALSE,rotate="varimax",n.obs = NA,scores=FALSE,SMC=TRUE,missing=FALSE,impute="median", min.err = .001, digits=2,max.iter=50,symmetric=TRUE,warnings=TRUE,fm="wls")  #deprecated
fa(r,nfactors=1,n.obs = NA,n.iter=1, rotate="oblimin", scores="regression", residuals=FALSE, SMC=TRUE, covar=FALSE,missing=FALSE,impute="median",min.err = 0.001,  max.iter = 50,symmetric=TRUE, warnings=TRUE, fm="minres", alpha=.1,p=.05,oblique.scores=FALSE,np.obs=NULL,use="pairwise",cor="cor", correct=.5,weight=NULL,n.rotations=1,hyper=.15,...)fac(r,nfactors=1,n.obs = NA, rotate="oblimin", scores="tenBerge", residuals=FALSE, SMC=TRUE, covar=FALSE,missing=FALSE,impute="median",min.err = 0.001, max.iter=50,symmetric=TRUE,warnings=TRUE,fm="minres",alpha=.1,oblique.scores=FALSE,np.obs=NULL,use="pairwise",cor="cor",correct=.5, weight=NULL,n.rotations=1,hyper=.15,...)fa.pooled(datasets,nfactors=1,rotate="oblimin",scores="regression", residuals=FALSE,SMC=TRUE,covar=FALSE,missing=FALSE,impute="median", min.err = .001,max.iter=50,symmetric=TRUE,warnings=TRUE,fm="minres",alpha=.1, p =.05, oblique.scores=FALSE,np.obs=NULL,use="pairwise",cor="cor",correct=.5,weight=NULL,...) fa.sapa(r,nfactors=1,n.obs = NA,n.iter=1,rotate="oblimin",scores="regression", residuals=FALSE,SMC=TRUE,covar=FALSE,missing=FALSE,impute="median", min.err = .001,max.iter=50,symmetric=TRUE,warnings=TRUE,fm="minres",alpha=.1, p =.05, oblique.scores=FALSE,np.obs=NULL,use="pairwise",cor="cor",correct=.5,weight=NULL,frac=.1,...) 
fa.random(data, nfactors = 1, fix = TRUE, n.obs = NA, n.iter = 1, rotate = "oblimin", scores = "regression", residuals = FALSE, SMC = TRUE, covar = FALSE, missing = FALSE,   impute = "median", min.err = 0.001, max.iter = 50, symmetric = TRUE, warnings = TRUE,  fm = "minres", alpha = 0.1, p = 0.05, oblique.scores = FALSE, np.obs = NULL,   use = "pairwise", cor = "cor", weight = NULL, ...)
fa.diagram(fa.results,Phi=NULL,fe.results=NULL,sort=TRUE,labels=NULL,cut=.3,     simple=TRUE, errors=FALSE,g=FALSE,digits=1,e.size=.05,rsize=.15,side=2,    main,cex=NULL,marg=c(.5,.5,1,.5),adj=1,ic=FALSE, ...) het.diagram(r,levels,cut=.3,digits=2,both=TRUE,         main="Heterarchy diagram",l.cex,gap.size,...) extension.diagram(fa.results,Phi=NULL,fe.results=NULL,sort=TRUE,labels=NULL,cut=.3,    e.cut=.1,simple=TRUE,e.simple=FALSE,errors=FALSE,g=FALSE,    digits=1,e.size=.05,rsize=.15,side=2,main,cex=NULL,    marg=c(.5,.5,1,.5),adj=1,ic=FALSE, ...)fa.graph(fa.results,out.file=NULL,labels=NULL,cut=.3,simple=TRUE,   size=c(8,6), node.font=c("Helvetica", 14),    edge.font=c("Helvetica", 10), rank.direction=c("RL","TB","LR","BT"),     digits=1,main="Factor Analysis", ...)fa.rgraph(fa.results,out.file=NULL,labels=NULL,cut=.3,simple=TRUE,   size=c(8,6), node.font=c("Helvetica", 14),    edge.font=c("Helvetica", 10), rank.direction=c("RL","TB","LR","BT"),     digits=1,main="Factor Analysis",graphviz=TRUE, ...)
fa(r,nfactors=1,n.obs = NA,n.iter=1, rotate="oblimin", scores="regression", residuals=FALSE, SMC=TRUE, covar=FALSE,missing=FALSE,impute="median",min.err = 0.001,  max.iter = 50,symmetric=TRUE, warnings=TRUE, fm="minres", alpha=.1,p=.05,oblique.scores=FALSE,np.obs=NULL,use="pairwise",cor="cor", correct=.5,weight=NULL,n.rotations=1,hyper=.15,...)fac(r,nfactors=1,n.obs = NA, rotate="oblimin", scores="tenBerge", residuals=FALSE, SMC=TRUE, covar=FALSE,missing=FALSE,impute="median",min.err = 0.001, max.iter=50,symmetric=TRUE,warnings=TRUE,fm="minres",alpha=.1,oblique.scores=FALSE,np.obs=NULL,use="pairwise",cor="cor",correct=.5, weight=NULL,n.rotations=1,hyper=.15,...)fa.pooled(datasets,nfactors=1,rotate="oblimin",scores="regression", residuals=FALSE,SMC=TRUE,covar=FALSE,missing=FALSE,impute="median", min.err = .001,max.iter=50,symmetric=TRUE,warnings=TRUE,fm="minres",alpha=.1, p =.05, oblique.scores=FALSE,np.obs=NULL,use="pairwise",cor="cor",correct=.5,weight=NULL,...) fa.sapa(r,nfactors=1,n.obs = NA,n.iter=1,rotate="oblimin",scores="regression", residuals=FALSE,SMC=TRUE,covar=FALSE,missing=FALSE,impute="median", min.err = .001,max.iter=50,symmetric=TRUE,warnings=TRUE,fm="minres",alpha=.1, p =.05, oblique.scores=FALSE,np.obs=NULL,use="pairwise",cor="cor",correct=.5,weight=NULL,frac=.1,...) 
fa.sort(fa.results,polar=FALSE)fa.organize(fa.results,o=NULL,i=NULL,cn=NULL,echelon=TRUE,flip=TRUE) 
fa.stats(r=NULL,f,phi=NULL,n.obs=NA,np.obs=NULL,alpha=.05,fm=NULL) factor.stats(r=NULL,f,phi=NULL,n.obs=NA,np.obs=NULL,alpha=.1,fm=NULL) 
irt.fa(x,nfactors=1,correct=TRUE,plot=TRUE,n.obs=NULL,rotate="oblimin",fm="minres",        sort=FALSE,...)irt.select(x,y)fa2irt(f,rho,plot=TRUE,n.obs=NULL)
statsBy(data, group, cors = FALSE, cor="cor", method="pearson", use="pairwise", poly=FALSE, na.rm=TRUE,alpha=.05,minlength=5,weights=NULL)statsBy.boot(data,group,ntrials=10,cors=FALSE,replace=TRUE,method="pearson")statsBy.boot.summary(res.list,var="ICC2")faBy(stats, nfactors = 1, rotate = "oblimin", fm = "minres", free = TRUE, all=FALSE,   min.n = 12,quant=.1, ...)
fa(r,nfactors=1,n.obs = NA,n.iter=1, rotate="oblimin", scores="regression", residuals=FALSE, SMC=TRUE, covar=FALSE,missing=FALSE,impute="median",min.err = 0.001,  max.iter = 50,symmetric=TRUE, warnings=TRUE, fm="minres", alpha=.1,p=.05,oblique.scores=FALSE,np.obs=NULL,use="pairwise",cor="cor", correct=.5,weight=NULL,n.rotations=1,hyper=.15,...)fac(r,nfactors=1,n.obs = NA, rotate="oblimin", scores="tenBerge", residuals=FALSE, SMC=TRUE, covar=FALSE,missing=FALSE,impute="median",min.err = 0.001, max.iter=50,symmetric=TRUE,warnings=TRUE,fm="minres",alpha=.1,oblique.scores=FALSE,np.obs=NULL,use="pairwise",cor="cor",correct=.5, weight=NULL,n.rotations=1,hyper=.15,...)fa.pooled(datasets,nfactors=1,rotate="oblimin",scores="regression", residuals=FALSE,SMC=TRUE,covar=FALSE,missing=FALSE,impute="median", min.err = .001,max.iter=50,symmetric=TRUE,warnings=TRUE,fm="minres",alpha=.1, p =.05, oblique.scores=FALSE,np.obs=NULL,use="pairwise",cor="cor",correct=.5,weight=NULL,...) fa.sapa(r,nfactors=1,n.obs = NA,n.iter=1,rotate="oblimin",scores="regression", residuals=FALSE,SMC=TRUE,covar=FALSE,missing=FALSE,impute="median", min.err = .001,max.iter=50,symmetric=TRUE,warnings=TRUE,fm="minres",alpha=.1, p =.05, oblique.scores=FALSE,np.obs=NULL,use="pairwise",cor="cor",correct=.5,weight=NULL,frac=.1,...) 
faCor(r, nfactors = c(1, 1), fm = c("minres", "minres"), rotate = c("oblimin", "oblimin"), scores = c("tenBerge", "tenBerge"), adjust=c(TRUE,TRUE),     use = "pairwise", cor = "cor", weight = NULL, correct = 0.5,Target=list(NULL,NULL))
factor.congruence(x, y=NULL,digits=2,use=NULL,structure=FALSE)fa.congruence(x, y=NULL,digits=2,use=NULL,structure=FALSE)
factor.fit(r, f)
fa.poly(x,nfactors=1,n.obs = NA, n.iter=1, rotate="oblimin", SMC=TRUE,  missing=FALSE, impute="median", min.err = .001, max.iter=50, symmetric=TRUE, warnings=TRUE, fm="minres",alpha=.1, p =.05,scores="regression", oblique.scores=TRUE,        weight=NULL,global=TRUE,...)  #deprecated        factor.minres(r, nfactors=1, residuals = FALSE, rotate = "varimax",n.obs = NA,scores = FALSE,SMC=TRUE, missing=FALSE,impute="median",min.err = 0.001, digits = 2, max.iter = 50,symmetric=TRUE,warnings=TRUE,fm="minres")    #deprecatedfactor.wls(r,nfactors=1,residuals=FALSE,rotate="varimax",n.obs = NA,scores=FALSE,SMC=TRUE,missing=FALSE,impute="median", min.err = .001, digits=2,max.iter=50,symmetric=TRUE,warnings=TRUE,fm="wls")  #deprecated
factor.model(f,Phi=NULL,U2=TRUE)
fa.poly(x,nfactors=1,n.obs = NA, n.iter=1, rotate="oblimin", SMC=TRUE,  missing=FALSE, impute="median", min.err = .001, max.iter=50, symmetric=TRUE, warnings=TRUE, fm="minres",alpha=.1, p =.05,scores="regression", oblique.scores=TRUE,        weight=NULL,global=TRUE,...)  #deprecated        factor.minres(r, nfactors=1, residuals = FALSE, rotate = "varimax",n.obs = NA,scores = FALSE,SMC=TRUE, missing=FALSE,impute="median",min.err = 0.001, digits = 2, max.iter = 50,symmetric=TRUE,warnings=TRUE,fm="minres")    #deprecatedfactor.wls(r,nfactors=1,residuals=FALSE,rotate="varimax",n.obs = NA,scores=FALSE,SMC=TRUE,missing=FALSE,impute="median", min.err = .001, digits=2,max.iter=50,symmetric=TRUE,warnings=TRUE,fm="wls")  #deprecated
cluster.plot(ic.results, cluster = NULL, cut = 0, labels=NULL,          title = "Cluster plot",pch=18,pos,show.points=TRUE,choose=NULL,...)fa.plot(ic.results, cluster = NULL, cut = 0, labels=NULL,title,     jiggle=FALSE,amount=.02,pch=18,pos,show.points=TRUE,choose=NULL,main=NULL,...)factor.plot(ic.results, cluster = NULL, cut = 0, labels=NULL,title,jiggle=FALSE,                  amount=.02,pch=18,pos,show.points=TRUE,...)  #deprecated
factor.residuals(r, f)
factor.rotate(f, angle, col1=1, col2=2,plot=FALSE,...)
factor.scores(x, f, Phi = NULL, method = c("Thurstone", "tenBerge", "Anderson",        "Bartlett", "Harman","components"),rho=NULL,impute="none")
fa.stats(r=NULL,f,phi=NULL,n.obs=NA,np.obs=NULL,alpha=.05,fm=NULL) factor.stats(r=NULL,f,phi=NULL,n.obs=NA,np.obs=NULL,alpha=.1,fm=NULL) 
fa.poly(x,nfactors=1,n.obs = NA, n.iter=1, rotate="oblimin", SMC=TRUE,  missing=FALSE, impute="median", min.err = .001, max.iter=50, symmetric=TRUE, warnings=TRUE, fm="minres",alpha=.1, p =.05,scores="regression", oblique.scores=TRUE,        weight=NULL,global=TRUE,...)  #deprecated        factor.minres(r, nfactors=1, residuals = FALSE, rotate = "varimax",n.obs = NA,scores = FALSE,SMC=TRUE, missing=FALSE,impute="median",min.err = 0.001, digits = 2, max.iter = 50,symmetric=TRUE,warnings=TRUE,fm="minres")    #deprecatedfactor.wls(r,nfactors=1,residuals=FALSE,rotate="varimax",n.obs = NA,scores=FALSE,SMC=TRUE,missing=FALSE,impute="median", min.err = .001, digits=2,max.iter=50,symmetric=TRUE,warnings=TRUE,fm="wls")  #deprecated
factor2cluster(loads, cut = 0,aslist=FALSE)
faRotate(loadings,rotate="oblimin",...)bifactor(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)biquartimin(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)TargetQ(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)TargetT(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)Promax(x,m=4, normalize=FALSE, pro.m = 4) Procrustes(L,Target) #adapted from Niels Walertarget.rot(x,keys=NULL)varimin(L, Tmat = diag(ncol(L)), normalize = FALSE, eps = 1e-05, maxit = 1000)vgQ.bimin(L)   #called by bifactorvgQ.targetQ(L,Target=NULL)  #called by TargetQvgQ.varimin(L)  #called by variminequamax(L, Tmat=diag(ncol(L)), eps=1e-5, maxit=1000) 
faRotations(loadings, r = NULL, rotate = "oblimin", hyper = 0.15, n.rotations = 10,...)
fisherz(rho)fisherz2r(z)r.con(rho,n,p=.95,twotailed=TRUE)r2t(rho,n)t2r(t,df)g2r(g,df,n)chi2r(chi2,n)r2chi(rho,n)r2c(rho,sigma)cor2cov(rho,sigma)
fisherz(rho)fisherz2r(z)r.con(rho,n,p=.95,twotailed=TRUE)r2t(rho,n)t2r(t,df)g2r(g,df,n)chi2r(chi2,n)r2chi(rho,n)r2c(rho,sigma)cor2cov(rho,sigma)
fparse(expr)
psych.misc()lowerCor(x,digits=2,use="pairwise",method="pearson",minlength=5)cor2(x,y,digits=2,use="pairwise",method="pearson")lowerMat(R, digits = 2,minlength=5)tableF(x,y)reflect(f,flip=NULL)progressBar(value,max,label=NULL) shannon(x,correct=FALSE,base=2)test.all(pl,package="psych",dependencies       = c("Depends", "Imports", "LinkingTo"),find=FALSE,skip=NULL)  levels2numeric(x)  char2numeric(x,flag=TRUE)  nchar2numeric(x,flag=TRUE) isCorrelation(x,na.rm=FALSE) #test if an object is a symmetric matrix     # with diagonals of 1 and  all values between -1 and 1 isCovariance(x)  #test if an object is a symmetric matrix    fromTo(data,from,to=NULL) #convert character names to locations as specified in colnames #of data cs(...) #convert a list of text words to  character vector acs(...) #convert a list of text words to  a single string
fisherz(rho)fisherz2r(z)r.con(rho,n,p=.95,twotailed=TRUE)r2t(rho,n)t2r(t,df)g2r(g,df,n)chi2r(chi2,n)r2chi(rho,n)r2c(rho,sigma)cor2cov(rho,sigma)
data("GSBE")
geometric.mean(x,na.rm=TRUE)
splitHalf(r,raw=FALSE,brute=FALSE,n.sample=10000,covar=FALSE,check.keys=TRUE,           key=NULL,ci=.05,use="pairwise")guttman(r,key=NULL) tenberge(r)glb(r,key=NULL)glb.fa(r,key=NULL)
glb.algebraic(Cov, LoBounds = NULL, UpBounds = NULL)
splitHalf(r,raw=FALSE,brute=FALSE,n.sample=10000,covar=FALSE,check.keys=TRUE,           key=NULL,ci=.05,use="pairwise")guttman(r,key=NULL) tenberge(r)glb(r,key=NULL)glb.fa(r,key=NULL)
data(Gleser)
data(Gorsuch)
splitHalf(r,raw=FALSE,brute=FALSE,n.sample=10000,covar=FALSE,check.keys=TRUE,           key=NULL,ci=.05,use="pairwise")guttman(r,key=NULL) tenberge(r)glb(r,key=NULL)glb.fa(r,key=NULL)
data(Harman)  data(Harman.5)data(Harman.political)data(Harman.8)
data(Harman)  data(Harman.5)data(Harman.political)data(Harman.8)
data(Harman)  data(Harman.5)data(Harman.political)data(Harman.8)
data(Harman)  data(Harman.5)data(Harman.political)data(Harman.8)
data(Harman)  data(Harman.5)data(Harman.political)data(Harman.8)
harmonic.mean(x,na.rm=TRUE,zero=TRUE)
headTail(x, top=4,bottom=4,from=1,to=NULL, digits=2, hlength = 4, tlength =4, ellipsis=TRUE) headtail(x,hlength=4,tlength=4,digits=2,ellipsis=TRUE,from=1,to=NULL)topBottom(x, top=4,bottom=4,from=1,to=NULL, digits=2, hlength = 4, tlength = 4) quickView(x,top=8,bottom=8,from=1,to=NULL)
headTail(x, top=4,bottom=4,from=1,to=NULL, digits=2, hlength = 4, tlength =4, ellipsis=TRUE) headtail(x,hlength=4,tlength=4,digits=2,ellipsis=TRUE,from=1,to=NULL)topBottom(x, top=4,bottom=4,from=1,to=NULL, digits=2, hlength = 4, tlength = 4) quickView(x,top=8,bottom=8,from=1,to=NULL)
fa.diagram(fa.results,Phi=NULL,fe.results=NULL,sort=TRUE,labels=NULL,cut=.3,     simple=TRUE, errors=FALSE,g=FALSE,digits=1,e.size=.05,rsize=.15,side=2,    main,cex=NULL,marg=c(.5,.5,1,.5),adj=1,ic=FALSE, ...) het.diagram(r,levels,cut=.3,digits=2,both=TRUE,         main="Heterarchy diagram",l.cex,gap.size,...) extension.diagram(fa.results,Phi=NULL,fe.results=NULL,sort=TRUE,labels=NULL,cut=.3,    e.cut=.1,simple=TRUE,e.simple=FALSE,errors=FALSE,g=FALSE,    digits=1,e.size=.05,rsize=.15,side=2,main,cex=NULL,    marg=c(.5,.5,1,.5),adj=1,ic=FALSE, ...)fa.graph(fa.results,out.file=NULL,labels=NULL,cut=.3,simple=TRUE,   size=c(8,6), node.font=c("Helvetica", 14),    edge.font=c("Helvetica", 10), rank.direction=c("RL","TB","LR","BT"),     digits=1,main="Factor Analysis", ...)fa.rgraph(fa.results,out.file=NULL,labels=NULL,cut=.3,simple=TRUE,   size=c(8,6), node.font=c("Helvetica", 14),    edge.font=c("Helvetica", 10), rank.direction=c("RL","TB","LR","BT"),     digits=1,main="Factor Analysis",graphviz=TRUE, ...)
multi.hist(x,nrow=NULL,ncol=NULL,density=TRUE,freq=FALSE,bcol="white",      dcol=c("black","black"),dlty=c("dashed","dotted"),      main=NULL,mar=c(2,1,1,1),breaks=21,global=TRUE,...)histBy(x,var,group,data=NULL,density=TRUE,alpha=.5,breaks=21,col,xlab,            main="Histograms by group",freq=FALSE,...) 
data(Thurstone)data(Thurstone.33)data(Thurstone.9)data(Holzinger)data(Holzinger.9)data(Bechtoldt)data(Bechtoldt.1)data(Bechtoldt.2)data(Reise)
data(Thurstone)data(Thurstone.33)data(Thurstone.9)data(Holzinger)data(Holzinger.9)data(Bechtoldt)data(Bechtoldt.1)data(Bechtoldt.2)data(Reise)
ICC(x,missing=TRUE,alpha=.05,lmer=TRUE,check.keys=FALSE)
iclust(r.mat, nclusters=0, alpha=3, beta=1, beta.size=4, alpha.size=3,correct=TRUE,correct.cluster=TRUE, reverse=TRUE, beta.min=.5, output=1,digits=2,labels=NULL,cut=0, n.iterations =0, title="ICLUST", plot=TRUE, weighted=TRUE,cor.gen=TRUE,SMC=TRUE,purify=TRUE,diagonal=FALSE)ICLUST(r.mat, nclusters=0, alpha=3, beta=1, beta.size=4, alpha.size=3,correct=TRUE,correct.cluster=TRUE, reverse=TRUE, beta.min=.5, output=1, digits=2,labels=NULL,cut=0,n.iterations = 0,title="ICLUST",plot=TRUE,weighted=TRUE,cor.gen=TRUE,SMC=TRUE,purify=TRUE,diagonal=FALSE)#iclust(r.mat)    #use all defaults#iclust(r.mat,nclusters =3)    #use all defaults and if possible stop at 3 clusters#ICLUST(r.mat, output =3)     #long output shows clustering history#ICLUST(r.mat, n.iterations =3)  #clean up solution by item reassignment
iclust(r.mat, nclusters=0, alpha=3, beta=1, beta.size=4, alpha.size=3,correct=TRUE,correct.cluster=TRUE, reverse=TRUE, beta.min=.5, output=1,digits=2,labels=NULL,cut=0, n.iterations =0, title="ICLUST", plot=TRUE, weighted=TRUE,cor.gen=TRUE,SMC=TRUE,purify=TRUE,diagonal=FALSE)ICLUST(r.mat, nclusters=0, alpha=3, beta=1, beta.size=4, alpha.size=3,correct=TRUE,correct.cluster=TRUE, reverse=TRUE, beta.min=.5, output=1, digits=2,labels=NULL,cut=0,n.iterations = 0,title="ICLUST",plot=TRUE,weighted=TRUE,cor.gen=TRUE,SMC=TRUE,purify=TRUE,diagonal=FALSE)#iclust(r.mat)    #use all defaults#iclust(r.mat,nclusters =3)    #use all defaults and if possible stop at 3 clusters#ICLUST(r.mat, output =3)     #long output shows clustering history#ICLUST(r.mat, n.iterations =3)  #clean up solution by item reassignment
ICLUST.cluster(r.mat, ICLUST.options,smc.items)
iclust.diagram(ic, labels = NULL, short = FALSE, digits = 2, cex = NULL, min.size = NULL,     e.size =1,colors=c("black","blue"),      main = "ICLUST diagram",cluster.names=NULL,marg=c(.5,.5,1.5,.5))
ICLUST.graph(ic.results, out.file,min.size=1, short = FALSE,labels=NULL,size = c(8, 6), node.font = c("Helvetica", 14), edge.font = c("Helvetica", 12),  rank.direction=c("RL","TB","LR","BT"), digits = 2, title = "ICLUST", ...)
ICLUST.rgraph(ic.results, out.file = NULL, min.size = 1, short = FALSE,     labels = NULL, size = c(8, 6), node.font = c("Helvetica", 14),    edge.font = c("Helvetica", 10), rank.direction=c("RL","TB","LR","BT"),    digits = 2, title = "ICLUST",label.font=2, ...)
ICLUST.sort(ic.load, cut = 0, labels = NULL,keys=FALSE,clustsort=TRUE)
ICLUST.sort(ic.load, cut = 0, labels = NULL,keys=FALSE,clustsort=TRUE)
esem(r, varsX, varsY, nfX = 1, nfY = 1, n.obs = NULL, fm = "minres",       rotate = "oblimin", plot = TRUE, cor = "cor", use = "pairwise",weight=NULL, ...)esem.diagram(esem=NULL,labels=NULL,cut=.3,errors=FALSE,simple=TRUE,regression=FALSE,lr=TRUE, digits=1,e.size=.1,adj=2,     main="Exploratory Structural Model", ...)interbattery(r, varsX, varsY, nfX = 1, nfY = 1, n.obs = NULL,cor = "cor",        use = "pairwise",weight=NULL)
interp.median(x, w = 1,na.rm=TRUE)interp.quantiles(x, q = .5, w = 1,na.rm=TRUE)interp.quartiles(x,w=1,na.rm=TRUE)interp.boxplot(x,w=1,na.rm=TRUE)interp.values(x,w=1,na.rm=TRUE)interp.qplot.by(y,x,w=1,na.rm=TRUE,xlab="group",ylab="dependent",               ylim=NULL,arrow.len=.05,typ="b",add=FALSE,...)
interp.median(x, w = 1,na.rm=TRUE)interp.quantiles(x, q = .5, w = 1,na.rm=TRUE)interp.quartiles(x,w=1,na.rm=TRUE)interp.boxplot(x,w=1,na.rm=TRUE)interp.values(x,w=1,na.rm=TRUE)interp.qplot.by(y,x,w=1,na.rm=TRUE,xlab="group",ylab="dependent",               ylim=NULL,arrow.len=.05,typ="b",add=FALSE,...)
interp.median(x, w = 1,na.rm=TRUE)interp.quantiles(x, q = .5, w = 1,na.rm=TRUE)interp.quartiles(x,w=1,na.rm=TRUE)interp.boxplot(x,w=1,na.rm=TRUE)interp.values(x,w=1,na.rm=TRUE)interp.qplot.by(y,x,w=1,na.rm=TRUE,xlab="group",ylab="dependent",               ylim=NULL,arrow.len=.05,typ="b",add=FALSE,...)
interp.median(x, w = 1,na.rm=TRUE)interp.quantiles(x, q = .5, w = 1,na.rm=TRUE)interp.quartiles(x,w=1,na.rm=TRUE)interp.boxplot(x,w=1,na.rm=TRUE)interp.values(x,w=1,na.rm=TRUE)interp.qplot.by(y,x,w=1,na.rm=TRUE,xlab="group",ylab="dependent",               ylim=NULL,arrow.len=.05,typ="b",add=FALSE,...)
interp.median(x, w = 1,na.rm=TRUE)interp.quantiles(x, q = .5, w = 1,na.rm=TRUE)interp.quartiles(x,w=1,na.rm=TRUE)interp.boxplot(x,w=1,na.rm=TRUE)interp.values(x,w=1,na.rm=TRUE)interp.qplot.by(y,x,w=1,na.rm=TRUE,xlab="group",ylab="dependent",               ylim=NULL,arrow.len=.05,typ="b",add=FALSE,...)
interp.median(x, w = 1,na.rm=TRUE)interp.quantiles(x, q = .5, w = 1,na.rm=TRUE)interp.quartiles(x,w=1,na.rm=TRUE)interp.boxplot(x,w=1,na.rm=TRUE)interp.values(x,w=1,na.rm=TRUE)interp.qplot.by(y,x,w=1,na.rm=TRUE,xlab="group",ylab="dependent",               ylim=NULL,arrow.len=.05,typ="b",add=FALSE,...)
interp.median(x, w = 1,na.rm=TRUE)interp.quantiles(x, q = .5, w = 1,na.rm=TRUE)interp.quartiles(x,w=1,na.rm=TRUE)interp.boxplot(x,w=1,na.rm=TRUE)interp.values(x,w=1,na.rm=TRUE)interp.qplot.by(y,x,w=1,na.rm=TRUE,xlab="group",ylab="dependent",               ylim=NULL,arrow.len=.05,typ="b",add=FALSE,...)
interp.median(x, w = 1,na.rm=TRUE)interp.quantiles(x, q = .5, w = 1,na.rm=TRUE)interp.quartiles(x,w=1,na.rm=TRUE)interp.boxplot(x,w=1,na.rm=TRUE)interp.values(x,w=1,na.rm=TRUE)interp.qplot.by(y,x,w=1,na.rm=TRUE,xlab="group",ylab="dependent",               ylim=NULL,arrow.len=.05,typ="b",add=FALSE,...)
irt.person.rasch(diff, items)irt.0p(items)irt.1p(delta,items)irt.2p(delta,beta,items) 
irt.person.rasch(diff, items)irt.0p(items)irt.1p(delta,items)irt.2p(delta,beta,items) 
irt.person.rasch(diff, items)irt.0p(items)irt.1p(delta,items)irt.2p(delta,beta,items) 
irt.item.diff.rasch(items)irt.discrim(item.diff,theta,items)
irt.fa(x,nfactors=1,correct=TRUE,plot=TRUE,n.obs=NULL,rotate="oblimin",fm="minres",        sort=FALSE,...)irt.select(x,y)fa2irt(f,rho,plot=TRUE,n.obs=NULL)
irt.item.diff.rasch(items)irt.discrim(item.diff,theta,items)
irt.person.rasch(diff, items)irt.0p(items)irt.1p(delta,items)irt.2p(delta,beta,items) 
irt.responses(theta,items, breaks = 11,show.missing=FALSE, show.legend=TRUE, legend.location="topleft", colors=NULL,...)
scoreIrt(stats=NULL, items, keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic") scoreIrt.1pl(keys.list,items,correct=.5,messages=FALSE,cut=.3,bounds=c(-4,4),     mod="logistic")  #Rasch like scalingscoreIrt.2pl(itemLists,items,correct=.5,messages=FALSE,cut=.3,bounds=c(-4,4),   mod="logistic")  #2 pl scoring#the next is an alias for scoreIrt both of which are wrappers for #     score.irt.2 and score.irt.polyscore.irt(stats=NULL, items, keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic")  #the higher order call just calls one of the next two  #for dichotomous items score.irt.2(stats, items,keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic")   #for polytomous itemsscore.irt.poly(stats, items, keys=NULL, cut = 0.3,bounds=c(-4,4),mod="logistic")    #to create irt like statistics for plottingirt.stats.like(items,stats,keys=NULL,cut=.3)make.irt.stats(difficulty,discrimination)    irt.tau(x)    #find the tau values for the x objectirt.se(stats,scores=0,D=1.702)
irt.fa(x,nfactors=1,correct=TRUE,plot=TRUE,n.obs=NULL,rotate="oblimin",fm="minres",        sort=FALSE,...)irt.select(x,y)fa2irt(f,rho,plot=TRUE,n.obs=NULL)
scoreIrt(stats=NULL, items, keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic") scoreIrt.1pl(keys.list,items,correct=.5,messages=FALSE,cut=.3,bounds=c(-4,4),     mod="logistic")  #Rasch like scalingscoreIrt.2pl(itemLists,items,correct=.5,messages=FALSE,cut=.3,bounds=c(-4,4),   mod="logistic")  #2 pl scoring#the next is an alias for scoreIrt both of which are wrappers for #     score.irt.2 and score.irt.polyscore.irt(stats=NULL, items, keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic")  #the higher order call just calls one of the next two  #for dichotomous items score.irt.2(stats, items,keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic")   #for polytomous itemsscore.irt.poly(stats, items, keys=NULL, cut = 0.3,bounds=c(-4,4),mod="logistic")    #to create irt like statistics for plottingirt.stats.like(items,stats,keys=NULL,cut=.3)make.irt.stats(difficulty,discrimination)    irt.tau(x)    #find the tau values for the x objectirt.se(stats,scores=0,D=1.702)
scoreIrt(stats=NULL, items, keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic") scoreIrt.1pl(keys.list,items,correct=.5,messages=FALSE,cut=.3,bounds=c(-4,4),     mod="logistic")  #Rasch like scalingscoreIrt.2pl(itemLists,items,correct=.5,messages=FALSE,cut=.3,bounds=c(-4,4),   mod="logistic")  #2 pl scoring#the next is an alias for scoreIrt both of which are wrappers for #     score.irt.2 and score.irt.polyscore.irt(stats=NULL, items, keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic")  #the higher order call just calls one of the next two  #for dichotomous items score.irt.2(stats, items,keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic")   #for polytomous itemsscore.irt.poly(stats, items, keys=NULL, cut = 0.3,bounds=c(-4,4),mod="logistic")    #to create irt like statistics for plottingirt.stats.like(items,stats,keys=NULL,cut=.3)make.irt.stats(difficulty,discrimination)    irt.tau(x)    #find the tau values for the x objectirt.se(stats,scores=0,D=1.702)
psych.misc()lowerCor(x,digits=2,use="pairwise",method="pearson",minlength=5)cor2(x,y,digits=2,use="pairwise",method="pearson")lowerMat(R, digits = 2,minlength=5)tableF(x,y)reflect(f,flip=NULL)progressBar(value,max,label=NULL) shannon(x,correct=FALSE,base=2)test.all(pl,package="psych",dependencies       = c("Depends", "Imports", "LinkingTo"),find=FALSE,skip=NULL)  levels2numeric(x)  char2numeric(x,flag=TRUE)  nchar2numeric(x,flag=TRUE) isCorrelation(x,na.rm=FALSE) #test if an object is a symmetric matrix     # with diagonals of 1 and  all values between -1 and 1 isCovariance(x)  #test if an object is a symmetric matrix    fromTo(data,from,to=NULL) #convert character names to locations as specified in colnames #of data cs(...) #convert a list of text words to  character vector acs(...) #convert a list of text words to  a single string
psych.misc()lowerCor(x,digits=2,use="pairwise",method="pearson",minlength=5)cor2(x,y,digits=2,use="pairwise",method="pearson")lowerMat(R, digits = 2,minlength=5)tableF(x,y)reflect(f,flip=NULL)progressBar(value,max,label=NULL) shannon(x,correct=FALSE,base=2)test.all(pl,package="psych",dependencies       = c("Depends", "Imports", "LinkingTo"),find=FALSE,skip=NULL)  levels2numeric(x)  char2numeric(x,flag=TRUE)  nchar2numeric(x,flag=TRUE) isCorrelation(x,na.rm=FALSE) #test if an object is a symmetric matrix     # with diagonals of 1 and  all values between -1 and 1 isCovariance(x)  #test if an object is a symmetric matrix    fromTo(data,from,to=NULL) #convert character names to locations as specified in colnames #of data cs(...) #convert a list of text words to  character vector acs(...) #convert a list of text words to  a single string
sim.item(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,  gloading = 0, xbias = 0, ybias = 0, categorical = FALSE, low = -3, high = 3,  truncate = FALSE, cutpoint = 0)sim.circ(nvar = 72, nsub = 500, circum = TRUE, xloading = 0.6, yloading = 0.6,   gloading = 0, xbias = 0, ybias = 0, categorical = FALSE, low = -3, high = 3,   truncate = FALSE, cutpoint = 0)sim.dichot(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,     gloading = 0, xbias = 0, ybias = 0, low = 0, high = 0) item.dichot(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,  gloading = 0, xbias = 0, ybias = 0, low = 0, high = 0) sim.spherical(simple=FALSE, nx=7,ny=12 ,nsub = 500,  xloading =.55, yloading = .55,   zloading=.55, gloading=0, xbias=0,  ybias = 0, zbias=0,categorical=FALSE,    low=-3,high=3,truncate=FALSE,cutpoint=0) con2cat(old,cuts=c(0,1,2,3),where)
lookup(x,y,criteria=NULL)lookupItems(content=NULL,dictionary=NULL,search=c("Item","Content","item"))fa.lookup(f,dictionary=NULL,digits=2,cut=.0,n=NULL,sort=TRUE)item.lookup(f,m, dictionary,cut=.3, digits = 2) keys.lookup(keys.list,dictionary)lookupFromKeys(keys.list,dictionary,n=20,cors=NULL,sort=TRUE,suppress.names=FALSE,      digits=2)setCorLookup(x,dictionary=NULL,cut=0,digits=2,p=.05) 
sim.item(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,  gloading = 0, xbias = 0, ybias = 0, categorical = FALSE, low = -3, high = 3,  truncate = FALSE, cutpoint = 0)sim.circ(nvar = 72, nsub = 500, circum = TRUE, xloading = 0.6, yloading = 0.6,   gloading = 0, xbias = 0, ybias = 0, categorical = FALSE, low = -3, high = 3,   truncate = FALSE, cutpoint = 0)sim.dichot(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,     gloading = 0, xbias = 0, ybias = 0, low = 0, high = 0) item.dichot(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,  gloading = 0, xbias = 0, ybias = 0, low = 0, high = 0) sim.spherical(simple=FALSE, nx=7,ny=12 ,nsub = 500,  xloading =.55, yloading = .55,   zloading=.55, gloading=0, xbias=0,  ybias = 0, zbias=0,categorical=FALSE,    low=-3,high=3,truncate=FALSE,cutpoint=0) con2cat(old,cuts=c(0,1,2,3),where)
predicted.validity(x, criteria, keys, scale.rel = NULL, item.val = NULL)item.validity(x,criteria,keys) 
kaiser(f, rotate = "oblimin",m=4,pro.m=4)
lookup(x,y,criteria=NULL)lookupItems(content=NULL,dictionary=NULL,search=c("Item","Content","item"))fa.lookup(f,dictionary=NULL,digits=2,cut=.0,n=NULL,sort=TRUE)item.lookup(f,m, dictionary,cut=.3, digits = 2) keys.lookup(keys.list,dictionary)lookupFromKeys(keys.list,dictionary,n=20,cors=NULL,sort=TRUE,suppress.names=FALSE,      digits=2)setCorLookup(x,dictionary=NULL,cut=0,digits=2,p=.05) 
make.keys(nvars, keys.list, item.labels = NULL, key.labels = NULL)keys2list(keys,sign=TRUE)selectFromKeys(keys.list)makePositiveKeys(keys.list,sign=FALSE)
parcels(x, size = 3, max = TRUE, flip=TRUE,congruence = FALSE)keysort(keys)
KMO(r)
skew(x, na.rm = TRUE,type=3)kurtosi(x, na.rm = TRUE,type=3)mardia(x,na.rm = TRUE,plot=TRUE)
structure.diagram(fx, Phi=NULL,fy=NULL,labels=NULL,cut=.3,errors=FALSE,simple=TRUE,   regression=FALSE,lr=TRUE,Rx=NULL,Ry=NULL,digits=1,e.size=.1,    main="Structural model", ...)structure.graph(fx,  Phi = NULL,fy = NULL, out.file = NULL, labels = NULL, cut = 0.3,    errors=TRUE, simple=TRUE,regression=FALSE, size = c(8, 6),     node.font = c("Helvetica", 14), edge.font = c("Helvetica", 10),     rank.direction = c("RL", "TB", "LR", "BT"), digits = 1,      title = "Structural model", ...)structure.sem(fx,  Phi = NULL, fy = NULL,out.file = NULL, labels = NULL,     cut = 0.3, errors=TRUE, simple=TRUE,regression=FALSE)lavaan.diagram(fit,main,e.size=.1,...) sem.diagram(fit,main="A SEM from the sem package",...)sem.graph(fit,out.file=NULL,main= "A SEM from the sem package",...)
psych.misc()lowerCor(x,digits=2,use="pairwise",method="pearson",minlength=5)cor2(x,y,digits=2,use="pairwise",method="pearson")lowerMat(R, digits = 2,minlength=5)tableF(x,y)reflect(f,flip=NULL)progressBar(value,max,label=NULL) shannon(x,correct=FALSE,base=2)test.all(pl,package="psych",dependencies       = c("Depends", "Imports", "LinkingTo"),find=FALSE,skip=NULL)  levels2numeric(x)  char2numeric(x,flag=TRUE)  nchar2numeric(x,flag=TRUE) isCorrelation(x,na.rm=FALSE) #test if an object is a symmetric matrix     # with diagonals of 1 and  all values between -1 and 1 isCovariance(x)  #test if an object is a symmetric matrix    fromTo(data,from,to=NULL) #convert character names to locations as specified in colnames #of data cs(...) #convert a list of text words to  character vector acs(...) #convert a list of text words to  a single string
logistic(x,d=0, a=1,c=0, z=1)logit(p)logistic.grm( x,d=0,a=1.5,c=0,z=1,r=2,s=c(-1.5,-.5,.5,1.5))
logistic(x,d=0, a=1,c=0, z=1)logit(p)logistic.grm( x,d=0,a=1.5,c=0,z=1,r=2,s=c(-1.5,-.5,.5,1.5))
logistic(x,d=0, a=1,c=0, z=1)logit(p)logistic.grm( x,d=0,a=1.5,c=0,z=1,r=2,s=c(-1.5,-.5,.5,1.5))
lookup(x,y,criteria=NULL)lookupItems(content=NULL,dictionary=NULL,search=c("Item","Content","item"))fa.lookup(f,dictionary=NULL,digits=2,cut=.0,n=NULL,sort=TRUE)item.lookup(f,m, dictionary,cut=.3, digits = 2) keys.lookup(keys.list,dictionary)lookupFromKeys(keys.list,dictionary,n=20,cors=NULL,sort=TRUE,suppress.names=FALSE,      digits=2)setCorLookup(x,dictionary=NULL,cut=0,digits=2,p=.05) 
lookup(x,y,criteria=NULL)lookupItems(content=NULL,dictionary=NULL,search=c("Item","Content","item"))fa.lookup(f,dictionary=NULL,digits=2,cut=.0,n=NULL,sort=TRUE)item.lookup(f,m, dictionary,cut=.3, digits = 2) keys.lookup(keys.list,dictionary)lookupFromKeys(keys.list,dictionary,n=20,cors=NULL,sort=TRUE,suppress.names=FALSE,      digits=2)setCorLookup(x,dictionary=NULL,cut=0,digits=2,p=.05) 
lookup(x,y,criteria=NULL)lookupItems(content=NULL,dictionary=NULL,search=c("Item","Content","item"))fa.lookup(f,dictionary=NULL,digits=2,cut=.0,n=NULL,sort=TRUE)item.lookup(f,m, dictionary,cut=.3, digits = 2) keys.lookup(keys.list,dictionary)lookupFromKeys(keys.list,dictionary,n=20,cors=NULL,sort=TRUE,suppress.names=FALSE,      digits=2)setCorLookup(x,dictionary=NULL,cut=0,digits=2,p=.05) 
psych.misc()lowerCor(x,digits=2,use="pairwise",method="pearson",minlength=5)cor2(x,y,digits=2,use="pairwise",method="pearson")lowerMat(R, digits = 2,minlength=5)tableF(x,y)reflect(f,flip=NULL)progressBar(value,max,label=NULL) shannon(x,correct=FALSE,base=2)test.all(pl,package="psych",dependencies       = c("Depends", "Imports", "LinkingTo"),find=FALSE,skip=NULL)  levels2numeric(x)  char2numeric(x,flag=TRUE)  nchar2numeric(x,flag=TRUE) isCorrelation(x,na.rm=FALSE) #test if an object is a symmetric matrix     # with diagonals of 1 and  all values between -1 and 1 isCovariance(x)  #test if an object is a symmetric matrix    fromTo(data,from,to=NULL) #convert character names to locations as specified in colnames #of data cs(...) #convert a list of text words to  character vector acs(...) #convert a list of text words to  a single string
psych.misc()lowerCor(x,digits=2,use="pairwise",method="pearson",minlength=5)cor2(x,y,digits=2,use="pairwise",method="pearson")lowerMat(R, digits = 2,minlength=5)tableF(x,y)reflect(f,flip=NULL)progressBar(value,max,label=NULL) shannon(x,correct=FALSE,base=2)test.all(pl,package="psych",dependencies       = c("Depends", "Imports", "LinkingTo"),find=FALSE,skip=NULL)  levels2numeric(x)  char2numeric(x,flag=TRUE)  nchar2numeric(x,flag=TRUE) isCorrelation(x,na.rm=FALSE) #test if an object is a symmetric matrix     # with diagonals of 1 and  all values between -1 and 1 isCovariance(x)  #test if an object is a symmetric matrix    fromTo(data,from,to=NULL) #convert character names to locations as specified in colnames #of data cs(...) #convert a list of text words to  character vector acs(...) #convert a list of text words to  a single string
lowerUpper(lower, upper=NULL, diff=FALSE)
data(bock)
data(bock)
cohen.d(x, group,alpha=.05,std=TRUE,sort=NULL,dictionary=NULL,MD=TRUE,data=NULL)d.robust(x,group,trim=.2)cohen.d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)cohen.d.by(x,group,group2,alpha=.05,MD=TRUE)d2r(d)r2d(rho)d2t(d,n=NULL,n2=NULL,n1=NULL)t2d(t,n=NULL,n2=NULL,n1=NULL)m2t(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)  #returns d invisibilym2d(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)d2OVL(d)  #Percent overlap for 1 distribtiond2OVL2(d)  #Percent overlap joint distributiond2CL(d)   #Common language effect sized2U3(d)   #Proportion in higher group exceedding median of lower group
cohen.d(x, group,alpha=.05,std=TRUE,sort=NULL,dictionary=NULL,MD=TRUE,data=NULL)d.robust(x,group,trim=.2)cohen.d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)cohen.d.by(x,group,group2,alpha=.05,MD=TRUE)d2r(d)r2d(rho)d2t(d,n=NULL,n2=NULL,n1=NULL)t2d(t,n=NULL,n2=NULL,n1=NULL)m2t(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)  #returns d invisibilym2d(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)d2OVL(d)  #Percent overlap for 1 distribtiond2OVL2(d)  #Percent overlap joint distributiond2CL(d)   #Common language effect sized2U3(d)   #Proportion in higher group exceedding median of lower group
sim.congeneric(loads = c(0.8, 0.7, 0.6, 0.5),N = NULL,  err=NULL, short = TRUE,               categorical=FALSE, low=-3,high=3,cuts=NULL)
sim.hierarchical(gload=NULL, fload=NULL, n = 0, raw = TRUE,mu = NULL,    categorical=FALSE, low=-3,high=3)sim.bonds(nvar=9,loads=c(0,0,.5,.6),validity=.8)make.hierarchical(gload=NULL, fload=NULL, n = 0, raw = FALSE)  #deprecated
scoreIrt(stats=NULL, items, keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic") scoreIrt.1pl(keys.list,items,correct=.5,messages=FALSE,cut=.3,bounds=c(-4,4),     mod="logistic")  #Rasch like scalingscoreIrt.2pl(itemLists,items,correct=.5,messages=FALSE,cut=.3,bounds=c(-4,4),   mod="logistic")  #2 pl scoring#the next is an alias for scoreIrt both of which are wrappers for #     score.irt.2 and score.irt.polyscore.irt(stats=NULL, items, keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic")  #the higher order call just calls one of the next two  #for dichotomous items score.irt.2(stats, items,keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic")   #for polytomous itemsscore.irt.poly(stats, items, keys=NULL, cut = 0.3,bounds=c(-4,4),mod="logistic")    #to create irt like statistics for plottingirt.stats.like(items,stats,keys=NULL,cut=.3)make.irt.stats(difficulty,discrimination)    irt.tau(x)    #find the tau values for the x objectirt.se(stats,scores=0,D=1.702)
make.keys(nvars, keys.list, item.labels = NULL, key.labels = NULL)keys2list(keys,sign=TRUE)selectFromKeys(keys.list)makePositiveKeys(keys.list,sign=FALSE)
make.keys(nvars, keys.list, item.labels = NULL, key.labels = NULL)keys2list(keys,sign=TRUE)selectFromKeys(keys.list)makePositiveKeys(keys.list,sign=FALSE)
manhattan(x, criteria = NULL, keys = NULL,raw=TRUE,n.obs=NULL, abs = TRUE,   ylab = NULL, labels = NULL, log.p = FALSE,ci=.05, pch = 21, main = "Manhattan Plot of", adjust="holm",ylim = NULL,digits=2,dictionary=NULL, ...)
skew(x, na.rm = TRUE,type=3)kurtosi(x, na.rm = TRUE,type=3)mardia(x,na.rm = TRUE,plot=TRUE)
setCor(y,x,data,z=NULL,n.obs=NULL,use="pairwise",std=TRUE,square=FALSE,       main="Regression Models",plot=TRUE,show=FALSE,zero=TRUE, alpha = .05,part=FALSE)setCor.diagram(sc,main="Regression model",digits=2,show=FALSE,cex=1,l.cex=1,...)#an alias to setCorset.cor(y,x,data,z=NULL,n.obs=NULL,use="pairwise",std=TRUE,square=FALSE, main="Regression Models",plot=TRUE,show=FALSE,zero=TRUE,part=FALSE)     mat.regress(y, x,data, z=NULL,n.obs=NULL,use="pairwise",square=FALSE) #the old form#does not handle formula inputmatReg(x,y,C,m=NULL,z=NULL,n.obs=0,means=NULL,std=FALSE,raw=TRUE,part=FALSE) crossValidation(model,data,options=NULL,select=NULL)matPlot(x, type = "b", minlength=6, xlas=0,legend=NULL,      lab=NULL,pch=16,col=1:6,lty=NULL,...)
mat.sort(m, f = NULL)matSort(m, f = NULL)
setCor(y,x,data,z=NULL,n.obs=NULL,use="pairwise",std=TRUE,square=FALSE,       main="Regression Models",plot=TRUE,show=FALSE,zero=TRUE, alpha = .05,part=FALSE)setCor.diagram(sc,main="Regression model",digits=2,show=FALSE,cex=1,l.cex=1,...)#an alias to setCorset.cor(y,x,data,z=NULL,n.obs=NULL,use="pairwise",std=TRUE,square=FALSE, main="Regression Models",plot=TRUE,show=FALSE,zero=TRUE,part=FALSE)     mat.regress(y, x,data, z=NULL,n.obs=NULL,use="pairwise",square=FALSE) #the old form#does not handle formula inputmatReg(x,y,C,m=NULL,z=NULL,n.obs=0,means=NULL,std=FALSE,raw=TRUE,part=FALSE) crossValidation(model,data,options=NULL,select=NULL)matPlot(x, type = "b", minlength=6, xlas=0,legend=NULL,      lab=NULL,pch=16,col=1:6,lty=NULL,...)
setCor(y,x,data,z=NULL,n.obs=NULL,use="pairwise",std=TRUE,square=FALSE,       main="Regression Models",plot=TRUE,show=FALSE,zero=TRUE, alpha = .05,part=FALSE)setCor.diagram(sc,main="Regression model",digits=2,show=FALSE,cex=1,l.cex=1,...)#an alias to setCorset.cor(y,x,data,z=NULL,n.obs=NULL,use="pairwise",std=TRUE,square=FALSE, main="Regression Models",plot=TRUE,show=FALSE,zero=TRUE,part=FALSE)     mat.regress(y, x,data, z=NULL,n.obs=NULL,use="pairwise",square=FALSE) #the old form#does not handle formula inputmatReg(x,y,C,m=NULL,z=NULL,n.obs=0,means=NULL,std=FALSE,raw=TRUE,part=FALSE) crossValidation(model,data,options=NULL,select=NULL)matPlot(x, type = "b", minlength=6, xlas=0,legend=NULL,      lab=NULL,pch=16,col=1:6,lty=NULL,...)
mat.sort(m, f = NULL)matSort(m, f = NULL)
mediate(y, x, m=NULL, data, mod = NULL, z = NULL, n.obs = NULL, use = "pairwise", n.iter = 5000,  alpha = 0.05, std = FALSE,plot=TRUE,zero=TRUE,part=FALSE,   main="Mediation")mediate.diagram(medi,digits=2,ylim=c(3,7),xlim=c(-1,10),show.c=TRUE,     main="Mediation model",cex=1,l.cex=1,...)moderate.diagram(medi,digits=2,ylim=c(2,8),main="Moderation model", cex=1,l.cex=1,...)
mediate(y, x, m=NULL, data, mod = NULL, z = NULL, n.obs = NULL, use = "pairwise", n.iter = 5000,  alpha = 0.05, std = FALSE,plot=TRUE,zero=TRUE,part=FALSE,   main="Mediation")mediate.diagram(medi,digits=2,ylim=c(3,7),xlim=c(-1,10),show.c=TRUE,     main="Mediation model",cex=1,l.cex=1,...)moderate.diagram(medi,digits=2,ylim=c(2,8),main="Moderation model", cex=1,l.cex=1,...)
ellipses(x, y = NULL, add = FALSE, smooth=TRUE, lm=FALSE,data=TRUE, n = 2, span=2/3, iter=3, col = "red", xlab =NULL,ylab= NULL,size=c(1,2), ...)minkowski(r=2,add=FALSE,main=NULL,xl=1,yl=1) 
mixedCor(data=NULL,c=NULL,p=NULL,d=NULL,smooth=TRUE,correct=.5,global=TRUE,ncat=8,             use="pairwise",method="pearson",weight=NULL)             mixed.cor(x = NULL, p = NULL, d=NULL,smooth=TRUE, correct=.5,global=TRUE,         ncat=8,use="pairwise",method="pearson",weight=NULL)  #deprecated
mixedCor(data=NULL,c=NULL,p=NULL,d=NULL,smooth=TRUE,correct=.5,global=TRUE,ncat=8,             use="pairwise",method="pearson",weight=NULL)             mixed.cor(x = NULL, p = NULL, d=NULL,smooth=TRUE, correct=.5,global=TRUE,         ncat=8,use="pairwise",method="pearson",weight=NULL)  #deprecated
mlr(x, grp = "id", Time = "time", items = c(3:5),alpha=TRUE,icc=FALSE, aov=TRUE,      lmer=FALSE,lme = TRUE,long=FALSE,values=NA,na.action="na.omit",plot=FALSE,        main="Lattice Plot by subjects over time")mlArrange(x, grp = "id", Time = "time", items = c(3:5),extra=NULL)mlPlot(x, grp = "id", Time = "time", items = c(3:5),extra=NULL,    col=c("blue","red","black","grey"),    main="Lattice Plot by subjects over time",...)multilevel.reliability(x, grp = "id", Time = "time", items = c(3:5),alpha=TRUE,icc=FALSE, aov=TRUE,lmer=FALSE,lme = TRUE,long=FALSE,values=NA,na.action="na.omit",   plot=FALSE,main="Lattice Plot by subjects over time") #alias for mlr
mlr(x, grp = "id", Time = "time", items = c(3:5),alpha=TRUE,icc=FALSE, aov=TRUE,      lmer=FALSE,lme = TRUE,long=FALSE,values=NA,na.action="na.omit",plot=FALSE,        main="Lattice Plot by subjects over time")mlArrange(x, grp = "id", Time = "time", items = c(3:5),extra=NULL)mlPlot(x, grp = "id", Time = "time", items = c(3:5),extra=NULL,    col=c("blue","red","black","grey"),    main="Lattice Plot by subjects over time",...)multilevel.reliability(x, grp = "id", Time = "time", items = c(3:5),alpha=TRUE,icc=FALSE, aov=TRUE,lmer=FALSE,lme = TRUE,long=FALSE,values=NA,na.action="na.omit",   plot=FALSE,main="Lattice Plot by subjects over time") #alias for mlr
mlr(x, grp = "id", Time = "time", items = c(3:5),alpha=TRUE,icc=FALSE, aov=TRUE,      lmer=FALSE,lme = TRUE,long=FALSE,values=NA,na.action="na.omit",plot=FALSE,        main="Lattice Plot by subjects over time")mlArrange(x, grp = "id", Time = "time", items = c(3:5),extra=NULL)mlPlot(x, grp = "id", Time = "time", items = c(3:5),extra=NULL,    col=c("blue","red","black","grey"),    main="Lattice Plot by subjects over time",...)multilevel.reliability(x, grp = "id", Time = "time", items = c(3:5),alpha=TRUE,icc=FALSE, aov=TRUE,lmer=FALSE,lme = TRUE,long=FALSE,values=NA,na.action="na.omit",   plot=FALSE,main="Lattice Plot by subjects over time") #alias for mlr
mediate(y, x, m=NULL, data, mod = NULL, z = NULL, n.obs = NULL, use = "pairwise", n.iter = 5000,  alpha = 0.05, std = FALSE,plot=TRUE,zero=TRUE,part=FALSE,   main="Mediation")mediate.diagram(medi,digits=2,ylim=c(3,7),xlim=c(-1,10),show.c=TRUE,     main="Mediation model",cex=1,l.cex=1,...)moderate.diagram(medi,digits=2,ylim=c(2,8),main="Moderation model", cex=1,l.cex=1,...)
mssd(x,group=NULL, lag = 1,na.rm=TRUE)rmssd(x,group=NULL, lag=1, na.rm=TRUE)autoR(x,group=NULL,lag=1,na.rm=TRUE,use="pairwise")
diagram(fit,...)dia.rect(x, y = NULL, labels = NULL,  cex = 1,  xlim = c(0, 1), ylim = c(0, 1),    draw=TRUE, ...)dia.ellipse(x, y = NULL, labels = NULL, cex=1,e.size=.05, xlim=c(0,1),        ylim=c(0,1),draw=TRUE,  ...) dia.triangle(x, y = NULL, labels =NULL,  cex = 1, xlim=c(0,1),ylim=c(0,1),...)dia.ellipse1(x,y,e.size=.05,xlim=c(0,1),ylim=c(0,1),draw=TRUE,...)dia.shape(x, y = NULL, labels = NULL, cex = 1,          e.size=.05, xlim=c(0,1), ylim=c(0,1), shape=1, ...)dia.arrow(from,to,labels=NULL,scale=1,cex=1,adj=2,both=FALSE,pos=NULL,l.cex,        gap.size,draw=TRUE,col="black",lty="solid",...)dia.curve(from,to,labels=NULL,scale=1,...)dia.curved.arrow(from,to,labels=NULL,scale=1,both=FALSE,dir=NULL,draw=TRUE,...)dia.self(location,labels=NULL,scale=.8,side=2,draw=TRUE,...)dia.cone(x=0, y=-2, theta=45, arrow=TRUE,curves=TRUE,add=FALSE,labels=NULL,      xlim = c(-1, 1), ylim=c(-1,1),... ) multi.self(self.list,...)multi.arrow(arrows.list,...)multi.curved.arrow(curved.list,...)multi.rect(rect.list,...)
diagram(fit,...)dia.rect(x, y = NULL, labels = NULL,  cex = 1,  xlim = c(0, 1), ylim = c(0, 1),    draw=TRUE, ...)dia.ellipse(x, y = NULL, labels = NULL, cex=1,e.size=.05, xlim=c(0,1),        ylim=c(0,1),draw=TRUE,  ...) dia.triangle(x, y = NULL, labels =NULL,  cex = 1, xlim=c(0,1),ylim=c(0,1),...)dia.ellipse1(x,y,e.size=.05,xlim=c(0,1),ylim=c(0,1),draw=TRUE,...)dia.shape(x, y = NULL, labels = NULL, cex = 1,          e.size=.05, xlim=c(0,1), ylim=c(0,1), shape=1, ...)dia.arrow(from,to,labels=NULL,scale=1,cex=1,adj=2,both=FALSE,pos=NULL,l.cex,        gap.size,draw=TRUE,col="black",lty="solid",...)dia.curve(from,to,labels=NULL,scale=1,...)dia.curved.arrow(from,to,labels=NULL,scale=1,both=FALSE,dir=NULL,draw=TRUE,...)dia.self(location,labels=NULL,scale=.8,side=2,draw=TRUE,...)dia.cone(x=0, y=-2, theta=45, arrow=TRUE,curves=TRUE,add=FALSE,labels=NULL,      xlim = c(-1, 1), ylim=c(-1,1),... ) multi.self(self.list,...)multi.arrow(arrows.list,...)multi.curved.arrow(curved.list,...)multi.rect(rect.list,...)
multi.hist(x,nrow=NULL,ncol=NULL,density=TRUE,freq=FALSE,bcol="white",      dcol=c("black","black"),dlty=c("dashed","dotted"),      main=NULL,mar=c(2,1,1,1),breaks=21,global=TRUE,...)histBy(x,var,group,data=NULL,density=TRUE,alpha=.5,breaks=21,col,xlab,            main="Histograms by group",freq=FALSE,...) 
diagram(fit,...)dia.rect(x, y = NULL, labels = NULL,  cex = 1,  xlim = c(0, 1), ylim = c(0, 1),    draw=TRUE, ...)dia.ellipse(x, y = NULL, labels = NULL, cex=1,e.size=.05, xlim=c(0,1),        ylim=c(0,1),draw=TRUE,  ...) dia.triangle(x, y = NULL, labels =NULL,  cex = 1, xlim=c(0,1),ylim=c(0,1),...)dia.ellipse1(x,y,e.size=.05,xlim=c(0,1),ylim=c(0,1),draw=TRUE,...)dia.shape(x, y = NULL, labels = NULL, cex = 1,          e.size=.05, xlim=c(0,1), ylim=c(0,1), shape=1, ...)dia.arrow(from,to,labels=NULL,scale=1,cex=1,adj=2,both=FALSE,pos=NULL,l.cex,        gap.size,draw=TRUE,col="black",lty="solid",...)dia.curve(from,to,labels=NULL,scale=1,...)dia.curved.arrow(from,to,labels=NULL,scale=1,both=FALSE,dir=NULL,draw=TRUE,...)dia.self(location,labels=NULL,scale=.8,side=2,draw=TRUE,...)dia.cone(x=0, y=-2, theta=45, arrow=TRUE,curves=TRUE,add=FALSE,labels=NULL,      xlim = c(-1, 1), ylim=c(-1,1),... ) multi.self(self.list,...)multi.arrow(arrows.list,...)multi.curved.arrow(curved.list,...)multi.rect(rect.list,...)
diagram(fit,...)dia.rect(x, y = NULL, labels = NULL,  cex = 1,  xlim = c(0, 1), ylim = c(0, 1),    draw=TRUE, ...)dia.ellipse(x, y = NULL, labels = NULL, cex=1,e.size=.05, xlim=c(0,1),        ylim=c(0,1),draw=TRUE,  ...) dia.triangle(x, y = NULL, labels =NULL,  cex = 1, xlim=c(0,1),ylim=c(0,1),...)dia.ellipse1(x,y,e.size=.05,xlim=c(0,1),ylim=c(0,1),draw=TRUE,...)dia.shape(x, y = NULL, labels = NULL, cex = 1,          e.size=.05, xlim=c(0,1), ylim=c(0,1), shape=1, ...)dia.arrow(from,to,labels=NULL,scale=1,cex=1,adj=2,both=FALSE,pos=NULL,l.cex,        gap.size,draw=TRUE,col="black",lty="solid",...)dia.curve(from,to,labels=NULL,scale=1,...)dia.curved.arrow(from,to,labels=NULL,scale=1,both=FALSE,dir=NULL,draw=TRUE,...)dia.self(location,labels=NULL,scale=.8,side=2,draw=TRUE,...)dia.cone(x=0, y=-2, theta=45, arrow=TRUE,curves=TRUE,add=FALSE,labels=NULL,      xlim = c(-1, 1), ylim=c(-1,1),... ) multi.self(self.list,...)multi.arrow(arrows.list,...)multi.curved.arrow(curved.list,...)multi.rect(rect.list,...)
mlr(x, grp = "id", Time = "time", items = c(3:5),alpha=TRUE,icc=FALSE, aov=TRUE,      lmer=FALSE,lme = TRUE,long=FALSE,values=NA,na.action="na.omit",plot=FALSE,        main="Lattice Plot by subjects over time")mlArrange(x, grp = "id", Time = "time", items = c(3:5),extra=NULL)mlPlot(x, grp = "id", Time = "time", items = c(3:5),extra=NULL,    col=c("blue","red","black","grey"),    main="Lattice Plot by subjects over time",...)multilevel.reliability(x, grp = "id", Time = "time", items = c(3:5),alpha=TRUE,icc=FALSE, aov=TRUE,lmer=FALSE,lme = TRUE,long=FALSE,values=NA,na.action="na.omit",   plot=FALSE,main="Lattice Plot by subjects over time") #alias for mlr
psych.misc()lowerCor(x,digits=2,use="pairwise",method="pearson",minlength=5)cor2(x,y,digits=2,use="pairwise",method="pearson")lowerMat(R, digits = 2,minlength=5)tableF(x,y)reflect(f,flip=NULL)progressBar(value,max,label=NULL) shannon(x,correct=FALSE,base=2)test.all(pl,package="psych",dependencies       = c("Depends", "Imports", "LinkingTo"),find=FALSE,skip=NULL)  levels2numeric(x)  char2numeric(x,flag=TRUE)  nchar2numeric(x,flag=TRUE) isCorrelation(x,na.rm=FALSE) #test if an object is a symmetric matrix     # with diagonals of 1 and  all values between -1 and 1 isCovariance(x)  #test if an object is a symmetric matrix    fromTo(data,from,to=NULL) #convert character names to locations as specified in colnames #of data cs(...) #convert a list of text words to  character vector acs(...) #convert a list of text words to  a single string
vss(x, n = 8, rotate = "varimax", diagonal = FALSE, fm = "minres", n.obs=NULL,plot=TRUE,title="Very Simple Structure",use="pairwise",cor="cor",...)VSS(x, n = 8, rotate = "varimax", diagonal = FALSE, fm = "minres", n.obs=NULL,plot=TRUE,title="Very Simple Structure",use="pairwise",cor="cor",...)nfactors(x,n=20,rotate="varimax",diagonal=FALSE,fm="minres",n.obs=NULL,             title="Number of Factors",pch=16,use="pairwise", cor="cor",...)
omega(m,nfactors=3,fm="minres",n.iter=1,p=.05,poly=FALSE,key=NULL,    flip=TRUE,digits=2, title="Omega",sl=TRUE,labels=NULL,    plot=TRUE,n.obs=NA,rotate="oblimin",Phi=NULL,option="equal",covar=FALSE, ...)omegaSem(m,nfactors=3,fm="minres",key=NULL,flip=TRUE,digits=2,title="Omega",  sl=TRUE,labels=NULL, plot=TRUE,n.obs=NA,rotate="oblimin",  Phi = NULL, option="equal",lavaan=TRUE,...)  omegah(m,nfactors=3,fm="minres",key=NULL,flip=TRUE, digits=2,title="Omega",sl=TRUE,labels=NULL, plot=TRUE,   n.obs=NA,rotate="oblimin",Phi = NULL,option="equal",covar=FALSE,two.ok=FALSE,...) omegaFromSem(fit,m=NULL,flip=TRUE,plot=TRUE)omegaDirect(m,nfactors=3,fm="minres",rotate="oblimin",cut=.3,   plot=TRUE,main="Direct Schmid Leiman")directSl(m,nfactors=3,fm="minres",rotate="oblimin",cut=.3)
omega.diagram(om.results,sl=TRUE,sort=TRUE,labels=NULL,flabels=NULL,cut=.2,gcut=.2,simple=TRUE,  errors=FALSE, digits=1,e.size=.1,rsize=.15,side=3,    main=NULL,cex=NULL,color.lines=TRUE,marg=c(.5,.5,1.5,.5),adj=2, ...) omega.graph(om.results, out.file = NULL,  sl = TRUE, labels = NULL, size = c(8, 6),     node.font = c("Helvetica", 14), edge.font = c("Helvetica", 10),      rank.direction=c("RL","TB","LR","BT"), digits = 1, title = "Omega", ...)
omega.diagram(om.results,sl=TRUE,sort=TRUE,labels=NULL,flabels=NULL,cut=.2,gcut=.2,simple=TRUE,  errors=FALSE, digits=1,e.size=.1,rsize=.15,side=3,    main=NULL,cex=NULL,color.lines=TRUE,marg=c(.5,.5,1.5,.5),adj=2, ...) omega.graph(om.results, out.file = NULL,  sl = TRUE, labels = NULL, size = c(8, 6),     node.font = c("Helvetica", 14), edge.font = c("Helvetica", 10),      rank.direction=c("RL","TB","LR","BT"), digits = 1, title = "Omega", ...)
omega(m,nfactors=3,fm="minres",n.iter=1,p=.05,poly=FALSE,key=NULL,    flip=TRUE,digits=2, title="Omega",sl=TRUE,labels=NULL,    plot=TRUE,n.obs=NA,rotate="oblimin",Phi=NULL,option="equal",covar=FALSE, ...)omegaSem(m,nfactors=3,fm="minres",key=NULL,flip=TRUE,digits=2,title="Omega",  sl=TRUE,labels=NULL, plot=TRUE,n.obs=NA,rotate="oblimin",  Phi = NULL, option="equal",lavaan=TRUE,...)  omegah(m,nfactors=3,fm="minres",key=NULL,flip=TRUE, digits=2,title="Omega",sl=TRUE,labels=NULL, plot=TRUE,   n.obs=NA,rotate="oblimin",Phi = NULL,option="equal",covar=FALSE,two.ok=FALSE,...) omegaFromSem(fit,m=NULL,flip=TRUE,plot=TRUE)omegaDirect(m,nfactors=3,fm="minres",rotate="oblimin",cut=.3,   plot=TRUE,main="Direct Schmid Leiman")directSl(m,nfactors=3,fm="minres",rotate="oblimin",cut=.3)
omega(m,nfactors=3,fm="minres",n.iter=1,p=.05,poly=FALSE,key=NULL,    flip=TRUE,digits=2, title="Omega",sl=TRUE,labels=NULL,    plot=TRUE,n.obs=NA,rotate="oblimin",Phi=NULL,option="equal",covar=FALSE, ...)omegaSem(m,nfactors=3,fm="minres",key=NULL,flip=TRUE,digits=2,title="Omega",  sl=TRUE,labels=NULL, plot=TRUE,n.obs=NA,rotate="oblimin",  Phi = NULL, option="equal",lavaan=TRUE,...)  omegah(m,nfactors=3,fm="minres",key=NULL,flip=TRUE, digits=2,title="Omega",sl=TRUE,labels=NULL, plot=TRUE,   n.obs=NA,rotate="oblimin",Phi = NULL,option="equal",covar=FALSE,two.ok=FALSE,...) omegaFromSem(fit,m=NULL,flip=TRUE,plot=TRUE)omegaDirect(m,nfactors=3,fm="minres",rotate="oblimin",cut=.3,   plot=TRUE,main="Direct Schmid Leiman")directSl(m,nfactors=3,fm="minres",rotate="oblimin",cut=.3)
omega(m,nfactors=3,fm="minres",n.iter=1,p=.05,poly=FALSE,key=NULL,    flip=TRUE,digits=2, title="Omega",sl=TRUE,labels=NULL,    plot=TRUE,n.obs=NA,rotate="oblimin",Phi=NULL,option="equal",covar=FALSE, ...)omegaSem(m,nfactors=3,fm="minres",key=NULL,flip=TRUE,digits=2,title="Omega",  sl=TRUE,labels=NULL, plot=TRUE,n.obs=NA,rotate="oblimin",  Phi = NULL, option="equal",lavaan=TRUE,...)  omegah(m,nfactors=3,fm="minres",key=NULL,flip=TRUE, digits=2,title="Omega",sl=TRUE,labels=NULL, plot=TRUE,   n.obs=NA,rotate="oblimin",Phi = NULL,option="equal",covar=FALSE,two.ok=FALSE,...) omegaFromSem(fit,m=NULL,flip=TRUE,plot=TRUE)omegaDirect(m,nfactors=3,fm="minres",rotate="oblimin",cut=.3,   plot=TRUE,main="Direct Schmid Leiman")directSl(m,nfactors=3,fm="minres",rotate="oblimin",cut=.3)
omega(m,nfactors=3,fm="minres",n.iter=1,p=.05,poly=FALSE,key=NULL,    flip=TRUE,digits=2, title="Omega",sl=TRUE,labels=NULL,    plot=TRUE,n.obs=NA,rotate="oblimin",Phi=NULL,option="equal",covar=FALSE, ...)omegaSem(m,nfactors=3,fm="minres",key=NULL,flip=TRUE,digits=2,title="Omega",  sl=TRUE,labels=NULL, plot=TRUE,n.obs=NA,rotate="oblimin",  Phi = NULL, option="equal",lavaan=TRUE,...)  omegah(m,nfactors=3,fm="minres",key=NULL,flip=TRUE, digits=2,title="Omega",sl=TRUE,labels=NULL, plot=TRUE,   n.obs=NA,rotate="oblimin",Phi = NULL,option="equal",covar=FALSE,two.ok=FALSE,...) omegaFromSem(fit,m=NULL,flip=TRUE,plot=TRUE)omegaDirect(m,nfactors=3,fm="minres",rotate="oblimin",cut=.3,   plot=TRUE,main="Direct Schmid Leiman")directSl(m,nfactors=3,fm="minres",rotate="oblimin",cut=.3)
outlier(x, plot = TRUE, bad = 5,na.rm = TRUE, xlab, ylab, ...)
p.rep(p = 0.05, n=NULL,twotailed = FALSE)p.rep.f(F,df2,twotailed=FALSE) p.rep.r(r,n,twotailed=TRUE) p.rep.t(t,df,df2=NULL,twotailed=TRUE)
p.rep(p = 0.05, n=NULL,twotailed = FALSE)p.rep.f(F,df2,twotailed=FALSE) p.rep.r(r,n,twotailed=TRUE) p.rep.t(t,df,df2=NULL,twotailed=TRUE)
p.rep(p = 0.05, n=NULL,twotailed = FALSE)p.rep.f(F,df2,twotailed=FALSE) p.rep.r(r,n,twotailed=TRUE) p.rep.t(t,df,df2=NULL,twotailed=TRUE)
p.rep(p = 0.05, n=NULL,twotailed = FALSE)p.rep.f(F,df2,twotailed=FALSE) p.rep.r(r,n,twotailed=TRUE) p.rep.t(t,df,df2=NULL,twotailed=TRUE)
paired.r(xy, xz, yz=NULL, n, n2=NULL,twotailed=TRUE)
## S3 method for class 'panels'pairs(x, smooth = TRUE, scale = FALSE, density=TRUE,ellipses=TRUE,     digits = 2,method="pearson", pch = 20, lm=FALSE,cor=TRUE,jiggle=FALSE,factor=2,      hist.col="cyan",show.points=TRUE,rug=TRUE, breaks = "Sturges",cex.cor=1,wt=NULL,     smoother=FALSE,stars=FALSE,ci=FALSE,alpha=.05, ...)
pairwiseCount(x, y = NULL,diagonal=TRUE)pairwiseDescribe(x,y,diagonal=FALSE,...) pairwiseZero(x,y=NULL, min=0, short=TRUE)pairwiseImpute(keys,R,fix=FALSE)pairwiseReport(x,y=NULL,cut=0,diagonal=FALSE,...) pairwiseSample(x,y=NULL,diagonal=FALSE,size=100,...)pairwiseCountBig(x,size=NULL)pairwisePlot(x,y=NULL,upper=TRUE,diagonal=TRUE,labels=TRUE,show.legend=TRUE,n.legend=10,colors=FALSE,gr=NULL,minlength=6,xlas=1,ylas=2,main="Relative Frequencies",count=TRUE,...)count.pairwise(x, y = NULL,diagonal=TRUE) #deprecated
pairwiseCount(x, y = NULL,diagonal=TRUE)pairwiseDescribe(x,y,diagonal=FALSE,...) pairwiseZero(x,y=NULL, min=0, short=TRUE)pairwiseImpute(keys,R,fix=FALSE)pairwiseReport(x,y=NULL,cut=0,diagonal=FALSE,...) pairwiseSample(x,y=NULL,diagonal=FALSE,size=100,...)pairwiseCountBig(x,size=NULL)pairwisePlot(x,y=NULL,upper=TRUE,diagonal=TRUE,labels=TRUE,show.legend=TRUE,n.legend=10,colors=FALSE,gr=NULL,minlength=6,xlas=1,ylas=2,main="Relative Frequencies",count=TRUE,...)count.pairwise(x, y = NULL,diagonal=TRUE) #deprecated
pairwiseCount(x, y = NULL,diagonal=TRUE)pairwiseDescribe(x,y,diagonal=FALSE,...) pairwiseZero(x,y=NULL, min=0, short=TRUE)pairwiseImpute(keys,R,fix=FALSE)pairwiseReport(x,y=NULL,cut=0,diagonal=FALSE,...) pairwiseSample(x,y=NULL,diagonal=FALSE,size=100,...)pairwiseCountBig(x,size=NULL)pairwisePlot(x,y=NULL,upper=TRUE,diagonal=TRUE,labels=TRUE,show.legend=TRUE,n.legend=10,colors=FALSE,gr=NULL,minlength=6,xlas=1,ylas=2,main="Relative Frequencies",count=TRUE,...)count.pairwise(x, y = NULL,diagonal=TRUE) #deprecated
pairwiseCount(x, y = NULL,diagonal=TRUE)pairwiseDescribe(x,y,diagonal=FALSE,...) pairwiseZero(x,y=NULL, min=0, short=TRUE)pairwiseImpute(keys,R,fix=FALSE)pairwiseReport(x,y=NULL,cut=0,diagonal=FALSE,...) pairwiseSample(x,y=NULL,diagonal=FALSE,size=100,...)pairwiseCountBig(x,size=NULL)pairwisePlot(x,y=NULL,upper=TRUE,diagonal=TRUE,labels=TRUE,show.legend=TRUE,n.legend=10,colors=FALSE,gr=NULL,minlength=6,xlas=1,ylas=2,main="Relative Frequencies",count=TRUE,...)count.pairwise(x, y = NULL,diagonal=TRUE) #deprecated
pairwiseCount(x, y = NULL,diagonal=TRUE)pairwiseDescribe(x,y,diagonal=FALSE,...) pairwiseZero(x,y=NULL, min=0, short=TRUE)pairwiseImpute(keys,R,fix=FALSE)pairwiseReport(x,y=NULL,cut=0,diagonal=FALSE,...) pairwiseSample(x,y=NULL,diagonal=FALSE,size=100,...)pairwiseCountBig(x,size=NULL)pairwisePlot(x,y=NULL,upper=TRUE,diagonal=TRUE,labels=TRUE,show.legend=TRUE,n.legend=10,colors=FALSE,gr=NULL,minlength=6,xlas=1,ylas=2,main="Relative Frequencies",count=TRUE,...)count.pairwise(x, y = NULL,diagonal=TRUE) #deprecated
pairwiseCount(x, y = NULL,diagonal=TRUE)pairwiseDescribe(x,y,diagonal=FALSE,...) pairwiseZero(x,y=NULL, min=0, short=TRUE)pairwiseImpute(keys,R,fix=FALSE)pairwiseReport(x,y=NULL,cut=0,diagonal=FALSE,...) pairwiseSample(x,y=NULL,diagonal=FALSE,size=100,...)pairwiseCountBig(x,size=NULL)pairwisePlot(x,y=NULL,upper=TRUE,diagonal=TRUE,labels=TRUE,show.legend=TRUE,n.legend=10,colors=FALSE,gr=NULL,minlength=6,xlas=1,ylas=2,main="Relative Frequencies",count=TRUE,...)count.pairwise(x, y = NULL,diagonal=TRUE) #deprecated
pairwiseCount(x, y = NULL,diagonal=TRUE)pairwiseDescribe(x,y,diagonal=FALSE,...) pairwiseZero(x,y=NULL, min=0, short=TRUE)pairwiseImpute(keys,R,fix=FALSE)pairwiseReport(x,y=NULL,cut=0,diagonal=FALSE,...) pairwiseSample(x,y=NULL,diagonal=FALSE,size=100,...)pairwiseCountBig(x,size=NULL)pairwisePlot(x,y=NULL,upper=TRUE,diagonal=TRUE,labels=TRUE,show.legend=TRUE,n.legend=10,colors=FALSE,gr=NULL,minlength=6,xlas=1,ylas=2,main="Relative Frequencies",count=TRUE,...)count.pairwise(x, y = NULL,diagonal=TRUE) #deprecated
pairwiseCount(x, y = NULL,diagonal=TRUE)pairwiseDescribe(x,y,diagonal=FALSE,...) pairwiseZero(x,y=NULL, min=0, short=TRUE)pairwiseImpute(keys,R,fix=FALSE)pairwiseReport(x,y=NULL,cut=0,diagonal=FALSE,...) pairwiseSample(x,y=NULL,diagonal=FALSE,size=100,...)pairwiseCountBig(x,size=NULL)pairwisePlot(x,y=NULL,upper=TRUE,diagonal=TRUE,labels=TRUE,show.legend=TRUE,n.legend=10,colors=FALSE,gr=NULL,minlength=6,xlas=1,ylas=2,main="Relative Frequencies",count=TRUE,...)count.pairwise(x, y = NULL,diagonal=TRUE) #deprecated
parcels(x, size = 3, max = TRUE, flip=TRUE,congruence = FALSE)keysort(keys)
partial.r(data, x, y, use="pairwise",method="pearson")
principal(r, nfactors = 1, residuals = FALSE,rotate="varimax",n.obs=NA, covar=FALSE, scores=TRUE,missing=FALSE,impute="median",oblique.scores=TRUE,method="regression", use ="pairwise",cor="cor",correct=.5,weight=NULL,...)
phi(t, digits = 2)
phi.demo(n=1000,r=.6, cuts=c(-2,-1,0,1,2))
structure.list(nvars, f.list,f=NULL, f.labels = NULL, item.labels = NULL)phi.list(nf,f.list, f.labels = NULL)
phi2tetra(ph,m,n=NULL,correct=TRUE)phi2poly(ph,cp,cc,n=NULL,correct=TRUE) #deprecated
Yule2poly.matrix(x, v)  #deprectatedphi2poly.matrix(x, v)     #deprectatedYule2phi.matrix(x, v)     #deprectated
phi2tetra(ph,m,n=NULL,correct=TRUE)phi2poly(ph,cp,cc,n=NULL,correct=TRUE) #deprecated
Pinv(X, tol = sqrt(.Machine$double.eps))
## S3 method for class 'psych'plot(x,labels=NULL,...)## S3 method for class 'irt'plot(x,xlab,ylab,main,D,type=c("ICC","IIC","test"),cut=.3,labels=NULL, keys=NULL, xlim,ylim,y2lab,lncol="black",...)## S3 method for class 'poly'plot(x,D,xlab,ylab,xlim,ylim,main,type=c("ICC","IIC","test"),cut=.3,labels,     keys=NULL,y2lab,lncol="black",...)## S3 method for class 'residuals'plot(x,main,type=c("qq","chi","hist","cor"),std, bad=4,     numbers=TRUE, upper=FALSE,diag=FALSE,...)
## S3 method for class 'psych'plot(x,labels=NULL,...)## S3 method for class 'irt'plot(x,xlab,ylab,main,D,type=c("ICC","IIC","test"),cut=.3,labels=NULL, keys=NULL, xlim,ylim,y2lab,lncol="black",...)## S3 method for class 'poly'plot(x,D,xlab,ylab,xlim,ylim,main,type=c("ICC","IIC","test"),cut=.3,labels,     keys=NULL,y2lab,lncol="black",...)## S3 method for class 'residuals'plot(x,main,type=c("qq","chi","hist","cor"),std, bad=4,     numbers=TRUE, upper=FALSE,diag=FALSE,...)
fa.parallel(x,n.obs=NULL,fm="minres",fa="both",nfactors=1, main="Parallel Analysis Scree Plots",n.iter=20,error.bars=FALSE,se.bars=FALSE,SMC=FALSE,ylabel=NULL,show.legend=TRUE,sim=TRUE,quant=.95,cor="cor",use="pairwise",plot=TRUE,correct=.5)fa.parallel.poly(x ,n.iter=10,SMC=TRUE,  fm = "minres",correct=TRUE,sim=FALSE,       fa="both",global=TRUE)   #deprecated## S3 method for class 'poly.parallel'plot(x,show.legend=TRUE,fa="both",...)
## S3 method for class 'psych'plot(x,labels=NULL,...)## S3 method for class 'irt'plot(x,xlab,ylab,main,D,type=c("ICC","IIC","test"),cut=.3,labels=NULL, keys=NULL, xlim,ylim,y2lab,lncol="black",...)## S3 method for class 'poly'plot(x,D,xlab,ylab,xlim,ylim,main,type=c("ICC","IIC","test"),cut=.3,labels,     keys=NULL,y2lab,lncol="black",...)## S3 method for class 'residuals'plot(x,main,type=c("qq","chi","hist","cor"),std, bad=4,     numbers=TRUE, upper=FALSE,diag=FALSE,...)
reliability(keys=NULL, items, nfactors = 2, split = TRUE, raw=TRUE, plot=FALSE,hist=FALSE,  n.sample=10000)## S3 method for class 'reliability'plot(x,omega=TRUE,alpha=TRUE,split=TRUE,uni=TRUE,add=FALSE,xlim=NULL, main=NULL,...)
## S3 method for class 'psych'plot(x,labels=NULL,...)## S3 method for class 'irt'plot(x,xlab,ylab,main,D,type=c("ICC","IIC","test"),cut=.3,labels=NULL, keys=NULL, xlim,ylim,y2lab,lncol="black",...)## S3 method for class 'poly'plot(x,D,xlab,ylab,xlim,ylim,main,type=c("ICC","IIC","test"),cut=.3,labels,     keys=NULL,y2lab,lncol="black",...)## S3 method for class 'residuals'plot(x,main,type=c("qq","chi","hist","cor"),std, bad=4,     numbers=TRUE, upper=FALSE,diag=FALSE,...)
polar(f, sort = TRUE)
tetrachoric(x,y=NULL,correct=.5,smooth=TRUE,global=TRUE,weight=NULL,na.rm=TRUE,     delete=TRUE)polychoric(x,y=NULL,smooth=TRUE,global=TRUE,polycor=FALSE,ML=FALSE, std.err=FALSE,      weight=NULL,correct=.5,progress=TRUE,na.rm=TRUE,  delete=TRUE,max.cat=8)biserial(x,y)  polyserial(x,y) polydi(p,d,taup,taud,global=TRUE,ML = FALSE, std.err = FALSE,     weight=NULL,progress=TRUE,na.rm=TRUE,delete=TRUE,correct=.5) #deprecated  use polychoric insteadpoly.mat(x, short = TRUE, std.err = FALSE, ML = FALSE) 
tetrachoric(x,y=NULL,correct=.5,smooth=TRUE,global=TRUE,weight=NULL,na.rm=TRUE,     delete=TRUE)polychoric(x,y=NULL,smooth=TRUE,global=TRUE,polycor=FALSE,ML=FALSE, std.err=FALSE,      weight=NULL,correct=.5,progress=TRUE,na.rm=TRUE,  delete=TRUE,max.cat=8)biserial(x,y)  polyserial(x,y) polydi(p,d,taup,taud,global=TRUE,ML = FALSE, std.err = FALSE,     weight=NULL,progress=TRUE,na.rm=TRUE,delete=TRUE,correct=.5) #deprecated  use polychoric insteadpoly.mat(x, short = TRUE, std.err = FALSE, ML = FALSE) 
tetrachoric(x,y=NULL,correct=.5,smooth=TRUE,global=TRUE,weight=NULL,na.rm=TRUE,     delete=TRUE)polychoric(x,y=NULL,smooth=TRUE,global=TRUE,polycor=FALSE,ML=FALSE, std.err=FALSE,      weight=NULL,correct=.5,progress=TRUE,na.rm=TRUE,  delete=TRUE,max.cat=8)biserial(x,y)  polyserial(x,y) polydi(p,d,taup,taud,global=TRUE,ML = FALSE, std.err = FALSE,     weight=NULL,progress=TRUE,na.rm=TRUE,delete=TRUE,correct=.5) #deprecated  use polychoric insteadpoly.mat(x, short = TRUE, std.err = FALSE, ML = FALSE) 
tetrachoric(x,y=NULL,correct=.5,smooth=TRUE,global=TRUE,weight=NULL,na.rm=TRUE,     delete=TRUE)polychoric(x,y=NULL,smooth=TRUE,global=TRUE,polycor=FALSE,ML=FALSE, std.err=FALSE,      weight=NULL,correct=.5,progress=TRUE,na.rm=TRUE,  delete=TRUE,max.cat=8)biserial(x,y)  polyserial(x,y) polydi(p,d,taup,taud,global=TRUE,ML = FALSE, std.err = FALSE,     weight=NULL,progress=TRUE,na.rm=TRUE,delete=TRUE,correct=.5) #deprecated  use polychoric insteadpoly.mat(x, short = TRUE, std.err = FALSE, ML = FALSE) 
## S3 method for class 'psych'predict(object, data,old.data,options=NULL,missing=FALSE,impute="none",...)
predicted.validity(x, criteria, keys, scale.rel = NULL, item.val = NULL)item.validity(x,criteria,keys) 
principal(r, nfactors = 1, residuals = FALSE,rotate="varimax",n.obs=NA, covar=FALSE, scores=TRUE,missing=FALSE,impute="median",oblique.scores=TRUE,method="regression", use ="pairwise",cor="cor",correct=.5,weight=NULL,...)
## S3 method for class 'psych'print(x,digits=2,all=FALSE,cut=NULL,sort=FALSE,short=TRUE,lower=TRUE,signif=NULL,...)## S3 method for class 'psych'summary(object,digits=2,items=FALSE,...)
faRotate(loadings,rotate="oblimin",...)bifactor(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)biquartimin(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)TargetQ(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)TargetT(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)Promax(x,m=4, normalize=FALSE, pro.m = 4) Procrustes(L,Target) #adapted from Niels Walertarget.rot(x,keys=NULL)varimin(L, Tmat = diag(ncol(L)), normalize = FALSE, eps = 1e-05, maxit = 1000)vgQ.bimin(L)   #called by bifactorvgQ.targetQ(L,Target=NULL)  #called by TargetQvgQ.varimin(L)  #called by variminequamax(L, Tmat=diag(ncol(L)), eps=1e-5, maxit=1000) 
psych.misc()lowerCor(x,digits=2,use="pairwise",method="pearson",minlength=5)cor2(x,y,digits=2,use="pairwise",method="pearson")lowerMat(R, digits = 2,minlength=5)tableF(x,y)reflect(f,flip=NULL)progressBar(value,max,label=NULL) shannon(x,correct=FALSE,base=2)test.all(pl,package="psych",dependencies       = c("Depends", "Imports", "LinkingTo"),find=FALSE,skip=NULL)  levels2numeric(x)  char2numeric(x,flag=TRUE)  nchar2numeric(x,flag=TRUE) isCorrelation(x,na.rm=FALSE) #test if an object is a symmetric matrix     # with diagonals of 1 and  all values between -1 and 1 isCovariance(x)  #test if an object is a symmetric matrix    fromTo(data,from,to=NULL) #convert character names to locations as specified in colnames #of data cs(...) #convert a list of text words to  character vector acs(...) #convert a list of text words to  a single string
faRotate(loadings,rotate="oblimin",...)bifactor(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)biquartimin(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)TargetQ(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)TargetT(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)Promax(x,m=4, normalize=FALSE, pro.m = 4) Procrustes(L,Target) #adapted from Niels Walertarget.rot(x,keys=NULL)varimin(L, Tmat = diag(ncol(L)), normalize = FALSE, eps = 1e-05, maxit = 1000)vgQ.bimin(L)   #called by bifactorvgQ.targetQ(L,Target=NULL)  #called by TargetQvgQ.varimin(L)  #called by variminequamax(L, Tmat=diag(ncol(L)), eps=1e-5, maxit=1000) 
NA
psych.misc()lowerCor(x,digits=2,use="pairwise",method="pearson",minlength=5)cor2(x,y,digits=2,use="pairwise",method="pearson")lowerMat(R, digits = 2,minlength=5)tableF(x,y)reflect(f,flip=NULL)progressBar(value,max,label=NULL) shannon(x,correct=FALSE,base=2)test.all(pl,package="psych",dependencies       = c("Depends", "Imports", "LinkingTo"),find=FALSE,skip=NULL)  levels2numeric(x)  char2numeric(x,flag=TRUE)  nchar2numeric(x,flag=TRUE) isCorrelation(x,na.rm=FALSE) #test if an object is a symmetric matrix     # with diagonals of 1 and  all values between -1 and 1 isCovariance(x)  #test if an object is a symmetric matrix    fromTo(data,from,to=NULL) #convert character names to locations as specified in colnames #of data cs(...) #convert a list of text words to  character vector acs(...) #convert a list of text words to  a single string
headTail(x, top=4,bottom=4,from=1,to=NULL, digits=2, hlength = 4, tlength =4, ellipsis=TRUE) headtail(x,hlength=4,tlength=4,digits=2,ellipsis=TRUE,from=1,to=NULL)topBottom(x, top=4,bottom=4,from=1,to=NULL, digits=2, hlength = 4, tlength = 4) quickView(x,top=8,bottom=8,from=1,to=NULL)
fisherz(rho)fisherz2r(z)r.con(rho,n,p=.95,twotailed=TRUE)r2t(rho,n)t2r(t,df)g2r(g,df,n)chi2r(chi2,n)r2chi(rho,n)r2c(rho,sigma)cor2cov(rho,sigma)
r.test(n, r12, r34 = NULL, r23 = NULL, r13 = NULL, r14 = NULL, r24 = NULL,           n2 = NULL,pooled=TRUE, twotailed = TRUE)
fisherz(rho)fisherz2r(z)r.con(rho,n,p=.95,twotailed=TRUE)r2t(rho,n)t2r(t,df)g2r(g,df,n)chi2r(chi2,n)r2chi(rho,n)r2c(rho,sigma)cor2cov(rho,sigma)
fisherz(rho)fisherz2r(z)r.con(rho,n,p=.95,twotailed=TRUE)r2t(rho,n)t2r(t,df)g2r(g,df,n)chi2r(chi2,n)r2chi(rho,n)r2c(rho,sigma)cor2cov(rho,sigma)
cohen.d(x, group,alpha=.05,std=TRUE,sort=NULL,dictionary=NULL,MD=TRUE,data=NULL)d.robust(x,group,trim=.2)cohen.d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)cohen.d.by(x,group,group2,alpha=.05,MD=TRUE)d2r(d)r2d(rho)d2t(d,n=NULL,n2=NULL,n1=NULL)t2d(t,n=NULL,n2=NULL,n1=NULL)m2t(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)  #returns d invisibilym2d(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)d2OVL(d)  #Percent overlap for 1 distribtiond2OVL2(d)  #Percent overlap joint distributiond2CL(d)   #Common language effect sized2U3(d)   #Proportion in higher group exceedding median of lower group
fisherz(rho)fisherz2r(z)r.con(rho,n,p=.95,twotailed=TRUE)r2t(rho,n)t2r(t,df)g2r(g,df,n)chi2r(chi2,n)r2chi(rho,n)r2c(rho,sigma)cor2cov(rho,sigma)
spider(y,x,data,labels=NULL,rescale=FALSE,center=FALSE,connect=TRUE,overlay=FALSE,    scale=1,ncolors=31,fill=FALSE,main=NULL,...)    radar(x,labels=NULL,keys=NULL,center=FALSE,connect=FALSE,scale=1,ncolors=31,fill=FALSE,    add=FALSE,linetyp="solid", main="Radar Plot",angle=0,absolute=FALSE,     show=TRUE,digits=2,cut=.2,circles=TRUE, shape=FALSE, clockwise=FALSE,     delta = NULL,label.pos=NULL,position=NULL,     xlim=c(-1,1),ylim=c(-1, 1),...) 
rangeCorrection(r,sdu,sdr,sdxu=NULL,sdxr=NULL,case=2)
psych.misc()lowerCor(x,digits=2,use="pairwise",method="pearson",minlength=5)cor2(x,y,digits=2,use="pairwise",method="pearson")lowerMat(R, digits = 2,minlength=5)tableF(x,y)reflect(f,flip=NULL)progressBar(value,max,label=NULL) shannon(x,correct=FALSE,base=2)test.all(pl,package="psych",dependencies       = c("Depends", "Imports", "LinkingTo"),find=FALSE,skip=NULL)  levels2numeric(x)  char2numeric(x,flag=TRUE)  nchar2numeric(x,flag=TRUE) isCorrelation(x,na.rm=FALSE) #test if an object is a symmetric matrix     # with diagonals of 1 and  all values between -1 and 1 isCovariance(x)  #test if an object is a symmetric matrix    fromTo(data,from,to=NULL) #convert character names to locations as specified in colnames #of data cs(...) #convert a list of text words to  character vector acs(...) #convert a list of text words to  a single string
data(Thurstone)data(Thurstone.33)data(Thurstone.9)data(Holzinger)data(Holzinger.9)data(Bechtoldt)data(Bechtoldt.1)data(Bechtoldt.2)data(Reise)
reliability(keys=NULL, items, nfactors = 2, split = TRUE, raw=TRUE, plot=FALSE,hist=FALSE,  n.sample=10000)## S3 method for class 'reliability'plot(x,omega=TRUE,alpha=TRUE,split=TRUE,uni=TRUE,add=FALSE,xlim=NULL, main=NULL,...)
rescale(x, mean = 100, sd = 15,df=TRUE)
## S3 method for class 'psych'residuals(object,diag=TRUE,...)## S3 method for class 'psych'resid(object,diag=TRUE,...)
## S3 method for class 'psych'residuals(object,diag=TRUE,...)## S3 method for class 'psych'resid(object,diag=TRUE,...)
scoreItems(keys, items, totals = FALSE, ilabels = NULL,missing=TRUE, impute="median",      delete=TRUE, min = NULL, max = NULL, digits = 2,n.obs=NULL,select=TRUE)score.items(keys, items, totals = FALSE, ilabels = NULL,missing=TRUE, impute="median",      delete=TRUE, min = NULL, max = NULL, digits = 2,select=TRUE) scoreFast(keys, items, totals = FALSE, ilabels = NULL,missing=TRUE, impute="none",       delete=TRUE, min = NULL, max = NULL,count.responses=FALSE, digits = 2)scoreVeryFast(keys,items,totals=FALSE, min=NULL,max=NULL,count.responses=FALSE)response.frequencies(items,max=10,uniqueitems=NULL)responseFrequency(items,max=10,uniqueitems=NULL)
scoreItems(keys, items, totals = FALSE, ilabels = NULL,missing=TRUE, impute="median",      delete=TRUE, min = NULL, max = NULL, digits = 2,n.obs=NULL,select=TRUE)score.items(keys, items, totals = FALSE, ilabels = NULL,missing=TRUE, impute="median",      delete=TRUE, min = NULL, max = NULL, digits = 2,select=TRUE) scoreFast(keys, items, totals = FALSE, ilabels = NULL,missing=TRUE, impute="none",       delete=TRUE, min = NULL, max = NULL,count.responses=FALSE, digits = 2)scoreVeryFast(keys,items,totals=FALSE, min=NULL,max=NULL,count.responses=FALSE)response.frequencies(items,max=10,uniqueitems=NULL)responseFrequency(items,max=10,uniqueitems=NULL)
reverse.code(keys, items, mini = NULL, maxi = NULL)
mssd(x,group=NULL, lag = 1,na.rm=TRUE)rmssd(x,group=NULL, lag=1, na.rm=TRUE)autoR(x,group=NULL,lag=1,na.rm=TRUE,use="pairwise")
data(sat.act)
scaling.fits(model, data, test = "logit", digits = 2, rowwise = TRUE)
scatterHist(x,y=NULL,smooth=TRUE,ab=FALSE, correl=TRUE,data=NULL, density=TRUE,means=TRUE, ellipse=TRUE,digits=2,method="pearson",cex.cor=1,cex.point=1,title="Scatter plot + density",xlab=NULL,ylab=NULL,smoother=FALSE,nrpoints=0,xlab.hist=NULL,ylab.hist=NULL,grid=FALSE,xlim=NULL,ylim=NULL,x.breaks=11,y.breaks=11,x.space=0,y.space=0,freq=TRUE,x.axes=TRUE,y.axes=TRUE,size=c(1,2),col=c("blue","red","black"),legend=NULL,alpha=.5,pch=21, show.d=TRUE,   x.arrow=NULL,y.arrow=NULL,d.arrow=FALSE,cex.arrow=1,...) scatter.hist(x,y=NULL,smooth=TRUE,ab=FALSE, correl=TRUE,data=NULL,density=TRUE,means=TRUE, ellipse=TRUE,digits=2,method="pearson",cex.cor=1,cex.point=1,title="Scatter plot + density",xlab=NULL,ylab=NULL,smoother=FALSE,nrpoints=0,xlab.hist=NULL,ylab.hist=NULL,grid=FALSE,xlim=NULL,ylim=NULL,x.breaks=11,y.breaks=11,x.space=0,y.space=0,freq=TRUE,x.axes=TRUE,y.axes=TRUE,size=c(1,2),col=c("blue","red","black"),legend=NULL,alpha=.5,pch=21, show.d=TRUE,   x.arrow=NULL,y.arrow=NULL,d.arrow=FALSE,cex.arrow=1,...)
scatterHist(x,y=NULL,smooth=TRUE,ab=FALSE, correl=TRUE,data=NULL, density=TRUE,means=TRUE, ellipse=TRUE,digits=2,method="pearson",cex.cor=1,cex.point=1,title="Scatter plot + density",xlab=NULL,ylab=NULL,smoother=FALSE,nrpoints=0,xlab.hist=NULL,ylab.hist=NULL,grid=FALSE,xlim=NULL,ylim=NULL,x.breaks=11,y.breaks=11,x.space=0,y.space=0,freq=TRUE,x.axes=TRUE,y.axes=TRUE,size=c(1,2),col=c("blue","red","black"),legend=NULL,alpha=.5,pch=21, show.d=TRUE,   x.arrow=NULL,y.arrow=NULL,d.arrow=FALSE,cex.arrow=1,...) scatter.hist(x,y=NULL,smooth=TRUE,ab=FALSE, correl=TRUE,data=NULL,density=TRUE,means=TRUE, ellipse=TRUE,digits=2,method="pearson",cex.cor=1,cex.point=1,title="Scatter plot + density",xlab=NULL,ylab=NULL,smoother=FALSE,nrpoints=0,xlab.hist=NULL,ylab.hist=NULL,grid=FALSE,xlim=NULL,ylim=NULL,x.breaks=11,y.breaks=11,x.space=0,y.space=0,freq=TRUE,x.axes=TRUE,y.axes=TRUE,size=c(1,2),col=c("blue","red","black"),legend=NULL,alpha=.5,pch=21, show.d=TRUE,   x.arrow=NULL,y.arrow=NULL,d.arrow=FALSE,cex.arrow=1,...)
schmid(model, nfactors = 3, fm = "minres",digits=2,rotate="oblimin",            n.obs=NA,option="equal",Phi=NULL,covar=FALSE,two.ok=FALSE,...)
data(Schmid)
data(Schmid)
score.alpha(keys, items, labels = NULL, totals=TRUE,digits = 2) #deprecated
scoreIrt(stats=NULL, items, keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic") scoreIrt.1pl(keys.list,items,correct=.5,messages=FALSE,cut=.3,bounds=c(-4,4),     mod="logistic")  #Rasch like scalingscoreIrt.2pl(itemLists,items,correct=.5,messages=FALSE,cut=.3,bounds=c(-4,4),   mod="logistic")  #2 pl scoring#the next is an alias for scoreIrt both of which are wrappers for #     score.irt.2 and score.irt.polyscore.irt(stats=NULL, items, keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic")  #the higher order call just calls one of the next two  #for dichotomous items score.irt.2(stats, items,keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic")   #for polytomous itemsscore.irt.poly(stats, items, keys=NULL, cut = 0.3,bounds=c(-4,4),mod="logistic")    #to create irt like statistics for plottingirt.stats.like(items,stats,keys=NULL,cut=.3)make.irt.stats(difficulty,discrimination)    irt.tau(x)    #find the tau values for the x objectirt.se(stats,scores=0,D=1.702)
scoreIrt(stats=NULL, items, keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic") scoreIrt.1pl(keys.list,items,correct=.5,messages=FALSE,cut=.3,bounds=c(-4,4),     mod="logistic")  #Rasch like scalingscoreIrt.2pl(itemLists,items,correct=.5,messages=FALSE,cut=.3,bounds=c(-4,4),   mod="logistic")  #2 pl scoring#the next is an alias for scoreIrt both of which are wrappers for #     score.irt.2 and score.irt.polyscore.irt(stats=NULL, items, keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic")  #the higher order call just calls one of the next two  #for dichotomous items score.irt.2(stats, items,keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic")   #for polytomous itemsscore.irt.poly(stats, items, keys=NULL, cut = 0.3,bounds=c(-4,4),mod="logistic")    #to create irt like statistics for plottingirt.stats.like(items,stats,keys=NULL,cut=.3)make.irt.stats(difficulty,discrimination)    irt.tau(x)    #find the tau values for the x objectirt.se(stats,scores=0,D=1.702)
scoreIrt(stats=NULL, items, keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic") scoreIrt.1pl(keys.list,items,correct=.5,messages=FALSE,cut=.3,bounds=c(-4,4),     mod="logistic")  #Rasch like scalingscoreIrt.2pl(itemLists,items,correct=.5,messages=FALSE,cut=.3,bounds=c(-4,4),   mod="logistic")  #2 pl scoring#the next is an alias for scoreIrt both of which are wrappers for #     score.irt.2 and score.irt.polyscore.irt(stats=NULL, items, keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic")  #the higher order call just calls one of the next two  #for dichotomous items score.irt.2(stats, items,keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic")   #for polytomous itemsscore.irt.poly(stats, items, keys=NULL, cut = 0.3,bounds=c(-4,4),mod="logistic")    #to create irt like statistics for plottingirt.stats.like(items,stats,keys=NULL,cut=.3)make.irt.stats(difficulty,discrimination)    irt.tau(x)    #find the tau values for the x objectirt.se(stats,scores=0,D=1.702)
scoreItems(keys, items, totals = FALSE, ilabels = NULL,missing=TRUE, impute="median",      delete=TRUE, min = NULL, max = NULL, digits = 2,n.obs=NULL,select=TRUE)score.items(keys, items, totals = FALSE, ilabels = NULL,missing=TRUE, impute="median",      delete=TRUE, min = NULL, max = NULL, digits = 2,select=TRUE) scoreFast(keys, items, totals = FALSE, ilabels = NULL,missing=TRUE, impute="none",       delete=TRUE, min = NULL, max = NULL,count.responses=FALSE, digits = 2)scoreVeryFast(keys,items,totals=FALSE, min=NULL,max=NULL,count.responses=FALSE)response.frequencies(items,max=10,uniqueitems=NULL)responseFrequency(items,max=10,uniqueitems=NULL)
score.multiple.choice(key, data, score = TRUE, totals = FALSE, ilabels = NULL,       missing = TRUE, impute = "median", digits = 2,short=TRUE,skew=FALSE)
scoreOverlap(keys, r, correct = TRUE, SMC = TRUE, av.r = TRUE, item.smc = NULL,      impute = TRUE,select=TRUE)scoreBy(keys,stats, correct = TRUE, SMC = TRUE, av.r = TRUE, item.smc = NULL,      impute = TRUE,select=TRUE,min.n=3,smooth=FALSE)cluster.cor(keys, r.mat, correct = TRUE,SMC=TRUE,item.smc=NULL,impute=TRUE)
scoreItems(keys, items, totals = FALSE, ilabels = NULL,missing=TRUE, impute="median",      delete=TRUE, min = NULL, max = NULL, digits = 2,n.obs=NULL,select=TRUE)score.items(keys, items, totals = FALSE, ilabels = NULL,missing=TRUE, impute="median",      delete=TRUE, min = NULL, max = NULL, digits = 2,select=TRUE) scoreFast(keys, items, totals = FALSE, ilabels = NULL,missing=TRUE, impute="none",       delete=TRUE, min = NULL, max = NULL,count.responses=FALSE, digits = 2)scoreVeryFast(keys,items,totals=FALSE, min=NULL,max=NULL,count.responses=FALSE)response.frequencies(items,max=10,uniqueitems=NULL)responseFrequency(items,max=10,uniqueitems=NULL)
scoreIrt(stats=NULL, items, keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic") scoreIrt.1pl(keys.list,items,correct=.5,messages=FALSE,cut=.3,bounds=c(-4,4),     mod="logistic")  #Rasch like scalingscoreIrt.2pl(itemLists,items,correct=.5,messages=FALSE,cut=.3,bounds=c(-4,4),   mod="logistic")  #2 pl scoring#the next is an alias for scoreIrt both of which are wrappers for #     score.irt.2 and score.irt.polyscore.irt(stats=NULL, items, keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic")  #the higher order call just calls one of the next two  #for dichotomous items score.irt.2(stats, items,keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic")   #for polytomous itemsscore.irt.poly(stats, items, keys=NULL, cut = 0.3,bounds=c(-4,4),mod="logistic")    #to create irt like statistics for plottingirt.stats.like(items,stats,keys=NULL,cut=.3)make.irt.stats(difficulty,discrimination)    irt.tau(x)    #find the tau values for the x objectirt.se(stats,scores=0,D=1.702)
scoreIrt(stats=NULL, items, keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic") scoreIrt.1pl(keys.list,items,correct=.5,messages=FALSE,cut=.3,bounds=c(-4,4),     mod="logistic")  #Rasch like scalingscoreIrt.2pl(itemLists,items,correct=.5,messages=FALSE,cut=.3,bounds=c(-4,4),   mod="logistic")  #2 pl scoring#the next is an alias for scoreIrt both of which are wrappers for #     score.irt.2 and score.irt.polyscore.irt(stats=NULL, items, keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic")  #the higher order call just calls one of the next two  #for dichotomous items score.irt.2(stats, items,keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic")   #for polytomous itemsscore.irt.poly(stats, items, keys=NULL, cut = 0.3,bounds=c(-4,4),mod="logistic")    #to create irt like statistics for plottingirt.stats.like(items,stats,keys=NULL,cut=.3)make.irt.stats(difficulty,discrimination)    irt.tau(x)    #find the tau values for the x objectirt.se(stats,scores=0,D=1.702)
scoreIrt(stats=NULL, items, keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic") scoreIrt.1pl(keys.list,items,correct=.5,messages=FALSE,cut=.3,bounds=c(-4,4),     mod="logistic")  #Rasch like scalingscoreIrt.2pl(itemLists,items,correct=.5,messages=FALSE,cut=.3,bounds=c(-4,4),   mod="logistic")  #2 pl scoring#the next is an alias for scoreIrt both of which are wrappers for #     score.irt.2 and score.irt.polyscore.irt(stats=NULL, items, keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic")  #the higher order call just calls one of the next two  #for dichotomous items score.irt.2(stats, items,keys=NULL,cut = 0.3,bounds=c(-4,4),mod="logistic")   #for polytomous itemsscore.irt.poly(stats, items, keys=NULL, cut = 0.3,bounds=c(-4,4),mod="logistic")    #to create irt like statistics for plottingirt.stats.like(items,stats,keys=NULL,cut=.3)make.irt.stats(difficulty,discrimination)    irt.tau(x)    #find the tau values for the x objectirt.se(stats,scores=0,D=1.702)
scoreItems(keys, items, totals = FALSE, ilabels = NULL,missing=TRUE, impute="median",      delete=TRUE, min = NULL, max = NULL, digits = 2,n.obs=NULL,select=TRUE)score.items(keys, items, totals = FALSE, ilabels = NULL,missing=TRUE, impute="median",      delete=TRUE, min = NULL, max = NULL, digits = 2,select=TRUE) scoreFast(keys, items, totals = FALSE, ilabels = NULL,missing=TRUE, impute="none",       delete=TRUE, min = NULL, max = NULL,count.responses=FALSE, digits = 2)scoreVeryFast(keys,items,totals=FALSE, min=NULL,max=NULL,count.responses=FALSE)response.frequencies(items,max=10,uniqueitems=NULL)responseFrequency(items,max=10,uniqueitems=NULL)
scoreOverlap(keys, r, correct = TRUE, SMC = TRUE, av.r = TRUE, item.smc = NULL,      impute = TRUE,select=TRUE)scoreBy(keys,stats, correct = TRUE, SMC = TRUE, av.r = TRUE, item.smc = NULL,      impute = TRUE,select=TRUE,min.n=3,smooth=FALSE)cluster.cor(keys, r.mat, correct = TRUE,SMC=TRUE,item.smc=NULL,impute=TRUE)
scoreItems(keys, items, totals = FALSE, ilabels = NULL,missing=TRUE, impute="median",      delete=TRUE, min = NULL, max = NULL, digits = 2,n.obs=NULL,select=TRUE)score.items(keys, items, totals = FALSE, ilabels = NULL,missing=TRUE, impute="median",      delete=TRUE, min = NULL, max = NULL, digits = 2,select=TRUE) scoreFast(keys, items, totals = FALSE, ilabels = NULL,missing=TRUE, impute="none",       delete=TRUE, min = NULL, max = NULL,count.responses=FALSE, digits = 2)scoreVeryFast(keys,items,totals=FALSE, min=NULL,max=NULL,count.responses=FALSE)response.frequencies(items,max=10,uniqueitems=NULL)responseFrequency(items,max=10,uniqueitems=NULL)
scoreWtd(weights, items, std = TRUE, sums = FALSE, impute = "none")
scree(rx,factors=TRUE,pc=TRUE,main="Scree plot",hline=NULL,add=FALSE) VSS.scree(rx, main = "scree plot")
scrub(x, where, min, max,isvalue,newvalue, cuts=NULL)
SD(x, na.rm = TRUE)   #deprecated
make.keys(nvars, keys.list, item.labels = NULL, key.labels = NULL)keys2list(keys,sign=TRUE)selectFromKeys(keys.list)makePositiveKeys(keys.list,sign=FALSE)
structure.diagram(fx, Phi=NULL,fy=NULL,labels=NULL,cut=.3,errors=FALSE,simple=TRUE,   regression=FALSE,lr=TRUE,Rx=NULL,Ry=NULL,digits=1,e.size=.1,    main="Structural model", ...)structure.graph(fx,  Phi = NULL,fy = NULL, out.file = NULL, labels = NULL, cut = 0.3,    errors=TRUE, simple=TRUE,regression=FALSE, size = c(8, 6),     node.font = c("Helvetica", 14), edge.font = c("Helvetica", 10),     rank.direction = c("RL", "TB", "LR", "BT"), digits = 1,      title = "Structural model", ...)structure.sem(fx,  Phi = NULL, fy = NULL,out.file = NULL, labels = NULL,     cut = 0.3, errors=TRUE, simple=TRUE,regression=FALSE)lavaan.diagram(fit,main,e.size=.1,...) sem.diagram(fit,main="A SEM from the sem package",...)sem.graph(fit,out.file=NULL,main= "A SEM from the sem package",...)
structure.diagram(fx, Phi=NULL,fy=NULL,labels=NULL,cut=.3,errors=FALSE,simple=TRUE,   regression=FALSE,lr=TRUE,Rx=NULL,Ry=NULL,digits=1,e.size=.1,    main="Structural model", ...)structure.graph(fx,  Phi = NULL,fy = NULL, out.file = NULL, labels = NULL, cut = 0.3,    errors=TRUE, simple=TRUE,regression=FALSE, size = c(8, 6),     node.font = c("Helvetica", 14), edge.font = c("Helvetica", 10),     rank.direction = c("RL", "TB", "LR", "BT"), digits = 1,      title = "Structural model", ...)structure.sem(fx,  Phi = NULL, fy = NULL,out.file = NULL, labels = NULL,     cut = 0.3, errors=TRUE, simple=TRUE,regression=FALSE)lavaan.diagram(fit,main,e.size=.1,...) sem.diagram(fit,main="A SEM from the sem package",...)sem.graph(fit,out.file=NULL,main= "A SEM from the sem package",...)
setCor(y,x,data,z=NULL,n.obs=NULL,use="pairwise",std=TRUE,square=FALSE,       main="Regression Models",plot=TRUE,show=FALSE,zero=TRUE, alpha = .05,part=FALSE)setCor.diagram(sc,main="Regression model",digits=2,show=FALSE,cex=1,l.cex=1,...)#an alias to setCorset.cor(y,x,data,z=NULL,n.obs=NULL,use="pairwise",std=TRUE,square=FALSE, main="Regression Models",plot=TRUE,show=FALSE,zero=TRUE,part=FALSE)     mat.regress(y, x,data, z=NULL,n.obs=NULL,use="pairwise",square=FALSE) #the old form#does not handle formula inputmatReg(x,y,C,m=NULL,z=NULL,n.obs=0,means=NULL,std=FALSE,raw=TRUE,part=FALSE) crossValidation(model,data,options=NULL,select=NULL)matPlot(x, type = "b", minlength=6, xlas=0,legend=NULL,      lab=NULL,pch=16,col=1:6,lty=NULL,...)
setCor(y,x,data,z=NULL,n.obs=NULL,use="pairwise",std=TRUE,square=FALSE,       main="Regression Models",plot=TRUE,show=FALSE,zero=TRUE, alpha = .05,part=FALSE)setCor.diagram(sc,main="Regression model",digits=2,show=FALSE,cex=1,l.cex=1,...)#an alias to setCorset.cor(y,x,data,z=NULL,n.obs=NULL,use="pairwise",std=TRUE,square=FALSE, main="Regression Models",plot=TRUE,show=FALSE,zero=TRUE,part=FALSE)     mat.regress(y, x,data, z=NULL,n.obs=NULL,use="pairwise",square=FALSE) #the old form#does not handle formula inputmatReg(x,y,C,m=NULL,z=NULL,n.obs=0,means=NULL,std=FALSE,raw=TRUE,part=FALSE) crossValidation(model,data,options=NULL,select=NULL)matPlot(x, type = "b", minlength=6, xlas=0,legend=NULL,      lab=NULL,pch=16,col=1:6,lty=NULL,...)
setCor(y,x,data,z=NULL,n.obs=NULL,use="pairwise",std=TRUE,square=FALSE,       main="Regression Models",plot=TRUE,show=FALSE,zero=TRUE, alpha = .05,part=FALSE)setCor.diagram(sc,main="Regression model",digits=2,show=FALSE,cex=1,l.cex=1,...)#an alias to setCorset.cor(y,x,data,z=NULL,n.obs=NULL,use="pairwise",std=TRUE,square=FALSE, main="Regression Models",plot=TRUE,show=FALSE,zero=TRUE,part=FALSE)     mat.regress(y, x,data, z=NULL,n.obs=NULL,use="pairwise",square=FALSE) #the old form#does not handle formula inputmatReg(x,y,C,m=NULL,z=NULL,n.obs=0,means=NULL,std=FALSE,raw=TRUE,part=FALSE) crossValidation(model,data,options=NULL,select=NULL)matPlot(x, type = "b", minlength=6, xlas=0,legend=NULL,      lab=NULL,pch=16,col=1:6,lty=NULL,...)
lookup(x,y,criteria=NULL)lookupItems(content=NULL,dictionary=NULL,search=c("Item","Content","item"))fa.lookup(f,dictionary=NULL,digits=2,cut=.0,n=NULL,sort=TRUE)item.lookup(f,m, dictionary,cut=.3, digits = 2) keys.lookup(keys.list,dictionary)lookupFromKeys(keys.list,dictionary,n=20,cors=NULL,sort=TRUE,suppress.names=FALSE,      digits=2)setCorLookup(x,dictionary=NULL,cut=0,digits=2,p=.05) 
psych.misc()lowerCor(x,digits=2,use="pairwise",method="pearson",minlength=5)cor2(x,y,digits=2,use="pairwise",method="pearson")lowerMat(R, digits = 2,minlength=5)tableF(x,y)reflect(f,flip=NULL)progressBar(value,max,label=NULL) shannon(x,correct=FALSE,base=2)test.all(pl,package="psych",dependencies       = c("Depends", "Imports", "LinkingTo"),find=FALSE,skip=NULL)  levels2numeric(x)  char2numeric(x,flag=TRUE)  nchar2numeric(x,flag=TRUE) isCorrelation(x,na.rm=FALSE) #test if an object is a symmetric matrix     # with diagonals of 1 and  all values between -1 and 1 isCovariance(x)  #test if an object is a symmetric matrix    fromTo(data,from,to=NULL) #convert character names to locations as specified in colnames #of data cs(...) #convert a list of text words to  character vector acs(...) #convert a list of text words to  a single string
sim(fx=NULL,Phi=NULL,fy=NULL,alpha=.8,lambda = 0,n=0,mu=NULL,raw=TRUE)sim.simplex(nvar =12, alpha=.8,lambda=0,beta=1,mu=NULL, n=0)sim.minor(nvar=12,nfact=3,n=0,g=NULL,fbig=NULL,fsmall = c(-.2,.2),bipolar=TRUE) 
sim.anova(es1 = 0, es2 = 0, es3 = 0, es12 = 0, es13 = 0,    es23 = 0, es123 = 0, es11=0,es22=0, es33=0,n = 2,n1 = 2, n2 = 2, n3 = 2,     within=NULL,r=.8,factors=TRUE,center = TRUE,std=TRUE)
sim.hierarchical(gload=NULL, fload=NULL, n = 0, raw = TRUE,mu = NULL,    categorical=FALSE, low=-3,high=3)sim.bonds(nvar=9,loads=c(0,0,.5,.6),validity=.8)make.hierarchical(gload=NULL, fload=NULL, n = 0, raw = FALSE)  #deprecated
sim.item(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,  gloading = 0, xbias = 0, ybias = 0, categorical = FALSE, low = -3, high = 3,  truncate = FALSE, cutpoint = 0)sim.circ(nvar = 72, nsub = 500, circum = TRUE, xloading = 0.6, yloading = 0.6,   gloading = 0, xbias = 0, ybias = 0, categorical = FALSE, low = -3, high = 3,   truncate = FALSE, cutpoint = 0)sim.dichot(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,     gloading = 0, xbias = 0, ybias = 0, low = 0, high = 0) item.dichot(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,  gloading = 0, xbias = 0, ybias = 0, low = 0, high = 0) sim.spherical(simple=FALSE, nx=7,ny=12 ,nsub = 500,  xloading =.55, yloading = .55,   zloading=.55, gloading=0, xbias=0,  ybias = 0, zbias=0,categorical=FALSE,    low=-3,high=3,truncate=FALSE,cutpoint=0) con2cat(old,cuts=c(0,1,2,3),where)
sim.congeneric(loads = c(0.8, 0.7, 0.6, 0.5),N = NULL,  err=NULL, short = TRUE,               categorical=FALSE, low=-3,high=3,cuts=NULL)
sim.structure(fx=NULL,Phi=NULL, fy=NULL, f=NULL, n=0, uniq=NULL, raw=TRUE,   items = FALSE, low=-2,high=2,d=NULL,cat=5, mu=0)sim.structural(fx=NULL, Phi=NULL, fy=NULL, f=NULL, n=0, uniq=NULL, raw=TRUE,      items = FALSE, low=-2,high=2,d=NULL,cat=5, mu=0)  #deprecatedsimCor(R,n=1000,data=FALSE,scale=TRUE, skew=c("none","log","lognormal",   "sqrt","abs"),vars=NULL,latent=FALSE,quant=NULL)sim.correlation(R,n=1000,data=FALSE,scale=TRUE, skew=c("none","log","lognormal",    "sqrt","abs"),vars=NULL,latent=FALSE,quant=NULL)
sim.item(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,  gloading = 0, xbias = 0, ybias = 0, categorical = FALSE, low = -3, high = 3,  truncate = FALSE, cutpoint = 0)sim.circ(nvar = 72, nsub = 500, circum = TRUE, xloading = 0.6, yloading = 0.6,   gloading = 0, xbias = 0, ybias = 0, categorical = FALSE, low = -3, high = 3,   truncate = FALSE, cutpoint = 0)sim.dichot(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,     gloading = 0, xbias = 0, ybias = 0, low = 0, high = 0) item.dichot(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,  gloading = 0, xbias = 0, ybias = 0, low = 0, high = 0) sim.spherical(simple=FALSE, nx=7,ny=12 ,nsub = 500,  xloading =.55, yloading = .55,   zloading=.55, gloading=0, xbias=0,  ybias = 0, zbias=0,categorical=FALSE,    low=-3,high=3,truncate=FALSE,cutpoint=0) con2cat(old,cuts=c(0,1,2,3),where)
sim.omega(nvar = 12, nfact = 3, n = 500, g = NULL, sem = FALSE, fbig = NULL,      fsmall = c(-0.2, 0.2),bipolar = TRUE, om.fact = 3, flip = TRUE,      option = "equal", ntrials = 10)sim.parallel(ntrials=10,nvar = c(12,24,36,48),nfact = c(1,2,3,4,6),            n = c(200,400)) 
sim.hierarchical(gload=NULL, fload=NULL, n = 0, raw = TRUE,mu = NULL,    categorical=FALSE, low=-3,high=3)sim.bonds(nvar=9,loads=c(0,0,.5,.6),validity=.8)make.hierarchical(gload=NULL, fload=NULL, n = 0, raw = FALSE)  #deprecated
sim.rasch(nvar = 5,n = 500, low=-3,high=3,d=NULL, a=1,mu=0,sd=1)sim.irt(nvar = 5, n = 500, low=-3, high=3, a=NULL,c=0, z=1,d=NULL, mu=0,sd=1,    mod="logistic",theta=NULL)sim.npl(nvar = 5, n = 500, low=-3,high=3,a=NULL,c=0,z=1,d=NULL,mu=0,sd=1,theta=NULL)sim.npn(nvar = 5, n = 500, low=-3,high=3,a=NULL,c=0,z=1,d=NULL,mu=0,sd=1,theta=NULL)sim.poly(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,     mu=0,sd=1,cat=5,mod="logistic",theta=NULL) sim.poly.npn(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,   mu=0, sd=1,      cat=5,theta=NULL) sim.poly.npl(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,  mu=0, sd=1, cat=5,theta=NULL) sim.poly.ideal(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,    mu=0,sd=1,cat=5,mod="logistic") sim.poly.ideal.npn(nvar = 5,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL, mu=0,sd=1,cat=5) sim.poly.ideal.npl(nvar = 5,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,       mu=0,sd=1,cat=5,theta=NULL)sim.poly.mat(R,m,n) 
sim.item(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,  gloading = 0, xbias = 0, ybias = 0, categorical = FALSE, low = -3, high = 3,  truncate = FALSE, cutpoint = 0)sim.circ(nvar = 72, nsub = 500, circum = TRUE, xloading = 0.6, yloading = 0.6,   gloading = 0, xbias = 0, ybias = 0, categorical = FALSE, low = -3, high = 3,   truncate = FALSE, cutpoint = 0)sim.dichot(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,     gloading = 0, xbias = 0, ybias = 0, low = 0, high = 0) item.dichot(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,  gloading = 0, xbias = 0, ybias = 0, low = 0, high = 0) sim.spherical(simple=FALSE, nx=7,ny=12 ,nsub = 500,  xloading =.55, yloading = .55,   zloading=.55, gloading=0, xbias=0,  ybias = 0, zbias=0,categorical=FALSE,    low=-3,high=3,truncate=FALSE,cutpoint=0) con2cat(old,cuts=c(0,1,2,3),where)
sim(fx=NULL,Phi=NULL,fy=NULL,alpha=.8,lambda = 0,n=0,mu=NULL,raw=TRUE)sim.simplex(nvar =12, alpha=.8,lambda=0,beta=1,mu=NULL, n=0)sim.minor(nvar=12,nfact=3,n=0,g=NULL,fbig=NULL,fsmall = c(-.2,.2),bipolar=TRUE) 
sim.multi(n.obs=4,nvar = 2, nfact=2, ntrials=96, days=16, mu=0,sigma=1, fact=NULL, loading=.9, phi=0,phi.i=NULL,beta.i=0,mu.i=0, sigma.i = 1,sin.i=0, cos.i=0, AR1=0, f.i=NULL, plot=TRUE)sim.multilevel(nvar = 9, ngroups = 4, ncases = 16, rwg, rbg, eta)
sim.multi(n.obs=4,nvar = 2, nfact=2, ntrials=96, days=16, mu=0,sigma=1, fact=NULL, loading=.9, phi=0,phi.i=NULL,beta.i=0,mu.i=0, sigma.i = 1,sin.i=0, cos.i=0, AR1=0, f.i=NULL, plot=TRUE)sim.multilevel(nvar = 9, ngroups = 4, ncases = 16, rwg, rbg, eta)
sim.rasch(nvar = 5,n = 500, low=-3,high=3,d=NULL, a=1,mu=0,sd=1)sim.irt(nvar = 5, n = 500, low=-3, high=3, a=NULL,c=0, z=1,d=NULL, mu=0,sd=1,    mod="logistic",theta=NULL)sim.npl(nvar = 5, n = 500, low=-3,high=3,a=NULL,c=0,z=1,d=NULL,mu=0,sd=1,theta=NULL)sim.npn(nvar = 5, n = 500, low=-3,high=3,a=NULL,c=0,z=1,d=NULL,mu=0,sd=1,theta=NULL)sim.poly(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,     mu=0,sd=1,cat=5,mod="logistic",theta=NULL) sim.poly.npn(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,   mu=0, sd=1,      cat=5,theta=NULL) sim.poly.npl(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,  mu=0, sd=1, cat=5,theta=NULL) sim.poly.ideal(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,    mu=0,sd=1,cat=5,mod="logistic") sim.poly.ideal.npn(nvar = 5,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL, mu=0,sd=1,cat=5) sim.poly.ideal.npl(nvar = 5,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,       mu=0,sd=1,cat=5,theta=NULL)sim.poly.mat(R,m,n) 
sim.rasch(nvar = 5,n = 500, low=-3,high=3,d=NULL, a=1,mu=0,sd=1)sim.irt(nvar = 5, n = 500, low=-3, high=3, a=NULL,c=0, z=1,d=NULL, mu=0,sd=1,    mod="logistic",theta=NULL)sim.npl(nvar = 5, n = 500, low=-3,high=3,a=NULL,c=0,z=1,d=NULL,mu=0,sd=1,theta=NULL)sim.npn(nvar = 5, n = 500, low=-3,high=3,a=NULL,c=0,z=1,d=NULL,mu=0,sd=1,theta=NULL)sim.poly(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,     mu=0,sd=1,cat=5,mod="logistic",theta=NULL) sim.poly.npn(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,   mu=0, sd=1,      cat=5,theta=NULL) sim.poly.npl(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,  mu=0, sd=1, cat=5,theta=NULL) sim.poly.ideal(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,    mu=0,sd=1,cat=5,mod="logistic") sim.poly.ideal.npn(nvar = 5,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL, mu=0,sd=1,cat=5) sim.poly.ideal.npl(nvar = 5,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,       mu=0,sd=1,cat=5,theta=NULL)sim.poly.mat(R,m,n) 
sim.omega(nvar = 12, nfact = 3, n = 500, g = NULL, sem = FALSE, fbig = NULL,      fsmall = c(-0.2, 0.2),bipolar = TRUE, om.fact = 3, flip = TRUE,      option = "equal", ntrials = 10)sim.parallel(ntrials=10,nvar = c(12,24,36,48),nfact = c(1,2,3,4,6),            n = c(200,400)) 
sim.omega(nvar = 12, nfact = 3, n = 500, g = NULL, sem = FALSE, fbig = NULL,      fsmall = c(-0.2, 0.2),bipolar = TRUE, om.fact = 3, flip = TRUE,      option = "equal", ntrials = 10)sim.parallel(ntrials=10,nvar = c(12,24,36,48),nfact = c(1,2,3,4,6),            n = c(200,400)) 
sim.rasch(nvar = 5,n = 500, low=-3,high=3,d=NULL, a=1,mu=0,sd=1)sim.irt(nvar = 5, n = 500, low=-3, high=3, a=NULL,c=0, z=1,d=NULL, mu=0,sd=1,    mod="logistic",theta=NULL)sim.npl(nvar = 5, n = 500, low=-3,high=3,a=NULL,c=0,z=1,d=NULL,mu=0,sd=1,theta=NULL)sim.npn(nvar = 5, n = 500, low=-3,high=3,a=NULL,c=0,z=1,d=NULL,mu=0,sd=1,theta=NULL)sim.poly(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,     mu=0,sd=1,cat=5,mod="logistic",theta=NULL) sim.poly.npn(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,   mu=0, sd=1,      cat=5,theta=NULL) sim.poly.npl(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,  mu=0, sd=1, cat=5,theta=NULL) sim.poly.ideal(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,    mu=0,sd=1,cat=5,mod="logistic") sim.poly.ideal.npn(nvar = 5,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL, mu=0,sd=1,cat=5) sim.poly.ideal.npl(nvar = 5,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,       mu=0,sd=1,cat=5,theta=NULL)sim.poly.mat(R,m,n) 
sim.rasch(nvar = 5,n = 500, low=-3,high=3,d=NULL, a=1,mu=0,sd=1)sim.irt(nvar = 5, n = 500, low=-3, high=3, a=NULL,c=0, z=1,d=NULL, mu=0,sd=1,    mod="logistic",theta=NULL)sim.npl(nvar = 5, n = 500, low=-3,high=3,a=NULL,c=0,z=1,d=NULL,mu=0,sd=1,theta=NULL)sim.npn(nvar = 5, n = 500, low=-3,high=3,a=NULL,c=0,z=1,d=NULL,mu=0,sd=1,theta=NULL)sim.poly(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,     mu=0,sd=1,cat=5,mod="logistic",theta=NULL) sim.poly.npn(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,   mu=0, sd=1,      cat=5,theta=NULL) sim.poly.npl(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,  mu=0, sd=1, cat=5,theta=NULL) sim.poly.ideal(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,    mu=0,sd=1,cat=5,mod="logistic") sim.poly.ideal.npn(nvar = 5,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL, mu=0,sd=1,cat=5) sim.poly.ideal.npl(nvar = 5,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,       mu=0,sd=1,cat=5,theta=NULL)sim.poly.mat(R,m,n) 
sim.rasch(nvar = 5,n = 500, low=-3,high=3,d=NULL, a=1,mu=0,sd=1)sim.irt(nvar = 5, n = 500, low=-3, high=3, a=NULL,c=0, z=1,d=NULL, mu=0,sd=1,    mod="logistic",theta=NULL)sim.npl(nvar = 5, n = 500, low=-3,high=3,a=NULL,c=0,z=1,d=NULL,mu=0,sd=1,theta=NULL)sim.npn(nvar = 5, n = 500, low=-3,high=3,a=NULL,c=0,z=1,d=NULL,mu=0,sd=1,theta=NULL)sim.poly(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,     mu=0,sd=1,cat=5,mod="logistic",theta=NULL) sim.poly.npn(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,   mu=0, sd=1,      cat=5,theta=NULL) sim.poly.npl(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,  mu=0, sd=1, cat=5,theta=NULL) sim.poly.ideal(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,    mu=0,sd=1,cat=5,mod="logistic") sim.poly.ideal.npn(nvar = 5,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL, mu=0,sd=1,cat=5) sim.poly.ideal.npl(nvar = 5,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,       mu=0,sd=1,cat=5,theta=NULL)sim.poly.mat(R,m,n) 
sim.rasch(nvar = 5,n = 500, low=-3,high=3,d=NULL, a=1,mu=0,sd=1)sim.irt(nvar = 5, n = 500, low=-3, high=3, a=NULL,c=0, z=1,d=NULL, mu=0,sd=1,    mod="logistic",theta=NULL)sim.npl(nvar = 5, n = 500, low=-3,high=3,a=NULL,c=0,z=1,d=NULL,mu=0,sd=1,theta=NULL)sim.npn(nvar = 5, n = 500, low=-3,high=3,a=NULL,c=0,z=1,d=NULL,mu=0,sd=1,theta=NULL)sim.poly(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,     mu=0,sd=1,cat=5,mod="logistic",theta=NULL) sim.poly.npn(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,   mu=0, sd=1,      cat=5,theta=NULL) sim.poly.npl(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,  mu=0, sd=1, cat=5,theta=NULL) sim.poly.ideal(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,    mu=0,sd=1,cat=5,mod="logistic") sim.poly.ideal.npn(nvar = 5,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL, mu=0,sd=1,cat=5) sim.poly.ideal.npl(nvar = 5,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,       mu=0,sd=1,cat=5,theta=NULL)sim.poly.mat(R,m,n) 
sim.rasch(nvar = 5,n = 500, low=-3,high=3,d=NULL, a=1,mu=0,sd=1)sim.irt(nvar = 5, n = 500, low=-3, high=3, a=NULL,c=0, z=1,d=NULL, mu=0,sd=1,    mod="logistic",theta=NULL)sim.npl(nvar = 5, n = 500, low=-3,high=3,a=NULL,c=0,z=1,d=NULL,mu=0,sd=1,theta=NULL)sim.npn(nvar = 5, n = 500, low=-3,high=3,a=NULL,c=0,z=1,d=NULL,mu=0,sd=1,theta=NULL)sim.poly(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,     mu=0,sd=1,cat=5,mod="logistic",theta=NULL) sim.poly.npn(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,   mu=0, sd=1,      cat=5,theta=NULL) sim.poly.npl(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,  mu=0, sd=1, cat=5,theta=NULL) sim.poly.ideal(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,    mu=0,sd=1,cat=5,mod="logistic") sim.poly.ideal.npn(nvar = 5,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL, mu=0,sd=1,cat=5) sim.poly.ideal.npl(nvar = 5,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,       mu=0,sd=1,cat=5,theta=NULL)sim.poly.mat(R,m,n) 
sim.rasch(nvar = 5,n = 500, low=-3,high=3,d=NULL, a=1,mu=0,sd=1)sim.irt(nvar = 5, n = 500, low=-3, high=3, a=NULL,c=0, z=1,d=NULL, mu=0,sd=1,    mod="logistic",theta=NULL)sim.npl(nvar = 5, n = 500, low=-3,high=3,a=NULL,c=0,z=1,d=NULL,mu=0,sd=1,theta=NULL)sim.npn(nvar = 5, n = 500, low=-3,high=3,a=NULL,c=0,z=1,d=NULL,mu=0,sd=1,theta=NULL)sim.poly(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,     mu=0,sd=1,cat=5,mod="logistic",theta=NULL) sim.poly.npn(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,   mu=0, sd=1,      cat=5,theta=NULL) sim.poly.npl(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,  mu=0, sd=1, cat=5,theta=NULL) sim.poly.ideal(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,    mu=0,sd=1,cat=5,mod="logistic") sim.poly.ideal.npn(nvar = 5,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL, mu=0,sd=1,cat=5) sim.poly.ideal.npl(nvar = 5,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,       mu=0,sd=1,cat=5,theta=NULL)sim.poly.mat(R,m,n) 
sim.rasch(nvar = 5,n = 500, low=-3,high=3,d=NULL, a=1,mu=0,sd=1)sim.irt(nvar = 5, n = 500, low=-3, high=3, a=NULL,c=0, z=1,d=NULL, mu=0,sd=1,    mod="logistic",theta=NULL)sim.npl(nvar = 5, n = 500, low=-3,high=3,a=NULL,c=0,z=1,d=NULL,mu=0,sd=1,theta=NULL)sim.npn(nvar = 5, n = 500, low=-3,high=3,a=NULL,c=0,z=1,d=NULL,mu=0,sd=1,theta=NULL)sim.poly(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,     mu=0,sd=1,cat=5,mod="logistic",theta=NULL) sim.poly.npn(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,   mu=0, sd=1,      cat=5,theta=NULL) sim.poly.npl(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,  mu=0, sd=1, cat=5,theta=NULL) sim.poly.ideal(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,    mu=0,sd=1,cat=5,mod="logistic") sim.poly.ideal.npn(nvar = 5,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL, mu=0,sd=1,cat=5) sim.poly.ideal.npl(nvar = 5,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,       mu=0,sd=1,cat=5,theta=NULL)sim.poly.mat(R,m,n) 
sim.rasch(nvar = 5,n = 500, low=-3,high=3,d=NULL, a=1,mu=0,sd=1)sim.irt(nvar = 5, n = 500, low=-3, high=3, a=NULL,c=0, z=1,d=NULL, mu=0,sd=1,    mod="logistic",theta=NULL)sim.npl(nvar = 5, n = 500, low=-3,high=3,a=NULL,c=0,z=1,d=NULL,mu=0,sd=1,theta=NULL)sim.npn(nvar = 5, n = 500, low=-3,high=3,a=NULL,c=0,z=1,d=NULL,mu=0,sd=1,theta=NULL)sim.poly(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,     mu=0,sd=1,cat=5,mod="logistic",theta=NULL) sim.poly.npn(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,   mu=0, sd=1,      cat=5,theta=NULL) sim.poly.npl(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,  mu=0, sd=1, cat=5,theta=NULL) sim.poly.ideal(nvar = 5 ,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,    mu=0,sd=1,cat=5,mod="logistic") sim.poly.ideal.npn(nvar = 5,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL, mu=0,sd=1,cat=5) sim.poly.ideal.npl(nvar = 5,n = 500,low=-2,high=2,a=NULL,c=0,z=1,d=NULL,       mu=0,sd=1,cat=5,theta=NULL)sim.poly.mat(R,m,n) 
sim(fx=NULL,Phi=NULL,fy=NULL,alpha=.8,lambda = 0,n=0,mu=NULL,raw=TRUE)sim.simplex(nvar =12, alpha=.8,lambda=0,beta=1,mu=NULL, n=0)sim.minor(nvar=12,nfact=3,n=0,g=NULL,fbig=NULL,fsmall = c(-.2,.2),bipolar=TRUE) 
sim.item(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,  gloading = 0, xbias = 0, ybias = 0, categorical = FALSE, low = -3, high = 3,  truncate = FALSE, cutpoint = 0)sim.circ(nvar = 72, nsub = 500, circum = TRUE, xloading = 0.6, yloading = 0.6,   gloading = 0, xbias = 0, ybias = 0, categorical = FALSE, low = -3, high = 3,   truncate = FALSE, cutpoint = 0)sim.dichot(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,     gloading = 0, xbias = 0, ybias = 0, low = 0, high = 0) item.dichot(nvar = 72, nsub = 500, circum = FALSE, xloading = 0.6, yloading = 0.6,  gloading = 0, xbias = 0, ybias = 0, low = 0, high = 0) sim.spherical(simple=FALSE, nx=7,ny=12 ,nsub = 500,  xloading =.55, yloading = .55,   zloading=.55, gloading=0, xbias=0,  ybias = 0, zbias=0,categorical=FALSE,    low=-3,high=3,truncate=FALSE,cutpoint=0) con2cat(old,cuts=c(0,1,2,3),where)
sim.structure(fx=NULL,Phi=NULL, fy=NULL, f=NULL, n=0, uniq=NULL, raw=TRUE,   items = FALSE, low=-2,high=2,d=NULL,cat=5, mu=0)sim.structural(fx=NULL, Phi=NULL, fy=NULL, f=NULL, n=0, uniq=NULL, raw=TRUE,      items = FALSE, low=-2,high=2,d=NULL,cat=5, mu=0)  #deprecatedsimCor(R,n=1000,data=FALSE,scale=TRUE, skew=c("none","log","lognormal",   "sqrt","abs"),vars=NULL,latent=FALSE,quant=NULL)sim.correlation(R,n=1000,data=FALSE,scale=TRUE, skew=c("none","log","lognormal",    "sqrt","abs"),vars=NULL,latent=FALSE,quant=NULL)
sim.structure(fx=NULL,Phi=NULL, fy=NULL, f=NULL, n=0, uniq=NULL, raw=TRUE,   items = FALSE, low=-2,high=2,d=NULL,cat=5, mu=0)sim.structural(fx=NULL, Phi=NULL, fy=NULL, f=NULL, n=0, uniq=NULL, raw=TRUE,      items = FALSE, low=-2,high=2,d=NULL,cat=5, mu=0)  #deprecatedsimCor(R,n=1000,data=FALSE,scale=TRUE, skew=c("none","log","lognormal",   "sqrt","abs"),vars=NULL,latent=FALSE,quant=NULL)sim.correlation(R,n=1000,data=FALSE,scale=TRUE, skew=c("none","log","lognormal",    "sqrt","abs"),vars=NULL,latent=FALSE,quant=NULL)
sim.VSS(ncases=1000, nvariables=16, nfactors=4, meanloading=.5,dichot=FALSE,cut=0)
sim.structure(fx=NULL,Phi=NULL, fy=NULL, f=NULL, n=0, uniq=NULL, raw=TRUE,   items = FALSE, low=-2,high=2,d=NULL,cat=5, mu=0)sim.structural(fx=NULL, Phi=NULL, fy=NULL, f=NULL, n=0, uniq=NULL, raw=TRUE,      items = FALSE, low=-2,high=2,d=NULL,cat=5, mu=0)  #deprecatedsimCor(R,n=1000,data=FALSE,scale=TRUE, skew=c("none","log","lognormal",   "sqrt","abs"),vars=NULL,latent=FALSE,quant=NULL)sim.correlation(R,n=1000,data=FALSE,scale=TRUE, skew=c("none","log","lognormal",    "sqrt","abs"),vars=NULL,latent=FALSE,quant=NULL)
simulation.circ(samplesize=c(100,200,400,800), numberofvariables=c(16,32,48,72))circ.sim.plot(x.df)
skew(x, na.rm = TRUE,type=3)kurtosi(x, na.rm = TRUE,type=3)mardia(x,na.rm = TRUE,plot=TRUE)
smc(R,covar=FALSE)
spider(y,x,data,labels=NULL,rescale=FALSE,center=FALSE,connect=TRUE,overlay=FALSE,    scale=1,ncolors=31,fill=FALSE,main=NULL,...)    radar(x,labels=NULL,keys=NULL,center=FALSE,connect=FALSE,scale=1,ncolors=31,fill=FALSE,    add=FALSE,linetyp="solid", main="Radar Plot",angle=0,absolute=FALSE,     show=TRUE,digits=2,cut=.2,circles=TRUE, shape=FALSE, clockwise=FALSE,     delta = NULL,label.pos=NULL,position=NULL,     xlim=c(-1,1),ylim=c(-1, 1),...) 
splitHalf(r,raw=FALSE,brute=FALSE,n.sample=10000,covar=FALSE,check.keys=TRUE,           key=NULL,ci=.05,use="pairwise")guttman(r,key=NULL) tenberge(r)glb(r,key=NULL)glb.fa(r,key=NULL)
statsBy(data, group, cors = FALSE, cor="cor", method="pearson", use="pairwise", poly=FALSE, na.rm=TRUE,alpha=.05,minlength=5,weights=NULL)statsBy.boot(data,group,ntrials=10,cors=FALSE,replace=TRUE,method="pearson")statsBy.boot.summary(res.list,var="ICC2")faBy(stats, nfactors = 1, rotate = "oblimin", fm = "minres", free = TRUE, all=FALSE,   min.n = 12,quant=.1, ...)
statsBy(data, group, cors = FALSE, cor="cor", method="pearson", use="pairwise", poly=FALSE, na.rm=TRUE,alpha=.05,minlength=5,weights=NULL)statsBy.boot(data,group,ntrials=10,cors=FALSE,replace=TRUE,method="pearson")statsBy.boot.summary(res.list,var="ICC2")faBy(stats, nfactors = 1, rotate = "oblimin", fm = "minres", free = TRUE, all=FALSE,   min.n = 12,quant=.1, ...)
statsBy(data, group, cors = FALSE, cor="cor", method="pearson", use="pairwise", poly=FALSE, na.rm=TRUE,alpha=.05,minlength=5,weights=NULL)statsBy.boot(data,group,ntrials=10,cors=FALSE,replace=TRUE,method="pearson")statsBy.boot.summary(res.list,var="ICC2")faBy(stats, nfactors = 1, rotate = "oblimin", fm = "minres", free = TRUE, all=FALSE,   min.n = 12,quant=.1, ...)
structure.diagram(fx, Phi=NULL,fy=NULL,labels=NULL,cut=.3,errors=FALSE,simple=TRUE,   regression=FALSE,lr=TRUE,Rx=NULL,Ry=NULL,digits=1,e.size=.1,    main="Structural model", ...)structure.graph(fx,  Phi = NULL,fy = NULL, out.file = NULL, labels = NULL, cut = 0.3,    errors=TRUE, simple=TRUE,regression=FALSE, size = c(8, 6),     node.font = c("Helvetica", 14), edge.font = c("Helvetica", 10),     rank.direction = c("RL", "TB", "LR", "BT"), digits = 1,      title = "Structural model", ...)structure.sem(fx,  Phi = NULL, fy = NULL,out.file = NULL, labels = NULL,     cut = 0.3, errors=TRUE, simple=TRUE,regression=FALSE)lavaan.diagram(fit,main,e.size=.1,...) sem.diagram(fit,main="A SEM from the sem package",...)sem.graph(fit,out.file=NULL,main= "A SEM from the sem package",...)
structure.diagram(fx, Phi=NULL,fy=NULL,labels=NULL,cut=.3,errors=FALSE,simple=TRUE,   regression=FALSE,lr=TRUE,Rx=NULL,Ry=NULL,digits=1,e.size=.1,    main="Structural model", ...)structure.graph(fx,  Phi = NULL,fy = NULL, out.file = NULL, labels = NULL, cut = 0.3,    errors=TRUE, simple=TRUE,regression=FALSE, size = c(8, 6),     node.font = c("Helvetica", 14), edge.font = c("Helvetica", 10),     rank.direction = c("RL", "TB", "LR", "BT"), digits = 1,      title = "Structural model", ...)structure.sem(fx,  Phi = NULL, fy = NULL,out.file = NULL, labels = NULL,     cut = 0.3, errors=TRUE, simple=TRUE,regression=FALSE)lavaan.diagram(fit,main,e.size=.1,...) sem.diagram(fit,main="A SEM from the sem package",...)sem.graph(fit,out.file=NULL,main= "A SEM from the sem package",...)
structure.list(nvars, f.list,f=NULL, f.labels = NULL, item.labels = NULL)phi.list(nf,f.list, f.labels = NULL)
structure.diagram(fx, Phi=NULL,fy=NULL,labels=NULL,cut=.3,errors=FALSE,simple=TRUE,   regression=FALSE,lr=TRUE,Rx=NULL,Ry=NULL,digits=1,e.size=.1,    main="Structural model", ...)structure.graph(fx,  Phi = NULL,fy = NULL, out.file = NULL, labels = NULL, cut = 0.3,    errors=TRUE, simple=TRUE,regression=FALSE, size = c(8, 6),     node.font = c("Helvetica", 14), edge.font = c("Helvetica", 10),     rank.direction = c("RL", "TB", "LR", "BT"), digits = 1,      title = "Structural model", ...)structure.sem(fx,  Phi = NULL, fy = NULL,out.file = NULL, labels = NULL,     cut = 0.3, errors=TRUE, simple=TRUE,regression=FALSE)lavaan.diagram(fit,main,e.size=.1,...) sem.diagram(fit,main="A SEM from the sem package",...)sem.graph(fit,out.file=NULL,main= "A SEM from the sem package",...)
## S3 method for class 'psych'print(x,digits=2,all=FALSE,cut=NULL,sort=FALSE,short=TRUE,lower=TRUE,signif=NULL,...)## S3 method for class 'psych'summary(object,digits=2,items=FALSE,...)
superMatrix(x,y)superCor(x,y=NULL, xy=NULL)super.matrix(x, y)  #Deprecated
superMatrix(x,y)superCor(x,y=NULL, xy=NULL)super.matrix(x, y)  #Deprecated
superMatrix(x,y)superCor(x,y=NULL, xy=NULL)super.matrix(x, y)  #Deprecated
cohen.d(x, group,alpha=.05,std=TRUE,sort=NULL,dictionary=NULL,MD=TRUE,data=NULL)d.robust(x,group,trim=.2)cohen.d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)d.ci(d,n=NULL,n2=NULL,n1=NULL,alpha=.05)cohen.d.by(x,group,group2,alpha=.05,MD=TRUE)d2r(d)r2d(rho)d2t(d,n=NULL,n2=NULL,n1=NULL)t2d(t,n=NULL,n2=NULL,n1=NULL)m2t(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)  #returns d invisibilym2d(m1,m2,s1,s2,n1=NULL,n2=NULL,n=NULL,pooled=TRUE)d2OVL(d)  #Percent overlap for 1 distribtiond2OVL2(d)  #Percent overlap joint distributiond2CL(d)   #Common language effect sized2U3(d)   #Proportion in higher group exceedding median of lower group
fisherz(rho)fisherz2r(z)r.con(rho,n,p=.95,twotailed=TRUE)r2t(rho,n)t2r(t,df)g2r(g,df,n)chi2r(chi2,n)r2chi(rho,n)r2c(rho,sigma)cor2cov(rho,sigma)
table2matrix(x, labs = NULL)table2df(x, count=NULL,labs = NULL)
table2matrix(x, labs = NULL)table2df(x, count=NULL,labs = NULL)
psych.misc()lowerCor(x,digits=2,use="pairwise",method="pearson",minlength=5)cor2(x,y,digits=2,use="pairwise",method="pearson")lowerMat(R, digits = 2,minlength=5)tableF(x,y)reflect(f,flip=NULL)progressBar(value,max,label=NULL) shannon(x,correct=FALSE,base=2)test.all(pl,package="psych",dependencies       = c("Depends", "Imports", "LinkingTo"),find=FALSE,skip=NULL)  levels2numeric(x)  char2numeric(x,flag=TRUE)  nchar2numeric(x,flag=TRUE) isCorrelation(x,na.rm=FALSE) #test if an object is a symmetric matrix     # with diagonals of 1 and  all values between -1 and 1 isCovariance(x)  #test if an object is a symmetric matrix    fromTo(data,from,to=NULL) #convert character names to locations as specified in colnames #of data cs(...) #convert a list of text words to  character vector acs(...) #convert a list of text words to  a single string
data("Tal.Or")
data("Tal.Or")
faRotate(loadings,rotate="oblimin",...)bifactor(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)biquartimin(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)TargetQ(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)TargetT(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)Promax(x,m=4, normalize=FALSE, pro.m = 4) Procrustes(L,Target) #adapted from Niels Walertarget.rot(x,keys=NULL)varimin(L, Tmat = diag(ncol(L)), normalize = FALSE, eps = 1e-05, maxit = 1000)vgQ.bimin(L)   #called by bifactorvgQ.targetQ(L,Target=NULL)  #called by TargetQvgQ.varimin(L)  #called by variminequamax(L, Tmat=diag(ncol(L)), eps=1e-5, maxit=1000) 
faRotate(loadings,rotate="oblimin",...)bifactor(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)biquartimin(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)TargetQ(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)TargetT(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)Promax(x,m=4, normalize=FALSE, pro.m = 4) Procrustes(L,Target) #adapted from Niels Walertarget.rot(x,keys=NULL)varimin(L, Tmat = diag(ncol(L)), normalize = FALSE, eps = 1e-05, maxit = 1000)vgQ.bimin(L)   #called by bifactorvgQ.targetQ(L,Target=NULL)  #called by TargetQvgQ.varimin(L)  #called by variminequamax(L, Tmat=diag(ncol(L)), eps=1e-5, maxit=1000) 
faRotate(loadings,rotate="oblimin",...)bifactor(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)biquartimin(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)TargetQ(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)TargetT(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)Promax(x,m=4, normalize=FALSE, pro.m = 4) Procrustes(L,Target) #adapted from Niels Walertarget.rot(x,keys=NULL)varimin(L, Tmat = diag(ncol(L)), normalize = FALSE, eps = 1e-05, maxit = 1000)vgQ.bimin(L)   #called by bifactorvgQ.targetQ(L,Target=NULL)  #called by TargetQvgQ.varimin(L)  #called by variminequamax(L, Tmat=diag(ncol(L)), eps=1e-5, maxit=1000) 
splitHalf(r,raw=FALSE,brute=FALSE,n.sample=10000,covar=FALSE,check.keys=TRUE,           key=NULL,ci=.05,use="pairwise")guttman(r,key=NULL) tenberge(r)glb(r,key=NULL)glb.fa(r,key=NULL)
psych.misc()lowerCor(x,digits=2,use="pairwise",method="pearson",minlength=5)cor2(x,y,digits=2,use="pairwise",method="pearson")lowerMat(R, digits = 2,minlength=5)tableF(x,y)reflect(f,flip=NULL)progressBar(value,max,label=NULL) shannon(x,correct=FALSE,base=2)test.all(pl,package="psych",dependencies       = c("Depends", "Imports", "LinkingTo"),find=FALSE,skip=NULL)  levels2numeric(x)  char2numeric(x,flag=TRUE)  nchar2numeric(x,flag=TRUE) isCorrelation(x,na.rm=FALSE) #test if an object is a symmetric matrix     # with diagonals of 1 and  all values between -1 and 1 isCovariance(x)  #test if an object is a symmetric matrix    fromTo(data,from,to=NULL) #convert character names to locations as specified in colnames #of data cs(...) #convert a list of text words to  character vector acs(...) #convert a list of text words to  a single string
test.irt(nvar = 9, n.obs = 1000, mod = "logistic",type="tetra", low = -3, high = 3, seed = NULL)
test.psych(first=1,last=5,short=TRUE,all=FALSE,fapc=FALSE)
testRetest(t1,t2=NULL,keys=NULL,id="id", time=  "time", select=NULL, check.keys=TRUE, warnings=TRUE,lmer=TRUE,sort=TRUE)
tetrachoric(x,y=NULL,correct=.5,smooth=TRUE,global=TRUE,weight=NULL,na.rm=TRUE,     delete=TRUE)polychoric(x,y=NULL,smooth=TRUE,global=TRUE,polycor=FALSE,ML=FALSE, std.err=FALSE,      weight=NULL,correct=.5,progress=TRUE,na.rm=TRUE,  delete=TRUE,max.cat=8)biserial(x,y)  polyserial(x,y) polydi(p,d,taup,taud,global=TRUE,ML = FALSE, std.err = FALSE,     weight=NULL,progress=TRUE,na.rm=TRUE,delete=TRUE,correct=.5) #deprecated  use polychoric insteadpoly.mat(x, short = TRUE, std.err = FALSE, ML = FALSE) 
thurstone(x, ranks = FALSE, digits = 2)
data(Thurstone)data(Thurstone.33)data(Thurstone.9)data(Holzinger)data(Holzinger.9)data(Bechtoldt)data(Bechtoldt.1)data(Bechtoldt.2)data(Reise)
data(Thurstone)data(Thurstone.33)data(Thurstone.9)data(Holzinger)data(Holzinger.9)data(Bechtoldt)data(Bechtoldt.1)data(Bechtoldt.2)data(Reise)
data(Thurstone)data(Thurstone.33)data(Thurstone.9)data(Holzinger)data(Holzinger.9)data(Bechtoldt)data(Bechtoldt.1)data(Bechtoldt.2)data(Reise)
headTail(x, top=4,bottom=4,from=1,to=NULL, digits=2, hlength = 4, tlength =4, ellipsis=TRUE) headtail(x,hlength=4,tlength=4,digits=2,ellipsis=TRUE,from=1,to=NULL)topBottom(x, top=4,bottom=4,from=1,to=NULL, digits=2, hlength = 4, tlength = 4) quickView(x,top=8,bottom=8,from=1,to=NULL)
tr(m)
data(Tucker)
unidim(x, keys.list = NULL,cor="cor",correct=.5, check.keys = TRUE)
faRotate(loadings,rotate="oblimin",...)bifactor(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)biquartimin(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)TargetQ(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)TargetT(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)Promax(x,m=4, normalize=FALSE, pro.m = 4) Procrustes(L,Target) #adapted from Niels Walertarget.rot(x,keys=NULL)varimin(L, Tmat = diag(ncol(L)), normalize = FALSE, eps = 1e-05, maxit = 1000)vgQ.bimin(L)   #called by bifactorvgQ.targetQ(L,Target=NULL)  #called by TargetQvgQ.varimin(L)  #called by variminequamax(L, Tmat=diag(ncol(L)), eps=1e-5, maxit=1000) 
faRotate(loadings,rotate="oblimin",...)bifactor(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)biquartimin(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)TargetQ(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)TargetT(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)Promax(x,m=4, normalize=FALSE, pro.m = 4) Procrustes(L,Target) #adapted from Niels Walertarget.rot(x,keys=NULL)varimin(L, Tmat = diag(ncol(L)), normalize = FALSE, eps = 1e-05, maxit = 1000)vgQ.bimin(L)   #called by bifactorvgQ.targetQ(L,Target=NULL)  #called by TargetQvgQ.varimin(L)  #called by variminequamax(L, Tmat=diag(ncol(L)), eps=1e-5, maxit=1000) 
faRotate(loadings,rotate="oblimin",...)bifactor(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)biquartimin(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)TargetQ(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)TargetT(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)Promax(x,m=4, normalize=FALSE, pro.m = 4) Procrustes(L,Target) #adapted from Niels Walertarget.rot(x,keys=NULL)varimin(L, Tmat = diag(ncol(L)), normalize = FALSE, eps = 1e-05, maxit = 1000)vgQ.bimin(L)   #called by bifactorvgQ.targetQ(L,Target=NULL)  #called by TargetQvgQ.varimin(L)  #called by variminequamax(L, Tmat=diag(ncol(L)), eps=1e-5, maxit=1000) 
faRotate(loadings,rotate="oblimin",...)bifactor(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)biquartimin(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000)TargetQ(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)TargetT(L, Tmat=diag(ncol(L)), normalize=FALSE, eps=1e-5, maxit=1000,Target=NULL)Promax(x,m=4, normalize=FALSE, pro.m = 4) Procrustes(L,Target) #adapted from Niels Walertarget.rot(x,keys=NULL)varimin(L, Tmat = diag(ncol(L)), normalize = FALSE, eps = 1e-05, maxit = 1000)vgQ.bimin(L)   #called by bifactorvgQ.targetQ(L,Target=NULL)  #called by TargetQvgQ.varimin(L)  #called by variminequamax(L, Tmat=diag(ncol(L)), eps=1e-5, maxit=1000) 
violin(x,data=NULL,var=NULL,grp=NULL,grp.name=NULL,xlab=NULL,ylab=NULL,main="Density plot",vertical=TRUE,dots=FALSE,jitter=.05,alpha=1,errors=FALSE,eyes=TRUE,adjust=1, restrict=TRUE,xlim=NULL, add=FALSE, col=NULL,pch=20,scale=NULL,...)  violinBy(x,var=NULL,grp=NULL,data=NULL,grp.name=NULL,xlab=NULL,ylab=NULL,main="Density plot",vertical=TRUE,dots=FALSE,jitter=.05,alpha= 1,errors=FALSE,eyes=TRUE,adjust=1, restrict=TRUE,xlim=NULL, add=FALSE, col=NULL,pch=20,scale=NULL,...)  densityBy(x,var=NULL,grp=NULL,data=NULL,freq=FALSE,col=c("blue","red","black"),alpha=.5,  adjust=1,ylim=NULL,xlim=NULL,xlab="Variable", ylab="Density",       main="Density Plot",legend=NULL)
violin(x,data=NULL,var=NULL,grp=NULL,grp.name=NULL,xlab=NULL,ylab=NULL,main="Density plot",vertical=TRUE,dots=FALSE,jitter=.05,alpha=1,errors=FALSE,eyes=TRUE,adjust=1, restrict=TRUE,xlim=NULL, add=FALSE, col=NULL,pch=20,scale=NULL,...)  violinBy(x,var=NULL,grp=NULL,data=NULL,grp.name=NULL,xlab=NULL,ylab=NULL,main="Density plot",vertical=TRUE,dots=FALSE,jitter=.05,alpha= 1,errors=FALSE,eyes=TRUE,adjust=1, restrict=TRUE,xlim=NULL, add=FALSE, col=NULL,pch=20,scale=NULL,...)  densityBy(x,var=NULL,grp=NULL,data=NULL,freq=FALSE,col=c("blue","red","black"),alpha=.5,  adjust=1,ylim=NULL,xlim=NULL,xlab="Variable", ylab="Density",       main="Density Plot",legend=NULL)
vss(x, n = 8, rotate = "varimax", diagonal = FALSE, fm = "minres", n.obs=NULL,plot=TRUE,title="Very Simple Structure",use="pairwise",cor="cor",...)VSS(x, n = 8, rotate = "varimax", diagonal = FALSE, fm = "minres", n.obs=NULL,plot=TRUE,title="Very Simple Structure",use="pairwise",cor="cor",...)nfactors(x,n=20,rotate="varimax",diagonal=FALSE,fm="minres",n.obs=NULL,             title="Number of Factors",pch=16,use="pairwise", cor="cor",...)
vss(x, n = 8, rotate = "varimax", diagonal = FALSE, fm = "minres", n.obs=NULL,plot=TRUE,title="Very Simple Structure",use="pairwise",cor="cor",...)VSS(x, n = 8, rotate = "varimax", diagonal = FALSE, fm = "minres", n.obs=NULL,plot=TRUE,title="Very Simple Structure",use="pairwise",cor="cor",...)nfactors(x,n=20,rotate="varimax",diagonal=FALSE,fm="minres",n.obs=NULL,             title="Number of Factors",pch=16,use="pairwise", cor="cor",...)
VSS.parallel(ncases, nvariables,scree=FALSE,rotate="none")
VSS.plot(x, title = "Very Simple Structure", line = FALSE)
scree(rx,factors=TRUE,pc=TRUE,main="Scree plot",hline=NULL,add=FALSE) VSS.scree(rx, main = "scree plot")
sim.VSS(ncases=1000, nvariables=16, nfactors=4, meanloading=.5,dichot=FALSE,cut=0)
sim.VSS(ncases=1000, nvariables=16, nfactors=4, meanloading=.5,dichot=FALSE,cut=0)
data(Schmid)
winsor(x, trim = 0.2, na.rm = TRUE)winsor.mean(x, trim = 0.2, na.rm = TRUE)winsor.means(x, trim = 0.2, na.rm = TRUE)  winsor.sd(x, trim = 0.2, na.rm = TRUE)  winsor.var(x, trim = 0.2, na.rm = TRUE)  
winsor(x, trim = 0.2, na.rm = TRUE)winsor.mean(x, trim = 0.2, na.rm = TRUE)winsor.means(x, trim = 0.2, na.rm = TRUE)  winsor.sd(x, trim = 0.2, na.rm = TRUE)  winsor.var(x, trim = 0.2, na.rm = TRUE)  
winsor(x, trim = 0.2, na.rm = TRUE)winsor.mean(x, trim = 0.2, na.rm = TRUE)winsor.means(x, trim = 0.2, na.rm = TRUE)  winsor.sd(x, trim = 0.2, na.rm = TRUE)  winsor.var(x, trim = 0.2, na.rm = TRUE)  
winsor(x, trim = 0.2, na.rm = TRUE)winsor.mean(x, trim = 0.2, na.rm = TRUE)winsor.means(x, trim = 0.2, na.rm = TRUE)  winsor.sd(x, trim = 0.2, na.rm = TRUE)  winsor.var(x, trim = 0.2, na.rm = TRUE)  
winsor(x, trim = 0.2, na.rm = TRUE)winsor.mean(x, trim = 0.2, na.rm = TRUE)winsor.means(x, trim = 0.2, na.rm = TRUE)  winsor.sd(x, trim = 0.2, na.rm = TRUE)  winsor.var(x, trim = 0.2, na.rm = TRUE)  
data(withinBetween)
cohen.kappa(x, w=NULL,n.obs=NULL,alpha=.05,levels=NULL)  wkappa(x, w = NULL)    #deprectated
YuleBonett(x,c=1,bonett=FALSE,alpha=.05) #find the generalized Yule cofficientsYuleCor(x,c=1,bonett=FALSE,alpha=.05) #do this for a matrix Yule(x,Y=FALSE)  #find Yule given a two by two table of frequencies #find the frequencies that produce a Yule Q given the Q and marginalsYule.inv(Q,m,n=NULL)   #find the phi coefficient that matches the Yule Q given the marginalsYule2phi(Q,m,n=NULL)    Yule2tetra(Q,m,n=NULL,correct=TRUE)    #Find the tetrachoric correlation given the Yule Q and the marginals#(deprecated) Find the tetrachoric correlation given the Yule Q and the marginals   Yule2poly(Q,m,n=NULL,correct=TRUE)   
YuleBonett(x,c=1,bonett=FALSE,alpha=.05) #find the generalized Yule cofficientsYuleCor(x,c=1,bonett=FALSE,alpha=.05) #do this for a matrix Yule(x,Y=FALSE)  #find Yule given a two by two table of frequencies #find the frequencies that produce a Yule Q given the Q and marginalsYule.inv(Q,m,n=NULL)   #find the phi coefficient that matches the Yule Q given the marginalsYule2phi(Q,m,n=NULL)    Yule2tetra(Q,m,n=NULL,correct=TRUE)    #Find the tetrachoric correlation given the Yule Q and the marginals#(deprecated) Find the tetrachoric correlation given the Yule Q and the marginals   Yule2poly(Q,m,n=NULL,correct=TRUE)   
YuleBonett(x,c=1,bonett=FALSE,alpha=.05) #find the generalized Yule cofficientsYuleCor(x,c=1,bonett=FALSE,alpha=.05) #do this for a matrix Yule(x,Y=FALSE)  #find Yule given a two by two table of frequencies #find the frequencies that produce a Yule Q given the Q and marginalsYule.inv(Q,m,n=NULL)   #find the phi coefficient that matches the Yule Q given the marginalsYule2phi(Q,m,n=NULL)    Yule2tetra(Q,m,n=NULL,correct=TRUE)    #Find the tetrachoric correlation given the Yule Q and the marginals#(deprecated) Find the tetrachoric correlation given the Yule Q and the marginals   Yule2poly(Q,m,n=NULL,correct=TRUE)   
Yule2poly.matrix(x, v)  #deprectatedphi2poly.matrix(x, v)     #deprectatedYule2phi.matrix(x, v)     #deprectated
YuleBonett(x,c=1,bonett=FALSE,alpha=.05) #find the generalized Yule cofficientsYuleCor(x,c=1,bonett=FALSE,alpha=.05) #do this for a matrix Yule(x,Y=FALSE)  #find Yule given a two by two table of frequencies #find the frequencies that produce a Yule Q given the Q and marginalsYule.inv(Q,m,n=NULL)   #find the phi coefficient that matches the Yule Q given the marginalsYule2phi(Q,m,n=NULL)    Yule2tetra(Q,m,n=NULL,correct=TRUE)    #Find the tetrachoric correlation given the Yule Q and the marginals#(deprecated) Find the tetrachoric correlation given the Yule Q and the marginals   Yule2poly(Q,m,n=NULL,correct=TRUE)   
Yule2poly.matrix(x, v)  #deprectatedphi2poly.matrix(x, v)     #deprectatedYule2phi.matrix(x, v)     #deprectated
YuleBonett(x,c=1,bonett=FALSE,alpha=.05) #find the generalized Yule cofficientsYuleCor(x,c=1,bonett=FALSE,alpha=.05) #do this for a matrix Yule(x,Y=FALSE)  #find Yule given a two by two table of frequencies #find the frequencies that produce a Yule Q given the Q and marginalsYule.inv(Q,m,n=NULL)   #find the phi coefficient that matches the Yule Q given the marginalsYule2phi(Q,m,n=NULL)    Yule2tetra(Q,m,n=NULL,correct=TRUE)    #Find the tetrachoric correlation given the Yule Q and the marginals#(deprecated) Find the tetrachoric correlation given the Yule Q and the marginals   Yule2poly(Q,m,n=NULL,correct=TRUE)   
YuleBonett(x,c=1,bonett=FALSE,alpha=.05) #find the generalized Yule cofficientsYuleCor(x,c=1,bonett=FALSE,alpha=.05) #do this for a matrix Yule(x,Y=FALSE)  #find Yule given a two by two table of frequencies #find the frequencies that produce a Yule Q given the Q and marginalsYule.inv(Q,m,n=NULL)   #find the phi coefficient that matches the Yule Q given the marginalsYule2phi(Q,m,n=NULL)    Yule2tetra(Q,m,n=NULL,correct=TRUE)    #Find the tetrachoric correlation given the Yule Q and the marginals#(deprecated) Find the tetrachoric correlation given the Yule Q and the marginals   Yule2poly(Q,m,n=NULL,correct=TRUE)   
YuleBonett(x,c=1,bonett=FALSE,alpha=.05) #find the generalized Yule cofficientsYuleCor(x,c=1,bonett=FALSE,alpha=.05) #do this for a matrix Yule(x,Y=FALSE)  #find Yule given a two by two table of frequencies #find the frequencies that produce a Yule Q given the Q and marginalsYule.inv(Q,m,n=NULL)   #find the phi coefficient that matches the Yule Q given the marginalsYule2phi(Q,m,n=NULL)    Yule2tetra(Q,m,n=NULL,correct=TRUE)    #Find the tetrachoric correlation given the Yule Q and the marginals#(deprecated) Find the tetrachoric correlation given the Yule Q and the marginals   Yule2poly(Q,m,n=NULL,correct=TRUE)   
acf(x, lag.max = NULL,    type = c("correlation", "covariance", "partial"),    plot = TRUE, na.action = na.fail, demean = TRUE, ...)pacf(x, lag.max, plot, na.action, ...)## Default S3 method:pacf(x, lag.max = NULL, plot = TRUE, na.action = na.fail,    ...)ccf(x, y, lag.max = NULL, type = c("correlation", "covariance"),    plot = TRUE, na.action = na.fail, ...)## S3 method for class 'acf'x[i, j]
acf2AR(acf)
add.scope(terms1, terms2)drop.scope(terms1, terms2)factor.scope(factor, scope)
add1(object, scope, ...)## Default S3 method:add1(object, scope, scale = 0, test = c("none", "Chisq"),     k = 2, trace = FALSE, ...)## S3 method for class 'lm'add1(object, scope, scale = 0, test = c("none", "Chisq", "F"),     x = NULL, k = 2, ...)## S3 method for class 'glm'add1(object, scope, scale = 0,     test = c("none", "Rao", "LRT", "Chisq", "F"),     x = NULL, k = 2, ...)drop1(object, scope, ...)## Default S3 method:drop1(object, scope, scale = 0, test = c("none", "Chisq"),      k = 2, trace = FALSE, ...)## S3 method for class 'lm'drop1(object, scope, scale = 0, all.cols = TRUE,      test = c("none", "Chisq", "F"), k = 2, ...)## S3 method for class 'glm'drop1(object, scope, scale = 0,      test = c("none", "Rao", "LRT", "Chisq", "F"),      k = 2, ...)
addmargins(A, margin = seq_along(dim(A)), FUN = sum, quiet = FALSE)
aggregate(x, ...)## Default S3 method:aggregate(x, ...)## S3 method for class 'data.frame'aggregate(x, by, FUN, ..., simplify = TRUE, drop = TRUE)## S3 method for class 'formula'aggregate(formula, data, FUN, ...,          subset, na.action = na.omit)## S3 method for class 'ts'aggregate(x, nfrequency = 1, FUN = sum, ndeltat = 1,          ts.eps = getOption("ts.eps"), ...)
aggregate(x, ...)## Default S3 method:aggregate(x, ...)## S3 method for class 'data.frame'aggregate(x, by, FUN, ..., simplify = TRUE, drop = TRUE)## S3 method for class 'formula'aggregate(formula, data, FUN, ...,          subset, na.action = na.omit)## S3 method for class 'ts'aggregate(x, nfrequency = 1, FUN = sum, ndeltat = 1,          ts.eps = getOption("ts.eps"), ...)
aggregate(x, ...)## Default S3 method:aggregate(x, ...)## S3 method for class 'data.frame'aggregate(x, by, FUN, ..., simplify = TRUE, drop = TRUE)## S3 method for class 'formula'aggregate(formula, data, FUN, ...,          subset, na.action = na.omit)## S3 method for class 'ts'aggregate(x, nfrequency = 1, FUN = sum, ndeltat = 1,          ts.eps = getOption("ts.eps"), ...)
AIC(object, ..., k = 2)BIC(object, ...)
alias(object, ...)## S3 method for class 'formula'alias(object, data, ...)## S3 method for class 'lm'alias(object, complete = TRUE, partial = FALSE,      partial.pattern = FALSE, ...)
anova(object, ...)
ansari.test(x, ...)## Default S3 method:ansari.test(x, y,            alternative = c("two.sided", "less", "greater"),            exact = NULL, conf.int = FALSE, conf.level = 0.95,            ...)## S3 method for class 'formula'ansari.test(formula, data, subset, na.action, ...)
aov(formula, data = NULL, projections = FALSE, qr = TRUE,    contrasts = NULL, ...)
approx   (x, y = NULL, xout, method = "linear", n = 50,          yleft, yright, rule = 1, f = 0, ties = mean, na.rm = TRUE)approxfun(x, y = NULL,       method = "linear",          yleft, yright, rule = 1, f = 0, ties = mean, na.rm = TRUE)
approx   (x, y = NULL, xout, method = "linear", n = 50,          yleft, yright, rule = 1, f = 0, ties = mean, na.rm = TRUE)approxfun(x, y = NULL,       method = "linear",          yleft, yright, rule = 1, f = 0, ties = mean, na.rm = TRUE)
ar(x, aic = TRUE, order.max = NULL,   method = c("yule-walker", "burg", "ols", "mle", "yw"),   na.action, series, ...)ar.burg(x, ...)## Default S3 method:ar.burg(x, aic = TRUE, order.max = NULL,        na.action = na.fail, demean = TRUE, series,        var.method = 1, ...)## S3 method for class 'mts'ar.burg(x, aic = TRUE, order.max = NULL,        na.action = na.fail, demean = TRUE, series,        var.method = 1, ...)ar.yw(x, ...)## Default S3 method:ar.yw(x, aic = TRUE, order.max = NULL,      na.action = na.fail, demean = TRUE, series, ...)## S3 method for class 'mts'ar.yw(x, aic = TRUE, order.max = NULL,      na.action = na.fail, demean = TRUE, series,      var.method = 1, ...)ar.mle(x, aic = TRUE, order.max = NULL, na.action = na.fail,       demean = TRUE, series, ...)## S3 method for class 'ar'predict(object, newdata, n.ahead = 1, se.fit = TRUE, ...)
ar(x, aic = TRUE, order.max = NULL,   method = c("yule-walker", "burg", "ols", "mle", "yw"),   na.action, series, ...)ar.burg(x, ...)## Default S3 method:ar.burg(x, aic = TRUE, order.max = NULL,        na.action = na.fail, demean = TRUE, series,        var.method = 1, ...)## S3 method for class 'mts'ar.burg(x, aic = TRUE, order.max = NULL,        na.action = na.fail, demean = TRUE, series,        var.method = 1, ...)ar.yw(x, ...)## Default S3 method:ar.yw(x, aic = TRUE, order.max = NULL,      na.action = na.fail, demean = TRUE, series, ...)## S3 method for class 'mts'ar.yw(x, aic = TRUE, order.max = NULL,      na.action = na.fail, demean = TRUE, series,      var.method = 1, ...)ar.mle(x, aic = TRUE, order.max = NULL, na.action = na.fail,       demean = TRUE, series, ...)## S3 method for class 'ar'predict(object, newdata, n.ahead = 1, se.fit = TRUE, ...)
ar(x, aic = TRUE, order.max = NULL,   method = c("yule-walker", "burg", "ols", "mle", "yw"),   na.action, series, ...)ar.burg(x, ...)## Default S3 method:ar.burg(x, aic = TRUE, order.max = NULL,        na.action = na.fail, demean = TRUE, series,        var.method = 1, ...)## S3 method for class 'mts'ar.burg(x, aic = TRUE, order.max = NULL,        na.action = na.fail, demean = TRUE, series,        var.method = 1, ...)ar.yw(x, ...)## Default S3 method:ar.yw(x, aic = TRUE, order.max = NULL,      na.action = na.fail, demean = TRUE, series, ...)## S3 method for class 'mts'ar.yw(x, aic = TRUE, order.max = NULL,      na.action = na.fail, demean = TRUE, series,      var.method = 1, ...)ar.mle(x, aic = TRUE, order.max = NULL, na.action = na.fail,       demean = TRUE, series, ...)## S3 method for class 'ar'predict(object, newdata, n.ahead = 1, se.fit = TRUE, ...)
ar.ols(x, aic = TRUE, order.max = NULL, na.action = na.fail,       demean = TRUE, intercept = demean, series, ...)
ar(x, aic = TRUE, order.max = NULL,   method = c("yule-walker", "burg", "ols", "mle", "yw"),   na.action, series, ...)ar.burg(x, ...)## Default S3 method:ar.burg(x, aic = TRUE, order.max = NULL,        na.action = na.fail, demean = TRUE, series,        var.method = 1, ...)## S3 method for class 'mts'ar.burg(x, aic = TRUE, order.max = NULL,        na.action = na.fail, demean = TRUE, series,        var.method = 1, ...)ar.yw(x, ...)## Default S3 method:ar.yw(x, aic = TRUE, order.max = NULL,      na.action = na.fail, demean = TRUE, series, ...)## S3 method for class 'mts'ar.yw(x, aic = TRUE, order.max = NULL,      na.action = na.fail, demean = TRUE, series,      var.method = 1, ...)ar.mle(x, aic = TRUE, order.max = NULL, na.action = na.fail,       demean = TRUE, series, ...)## S3 method for class 'ar'predict(object, newdata, n.ahead = 1, se.fit = TRUE, ...)
arima(x, order = c(0L, 0L, 0L),      seasonal = list(order = c(0L, 0L, 0L), period = NA),      xreg = NULL, include.mean = TRUE,      transform.pars = TRUE,      fixed = NULL, init = NULL,      method = c("CSS-ML", "ML", "CSS"), n.cond,      SSinit = c("Gardner1980", "Rossignol2011"),      optim.method = "BFGS",      optim.control = list(), kappa = 1e6)
arima.sim(model, n, rand.gen = rnorm, innov = rand.gen(n, ...),          n.start = NA, start.innov = rand.gen(n.start, ...),          ...)
arima0(x, order = c(0, 0, 0),       seasonal = list(order = c(0, 0, 0), period = NA),       xreg = NULL, include.mean = TRUE, delta = 0.01,       transform.pars = TRUE, fixed = NULL, init = NULL,       method = c("ML", "CSS"), n.cond, optim.control = list())## S3 method for class 'arima0'predict(object, n.ahead = 1, newxreg, se.fit = TRUE, ...)
## Defunct in R 1.xdnchisq(.)pnchisq(.)qnchisq(.)rnchisq(.)print.anova.glm(.)print.anova.lm(.)reshapeWide(x, i, j, val, jnames = levels(j))reshapeLong(x, jvars,  ilev = row.names(x),            jlev = names(x)[jvars], iname = "reshape.i",            jname = "reshape.j", vname = "reshape.v")arima0.diag(...)plot.mts(x, plot.type = c("multiple", "single"), panel = lines,         log = "", col = par("col"),  bg = NA, pch = par("pch"),         cex = par("cex"), lty = par("lty"), lwd = par("lwd"),         ann = par("ann"),  xlab = "Time", type = "l", main = NULL,         oma = c(6, 0, 5, 0), ...)print.coefmat(x, digits = max(3, getOption("digits") - 2),              signif.stars = getOption("show.signif.stars"),              dig.tst = max(1, min(5, digits - 1)),              cs.ind, tst.ind, zap.ind = integer(0),              P.values = NULL, has.Pvalue,              eps.Pvalue = .Machine$double.eps,              na.print = "", ...)anovalist.lm(object, ..., test = NULL)lm.fit.null(x, y, method = "qr", tol = 1e-07, ...)lm.wfit.null(x, y, w, method = "qr", tol = 1e-07, ...)glm.fit.null(x, y, weights, start = NULL,             etastart = NULL, mustart = NULL, offset,             family = gaussian(), control = glm.control(),             intercept = FALSE)# Defunct in 2.4.0mauchley.test(object, Sigma = diag(nrow = p),   T = Thin.row(proj(M) - proj(X)), M = diag(nrow = p), X = ~0,   idata = data.frame(index = seq(length = p)), ...)# Defunct in 2.10.0clearNames(object)# Defunct in 4.1.0plclust(tree, hang = 0.1, unit = FALSE, level = FALSE, hmin = 0,        square = TRUE, labels = NULL, plot. = TRUE,        axes = TRUE, frame.plot = FALSE, ann = TRUE,        main = "", sub = NULL, xlab = NULL, ylab = "Height")
ARMAacf(ar = numeric(), ma = numeric(), lag.max = r, pacf = FALSE)
ARMAtoMA(ar = numeric(), ma = numeric(), lag.max)
as.dendrogram(object, ...)## S3 method for class 'hclust'as.dendrogram(object, hang = -1, check = TRUE, ...)## S3 method for class 'dendrogram'as.hclust(x, ...)## S3 method for class 'dendrogram'plot(x, type = c("rectangle", "triangle"),      center = FALSE,      edge.root = is.leaf(x) || !is.null(attr(x,"edgetext")),      nodePar = NULL, edgePar = list(),      leaflab = c("perpendicular", "textlike", "none"),      dLeaf = NULL, xlab = "", ylab = "", xaxt = "n", yaxt = "s",      horiz = FALSE, frame.plot = FALSE, xlim, ylim, ...)## S3 method for class 'dendrogram'cut(x, h, ...)## S3 method for class 'dendrogram'merge(x, y, ..., height,      adjust = c("auto", "add.max", "none"))## S3 method for class 'dendrogram'nobs(object, ...)## S3 method for class 'dendrogram'print(x, digits, ...)## S3 method for class 'dendrogram'rev(x)## S3 method for class 'dendrogram'str(object, max.level = NA, digits.d = 3,    give.attr = FALSE, wid = getOption("width"),    nest.lev = 0, indent.str = "",    last.str = getOption("str.dendrogram.last"), stem = "--",    ...)is.leaf(object)
dist(x, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)as.dist(m, diag = FALSE, upper = FALSE)## Default S3 method:as.dist(m, diag = FALSE, upper = FALSE)## S3 method for class 'dist'print(x, diag = NULL, upper = NULL,      digits = getOption("digits"), justify = "none",      right = TRUE, ...)## S3 method for class 'dist'as.matrix(x, ...)
formula(x, ...)DF2formula(x, env = parent.frame())as.formula(object, env = parent.frame())## S3 method for class 'formula'print(x, showEnv = !identical(e, .GlobalEnv), ...)
as.hclust(x, ...)
stepfun(x, y, f = as.numeric(right), ties = "ordered",        right = FALSE)is.stepfun(x)knots(Fn, ...)as.stepfun(x, ...)## S3 method for class 'stepfun'print(x, digits = getOption("digits") - 2, ...)## S3 method for class 'stepfun'summary(object, ...)
ts(data = NA, start = 1, end = numeric(), frequency = 1,   deltat = 1, ts.eps = getOption("ts.eps"), class = , names = )as.ts(x, ...)is.ts(x)
asOneSidedFormula(object)
ave(x, ..., FUN = mean)
kernel(coef, m = 2, r, name)df.kernel(k)bandwidth.kernel(k)is.tskernel(k)## S3 method for class 'tskernel'plot(x, type = "h", xlab = "k", ylab = "W[k]",     main = attr(x,"name"), ...)
bartlett.test(x, ...)## Default S3 method:bartlett.test(x, g, ...)## S3 method for class 'formula'bartlett.test(formula, data, subset, na.action, ...)
AIC(object, ..., k = 2)BIC(object, ...)
binom.test(x, n, p = 0.5,           alternative = c("two.sided", "less", "greater"),           conf.level = 0.95)
family(object, ...)binomial(link = "logit")gaussian(link = "identity")Gamma(link = "inverse")inverse.gaussian(link = "1/mu^2")poisson(link = "log")quasi(link = "identity", variance = "constant")quasibinomial(link = "logit")quasipoisson(link = "log")
biplot(x, ...)## Default S3 method:biplot(x, y, var.axes = TRUE, col, cex = rep(par("cex"), 2),       xlabs = NULL, ylabs = NULL, expand = 1,       xlim  = NULL, ylim  = NULL, arrow.len = 0.1,       main = NULL, sub = NULL, xlab = NULL, ylab = NULL, ...)
Box.test(x, lag = 1, type = c("Box-Pierce", "Ljung-Box"), fitdf = 0)
bw.nrd0(x)bw.nrd(x)bw.ucv(x, nb = 1000, lower = 0.1 * hmax, upper = hmax,       tol = 0.1 * lower)bw.bcv(x, nb = 1000, lower = 0.1 * hmax, upper = hmax,       tol = 0.1 * lower)bw.SJ(x, nb = 1000, lower = 0.1 * hmax, upper = hmax,      method = c("ste", "dpi"), tol = 0.1 * lower)
bw.nrd0(x)bw.nrd(x)bw.ucv(x, nb = 1000, lower = 0.1 * hmax, upper = hmax,       tol = 0.1 * lower)bw.bcv(x, nb = 1000, lower = 0.1 * hmax, upper = hmax,       tol = 0.1 * lower)bw.SJ(x, nb = 1000, lower = 0.1 * hmax, upper = hmax,      method = c("ste", "dpi"), tol = 0.1 * lower)
bw.nrd0(x)bw.nrd(x)bw.ucv(x, nb = 1000, lower = 0.1 * hmax, upper = hmax,       tol = 0.1 * lower)bw.bcv(x, nb = 1000, lower = 0.1 * hmax, upper = hmax,       tol = 0.1 * lower)bw.SJ(x, nb = 1000, lower = 0.1 * hmax, upper = hmax,      method = c("ste", "dpi"), tol = 0.1 * lower)
bw.nrd0(x)bw.nrd(x)bw.ucv(x, nb = 1000, lower = 0.1 * hmax, upper = hmax,       tol = 0.1 * lower)bw.bcv(x, nb = 1000, lower = 0.1 * hmax, upper = hmax,       tol = 0.1 * lower)bw.SJ(x, nb = 1000, lower = 0.1 * hmax, upper = hmax,      method = c("ste", "dpi"), tol = 0.1 * lower)
bw.nrd0(x)bw.nrd(x)bw.ucv(x, nb = 1000, lower = 0.1 * hmax, upper = hmax,       tol = 0.1 * lower)bw.bcv(x, nb = 1000, lower = 0.1 * hmax, upper = hmax,       tol = 0.1 * lower)bw.SJ(x, nb = 1000, lower = 0.1 * hmax, upper = hmax,      method = c("ste", "dpi"), tol = 0.1 * lower)
C(object, contr, how.many, ...)
cancor(x, y, xcenter = TRUE, ycenter = TRUE)
case.names(object, ...)## S3 method for class 'lm'case.names(object, full = FALSE, ...)variable.names(object, ...)## S3 method for class 'lm'variable.names(object, full = FALSE, ...)
acf(x, lag.max = NULL,    type = c("correlation", "covariance", "partial"),    plot = TRUE, na.action = na.fail, demean = TRUE, ...)pacf(x, lag.max, plot, na.action, ...)## Default S3 method:pacf(x, lag.max = NULL, plot = TRUE, na.action = na.fail,    ...)ccf(x, y, lag.max = NULL, type = c("correlation", "covariance"),    plot = TRUE, na.action = na.fail, ...)## S3 method for class 'acf'x[i, j]
chisq.test(x, y = NULL, correct = TRUE,           p = rep(1/length(x), length(x)), rescale.p = FALSE,           simulate.p.value = FALSE, B = 2000)
cmdscale(d, k = 2, eig = FALSE, add = FALSE, x.ret = FALSE,         list. = eig || add || x.ret)
coef(object, ...)coefficients(object, ...)## Default S3 method:coef(object, complete = TRUE, ...)## S3 method for class 'aov'coef(object, complete = FALSE, ...)
coef(object, ...)coefficients(object, ...)## Default S3 method:coef(object, complete = TRUE, ...)## S3 method for class 'aov'coef(object, complete = FALSE, ...)
complete.cases(...)
confint(object, parm, level = 0.95, ...)
confint(object, parm, level = 0.95, ...)
confint(object, parm, level = 0.95, ...)
constrOptim(theta, f, grad, ui, ci, mu = 1e-04, control = list(),            method = if(is.null(grad)) "Nelder-Mead" else "BFGS",            outer.iterations = 100, outer.eps = 1e-05, ...,            hessian = FALSE)
contr.helmert(n, contrasts = TRUE, sparse = FALSE)contr.poly(n, scores = 1:n, contrasts = TRUE, sparse = FALSE)contr.sum(n, contrasts = TRUE, sparse = FALSE)contr.treatment(n, base = 1, contrasts = TRUE, sparse = FALSE)contr.SAS(n, contrasts = TRUE, sparse = FALSE)
contr.helmert(n, contrasts = TRUE, sparse = FALSE)contr.poly(n, scores = 1:n, contrasts = TRUE, sparse = FALSE)contr.sum(n, contrasts = TRUE, sparse = FALSE)contr.treatment(n, base = 1, contrasts = TRUE, sparse = FALSE)contr.SAS(n, contrasts = TRUE, sparse = FALSE)
contr.helmert(n, contrasts = TRUE, sparse = FALSE)contr.poly(n, scores = 1:n, contrasts = TRUE, sparse = FALSE)contr.sum(n, contrasts = TRUE, sparse = FALSE)contr.treatment(n, base = 1, contrasts = TRUE, sparse = FALSE)contr.SAS(n, contrasts = TRUE, sparse = FALSE)
contr.helmert(n, contrasts = TRUE, sparse = FALSE)contr.poly(n, scores = 1:n, contrasts = TRUE, sparse = FALSE)contr.sum(n, contrasts = TRUE, sparse = FALSE)contr.treatment(n, base = 1, contrasts = TRUE, sparse = FALSE)contr.SAS(n, contrasts = TRUE, sparse = FALSE)
contr.helmert(n, contrasts = TRUE, sparse = FALSE)contr.poly(n, scores = 1:n, contrasts = TRUE, sparse = FALSE)contr.sum(n, contrasts = TRUE, sparse = FALSE)contr.treatment(n, base = 1, contrasts = TRUE, sparse = FALSE)contr.SAS(n, contrasts = TRUE, sparse = FALSE)
contrasts(x, contrasts = TRUE, sparse = FALSE)contrasts(x, how.many) <- value
contrasts(x, contrasts = TRUE, sparse = FALSE)contrasts(x, how.many) <- value
convolve(x, y, conj = TRUE, type = c("circular", "open", "filter"))
influence.measures(model, infl = influence(model))rstandard(model, ...)## S3 method for class 'lm'rstandard(model, infl = lm.influence(model, do.coef = FALSE),          sd = sqrt(deviance(model)/df.residual(model)),          type = c("sd.1", "predictive"), ...)## S3 method for class 'glm'rstandard(model, infl = influence(model, do.coef = FALSE),          type = c("deviance", "pearson"), ...)rstudent(model, ...)## S3 method for class 'lm'rstudent(model, infl = lm.influence(model, do.coef = FALSE),         res = infl$wt.res, ...)## S3 method for class 'glm'rstudent(model, infl = influence(model, do.coef = FALSE), ...)dffits(model, infl = , res = )dfbeta(model, ...)## S3 method for class 'lm'dfbeta(model, infl = lm.influence(model, do.coef = TRUE), ...)dfbetas(model, ...)## S3 method for class 'lm'dfbetas(model, infl = lm.influence(model, do.coef = TRUE), ...)covratio(model, infl = lm.influence(model, do.coef = FALSE),         res = weighted.residuals(model))cooks.distance(model, ...)## S3 method for class 'lm'cooks.distance(model, infl = lm.influence(model, do.coef = FALSE),               res = weighted.residuals(model),               sd = sqrt(deviance(model)/df.residual(model)),               hat = infl$hat, ...)## S3 method for class 'glm'cooks.distance(model, infl = influence(model, do.coef = FALSE),               res = infl$pear.res,               dispersion = summary(model)$dispersion,               hat = infl$hat, ...)hatvalues(model, ...)## S3 method for class 'lm'hatvalues(model, infl = lm.influence(model, do.coef = FALSE), ...)hat(x, intercept = TRUE)
cophenetic(x)## Default S3 method:cophenetic(x)## S3 method for class 'dendrogram'cophenetic(x)
var(x, y = NULL, na.rm = FALSE, use)cov(x, y = NULL, use = "everything",    method = c("pearson", "kendall", "spearman"))cor(x, y = NULL, use = "everything",    method = c("pearson", "kendall", "spearman"))cov2cor(V)
cor.test(x, ...)## Default S3 method:cor.test(x, y,         alternative = c("two.sided", "less", "greater"),         method = c("pearson", "kendall", "spearman"),         exact = NULL, conf.level = 0.95, continuity = FALSE, ...)## S3 method for class 'formula'cor.test(formula, data, subset, na.action, ...)
var(x, y = NULL, na.rm = FALSE, use)cov(x, y = NULL, use = "everything",    method = c("pearson", "kendall", "spearman"))cor(x, y = NULL, use = "everything",    method = c("pearson", "kendall", "spearman"))cov2cor(V)
cov.wt(x, wt = rep(1/nrow(x), nrow(x)), cor = FALSE, center = TRUE,       method = c("unbiased", "ML"))
var(x, y = NULL, na.rm = FALSE, use)cov(x, y = NULL, use = "everything",    method = c("pearson", "kendall", "spearman"))cor(x, y = NULL, use = "everything",    method = c("pearson", "kendall", "spearman"))cov2cor(V)
influence.measures(model, infl = influence(model))rstandard(model, ...)## S3 method for class 'lm'rstandard(model, infl = lm.influence(model, do.coef = FALSE),          sd = sqrt(deviance(model)/df.residual(model)),          type = c("sd.1", "predictive"), ...)## S3 method for class 'glm'rstandard(model, infl = influence(model, do.coef = FALSE),          type = c("deviance", "pearson"), ...)rstudent(model, ...)## S3 method for class 'lm'rstudent(model, infl = lm.influence(model, do.coef = FALSE),         res = infl$wt.res, ...)## S3 method for class 'glm'rstudent(model, infl = influence(model, do.coef = FALSE), ...)dffits(model, infl = , res = )dfbeta(model, ...)## S3 method for class 'lm'dfbeta(model, infl = lm.influence(model, do.coef = TRUE), ...)dfbetas(model, ...)## S3 method for class 'lm'dfbetas(model, infl = lm.influence(model, do.coef = TRUE), ...)covratio(model, infl = lm.influence(model, do.coef = FALSE),         res = weighted.residuals(model))cooks.distance(model, ...)## S3 method for class 'lm'cooks.distance(model, infl = lm.influence(model, do.coef = FALSE),               res = weighted.residuals(model),               sd = sqrt(deviance(model)/df.residual(model)),               hat = infl$hat, ...)## S3 method for class 'glm'cooks.distance(model, infl = influence(model, do.coef = FALSE),               res = infl$pear.res,               dispersion = summary(model)$dispersion,               hat = infl$hat, ...)hatvalues(model, ...)## S3 method for class 'lm'hatvalues(model, infl = lm.influence(model, do.coef = FALSE), ...)hat(x, intercept = TRUE)
cpgram(ts, taper = 0.1,       main = paste("Series: ", deparse1(substitute(ts))),       ci.col = "blue")
cutree(tree, k = NULL, h = NULL)
time(x, ...)## Default S3 method:time(x, offset = 0, ...)cycle(x, ...)frequency(x, ...)deltat(x, ...)
    D (expr, name) deriv(expr, ...)deriv3(expr, ...) ## Default S3 method:deriv(expr, namevec, function.arg = NULL, tag = ".expr",       hessian = FALSE, ...) ## S3 method for class 'formula'deriv(expr, namevec, function.arg = NULL, tag = ".expr",       hessian = FALSE, ...)## Default S3 method:deriv3(expr, namevec, function.arg = NULL, tag = ".expr",       hessian = TRUE, ...)## S3 method for class 'formula'deriv3(expr, namevec, function.arg = NULL, tag = ".expr",       hessian = TRUE, ...)
dbeta(x, shape1, shape2, ncp = 0, log = FALSE)pbeta(q, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE)qbeta(p, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE)rbeta(n, shape1, shape2, ncp = 0)
dbinom(x, size, prob, log = FALSE)pbinom(q, size, prob, lower.tail = TRUE, log.p = FALSE)qbinom(p, size, prob, lower.tail = TRUE, log.p = FALSE)rbinom(n, size, prob)
dcauchy(x, location = 0, scale = 1, log = FALSE)pcauchy(q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)qcauchy(p, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)rcauchy(n, location = 0, scale = 1)
dchisq(x, df, ncp = 0, log = FALSE)pchisq(q, df, ncp = 0, lower.tail = TRUE, log.p = FALSE)qchisq(p, df, ncp = 0, lower.tail = TRUE, log.p = FALSE)rchisq(n, df, ncp = 0)
decompose(x, type = c("additive", "multiplicative"), filter = NULL)
delete.response(termobj)reformulate(termlabels, response = NULL, intercept = TRUE, env = parent.frame())drop.terms(termobj, dropx = NULL, keep.response = FALSE)
time(x, ...)## Default S3 method:time(x, offset = 0, ...)cycle(x, ...)frequency(x, ...)deltat(x, ...)
dendrapply(X, FUN, ...)
density(x, ...)## Default S3 method:density(x, bw = "nrd0", adjust = 1,        kernel = c("gaussian", "epanechnikov", "rectangular",                   "triangular", "biweight",                   "cosine", "optcosine"),        weights = NULL, window = kernel, width,        give.Rkern = FALSE,        n = 512, from, to, cut = 3, na.rm = FALSE, ...)
density(x, ...)## Default S3 method:density(x, bw = "nrd0", adjust = 1,        kernel = c("gaussian", "epanechnikov", "rectangular",                   "triangular", "biweight",                   "cosine", "optcosine"),        weights = NULL, window = kernel, width,        give.Rkern = FALSE,        n = 512, from, to, cut = 3, na.rm = FALSE, ...)
    D (expr, name) deriv(expr, ...)deriv3(expr, ...) ## Default S3 method:deriv(expr, namevec, function.arg = NULL, tag = ".expr",       hessian = FALSE, ...) ## S3 method for class 'formula'deriv(expr, namevec, function.arg = NULL, tag = ".expr",       hessian = FALSE, ...)## Default S3 method:deriv3(expr, namevec, function.arg = NULL, tag = ".expr",       hessian = TRUE, ...)## S3 method for class 'formula'deriv3(expr, namevec, function.arg = NULL, tag = ".expr",       hessian = TRUE, ...)
    D (expr, name) deriv(expr, ...)deriv3(expr, ...) ## Default S3 method:deriv(expr, namevec, function.arg = NULL, tag = ".expr",       hessian = FALSE, ...) ## S3 method for class 'formula'deriv(expr, namevec, function.arg = NULL, tag = ".expr",       hessian = FALSE, ...)## Default S3 method:deriv3(expr, namevec, function.arg = NULL, tag = ".expr",       hessian = TRUE, ...)## S3 method for class 'formula'deriv3(expr, namevec, function.arg = NULL, tag = ".expr",       hessian = TRUE, ...)
deviance(object, ...)
dexp(x, rate = 1, log = FALSE)pexp(q, rate = 1, lower.tail = TRUE, log.p = FALSE)qexp(p, rate = 1, lower.tail = TRUE, log.p = FALSE)rexp(n, rate = 1)
df(x, df1, df2, ncp, log = FALSE)pf(q, df1, df2, ncp, lower.tail = TRUE, log.p = FALSE)qf(p, df1, df2, ncp, lower.tail = TRUE, log.p = FALSE)rf(n, df1, df2, ncp)
kernel(coef, m = 2, r, name)df.kernel(k)bandwidth.kernel(k)is.tskernel(k)## S3 method for class 'tskernel'plot(x, type = "h", xlab = "k", ylab = "W[k]",     main = attr(x,"name"), ...)
df.residual(object, ...)
formula(x, ...)DF2formula(x, env = parent.frame())as.formula(object, env = parent.frame())## S3 method for class 'formula'print(x, showEnv = !identical(e, .GlobalEnv), ...)
influence.measures(model, infl = influence(model))rstandard(model, ...)## S3 method for class 'lm'rstandard(model, infl = lm.influence(model, do.coef = FALSE),          sd = sqrt(deviance(model)/df.residual(model)),          type = c("sd.1", "predictive"), ...)## S3 method for class 'glm'rstandard(model, infl = influence(model, do.coef = FALSE),          type = c("deviance", "pearson"), ...)rstudent(model, ...)## S3 method for class 'lm'rstudent(model, infl = lm.influence(model, do.coef = FALSE),         res = infl$wt.res, ...)## S3 method for class 'glm'rstudent(model, infl = influence(model, do.coef = FALSE), ...)dffits(model, infl = , res = )dfbeta(model, ...)## S3 method for class 'lm'dfbeta(model, infl = lm.influence(model, do.coef = TRUE), ...)dfbetas(model, ...)## S3 method for class 'lm'dfbetas(model, infl = lm.influence(model, do.coef = TRUE), ...)covratio(model, infl = lm.influence(model, do.coef = FALSE),         res = weighted.residuals(model))cooks.distance(model, ...)## S3 method for class 'lm'cooks.distance(model, infl = lm.influence(model, do.coef = FALSE),               res = weighted.residuals(model),               sd = sqrt(deviance(model)/df.residual(model)),               hat = infl$hat, ...)## S3 method for class 'glm'cooks.distance(model, infl = influence(model, do.coef = FALSE),               res = infl$pear.res,               dispersion = summary(model)$dispersion,               hat = infl$hat, ...)hatvalues(model, ...)## S3 method for class 'lm'hatvalues(model, infl = lm.influence(model, do.coef = FALSE), ...)hat(x, intercept = TRUE)
influence.measures(model, infl = influence(model))rstandard(model, ...)## S3 method for class 'lm'rstandard(model, infl = lm.influence(model, do.coef = FALSE),          sd = sqrt(deviance(model)/df.residual(model)),          type = c("sd.1", "predictive"), ...)## S3 method for class 'glm'rstandard(model, infl = influence(model, do.coef = FALSE),          type = c("deviance", "pearson"), ...)rstudent(model, ...)## S3 method for class 'lm'rstudent(model, infl = lm.influence(model, do.coef = FALSE),         res = infl$wt.res, ...)## S3 method for class 'glm'rstudent(model, infl = influence(model, do.coef = FALSE), ...)dffits(model, infl = , res = )dfbeta(model, ...)## S3 method for class 'lm'dfbeta(model, infl = lm.influence(model, do.coef = TRUE), ...)dfbetas(model, ...)## S3 method for class 'lm'dfbetas(model, infl = lm.influence(model, do.coef = TRUE), ...)covratio(model, infl = lm.influence(model, do.coef = FALSE),         res = weighted.residuals(model))cooks.distance(model, ...)## S3 method for class 'lm'cooks.distance(model, infl = lm.influence(model, do.coef = FALSE),               res = weighted.residuals(model),               sd = sqrt(deviance(model)/df.residual(model)),               hat = infl$hat, ...)## S3 method for class 'glm'cooks.distance(model, infl = influence(model, do.coef = FALSE),               res = infl$pear.res,               dispersion = summary(model)$dispersion,               hat = infl$hat, ...)hatvalues(model, ...)## S3 method for class 'lm'hatvalues(model, infl = lm.influence(model, do.coef = FALSE), ...)hat(x, intercept = TRUE)
influence.measures(model, infl = influence(model))rstandard(model, ...)## S3 method for class 'lm'rstandard(model, infl = lm.influence(model, do.coef = FALSE),          sd = sqrt(deviance(model)/df.residual(model)),          type = c("sd.1", "predictive"), ...)## S3 method for class 'glm'rstandard(model, infl = influence(model, do.coef = FALSE),          type = c("deviance", "pearson"), ...)rstudent(model, ...)## S3 method for class 'lm'rstudent(model, infl = lm.influence(model, do.coef = FALSE),         res = infl$wt.res, ...)## S3 method for class 'glm'rstudent(model, infl = influence(model, do.coef = FALSE), ...)dffits(model, infl = , res = )dfbeta(model, ...)## S3 method for class 'lm'dfbeta(model, infl = lm.influence(model, do.coef = TRUE), ...)dfbetas(model, ...)## S3 method for class 'lm'dfbetas(model, infl = lm.influence(model, do.coef = TRUE), ...)covratio(model, infl = lm.influence(model, do.coef = FALSE),         res = weighted.residuals(model))cooks.distance(model, ...)## S3 method for class 'lm'cooks.distance(model, infl = lm.influence(model, do.coef = FALSE),               res = weighted.residuals(model),               sd = sqrt(deviance(model)/df.residual(model)),               hat = infl$hat, ...)## S3 method for class 'glm'cooks.distance(model, infl = influence(model, do.coef = FALSE),               res = infl$pear.res,               dispersion = summary(model)$dispersion,               hat = infl$hat, ...)hatvalues(model, ...)## S3 method for class 'lm'hatvalues(model, infl = lm.influence(model, do.coef = FALSE), ...)hat(x, intercept = TRUE)
dgamma(x, shape, rate = 1, scale = 1/rate, log = FALSE)pgamma(q, shape, rate = 1, scale = 1/rate, lower.tail = TRUE,       log.p = FALSE)qgamma(p, shape, rate = 1, scale = 1/rate, lower.tail = TRUE,       log.p = FALSE)rgamma(n, shape, rate = 1, scale = 1/rate)
dgeom(x, prob, log = FALSE)pgeom(q, prob, lower.tail = TRUE, log.p = FALSE)qgeom(p, prob, lower.tail = TRUE, log.p = FALSE)rgeom(n, prob)
dhyper(x, m, n, k, log = FALSE)phyper(q, m, n, k, lower.tail = TRUE, log.p = FALSE)qhyper(p, m, n, k, lower.tail = TRUE, log.p = FALSE)rhyper(nn, m, n, k)
diffinv(x, ...)## Default S3 method:diffinv(x, lag = 1, differences = 1, xi, ...)## S3 method for class 'ts'diffinv(x, lag = 1, differences = 1, xi, ...)
dist(x, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)as.dist(m, diag = FALSE, upper = FALSE)## Default S3 method:as.dist(m, diag = FALSE, upper = FALSE)## S3 method for class 'dist'print(x, diag = NULL, upper = NULL,      digits = getOption("digits"), justify = "none",      right = TRUE, ...)## S3 method for class 'dist'as.matrix(x, ...)
dlnorm(x, meanlog = 0, sdlog = 1, log = FALSE)plnorm(q, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE)qlnorm(p, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE)rlnorm(n, meanlog = 0, sdlog = 1)
dlogis(x, location = 0, scale = 1, log = FALSE)plogis(q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)qlogis(p, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)rlogis(n, location = 0, scale = 1)
rmultinom(n, size, prob)dmultinom(x, size = NULL, prob, log = FALSE)
dnbinom(x, size, prob, mu, log = FALSE)pnbinom(q, size, prob, mu, lower.tail = TRUE, log.p = FALSE)qnbinom(p, size, prob, mu, lower.tail = TRUE, log.p = FALSE)rnbinom(n, size, prob, mu)
dnorm(x, mean = 0, sd = 1, log = FALSE)pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)qnorm(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)rnorm(n, mean = 0, sd = 1)
dpois(x, lambda, log = FALSE)ppois(q, lambda, lower.tail = TRUE, log.p = FALSE)qpois(p, lambda, lower.tail = TRUE, log.p = FALSE)rpois(n, lambda)
add.scope(terms1, terms2)drop.scope(terms1, terms2)factor.scope(factor, scope)
delete.response(termobj)reformulate(termlabels, response = NULL, intercept = TRUE, env = parent.frame())drop.terms(termobj, dropx = NULL, keep.response = FALSE)
add1(object, scope, ...)## Default S3 method:add1(object, scope, scale = 0, test = c("none", "Chisq"),     k = 2, trace = FALSE, ...)## S3 method for class 'lm'add1(object, scope, scale = 0, test = c("none", "Chisq", "F"),     x = NULL, k = 2, ...)## S3 method for class 'glm'add1(object, scope, scale = 0,     test = c("none", "Rao", "LRT", "Chisq", "F"),     x = NULL, k = 2, ...)drop1(object, scope, ...)## Default S3 method:drop1(object, scope, scale = 0, test = c("none", "Chisq"),      k = 2, trace = FALSE, ...)## S3 method for class 'lm'drop1(object, scope, scale = 0, all.cols = TRUE,      test = c("none", "Chisq", "F"), k = 2, ...)## S3 method for class 'glm'drop1(object, scope, scale = 0,      test = c("none", "Rao", "LRT", "Chisq", "F"),      k = 2, ...)
dsignrank(x, n, log = FALSE)psignrank(q, n, lower.tail = TRUE, log.p = FALSE)qsignrank(p, n, lower.tail = TRUE, log.p = FALSE)rsignrank(nn, n)
dt(x, df, ncp, log = FALSE)pt(q, df, ncp, lower.tail = TRUE, log.p = FALSE)qt(p, df, ncp, lower.tail = TRUE, log.p = FALSE)rt(n, df, ncp)
dummy.coef(object, ...)## S3 method for class 'lm'dummy.coef(object, use.na = FALSE, ...)## S3 method for class 'aovlist'dummy.coef(object, use.na = FALSE, ...)
dummy.coef(object, ...)## S3 method for class 'lm'dummy.coef(object, use.na = FALSE, ...)## S3 method for class 'aovlist'dummy.coef(object, use.na = FALSE, ...)
dunif(x, min = 0, max = 1, log = FALSE)punif(q, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE)qunif(p, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE)runif(n, min = 0, max = 1)
dweibull(x, shape, scale = 1, log = FALSE)pweibull(q, shape, scale = 1, lower.tail = TRUE, log.p = FALSE)qweibull(p, shape, scale = 1, lower.tail = TRUE, log.p = FALSE)rweibull(n, shape, scale = 1)
dwilcox(x, m, n, log = FALSE)pwilcox(q, m, n, lower.tail = TRUE, log.p = FALSE)qwilcox(p, m, n, lower.tail = TRUE, log.p = FALSE)rwilcox(nn, m, n)
ecdf(x)## S3 method for class 'ecdf'plot(x, ..., ylab="Fn(x)", verticals = FALSE,     col.01line = "gray70", pch = 19)## S3 method for class 'ecdf'print(x, digits= getOption("digits") - 2, ...)## S3 method for class 'ecdf'summary(object, ...)## S3 method for class 'ecdf'quantile(x, ...)
eff.aovlist(aovlist)
effects(object, ...)## S3 method for class 'lm'effects(object, set.sign = FALSE, ...)
embed (x, dimension = 1)
start(x, ...)end(x, ...)
# S3 method for class 'mlm'SSD(object, ...)# S3 methods for class 'SSD' and 'mlm'estVar(object, ...)
expand.model.frame(model, extras,                   envir = environment(formula(model)),                   na.expand = FALSE)
extractAIC(fit, scale, k = 2, ...)
factanal(x, factors, data = NULL, covmat = NULL, n.obs = NA,         subset, na.action, start = NULL,         scores = c("none", "regression", "Bartlett"),         rotation = "varimax", control = NULL, ...)
add.scope(terms1, terms2)drop.scope(terms1, terms2)factor.scope(factor, scope)
family(object, ...)binomial(link = "logit")gaussian(link = "identity")Gamma(link = "inverse")inverse.gaussian(link = "1/mu^2")poisson(link = "log")quasi(link = "identity", variance = "constant")quasibinomial(link = "logit")quasipoisson(link = "log")
fft(z, inverse = FALSE)mvfft(z, inverse = FALSE)
filter(x, filter, method = c("convolution", "recursive"),       sides = 2, circular = FALSE, init)
fisher.test(x, y = NULL, workspace = 200000, hybrid = FALSE,            hybridPars = c(expect = 5, percent = 80, Emin = 1),            control = list(), or = 1, alternative = "two.sided",            conf.int = TRUE, conf.level = 0.95,            simulate.p.value = FALSE, B = 2000)
fitted(object, ...)fitted.values(object, ...)
fitted(object, ...)fitted.values(object, ...)
fivenum(x, na.rm = TRUE)
fligner.test(x, ...)## Default S3 method:fligner.test(x, g, ...)## S3 method for class 'formula'fligner.test(formula, data, subset, na.action, ...)
formula(x, ...)DF2formula(x, env = parent.frame())as.formula(object, env = parent.frame())## S3 method for class 'formula'print(x, showEnv = !identical(e, .GlobalEnv), ...)
time(x, ...)## Default S3 method:time(x, offset = 0, ...)cycle(x, ...)frequency(x, ...)deltat(x, ...)
friedman.test(y, ...)## Default S3 method:friedman.test(y, groups, blocks, ...)## S3 method for class 'formula'friedman.test(formula, data, subset, na.action, ...)
ftable(x, ...)## Default S3 method:ftable(..., exclude = c(NA, NaN), row.vars = NULL,       col.vars = NULL)
family(object, ...)binomial(link = "logit")gaussian(link = "identity")Gamma(link = "inverse")inverse.gaussian(link = "1/mu^2")poisson(link = "log")quasi(link = "identity", variance = "constant")quasibinomial(link = "logit")quasipoisson(link = "log")
family(object, ...)binomial(link = "logit")gaussian(link = "identity")Gamma(link = "inverse")inverse.gaussian(link = "1/mu^2")poisson(link = "log")quasi(link = "identity", variance = "constant")quasibinomial(link = "logit")quasipoisson(link = "log")
model.frame(formula, ...)## Default S3 method:model.frame(formula, data = NULL,            subset = NULL, na.action = na.fail,            drop.unused.levels = FALSE, xlev = NULL, ...)## S3 method for class 'aovlist'model.frame(formula, data = NULL, ...)## S3 method for class 'glm'model.frame(formula, ...)## S3 method for class 'lm'model.frame(formula, ...)get_all_vars(formula, data, ...)
update(object, ...)## Default S3 method:update(object, formula., ..., evaluate = TRUE)getCall(x, ...)
getInitial(object, data, ...)
glm(formula, family = gaussian, data, weights, subset,    na.action, start = NULL, etastart, mustart, offset,    control = list(...), model = TRUE, method = "glm.fit",    x = FALSE, y = TRUE, singular.ok = TRUE, contrasts = NULL, ...)glm.fit(x, y, weights = rep.int(1, nobs),        start = NULL, etastart = NULL, mustart = NULL,        offset = rep.int(0, nobs), family = gaussian(),        control = list(), intercept = TRUE, singular.ok = TRUE)## S3 method for class 'glm'weights(object, type = c("prior", "working"), ...)
glm.control(epsilon = 1e-8, maxit = 25, trace = FALSE)
glm(formula, family = gaussian, data, weights, subset,    na.action, start = NULL, etastart, mustart, offset,    control = list(...), model = TRUE, method = "glm.fit",    x = FALSE, y = TRUE, singular.ok = TRUE, contrasts = NULL, ...)glm.fit(x, y, weights = rep.int(1, nobs),        start = NULL, etastart = NULL, mustart = NULL,        offset = rep.int(0, nobs), family = gaussian(),        control = list(), intercept = TRUE, singular.ok = TRUE)## S3 method for class 'glm'weights(object, type = c("prior", "working"), ...)
tsp(x)tsp(x) <- valuehasTsp(x)
influence.measures(model, infl = influence(model))rstandard(model, ...)## S3 method for class 'lm'rstandard(model, infl = lm.influence(model, do.coef = FALSE),          sd = sqrt(deviance(model)/df.residual(model)),          type = c("sd.1", "predictive"), ...)## S3 method for class 'glm'rstandard(model, infl = influence(model, do.coef = FALSE),          type = c("deviance", "pearson"), ...)rstudent(model, ...)## S3 method for class 'lm'rstudent(model, infl = lm.influence(model, do.coef = FALSE),         res = infl$wt.res, ...)## S3 method for class 'glm'rstudent(model, infl = influence(model, do.coef = FALSE), ...)dffits(model, infl = , res = )dfbeta(model, ...)## S3 method for class 'lm'dfbeta(model, infl = lm.influence(model, do.coef = TRUE), ...)dfbetas(model, ...)## S3 method for class 'lm'dfbetas(model, infl = lm.influence(model, do.coef = TRUE), ...)covratio(model, infl = lm.influence(model, do.coef = FALSE),         res = weighted.residuals(model))cooks.distance(model, ...)## S3 method for class 'lm'cooks.distance(model, infl = lm.influence(model, do.coef = FALSE),               res = weighted.residuals(model),               sd = sqrt(deviance(model)/df.residual(model)),               hat = infl$hat, ...)## S3 method for class 'glm'cooks.distance(model, infl = influence(model, do.coef = FALSE),               res = infl$pear.res,               dispersion = summary(model)$dispersion,               hat = infl$hat, ...)hatvalues(model, ...)## S3 method for class 'lm'hatvalues(model, infl = lm.influence(model, do.coef = FALSE), ...)hat(x, intercept = TRUE)
influence.measures(model, infl = influence(model))rstandard(model, ...)## S3 method for class 'lm'rstandard(model, infl = lm.influence(model, do.coef = FALSE),          sd = sqrt(deviance(model)/df.residual(model)),          type = c("sd.1", "predictive"), ...)## S3 method for class 'glm'rstandard(model, infl = influence(model, do.coef = FALSE),          type = c("deviance", "pearson"), ...)rstudent(model, ...)## S3 method for class 'lm'rstudent(model, infl = lm.influence(model, do.coef = FALSE),         res = infl$wt.res, ...)## S3 method for class 'glm'rstudent(model, infl = influence(model, do.coef = FALSE), ...)dffits(model, infl = , res = )dfbeta(model, ...)## S3 method for class 'lm'dfbeta(model, infl = lm.influence(model, do.coef = TRUE), ...)dfbetas(model, ...)## S3 method for class 'lm'dfbetas(model, infl = lm.influence(model, do.coef = TRUE), ...)covratio(model, infl = lm.influence(model, do.coef = FALSE),         res = weighted.residuals(model))cooks.distance(model, ...)## S3 method for class 'lm'cooks.distance(model, infl = lm.influence(model, do.coef = FALSE),               res = weighted.residuals(model),               sd = sqrt(deviance(model)/df.residual(model)),               hat = infl$hat, ...)## S3 method for class 'glm'cooks.distance(model, infl = influence(model, do.coef = FALSE),               res = infl$pear.res,               dispersion = summary(model)$dispersion,               hat = infl$hat, ...)hatvalues(model, ...)## S3 method for class 'lm'hatvalues(model, infl = lm.influence(model, do.coef = FALSE), ...)hat(x, intercept = TRUE)
hclust(d, method = "complete", members = NULL)## S3 method for class 'hclust'plot(x, labels = NULL, hang = 0.1, check = TRUE,     axes = TRUE, frame.plot = FALSE, ann = TRUE,     main = "Cluster Dendrogram",     sub = NULL, xlab = NULL, ylab = "Height", ...)
heatmap(x, Rowv = NULL, Colv = if(symm)"Rowv" else NULL,        distfun = dist, hclustfun = hclust,        reorderfun = function(d, w) reorder(d, w),        add.expr, symm = FALSE, revC = identical(Colv, "Rowv"),        scale = c("row", "column", "none"), na.rm = TRUE,        margins = c(5, 5), ColSideColors, RowSideColors,        cexRow = 0.2 + 1/log10(nr), cexCol = 0.2 + 1/log10(nc),        labRow = NULL, labCol = NULL, main = NULL,        xlab = NULL, ylab = NULL,        keep.dendro = FALSE, verbose = getOption("verbose"), ...)
HoltWinters(x, alpha = NULL, beta = NULL, gamma = NULL,            seasonal = c("additive", "multiplicative"),            start.periods = 2, l.start = NULL, b.start = NULL,            s.start = NULL,            optim.start = c(alpha = 0.3, beta = 0.1, gamma = 0.1),            optim.control = list())
influence(model, ...)## S3 method for class 'lm'influence(model, do.coef = TRUE, ...)## S3 method for class 'glm'influence(model, do.coef = TRUE, ...)lm.influence(model, do.coef = TRUE)
influence.measures(model, infl = influence(model))rstandard(model, ...)## S3 method for class 'lm'rstandard(model, infl = lm.influence(model, do.coef = FALSE),          sd = sqrt(deviance(model)/df.residual(model)),          type = c("sd.1", "predictive"), ...)## S3 method for class 'glm'rstandard(model, infl = influence(model, do.coef = FALSE),          type = c("deviance", "pearson"), ...)rstudent(model, ...)## S3 method for class 'lm'rstudent(model, infl = lm.influence(model, do.coef = FALSE),         res = infl$wt.res, ...)## S3 method for class 'glm'rstudent(model, infl = influence(model, do.coef = FALSE), ...)dffits(model, infl = , res = )dfbeta(model, ...)## S3 method for class 'lm'dfbeta(model, infl = lm.influence(model, do.coef = TRUE), ...)dfbetas(model, ...)## S3 method for class 'lm'dfbetas(model, infl = lm.influence(model, do.coef = TRUE), ...)covratio(model, infl = lm.influence(model, do.coef = FALSE),         res = weighted.residuals(model))cooks.distance(model, ...)## S3 method for class 'lm'cooks.distance(model, infl = lm.influence(model, do.coef = FALSE),               res = weighted.residuals(model),               sd = sqrt(deviance(model)/df.residual(model)),               hat = infl$hat, ...)## S3 method for class 'glm'cooks.distance(model, infl = influence(model, do.coef = FALSE),               res = infl$pear.res,               dispersion = summary(model)$dispersion,               hat = infl$hat, ...)hatvalues(model, ...)## S3 method for class 'lm'hatvalues(model, infl = lm.influence(model, do.coef = FALSE), ...)hat(x, intercept = TRUE)
integrate(f, lower, upper, ..., subdivisions = 100L,          rel.tol = .Machine$double.eps^0.25, abs.tol = rel.tol,          stop.on.error = TRUE, keep.xy = FALSE, aux = NULL)
interaction.plot(x.factor, trace.factor, response, fun = mean,                 type = c("l", "p", "b", "o", "c"), legend = TRUE,                 trace.label = deparse1(substitute(trace.factor)),                 fixed = FALSE,                 xlab = deparse1(substitute(x.factor)),                 ylab = ylabel,                 ylim = range(cells, na.rm = TRUE),                 lty = nc:1, col = 1, pch = c(1:9, 0, letters),                 xpd = NULL, leg.bg = par("bg"), leg.bty = "n",                 xtick = FALSE, xaxt = par("xaxt"), axes = TRUE,                 ...)
family(object, ...)binomial(link = "logit")gaussian(link = "identity")Gamma(link = "inverse")inverse.gaussian(link = "1/mu^2")poisson(link = "log")quasi(link = "identity", variance = "constant")quasibinomial(link = "logit")quasipoisson(link = "log")
IQR(x, na.rm = FALSE, type = 7)
is.empty.model(x)
as.dendrogram(object, ...)## S3 method for class 'hclust'as.dendrogram(object, hang = -1, check = TRUE, ...)## S3 method for class 'dendrogram'as.hclust(x, ...)## S3 method for class 'dendrogram'plot(x, type = c("rectangle", "triangle"),      center = FALSE,      edge.root = is.leaf(x) || !is.null(attr(x,"edgetext")),      nodePar = NULL, edgePar = list(),      leaflab = c("perpendicular", "textlike", "none"),      dLeaf = NULL, xlab = "", ylab = "", xaxt = "n", yaxt = "s",      horiz = FALSE, frame.plot = FALSE, xlim, ylim, ...)## S3 method for class 'dendrogram'cut(x, h, ...)## S3 method for class 'dendrogram'merge(x, y, ..., height,      adjust = c("auto", "add.max", "none"))## S3 method for class 'dendrogram'nobs(object, ...)## S3 method for class 'dendrogram'print(x, digits, ...)## S3 method for class 'dendrogram'rev(x)## S3 method for class 'dendrogram'str(object, max.level = NA, digits.d = 3,    give.attr = FALSE, wid = getOption("width"),    nest.lev = 0, indent.str = "",    last.str = getOption("str.dendrogram.last"), stem = "--",    ...)is.leaf(object)
ts(data = NA, start = 1, end = numeric(), frequency = 1,   deltat = 1, ts.eps = getOption("ts.eps"), class = , names = )as.ts(x, ...)is.ts(x)
stepfun(x, y, f = as.numeric(right), ties = "ordered",        right = FALSE)is.stepfun(x)knots(Fn, ...)as.stepfun(x, ...)## S3 method for class 'stepfun'print(x, digits = getOption("digits") - 2, ...)## S3 method for class 'stepfun'summary(object, ...)
ts(data = NA, start = 1, end = numeric(), frequency = 1,   deltat = 1, ts.eps = getOption("ts.eps"), class = , names = )as.ts(x, ...)is.ts(x)
kernel(coef, m = 2, r, name)df.kernel(k)bandwidth.kernel(k)is.tskernel(k)## S3 method for class 'tskernel'plot(x, type = "h", xlab = "k", ylab = "W[k]",     main = attr(x,"name"), ...)
isoreg(x, y = NULL)
KalmanLike(y, mod, nit = 0L, update = FALSE)KalmanRun(y, mod, nit = 0L, update = FALSE)KalmanSmooth(y, mod, nit = 0L)KalmanForecast(n.ahead = 10L, mod, update = FALSE)makeARIMA(phi, theta, Delta, kappa = 1e6,          SSinit = c("Gardner1980", "Rossignol2011"),          tol = .Machine$double.eps)
KalmanLike(y, mod, nit = 0L, update = FALSE)KalmanRun(y, mod, nit = 0L, update = FALSE)KalmanSmooth(y, mod, nit = 0L)KalmanForecast(n.ahead = 10L, mod, update = FALSE)makeARIMA(phi, theta, Delta, kappa = 1e6,          SSinit = c("Gardner1980", "Rossignol2011"),          tol = .Machine$double.eps)
KalmanLike(y, mod, nit = 0L, update = FALSE)KalmanRun(y, mod, nit = 0L, update = FALSE)KalmanSmooth(y, mod, nit = 0L)KalmanForecast(n.ahead = 10L, mod, update = FALSE)makeARIMA(phi, theta, Delta, kappa = 1e6,          SSinit = c("Gardner1980", "Rossignol2011"),          tol = .Machine$double.eps)
KalmanLike(y, mod, nit = 0L, update = FALSE)KalmanRun(y, mod, nit = 0L, update = FALSE)KalmanSmooth(y, mod, nit = 0L)KalmanForecast(n.ahead = 10L, mod, update = FALSE)makeARIMA(phi, theta, Delta, kappa = 1e6,          SSinit = c("Gardner1980", "Rossignol2011"),          tol = .Machine$double.eps)
kernapply(x, ...)## Default S3 method:kernapply(x, k, circular = FALSE, ...)## S3 method for class 'ts'kernapply(x, k, circular = FALSE, ...)## S3 method for class 'vector'kernapply(x, k, circular = FALSE, ...)## S3 method for class 'tskernel'kernapply(x, k, ...)
kernel(coef, m = 2, r, name)df.kernel(k)bandwidth.kernel(k)is.tskernel(k)## S3 method for class 'tskernel'plot(x, type = "h", xlab = "k", ylab = "W[k]",     main = attr(x,"name"), ...)
kmeans(x, centers, iter.max = 10, nstart = 1,       algorithm = c("Hartigan-Wong", "Lloyd", "Forgy",                     "MacQueen"), trace=FALSE)## S3 method for class 'kmeans'fitted(object, method = c("centers", "classes"), ...)
stepfun(x, y, f = as.numeric(right), ties = "ordered",        right = FALSE)is.stepfun(x)knots(Fn, ...)as.stepfun(x, ...)## S3 method for class 'stepfun'print(x, digits = getOption("digits") - 2, ...)## S3 method for class 'stepfun'summary(object, ...)
kruskal.test(x, ...)## Default S3 method:kruskal.test(x, g, ...)## S3 method for class 'formula'kruskal.test(formula, data, subset, na.action, ...)
ks.test(x, y, ...,        alternative = c("two.sided", "less", "greater"),        exact = NULL)
ksmooth(x, y, kernel = c("box", "normal"), bandwidth = 0.5,        range.x = range(x),        n.points = max(100L, length(x)), x.points)
lag(x, ...)## Default S3 method:lag(x, k = 1, ...)
lag.plot(x, lags = 1, layout = NULL, set.lags = 1:lags,         main = NULL, asp = 1,         diag = TRUE, diag.col = "gray", type = "p", oma = NULL,         ask = NULL, do.lines = (n <= 150), labels = do.lines,         ...)
line(x, y, iter = 1)
lm(formula, data, subset, weights, na.action,   method = "qr", model = TRUE, x = FALSE, y = FALSE, qr = TRUE,   singular.ok = TRUE, contrasts = NULL, offset, ...)
lm.fit (x, y,    offset = NULL, method = "qr", tol = 1e-7,       singular.ok = TRUE, ...)lm.wfit(x, y, w, offset = NULL, method = "qr", tol = 1e-7,        singular.ok = TRUE, ...).lm.fit(x, y, tol = 1e-7)
influence(model, ...)## S3 method for class 'lm'influence(model, do.coef = TRUE, ...)## S3 method for class 'glm'influence(model, do.coef = TRUE, ...)lm.influence(model, do.coef = TRUE)
lm.fit (x, y,    offset = NULL, method = "qr", tol = 1e-7,       singular.ok = TRUE, ...)lm.wfit(x, y, w, offset = NULL, method = "qr", tol = 1e-7,        singular.ok = TRUE, ...).lm.fit(x, y, tol = 1e-7)
loadings(x, ...)## S3 method for class 'loadings'print(x, digits = 3, cutoff = 0.1, sort = FALSE, ...)## S3 method for class 'factanal'print(x, digits = 3, ...)
loess(formula, data, weights, subset, na.action, model = FALSE,      span = 0.75, enp.target, degree = 2,      parametric = FALSE, drop.square = FALSE, normalize = TRUE,      family = c("gaussian", "symmetric"),      method = c("loess", "model.frame"),      control = loess.control(...), ...)
loess.control(surface = c("interpolate", "direct"),              statistics = c("approximate", "exact", "none"),              trace.hat = c("exact", "approximate"),              cell = 0.2, iterations = 4, iterTrace = FALSE, ...)
scatter.smooth(x, y = NULL, span = 2/3, degree = 1,    family = c("symmetric", "gaussian"),    xlab = NULL, ylab = NULL,    ylim = range(y, pred$y, na.rm = TRUE),    evaluation = 50, ..., lpars = list())loess.smooth(x, y, span = 2/3, degree = 1,    family = c("symmetric", "gaussian"), evaluation = 50, ...)
logLik(object, ...)## S3 method for class 'lm'logLik(object, REML = FALSE, ...)
loglin(table, margin, start = rep(1, length(table)), fit = FALSE,       eps = 0.1, iter = 20, param = FALSE, print = TRUE)
lowess(x, y = NULL, f = 2/3, iter = 3, delta = 0.01 * diff(range(x)))
ls.diag(ls.out)
ls.print(ls.out, digits = 4, print.it = TRUE)
lsfit(x, y, wt = NULL, intercept = TRUE, tolerance = 1e-07,      yname = NULL)
mad(x, center = median(x), constant = 1.4826, na.rm = FALSE,    low = FALSE, high = FALSE)
mahalanobis(x, center, cov, inverted = FALSE, ...)
make.link(link)
KalmanLike(y, mod, nit = 0L, update = FALSE)KalmanRun(y, mod, nit = 0L, update = FALSE)KalmanSmooth(y, mod, nit = 0L)KalmanForecast(n.ahead = 10L, mod, update = FALSE)makeARIMA(phi, theta, Delta, kappa = 1e6,          SSinit = c("Gardner1980", "Rossignol2011"),          tol = .Machine$double.eps)
makepredictcall(var, call)
manova(...)
mantelhaen.test(x, y = NULL, z = NULL,                alternative = c("two.sided", "less", "greater"),                correct = TRUE, exact = FALSE, conf.level = 0.95)
mauchly.test(object, ...)## S3 method for class 'mlm'mauchly.test(object, ...)## S3 method for class 'SSD'mauchly.test(object, Sigma = diag(nrow = p),   T = Thin.row(proj(M) - proj(X)), M = diag(nrow = p), X = ~0,   idata = data.frame(index = seq_len(p)), ...)
mcnemar.test(x, y = NULL, correct = TRUE)
median(x, na.rm = FALSE, ...)
median(x, na.rm = FALSE, ...)
medpolish(x, eps = 0.01, maxiter = 10, trace.iter = TRUE,          na.rm = FALSE)
model.extract(frame, component)model.offset(x)model.response(data, type = "any")model.weights(x)
model.frame(formula, ...)## Default S3 method:model.frame(formula, data = NULL,            subset = NULL, na.action = na.fail,            drop.unused.levels = FALSE, xlev = NULL, ...)## S3 method for class 'aovlist'model.frame(formula, data = NULL, ...)## S3 method for class 'glm'model.frame(formula, ...)## S3 method for class 'lm'model.frame(formula, ...)get_all_vars(formula, data, ...)
model.frame(formula, ...)## Default S3 method:model.frame(formula, data = NULL,            subset = NULL, na.action = na.fail,            drop.unused.levels = FALSE, xlev = NULL, ...)## S3 method for class 'aovlist'model.frame(formula, data = NULL, ...)## S3 method for class 'glm'model.frame(formula, ...)## S3 method for class 'lm'model.frame(formula, ...)get_all_vars(formula, data, ...)
model.matrix(object, ...)## Default S3 method:model.matrix(object, data = environment(object),             contrasts.arg = NULL, xlev = NULL, ...)
model.matrix(object, ...)## Default S3 method:model.matrix(object, data = environment(object),             contrasts.arg = NULL, xlev = NULL, ...)
model.matrix(object, ...)## Default S3 method:model.matrix(object, data = environment(object),             contrasts.arg = NULL, xlev = NULL, ...)
model.extract(frame, component)model.offset(x)model.response(data, type = "any")model.weights(x)
model.extract(frame, component)model.offset(x)model.response(data, type = "any")model.weights(x)
model.tables(x, ...)## S3 method for class 'aov'model.tables(x, type = "effects", se = FALSE, cterms, ...)## S3 method for class 'aovlist'model.tables(x, type = "effects", se = FALSE, ...)
model.extract(frame, component)model.offset(x)model.response(data, type = "any")model.weights(x)
monthplot(x, ...)## S3 method for class 'stl'monthplot(x, labels = NULL, ylab = choice, choice = "seasonal",          ...)## S3 method for class 'StructTS'monthplot(x, labels = NULL, ylab = choice, choice = "sea", ...)## S3 method for class 'ts'monthplot(x, labels = NULL, times = time(x), phase = cycle(x),             ylab = deparse1(substitute(x)), ...)## Default S3 method:monthplot(x, labels = 1L:12L,          ylab = deparse1(substitute(x)),          times = seq_along(x),          phase = (times - 1L)%%length(labels) + 1L, base = mean,          axes = TRUE, type = c("l", "h"), box = TRUE,          add = FALSE,          col = par("col"), lty = par("lty"), lwd = par("lwd"),          col.base = col, lty.base = lty, lwd.base = lwd, ...)
mood.test(x, ...)## Default S3 method:mood.test(x, y,          alternative = c("two.sided", "less", "greater"), ...)## S3 method for class 'formula'mood.test(formula, data, subset, na.action, ...)
fft(z, inverse = FALSE)mvfft(z, inverse = FALSE)
na.action(object, ...)
na.contiguous(object, ...)
na.fail(object, ...)na.omit(object, ...)na.exclude(object, ...)na.pass(object, ...)
na.fail(object, ...)na.omit(object, ...)na.exclude(object, ...)na.pass(object, ...)
na.fail(object, ...)na.omit(object, ...)na.exclude(object, ...)na.pass(object, ...)
na.fail(object, ...)na.omit(object, ...)na.exclude(object, ...)na.pass(object, ...)
naresid(omit, x, ...)napredict(omit, x, ...)
naprint(x, ...)
naresid(omit, x, ...)napredict(omit, x, ...)
nextn(n, factors = c(2,3,5))
nlm(f, p, ..., hessian = FALSE, typsize = rep(1, length(p)),    fscale = 1, print.level = 0, ndigit = 12, gradtol = 1e-6,    stepmax = max(1000 * sqrt(sum((p/typsize)^2)), 1000),    steptol = 1e-6, iterlim = 100, check.analyticals = TRUE)
nlminb(start, objective, gradient = NULL, hessian = NULL, ...,       scale = 1, control = list(), lower = -Inf, upper = Inf)
nls(formula, data, start, control, algorithm,    trace, subset, weights, na.action, model,    lower, upper, ...)
nls.control(maxiter = 50, tol = 1e-05, minFactor = 1/1024,            printEval = FALSE, warnOnly = FALSE, scaleOffset = 0,            nDcentral = FALSE)
NLSstAsymptotic(xy)
NLSstClosestX(xy, yval)
NLSstLfAsymptote(xy)
NLSstRtAsymptote(xy)
nobs(object, ...)## Default S3 method:nobs(object, use.fallback = FALSE, ...)
numericDeriv(expr, theta, rho = parent.frame(), dir = 1,             eps = .Machine$double.eps ^ (1/if(central) 3 else 2), central = FALSE)
offset(object)
oneway.test(formula, data, subset, na.action, var.equal = FALSE)
optim(par, fn, gr = NULL, ...,      method = c("Nelder-Mead", "BFGS", "CG", "L-BFGS-B", "SANN",                 "Brent"),      lower = -Inf, upper = Inf,      control = list(), hessian = FALSE)optimHess(par, fn, gr = NULL, ..., control = list())
optim(par, fn, gr = NULL, ...,      method = c("Nelder-Mead", "BFGS", "CG", "L-BFGS-B", "SANN",                 "Brent"),      lower = -Inf, upper = Inf,      control = list(), hessian = FALSE)optimHess(par, fn, gr = NULL, ..., control = list())
optimize(f, interval, ..., lower = min(interval), upper = max(interval),         maximum = FALSE,         tol = .Machine$double.eps^0.25)optimise(f, interval, ..., lower = min(interval), upper = max(interval),         maximum = FALSE,         tol = .Machine$double.eps^0.25)
optimize(f, interval, ..., lower = min(interval), upper = max(interval),         maximum = FALSE,         tol = .Machine$double.eps^0.25)optimise(f, interval, ..., lower = min(interval), upper = max(interval),         maximum = FALSE,         tol = .Machine$double.eps^0.25)
order.dendrogram(x)## S3 method for class 'dendrogram'labels(object, ...)
p.adjust(p, method = p.adjust.methods, n = length(p))p.adjust.methods# c("holm", "hochberg", "hommel", "bonferroni", "BH", "BY",#   "fdr", "none")
p.adjust(p, method = p.adjust.methods, n = length(p))p.adjust.methods# c("holm", "hochberg", "hommel", "bonferroni", "BH", "BY",#   "fdr", "none")
acf(x, lag.max = NULL,    type = c("correlation", "covariance", "partial"),    plot = TRUE, na.action = na.fail, demean = TRUE, ...)pacf(x, lag.max, plot, na.action, ...)## Default S3 method:pacf(x, lag.max = NULL, plot = TRUE, na.action = na.fail,    ...)ccf(x, y, lag.max = NULL, type = c("correlation", "covariance"),    plot = TRUE, na.action = na.fail, ...)## S3 method for class 'acf'x[i, j]
Pair(x, y)
pairwise.prop.test(x, n, p.adjust.method = p.adjust.methods, ...)
pairwise.t.test(x, g, p.adjust.method = p.adjust.methods,                pool.sd = !paired, paired = FALSE,                alternative = c("two.sided", "less", "greater"),                ...)
pairwise.table(compare.levels, level.names, p.adjust.method)
pairwise.wilcox.test(x, g, p.adjust.method = p.adjust.methods,                      paired = FALSE, ...)
dbeta(x, shape1, shape2, ncp = 0, log = FALSE)pbeta(q, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE)qbeta(p, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE)rbeta(n, shape1, shape2, ncp = 0)
dbinom(x, size, prob, log = FALSE)pbinom(q, size, prob, lower.tail = TRUE, log.p = FALSE)qbinom(p, size, prob, lower.tail = TRUE, log.p = FALSE)rbinom(n, size, prob)
qbirthday(prob = 0.5, classes = 365, coincident = 2)pbirthday(n, classes = 365, coincident = 2)
dcauchy(x, location = 0, scale = 1, log = FALSE)pcauchy(q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)qcauchy(p, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)rcauchy(n, location = 0, scale = 1)
dchisq(x, df, ncp = 0, log = FALSE)pchisq(q, df, ncp = 0, lower.tail = TRUE, log.p = FALSE)qchisq(p, df, ncp = 0, lower.tail = TRUE, log.p = FALSE)rchisq(n, df, ncp = 0)
dexp(x, rate = 1, log = FALSE)pexp(q, rate = 1, lower.tail = TRUE, log.p = FALSE)qexp(p, rate = 1, lower.tail = TRUE, log.p = FALSE)rexp(n, rate = 1)
df(x, df1, df2, ncp, log = FALSE)pf(q, df1, df2, ncp, lower.tail = TRUE, log.p = FALSE)qf(p, df1, df2, ncp, lower.tail = TRUE, log.p = FALSE)rf(n, df1, df2, ncp)
dgamma(x, shape, rate = 1, scale = 1/rate, log = FALSE)pgamma(q, shape, rate = 1, scale = 1/rate, lower.tail = TRUE,       log.p = FALSE)qgamma(p, shape, rate = 1, scale = 1/rate, lower.tail = TRUE,       log.p = FALSE)rgamma(n, shape, rate = 1, scale = 1/rate)
dgeom(x, prob, log = FALSE)pgeom(q, prob, lower.tail = TRUE, log.p = FALSE)qgeom(p, prob, lower.tail = TRUE, log.p = FALSE)rgeom(n, prob)
dhyper(x, m, n, k, log = FALSE)phyper(q, m, n, k, lower.tail = TRUE, log.p = FALSE)qhyper(p, m, n, k, lower.tail = TRUE, log.p = FALSE)rhyper(nn, m, n, k)
## Defunct in R 1.xdnchisq(.)pnchisq(.)qnchisq(.)rnchisq(.)print.anova.glm(.)print.anova.lm(.)reshapeWide(x, i, j, val, jnames = levels(j))reshapeLong(x, jvars,  ilev = row.names(x),            jlev = names(x)[jvars], iname = "reshape.i",            jname = "reshape.j", vname = "reshape.v")arima0.diag(...)plot.mts(x, plot.type = c("multiple", "single"), panel = lines,         log = "", col = par("col"),  bg = NA, pch = par("pch"),         cex = par("cex"), lty = par("lty"), lwd = par("lwd"),         ann = par("ann"),  xlab = "Time", type = "l", main = NULL,         oma = c(6, 0, 5, 0), ...)print.coefmat(x, digits = max(3, getOption("digits") - 2),              signif.stars = getOption("show.signif.stars"),              dig.tst = max(1, min(5, digits - 1)),              cs.ind, tst.ind, zap.ind = integer(0),              P.values = NULL, has.Pvalue,              eps.Pvalue = .Machine$double.eps,              na.print = "", ...)anovalist.lm(object, ..., test = NULL)lm.fit.null(x, y, method = "qr", tol = 1e-07, ...)lm.wfit.null(x, y, w, method = "qr", tol = 1e-07, ...)glm.fit.null(x, y, weights, start = NULL,             etastart = NULL, mustart = NULL, offset,             family = gaussian(), control = glm.control(),             intercept = FALSE)# Defunct in 2.4.0mauchley.test(object, Sigma = diag(nrow = p),   T = Thin.row(proj(M) - proj(X)), M = diag(nrow = p), X = ~0,   idata = data.frame(index = seq(length = p)), ...)# Defunct in 2.10.0clearNames(object)# Defunct in 4.1.0plclust(tree, hang = 0.1, unit = FALSE, level = FALSE, hmin = 0,        square = TRUE, labels = NULL, plot. = TRUE,        axes = TRUE, frame.plot = FALSE, ann = TRUE,        main = "", sub = NULL, xlab = NULL, ylab = "Height")
dlnorm(x, meanlog = 0, sdlog = 1, log = FALSE)plnorm(q, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE)qlnorm(p, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE)rlnorm(n, meanlog = 0, sdlog = 1)
dlogis(x, location = 0, scale = 1, log = FALSE)plogis(q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)qlogis(p, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)rlogis(n, location = 0, scale = 1)
ecdf(x)## S3 method for class 'ecdf'plot(x, ..., ylab="Fn(x)", verticals = FALSE,     col.01line = "gray70", pch = 19)## S3 method for class 'ecdf'print(x, digits= getOption("digits") - 2, ...)## S3 method for class 'ecdf'summary(object, ...)## S3 method for class 'ecdf'quantile(x, ...)
## S3 method for class 'spec'plot(x, add = FALSE, ci = 0.95, log = c("yes", "dB", "no"),     xlab = "frequency", ylab = NULL, type = "l",     ci.col = "blue", ci.lty = 3,     main = NULL, sub = NULL,     plot.type = c("marginal", "coherency", "phase"),     ...)plot.spec.phase(x, ci = 0.95,                xlab = "frequency", ylab = "phase",                ylim = c(-pi, pi), type = "l",                main = NULL, ci.col = "blue", ci.lty = 3, ...)plot.spec.coherency(x, ci = 0.95,                    xlab = "frequency",                    ylab = "squared coherency",                    ylim = c(0, 1), type = "l",                    main = NULL, ci.col = "blue", ci.lty = 3, ...)
## S3 method for class 'spec'plot(x, add = FALSE, ci = 0.95, log = c("yes", "dB", "no"),     xlab = "frequency", ylab = NULL, type = "l",     ci.col = "blue", ci.lty = 3,     main = NULL, sub = NULL,     plot.type = c("marginal", "coherency", "phase"),     ...)plot.spec.phase(x, ci = 0.95,                xlab = "frequency", ylab = "phase",                ylim = c(-pi, pi), type = "l",                main = NULL, ci.col = "blue", ci.lty = 3, ...)plot.spec.coherency(x, ci = 0.95,                    xlab = "frequency",                    ylab = "squared coherency",                    ylim = c(0, 1), type = "l",                    main = NULL, ci.col = "blue", ci.lty = 3, ...)
## S3 method for class 'stepfun'plot(x, xval, xlim, ylim = range(c(y, Fn.kn)),     xlab = "x", ylab = "f(x)", main = NULL,     add = FALSE, verticals = TRUE, do.points = (n < 1000),     pch = par("pch"), col = par("col"),     col.points = col, cex.points = par("cex"),     col.hor = col, col.vert = col,     lty = par("lty"), lwd = par("lwd"), ...)## S3 method for class 'stepfun'lines(x, ...)
## S3 method for class 'ts'plot(x, y = NULL, plot.type = c("multiple", "single"),        xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,        mar.multi = c(0, 5.1, 0, if(yax.flip) 5.1 else 2.1),        oma.multi = c(6, 0, 5, 0), axes = TRUE, ...)## S3 method for class 'ts'lines(x, ...)
dnbinom(x, size, prob, mu, log = FALSE)pnbinom(q, size, prob, mu, lower.tail = TRUE, log.p = FALSE)qnbinom(p, size, prob, mu, lower.tail = TRUE, log.p = FALSE)rnbinom(n, size, prob, mu)
dnorm(x, mean = 0, sd = 1, log = FALSE)pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)qnorm(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)rnorm(n, mean = 0, sd = 1)
family(object, ...)binomial(link = "logit")gaussian(link = "identity")Gamma(link = "inverse")inverse.gaussian(link = "1/mu^2")poisson(link = "log")quasi(link = "identity", variance = "constant")quasibinomial(link = "logit")quasipoisson(link = "log")
poisson.test(x, T = 1, r = 1,    alternative = c("two.sided", "less", "greater"),    conf.level = 0.95)
poly(x, ..., degree = 1, coefs = NULL, raw = FALSE, simple = FALSE)polym  (..., degree = 1, coefs = NULL, raw = FALSE)## S3 method for class 'poly'predict(object, newdata, ...)
poly(x, ..., degree = 1, coefs = NULL, raw = FALSE, simple = FALSE)polym  (..., degree = 1, coefs = NULL, raw = FALSE)## S3 method for class 'poly'predict(object, newdata, ...)
power(lambda = 1)
power.anova.test(groups = NULL, n = NULL,                 between.var = NULL, within.var = NULL,                 sig.level = 0.05, power = NULL)
power.prop.test(n = NULL, p1 = NULL, p2 = NULL, sig.level = 0.05,                power = NULL,                alternative = c("two.sided", "one.sided"),                strict = FALSE, tol = .Machine$double.eps^0.25)
power.t.test(n = NULL, delta = NULL, sd = 1, sig.level = 0.05,             power = NULL,             type = c("two.sample", "one.sample", "paired"),             alternative = c("two.sided", "one.sided"),             strict = FALSE, tol = .Machine$double.eps^0.25)
PP.test(x, lshort = TRUE)
ppoints(n, a = if(n <= 10) 3/8 else 1/2)
dpois(x, lambda, log = FALSE)ppois(q, lambda, lower.tail = TRUE, log.p = FALSE)qpois(p, lambda, lower.tail = TRUE, log.p = FALSE)rpois(n, lambda)
ppr(x, ...)## S3 method for class 'formula'ppr(formula, data, weights, subset, na.action,    contrasts = NULL, ..., model = FALSE)## Default S3 method:ppr(x, y, weights = rep(1, n),    ww = rep(1, q), nterms, max.terms = nterms, optlevel = 2,    sm.method = c("supsmu", "spline", "gcvspline"),    bass = 0, span = 0, df = 5, gcvpen = 1, trace = FALSE, ...)
prcomp(x, ...)## S3 method for class 'formula'prcomp(formula, data = NULL, subset, na.action, ...)## Default S3 method:prcomp(x, retx = TRUE, center = TRUE, scale. = FALSE,       tol = NULL, rank. = NULL, ...)## S3 method for class 'prcomp'predict(object, newdata, ...)
predict (object, ...)
## S3 method for class 'glm'predict(object, newdata = NULL,            type = c("link", "response", "terms"),            se.fit = FALSE, dispersion = NULL, terms = NULL,            na.action = na.pass, ...)
## S3 method for class 'lm'predict(object, newdata, se.fit = FALSE, scale = NULL, df = Inf,        interval = c("none", "confidence", "prediction"),        level = 0.95, type = c("response", "terms"),        terms = NULL, na.action = na.pass,        pred.var = res.var/weights, weights = 1, ...)
preplot(object, ...)
princomp(x, ...)## S3 method for class 'formula'princomp(formula, data = NULL, subset, na.action, ...)## Default S3 method:princomp(x, cor = FALSE, scores = TRUE, covmat = NULL,         subset = rep_len(TRUE, nrow(as.matrix(x))), fix_sign = TRUE, ...)## S3 method for class 'princomp'predict(object, newdata, ...)
printCoefmat(x, digits = max(3, getOption("digits") - 2),             signif.stars = getOption("show.signif.stars"),             signif.legend = signif.stars,             dig.tst = max(1, min(5, digits - 1)),             cs.ind = 1L:k, tst.ind = k + 1L,             zap.ind = integer(), P.values = NULL,             has.Pvalue = nc >= 4L && length(cn <- colnames(x)) &&                          substr(cn[nc], 1L, 3L) %in% c("Pr(", "p-v"),             eps.Pvalue = .Machine$double.eps,             na.print = "NA", quote = FALSE, right = TRUE, ...)
profile(fitted, ...)
proj(object, ...)## S3 method for class 'aov'proj(object, onedf = FALSE, unweighted.scale = FALSE, ...)## S3 method for class 'aovlist'proj(object, onedf = FALSE, unweighted.scale = FALSE, ...)## Default S3 method:proj(object, onedf = TRUE, ...)## S3 method for class 'lm'proj(object, onedf = FALSE, unweighted.scale = FALSE, ...)
varimax(x, normalize = TRUE, eps = 1e-5)promax(x, m = 4)
prop.test(x, n, p = NULL,          alternative = c("two.sided", "less", "greater"),          conf.level = 0.95, correct = TRUE)
prop.trend.test(x, n, score = seq_along(x))
dsignrank(x, n, log = FALSE)psignrank(q, n, lower.tail = TRUE, log.p = FALSE)qsignrank(p, n, lower.tail = TRUE, log.p = FALSE)rsignrank(nn, n)
dt(x, df, ncp, log = FALSE)pt(q, df, ncp, lower.tail = TRUE, log.p = FALSE)qt(p, df, ncp, lower.tail = TRUE, log.p = FALSE)rt(n, df, ncp)
ptukey(q, nmeans, df, nranges = 1, lower.tail = TRUE, log.p = FALSE)qtukey(p, nmeans, df, nranges = 1, lower.tail = TRUE, log.p = FALSE)
dunif(x, min = 0, max = 1, log = FALSE)punif(q, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE)qunif(p, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE)runif(n, min = 0, max = 1)
dweibull(x, shape, scale = 1, log = FALSE)pweibull(q, shape, scale = 1, lower.tail = TRUE, log.p = FALSE)qweibull(p, shape, scale = 1, lower.tail = TRUE, log.p = FALSE)rweibull(n, shape, scale = 1)
dwilcox(x, m, n, log = FALSE)pwilcox(q, m, n, lower.tail = TRUE, log.p = FALSE)qwilcox(p, m, n, lower.tail = TRUE, log.p = FALSE)rwilcox(nn, m, n)
dbeta(x, shape1, shape2, ncp = 0, log = FALSE)pbeta(q, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE)qbeta(p, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE)rbeta(n, shape1, shape2, ncp = 0)
dbinom(x, size, prob, log = FALSE)pbinom(q, size, prob, lower.tail = TRUE, log.p = FALSE)qbinom(p, size, prob, lower.tail = TRUE, log.p = FALSE)rbinom(n, size, prob)
qbirthday(prob = 0.5, classes = 365, coincident = 2)pbirthday(n, classes = 365, coincident = 2)
dcauchy(x, location = 0, scale = 1, log = FALSE)pcauchy(q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)qcauchy(p, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)rcauchy(n, location = 0, scale = 1)
dchisq(x, df, ncp = 0, log = FALSE)pchisq(q, df, ncp = 0, lower.tail = TRUE, log.p = FALSE)qchisq(p, df, ncp = 0, lower.tail = TRUE, log.p = FALSE)rchisq(n, df, ncp = 0)
dexp(x, rate = 1, log = FALSE)pexp(q, rate = 1, lower.tail = TRUE, log.p = FALSE)qexp(p, rate = 1, lower.tail = TRUE, log.p = FALSE)rexp(n, rate = 1)
df(x, df1, df2, ncp, log = FALSE)pf(q, df1, df2, ncp, lower.tail = TRUE, log.p = FALSE)qf(p, df1, df2, ncp, lower.tail = TRUE, log.p = FALSE)rf(n, df1, df2, ncp)
dgamma(x, shape, rate = 1, scale = 1/rate, log = FALSE)pgamma(q, shape, rate = 1, scale = 1/rate, lower.tail = TRUE,       log.p = FALSE)qgamma(p, shape, rate = 1, scale = 1/rate, lower.tail = TRUE,       log.p = FALSE)rgamma(n, shape, rate = 1, scale = 1/rate)
dgeom(x, prob, log = FALSE)pgeom(q, prob, lower.tail = TRUE, log.p = FALSE)qgeom(p, prob, lower.tail = TRUE, log.p = FALSE)rgeom(n, prob)
dhyper(x, m, n, k, log = FALSE)phyper(q, m, n, k, lower.tail = TRUE, log.p = FALSE)qhyper(p, m, n, k, lower.tail = TRUE, log.p = FALSE)rhyper(nn, m, n, k)
dlnorm(x, meanlog = 0, sdlog = 1, log = FALSE)plnorm(q, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE)qlnorm(p, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE)rlnorm(n, meanlog = 0, sdlog = 1)
dlogis(x, location = 0, scale = 1, log = FALSE)plogis(q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)qlogis(p, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)rlogis(n, location = 0, scale = 1)
dnbinom(x, size, prob, mu, log = FALSE)pnbinom(q, size, prob, mu, lower.tail = TRUE, log.p = FALSE)qnbinom(p, size, prob, mu, lower.tail = TRUE, log.p = FALSE)rnbinom(n, size, prob, mu)
dnorm(x, mean = 0, sd = 1, log = FALSE)pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)qnorm(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)rnorm(n, mean = 0, sd = 1)
dpois(x, lambda, log = FALSE)ppois(q, lambda, lower.tail = TRUE, log.p = FALSE)qpois(p, lambda, lower.tail = TRUE, log.p = FALSE)rpois(n, lambda)
qqnorm(y, ...)## Default S3 method:qqnorm(y, ylim, main = "Normal Q-Q Plot",       xlab = "Theoretical Quantiles", ylab = "Sample Quantiles",       plot.it = TRUE, datax = FALSE, ...)qqline(y, datax = FALSE, distribution = qnorm,       probs = c(0.25, 0.75), qtype = 7, ...)qqplot(x, y, plot.it = TRUE,       xlab = deparse1(substitute(x)),       ylab = deparse1(substitute(y)), ...)
qqnorm(y, ...)## Default S3 method:qqnorm(y, ylim, main = "Normal Q-Q Plot",       xlab = "Theoretical Quantiles", ylab = "Sample Quantiles",       plot.it = TRUE, datax = FALSE, ...)qqline(y, datax = FALSE, distribution = qnorm,       probs = c(0.25, 0.75), qtype = 7, ...)qqplot(x, y, plot.it = TRUE,       xlab = deparse1(substitute(x)),       ylab = deparse1(substitute(y)), ...)
qqnorm(y, ...)## Default S3 method:qqnorm(y, ylim, main = "Normal Q-Q Plot",       xlab = "Theoretical Quantiles", ylab = "Sample Quantiles",       plot.it = TRUE, datax = FALSE, ...)qqline(y, datax = FALSE, distribution = qnorm,       probs = c(0.25, 0.75), qtype = 7, ...)qqplot(x, y, plot.it = TRUE,       xlab = deparse1(substitute(x)),       ylab = deparse1(substitute(y)), ...)
dsignrank(x, n, log = FALSE)psignrank(q, n, lower.tail = TRUE, log.p = FALSE)qsignrank(p, n, lower.tail = TRUE, log.p = FALSE)rsignrank(nn, n)
dt(x, df, ncp, log = FALSE)pt(q, df, ncp, lower.tail = TRUE, log.p = FALSE)qt(p, df, ncp, lower.tail = TRUE, log.p = FALSE)rt(n, df, ncp)
ptukey(q, nmeans, df, nranges = 1, lower.tail = TRUE, log.p = FALSE)qtukey(p, nmeans, df, nranges = 1, lower.tail = TRUE, log.p = FALSE)
quade.test(y, ...)## Default S3 method:quade.test(y, groups, blocks, ...)## S3 method for class 'formula'quade.test(formula, data, subset, na.action, ...)
quantile(x, ...)## Default S3 method:quantile(x, probs = seq(0, 1, 0.25), na.rm = FALSE,         names = TRUE, type = 7, digits = 7, ...)
family(object, ...)binomial(link = "logit")gaussian(link = "identity")Gamma(link = "inverse")inverse.gaussian(link = "1/mu^2")poisson(link = "log")quasi(link = "identity", variance = "constant")quasibinomial(link = "logit")quasipoisson(link = "log")
family(object, ...)binomial(link = "logit")gaussian(link = "identity")Gamma(link = "inverse")inverse.gaussian(link = "1/mu^2")poisson(link = "log")quasi(link = "identity", variance = "constant")quasibinomial(link = "logit")quasipoisson(link = "log")
family(object, ...)binomial(link = "logit")gaussian(link = "identity")Gamma(link = "inverse")inverse.gaussian(link = "1/mu^2")poisson(link = "log")quasi(link = "identity", variance = "constant")quasibinomial(link = "logit")quasipoisson(link = "log")
dunif(x, min = 0, max = 1, log = FALSE)punif(q, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE)qunif(p, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE)runif(n, min = 0, max = 1)
dweibull(x, shape, scale = 1, log = FALSE)pweibull(q, shape, scale = 1, lower.tail = TRUE, log.p = FALSE)qweibull(p, shape, scale = 1, lower.tail = TRUE, log.p = FALSE)rweibull(n, shape, scale = 1)
dwilcox(x, m, n, log = FALSE)pwilcox(q, m, n, lower.tail = TRUE, log.p = FALSE)qwilcox(p, m, n, lower.tail = TRUE, log.p = FALSE)rwilcox(nn, m, n)
r2dtable(n, r, c)
dbeta(x, shape1, shape2, ncp = 0, log = FALSE)pbeta(q, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE)qbeta(p, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE)rbeta(n, shape1, shape2, ncp = 0)
dbinom(x, size, prob, log = FALSE)pbinom(q, size, prob, lower.tail = TRUE, log.p = FALSE)qbinom(p, size, prob, lower.tail = TRUE, log.p = FALSE)rbinom(n, size, prob)
dcauchy(x, location = 0, scale = 1, log = FALSE)pcauchy(q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)qcauchy(p, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)rcauchy(n, location = 0, scale = 1)
dchisq(x, df, ncp = 0, log = FALSE)pchisq(q, df, ncp = 0, lower.tail = TRUE, log.p = FALSE)qchisq(p, df, ncp = 0, lower.tail = TRUE, log.p = FALSE)rchisq(n, df, ncp = 0)
read.ftable(file, sep = "", quote = "\"",            row.var.names, col.vars, skip = 0)write.ftable(x, file = "", quote = TRUE, append = FALSE,             digits = getOption("digits"), ...)## S3 method for class 'ftable'format(x, quote = TRUE, digits = getOption("digits"),       method = c("non.compact", "row.compact", "col.compact", "compact"),       lsep = " | ",       justify = c("left", "right"),       ...)## S3 method for class 'ftable'print(x, digits = getOption("digits"), ...)
rect.hclust(tree, k = NULL, which = NULL, x = NULL, h = NULL,            border = 2, cluster = NULL)
delete.response(termobj)reformulate(termlabels, response = NULL, intercept = TRUE, env = parent.frame())drop.terms(termobj, dropx = NULL, keep.response = FALSE)
relevel(x, ref, ...)
reorder(x, ...)## Default S3 method:reorder(x, X, FUN = mean, ...,        order = is.ordered(x))
replications(formula, data = NULL, na.action)
reshape(data, varying = NULL, v.names = NULL, timevar = "time",        idvar = "id", ids = 1:NROW(data),        times = seq_along(varying[[1]]),        drop = NULL, direction, new.row.names = NULL,        sep = ".",        split = if (sep == "") {            list(regexp = "[A-Za-z][0-9]", include = TRUE)        } else {            list(regexp = sep, include = FALSE, fixed = TRUE)}        )### Typical usage for converting from long to wide format:# reshape(data, direction = "wide",#         idvar = "___", timevar = "___", # mandatory#         v.names = c(___),    # time-varying variables#         varying = list(___)) # auto-generated if missing### Typical usage for converting from wide to long format:### If names of wide-format variables are in a 'nice' format# reshape(data, direction = "long",#         varying = c(___), # vector #         sep)              # to help guess 'v.names' and 'times'### To specify long-format variable names explicitly# reshape(data, direction = "long",#         varying = ___,  # list / matrix / vector (use with care)#         v.names = ___,  # vector of variable names in long format#         timevar, times, # name / values of constructed time variable#         idvar, ids)     # name / values of constructed id variable
residuals(object, ...)resid(object, ...)
residuals(object, ...)resid(object, ...)
## S3 method for class 'glm'family(object, ...)## S3 method for class 'glm'residuals(object, type = c("deviance", "pearson", "working",                           "response", "partial"), ...)
## S3 method for class 'lm'family(object, ...)## S3 method for class 'lm'formula(x, ...)## S3 method for class 'lm'residuals(object,          type = c("working", "response", "deviance", "pearson",                   "partial"),          ...)## S3 method for class 'lm'labels(object, ...)
dexp(x, rate = 1, log = FALSE)pexp(q, rate = 1, lower.tail = TRUE, log.p = FALSE)qexp(p, rate = 1, lower.tail = TRUE, log.p = FALSE)rexp(n, rate = 1)
df(x, df1, df2, ncp, log = FALSE)pf(q, df1, df2, ncp, lower.tail = TRUE, log.p = FALSE)qf(p, df1, df2, ncp, lower.tail = TRUE, log.p = FALSE)rf(n, df1, df2, ncp)
dgamma(x, shape, rate = 1, scale = 1/rate, log = FALSE)pgamma(q, shape, rate = 1, scale = 1/rate, lower.tail = TRUE,       log.p = FALSE)qgamma(p, shape, rate = 1, scale = 1/rate, lower.tail = TRUE,       log.p = FALSE)rgamma(n, shape, rate = 1, scale = 1/rate)
dgeom(x, prob, log = FALSE)pgeom(q, prob, lower.tail = TRUE, log.p = FALSE)qgeom(p, prob, lower.tail = TRUE, log.p = FALSE)rgeom(n, prob)
dhyper(x, m, n, k, log = FALSE)phyper(q, m, n, k, lower.tail = TRUE, log.p = FALSE)qhyper(p, m, n, k, lower.tail = TRUE, log.p = FALSE)rhyper(nn, m, n, k)
dlnorm(x, meanlog = 0, sdlog = 1, log = FALSE)plnorm(q, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE)qlnorm(p, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE)rlnorm(n, meanlog = 0, sdlog = 1)
dlogis(x, location = 0, scale = 1, log = FALSE)plogis(q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)qlogis(p, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE)rlogis(n, location = 0, scale = 1)
rmultinom(n, size, prob)dmultinom(x, size = NULL, prob, log = FALSE)
dnbinom(x, size, prob, mu, log = FALSE)pnbinom(q, size, prob, mu, lower.tail = TRUE, log.p = FALSE)qnbinom(p, size, prob, mu, lower.tail = TRUE, log.p = FALSE)rnbinom(n, size, prob, mu)
dnorm(x, mean = 0, sd = 1, log = FALSE)pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)qnorm(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)rnorm(n, mean = 0, sd = 1)
dpois(x, lambda, log = FALSE)ppois(q, lambda, lower.tail = TRUE, log.p = FALSE)qpois(p, lambda, lower.tail = TRUE, log.p = FALSE)rpois(n, lambda)
dsignrank(x, n, log = FALSE)psignrank(q, n, lower.tail = TRUE, log.p = FALSE)qsignrank(p, n, lower.tail = TRUE, log.p = FALSE)rsignrank(nn, n)
influence.measures(model, infl = influence(model))rstandard(model, ...)## S3 method for class 'lm'rstandard(model, infl = lm.influence(model, do.coef = FALSE),          sd = sqrt(deviance(model)/df.residual(model)),          type = c("sd.1", "predictive"), ...)## S3 method for class 'glm'rstandard(model, infl = influence(model, do.coef = FALSE),          type = c("deviance", "pearson"), ...)rstudent(model, ...)## S3 method for class 'lm'rstudent(model, infl = lm.influence(model, do.coef = FALSE),         res = infl$wt.res, ...)## S3 method for class 'glm'rstudent(model, infl = influence(model, do.coef = FALSE), ...)dffits(model, infl = , res = )dfbeta(model, ...)## S3 method for class 'lm'dfbeta(model, infl = lm.influence(model, do.coef = TRUE), ...)dfbetas(model, ...)## S3 method for class 'lm'dfbetas(model, infl = lm.influence(model, do.coef = TRUE), ...)covratio(model, infl = lm.influence(model, do.coef = FALSE),         res = weighted.residuals(model))cooks.distance(model, ...)## S3 method for class 'lm'cooks.distance(model, infl = lm.influence(model, do.coef = FALSE),               res = weighted.residuals(model),               sd = sqrt(deviance(model)/df.residual(model)),               hat = infl$hat, ...)## S3 method for class 'glm'cooks.distance(model, infl = influence(model, do.coef = FALSE),               res = infl$pear.res,               dispersion = summary(model)$dispersion,               hat = infl$hat, ...)hatvalues(model, ...)## S3 method for class 'lm'hatvalues(model, infl = lm.influence(model, do.coef = FALSE), ...)hat(x, intercept = TRUE)
influence.measures(model, infl = influence(model))rstandard(model, ...)## S3 method for class 'lm'rstandard(model, infl = lm.influence(model, do.coef = FALSE),          sd = sqrt(deviance(model)/df.residual(model)),          type = c("sd.1", "predictive"), ...)## S3 method for class 'glm'rstandard(model, infl = influence(model, do.coef = FALSE),          type = c("deviance", "pearson"), ...)rstudent(model, ...)## S3 method for class 'lm'rstudent(model, infl = lm.influence(model, do.coef = FALSE),         res = infl$wt.res, ...)## S3 method for class 'glm'rstudent(model, infl = influence(model, do.coef = FALSE), ...)dffits(model, infl = , res = )dfbeta(model, ...)## S3 method for class 'lm'dfbeta(model, infl = lm.influence(model, do.coef = TRUE), ...)dfbetas(model, ...)## S3 method for class 'lm'dfbetas(model, infl = lm.influence(model, do.coef = TRUE), ...)covratio(model, infl = lm.influence(model, do.coef = FALSE),         res = weighted.residuals(model))cooks.distance(model, ...)## S3 method for class 'lm'cooks.distance(model, infl = lm.influence(model, do.coef = FALSE),               res = weighted.residuals(model),               sd = sqrt(deviance(model)/df.residual(model)),               hat = infl$hat, ...)## S3 method for class 'glm'cooks.distance(model, infl = influence(model, do.coef = FALSE),               res = infl$pear.res,               dispersion = summary(model)$dispersion,               hat = infl$hat, ...)hatvalues(model, ...)## S3 method for class 'lm'hatvalues(model, infl = lm.influence(model, do.coef = FALSE), ...)hat(x, intercept = TRUE)
dt(x, df, ncp, log = FALSE)pt(q, df, ncp, lower.tail = TRUE, log.p = FALSE)qt(p, df, ncp, lower.tail = TRUE, log.p = FALSE)rt(n, df, ncp)
dunif(x, min = 0, max = 1, log = FALSE)punif(q, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE)qunif(p, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE)runif(n, min = 0, max = 1)
runmed(x, k, endrule = c("median", "keep", "constant"),       algorithm = NULL,       na.action = c("+Big_alternate", "-Big_alternate", "na.omit", "fail"),       print.level = 0)
dweibull(x, shape, scale = 1, log = FALSE)pweibull(q, shape, scale = 1, lower.tail = TRUE, log.p = FALSE)qweibull(p, shape, scale = 1, lower.tail = TRUE, log.p = FALSE)rweibull(n, shape, scale = 1)
dwilcox(x, m, n, log = FALSE)pwilcox(q, m, n, lower.tail = TRUE, log.p = FALSE)qwilcox(p, m, n, lower.tail = TRUE, log.p = FALSE)rwilcox(nn, m, n)
rWishart(n, df, Sigma)
scatter.smooth(x, y = NULL, span = 2/3, degree = 1,    family = c("symmetric", "gaussian"),    xlab = NULL, ylab = NULL,    ylim = range(y, pred$y, na.rm = TRUE),    evaluation = 50, ..., lpars = list())loess.smooth(x, y, span = 2/3, degree = 1,    family = c("symmetric", "gaussian"), evaluation = 50, ...)
## Default S3 method:screeplot(x, npcs = min(10, length(x$sdev)),          type = c("barplot", "lines"),          main = deparse1(substitute(x)), ...)
sd(x, na.rm = FALSE)
se.contrast(object, ...)## S3 method for class 'aov'se.contrast(object, contrast.obj,           coef = contr.helmert(ncol(contrast))[, 1],           data = NULL, ...)
selfStart(model, initial, parameters, template)
setNames(object = nm, nm)
shapiro.test(x)
sigma(object, ...)## Default S3 method:sigma(object, use.fallback = TRUE, ...)
simulate(object, nsim = 1, seed = NULL, ...)
smooth(x, kind = c("3RS3R", "3RSS", "3RSR", "3R", "3", "S"),       twiceit = FALSE, endrule = c("Tukey", "copy"), do.ends = FALSE)
smooth.spline(x, y = NULL, w = NULL, df, spar = NULL, lambda = NULL, cv = FALSE,              all.knots = FALSE, nknots = .nknots.smspl,              keep.data = TRUE, df.offset = 0, penalty = 1,              control.spar = list(), tol = 1e-6 * IQR(x), keep.stuff = FALSE)
smoothEnds(y, k = 3)
sortedXyData(x, y, data)
spec.ar(x, n.freq, order = NULL, plot = TRUE, na.action = na.fail,        method = "yule-walker", ...)
spec.pgram(x, spans = NULL, kernel, taper = 0.1,           pad = 0, fast = TRUE, demean = FALSE, detrend = TRUE,           plot = TRUE, na.action = na.fail, ...)
spec.taper(x, p = 0.1)
spectrum(x, ..., method = c("pgram", "ar"))
splinefun(x, y = NULL,          method = c("fmm", "periodic", "natural", "monoH.FC", "hyman"),          ties = mean)spline(x, y = NULL, n = 3*length(x), method = "fmm",       xmin = min(x), xmax = max(x), xout, ties = mean)splinefunH(x, y, m)
splinefun(x, y = NULL,          method = c("fmm", "periodic", "natural", "monoH.FC", "hyman"),          ties = mean)spline(x, y = NULL, n = 3*length(x), method = "fmm",       xmin = min(x), xmax = max(x), xout, ties = mean)splinefunH(x, y, m)
splinefun(x, y = NULL,          method = c("fmm", "periodic", "natural", "monoH.FC", "hyman"),          ties = mean)spline(x, y = NULL, n = 3*length(x), method = "fmm",       xmin = min(x), xmax = max(x), xout, ties = mean)splinefunH(x, y, m)
SSasymp(input, Asym, R0, lrc)
SSasympOff(input, Asym, lrc, c0)
SSasympOrig(input, Asym, lrc)
SSbiexp(input, A1, lrc1, A2, lrc2)
# S3 method for class 'mlm'SSD(object, ...)# S3 methods for class 'SSD' and 'mlm'estVar(object, ...)
SSfol(Dose, input, lKe, lKa, lCl)
SSfpl(input, A, B, xmid, scal)
SSgompertz(x, Asym, b2, b3)
SSlogis(input, Asym, xmid, scal)
SSmicmen(input, Vm, K)
SSweibull(x, Asym, Drop, lrc, pwr)
start(x, ...)end(x, ...)
stat.anova(table, test = c("Rao","LRT", "Chisq", "F", "Cp"),           scale, df.scale, n)
step(object, scope, scale = 0,     direction = c("both", "backward", "forward"),     trace = 1, keep = NULL, steps = 1000, k = 2, ...)
stepfun(x, y, f = as.numeric(right), ties = "ordered",        right = FALSE)is.stepfun(x)knots(Fn, ...)as.stepfun(x, ...)## S3 method for class 'stepfun'print(x, digits = getOption("digits") - 2, ...)## S3 method for class 'stepfun'summary(object, ...)
stl(x, s.window, s.degree = 0,    t.window = NULL, t.degree = 1,    l.window = nextodd(period), l.degree = t.degree,    s.jump = ceiling(s.window/10),    t.jump = ceiling(t.window/10),    l.jump = ceiling(l.window/10),    robust = FALSE,    inner = if(robust)  1 else 2,    outer = if(robust) 15 else 0,    na.action = na.fail)
StructTS(x, type = c("level", "trend", "BSM"), init = NULL,         fixed = NULL, optim.control = NULL)
## S3 method for class 'aov'summary(object, intercept = FALSE, split,        expand.split = TRUE, keep.zero.df = TRUE, ...)## S3 method for class 'aovlist'summary(object, ...)
## S3 method for class 'glm'summary(object, dispersion = NULL, correlation = FALSE,        symbolic.cor = FALSE, ...)## S3 method for class 'summary.glm'print(x, digits = max(3, getOption("digits") - 3),      symbolic.cor = x$symbolic.cor,      signif.stars = getOption("show.signif.stars"), ...)
## S3 method for class 'lm'summary(object, correlation = FALSE, symbolic.cor = FALSE, ...)## S3 method for class 'summary.lm'print(x, digits = max(3, getOption("digits") - 3),      symbolic.cor = x$symbolic.cor,      signif.stars = getOption("show.signif.stars"), ...)
## S3 method for class 'manova'summary(object,        test = c("Pillai", "Wilks", "Hotelling-Lawley", "Roy"),        intercept = FALSE, tol = 1e-7, ...)
stepfun(x, y, f = as.numeric(right), ties = "ordered",        right = FALSE)is.stepfun(x)knots(Fn, ...)as.stepfun(x, ...)## S3 method for class 'stepfun'print(x, digits = getOption("digits") - 2, ...)## S3 method for class 'stepfun'summary(object, ...)
supsmu(x, y, wt =, span = "cv", periodic = FALSE, bass = 0, trace = FALSE)
symnum(x, cutpoints = c(0.3, 0.6, 0.8, 0.9, 0.95),       symbols = if(numeric.x) c(" ", ".", ",", "+", "*", "B")                 else c(".", "|"),       legend = length(symbols) >= 3,       na = "?", eps = 1e-5, numeric.x = is.numeric(x),       corr = missing(cutpoints) && numeric.x,       show.max = if(corr) "1", show.min = NULL,       abbr.colnames = has.colnames,       lower.triangular = corr && is.numeric(x) && is.matrix(x),       diag.lower.tri   = corr && !is.null(show.max))
t.test(x, ...)## Default S3 method:t.test(x, y = NULL,       alternative = c("two.sided", "less", "greater"),       mu = 0, paired = FALSE, var.equal = FALSE,       conf.level = 0.95, ...)## S3 method for class 'formula't.test(formula, data, subset, na.action, ...)
termplot(model, data = NULL, envir = environment(formula(model)),         partial.resid = FALSE, rug = FALSE,         terms = NULL, se = FALSE,         xlabs = NULL, ylabs = NULL, main = NULL,         col.term = 2, lwd.term = 1.5,         col.se = "orange", lty.se = 2, lwd.se = 1,         col.res = "gray", cex = 1, pch = par("pch"),         col.smth = "darkred", lty.smth = 2, span.smth = 2/3,         ask = dev.interactive() && nb.fig < n.tms,         use.factor.levels = TRUE, smooth = NULL, ylim = "common",         plot = TRUE, transform.x = FALSE, ...)
terms(x, ...)
## S3 method for class 'formula'terms(x, specials = NULL, abb = NULL, data = NULL, neg.out = TRUE,      keep.order = FALSE, simplify = FALSE, ...,      allowDotAsName = FALSE)
time(x, ...)## Default S3 method:time(x, offset = 0, ...)cycle(x, ...)frequency(x, ...)deltat(x, ...)
toeplitz(x)
ts(data = NA, start = 1, end = numeric(), frequency = 1,   deltat = 1, ts.eps = getOption("ts.eps"), class = , names = )as.ts(x, ...)is.ts(x)
ts.intersect(..., dframe = FALSE)ts.union(..., dframe = FALSE)
ts.plot(..., gpars = list())
ts.intersect(..., dframe = FALSE)ts.union(..., dframe = FALSE)
tsdiag(object, gof.lag, ...)
tsp(x)tsp(x) <- valuehasTsp(x)
tsp(x)tsp(x) <- valuehasTsp(x)
tsSmooth(object, ...)
TukeyHSD(x, which, ordered = FALSE, conf.level = 0.95, ...)
uniroot(f, interval, ...,        lower = min(interval), upper = max(interval),        f.lower = f(lower, ...), f.upper = f(upper, ...),        extendInt = c("no", "yes", "downX", "upX"), check.conv = FALSE,        tol = .Machine$double.eps^0.25, maxiter = 1000, trace = 0)
update(object, ...)## Default S3 method:update(object, formula., ..., evaluate = TRUE)getCall(x, ...)
update(object, ...)## Default S3 method:update(object, formula., ..., evaluate = TRUE)getCall(x, ...)
## S3 method for class 'formula'update(old, new, ...)
var(x, y = NULL, na.rm = FALSE, use)cov(x, y = NULL, use = "everything",    method = c("pearson", "kendall", "spearman"))cor(x, y = NULL, use = "everything",    method = c("pearson", "kendall", "spearman"))cov2cor(V)
var.test(x, ...)## Default S3 method:var.test(x, y, ratio = 1,         alternative = c("two.sided", "less", "greater"),         conf.level = 0.95, ...)## S3 method for class 'formula'var.test(formula, data, subset, na.action, ...)
case.names(object, ...)## S3 method for class 'lm'case.names(object, full = FALSE, ...)variable.names(object, ...)## S3 method for class 'lm'variable.names(object, full = FALSE, ...)
varimax(x, normalize = TRUE, eps = 1e-5)promax(x, m = 4)
vcov(object, ...)## S3 method for class 'lm'vcov(object, complete = TRUE, ...)## and also for '[summary.]glm' and 'mlm'## S3 method for class 'aov'vcov(object, complete = FALSE, ...).vcov.aliased(aliased, vc, complete = TRUE)
weighted.mean(x, w, ...)## Default S3 method:weighted.mean(x, w, ..., na.rm = FALSE)
weighted.residuals(obj, drop0 = TRUE)
weights(object, ...)
wilcox.test(x, ...)## Default S3 method:wilcox.test(x, y = NULL,            alternative = c("two.sided", "less", "greater"),            mu = 0, paired = FALSE, exact = NULL, correct = TRUE,            conf.int = FALSE, conf.level = 0.95,            tol.root = 1e-4, digits.rank = Inf, ...)## S3 method for class 'formula'wilcox.test(formula, data, subset, na.action, ...)
window(x, ...)## S3 method for class 'ts'window(x, ...)## Default S3 method:window(x, start = NULL, end = NULL,      frequency = NULL, deltat = NULL, extend = FALSE, ts.eps = getOption("ts.eps"), ...)window(x, ...) <- value## S3 replacement method for class 'ts'window(x, start, end, frequency, deltat, ...) <- value
window(x, ...)## S3 method for class 'ts'window(x, ...)## Default S3 method:window(x, start = NULL, end = NULL,      frequency = NULL, deltat = NULL, extend = FALSE, ts.eps = getOption("ts.eps"), ...)window(x, ...) <- value## S3 replacement method for class 'ts'window(x, start, end, frequency, deltat, ...) <- value
read.ftable(file, sep = "", quote = "\"",            row.var.names, col.vars, skip = 0)write.ftable(x, file = "", quote = TRUE, append = FALSE,             digits = getOption("digits"), ...)## S3 method for class 'ftable'format(x, quote = TRUE, digits = getOption("digits"),       method = c("non.compact", "row.compact", "col.compact", "compact"),       lsep = " | ",       justify = c("left", "right"),       ...)## S3 method for class 'ftable'print(x, digits = getOption("digits"), ...)
xtabs(formula = ~., data = parent.frame(), subset, sparse = FALSE,      na.action, addNA = FALSE, exclude = if(!addNA) c(NA, NaN),      drop.unused.levels = FALSE)## S3 method for class 'xtabs'print(x, na.print = "", ...)
