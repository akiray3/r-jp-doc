x
数値ベクトル、複素数ベクトル、またはそのように強制できるオブジェクト、またはメソッドが書かれた他のオブジェクト。
日付オブジェクト
日付オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.Date</code>で変換されます)。
数値ベクトル(日単位) <em>または</em>クラス<code>"difftime"</code>のオブジェクトで、最も近い整数日に丸められます。
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
date-timeクラスの1つから、印刷または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
シーケンスの開始値。
(最大) シーケンスの終了値.
同じ長さの<code>factor</code>。
パッケージ名：シンボルまたはリテラル文字列。
変数名：シンボルまたはリテラル文字列。
パッケージ名：シンボルまたはリテラル文字列
変数名：シンボルまたはリテラル文字列。
<code>raw</code>、<code>logical</code> または 'number-like' vector (すなわち、<code>double</code>型 (<code>numeric</code>クラス)、<code>integer</code> および <code>complex</code>型)、またはメソッドが書かれたオブジェクト。
<code>"hexmode"</code>クラスから継承したメソッドのためのオブジェクト。
<code>NULL</code>または、使用される最小フィールド幅を指定する正の整数。
大文字を使うか小文字を使うかを示す論理値（デフォルト）。
他のメソッドに渡される、または他のメソッドから渡されるさらなる引数。
<code>"octmode"</code>クラスから継承したメソッド用のオブジェクト。
<code>NULL</code>または、使用する最小フィールド幅を指定する正の整数。
他のメソッドに渡される、または他のメソッドから渡されるさらなる引数。
アトミックベクタ、シンボル、呼び出し、またはメソッドが書かれた他のオブジェクト。
要素を取り出す、または要素を置き換えるオブジェクト。
抽出または置換する要素を指定するインデックス。  インデックスは、<code>数値</code>または<code>文字</code>ベクトルか、空（欠損）または<code>NULL</code>です。  数値は、<code>as.integer</code>によって整数に強制されます（したがって、ゼロに向かって切り捨てられます）。文字ベクトルは、オブジェクトの<code>names</code>（行列/配列の場合は、<code>dimnames</code>）にマッチします。

<code>[</code>-インデックスのみ：<code>i</code>, <code>j</code>, <code>...</code>は、選択する要素/スライスを示す論理ベクトルである。  <code>i</code>, <code>j</code>, <code>...</code>は、選択から外す要素/スライスを示す負の整数であることもできます。

<code>[</code> によって配列にインデックスを付ける場合、単一の引数 <code>i</code> は、<code>x</code> の次元数と同じ数の列を持つ行列とすることができます; 結果は、<code>i</code> の各行のインデックスの集合に対応する要素を持つベクトルとなります。

<code>NULL</code>のインデックス値は、<code>integer(0)</code>であるかのように扱われる。
リテラル文字列または名前（バックチク引用符で囲むこともできる）。  抽出の場合、これは通常（'Environments'の項を参照）オブジェクトの<code>names</code>に部分的にマッチします。
行列と配列の場合。  <code>TRUE</code>の場合、結果は可能な限り小さい次元に強制されます（例を参照）。  これは要素の抽出にのみ働き、置換には働きません。  詳細は<code>drop</code>を参照してください。
文字ベクトルによる抽出の際に、<code>[[</code>の部分一致の可能性を制御します(ほとんどのオブジェクトに適用されますが、'Environments'の項を参照してください)。  デフォルトは部分マッチングなしです。  値<code>NA</code>は部分マッチングを許可するが、部分マッチングが発生すると警告を発する。  値<code>FALSE</code>は、警告なしで部分一致を許可します。
通常、配列のような<span style="font-family：color：<code>x</code>と同じようなクラスの<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>オブジェクトです。
オブジェクト
データフレーム。
要素を抽出または置換します。  <code>[</code>と<code>[[</code>の場合、これらは<code>数値</code>または<code>文字</code>であり、<code>[</code>のみの場合、空または<code>論理</code>です。  数値は、<code>as.integer</code>によってifのように整数に強制されます。  <code>[</code> による置換では、論理行列が許される。
リテラル文字列または名前（バックティック引用符で囲むこともできる）。
論理的な文字列。  <code>TRUE</code>の場合、結果は可能な限り低い次元に強制されます。  デフォルトでは、1列しか残っていない場合は削除されますが、1行しか残っていない場合は<b>削除されません</b>。
適切な置換値: 必要であれば何度でも繰り返され、強制されるかもしれません: Coercionセクションを参照してください。  <code>NULL</code>の場合、単一列が選択された場合、その列を削除します。
論理: <code>[</code> を参照。
要約または印刷される <code>Date</code> オブジェクト。
計算の有効桁数。
数値または<code>NULL</code>で、印刷されるエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>, <code>getOption("max.print")</code>が使用されます。
他のメソッドから、または他のメソッドに渡される引数。
date-timeまたはdateオブジェクト。
主に<code>"POSIXlt"</code>オブジェクトのために、変換に使用されるオプションのタイムゾーン指定。
文字列。  変換結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数。
要素を抽出する、または要素を置換するオブジェクト。
抽出または置換する要素を指定するインデックス。  インデックスは<code>数値</code>または<code>文字</code>ベクトル、または空（欠損）または<code>NULL</code>です。  数値は、<code>as.integer</code>によって整数に強制されます（したがって、ゼロに向かって切り捨てられます）。文字ベクトルは、オブジェクトの<code>names</code>（行列/配列の場合は、<code>dimnames</code>）にマッチします。

<code>[</code>-インデックスのみ：<code>i</code>, <code>j</code>, <code>...</code>は、選択する要素/スライスを示す論理ベクトルである。  <code>i</code>, <code>j</code>, <code>...</code>は、選択から外す要素/スライスを示す負の整数であることもできます。

<code>[</code> によって配列にインデックスを付ける場合、単一の引数 <code>i</code> は、<code>x</code> の次元数と同じ数の列を持つ行列とすることができます; 結果は、<code>i</code> の各行のインデックスの集合に対応する要素を持つベクトルとなります。

<code>NULL</code>のインデックス値は、<code>integer(0)</code>であるかのように扱われる。
リテラル文字列または名前（バックチク引用符で囲むこともできる）。  抽出の場合、これは通常（'Environments'の項を参照）オブジェクトの<code>names</code>に部分的にマッチします。
行列と配列の場合。  <code>TRUE</code>の場合、結果は可能な限り小さい次元に強制されます（例を参照）。  これは要素の抽出にのみ働き、置換には働きません。  詳細は<code>drop</code>を参照してください。
文字ベクトルによる抽出の際に、<code>[[</code>の部分一致の可能性を制御します(ほとんどのオブジェクトに適用されますが、'Environments'の項を参照してください)。  デフォルトは部分マッチングなしです。  値<code>NA</code>は部分マッチングを許可するが、部分マッチングが発生すると警告を発する。  値<code>FALSE</code>は、警告なしで部分一致を許可します。
通常、配列のような<span style="font-family：color：<code>x</code>と似たようなクラスの<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>オブジェクトです。
係数
インデックスの指定 - <code>Extract</code> を参照。
論理的。  真の場合、未使用レベルは削除される。
character: レベルの集合。  因子値はcharacterに強制される。
クラス<code>"hexmode"</code>を継承するメソッド用のオブジェクト。
<code>NULL</code>または、使用する最小フィールド幅を指定する正の整数。
大文字と小文字のどちらを使うかを示す論理値（デフォルト）。
他のメソッドに渡される、または他のメソッドから渡されるさらなる引数。
要素を抽出する、または要素を置換するオブジェクト。
抽出または置換する要素を指定するインデックス。  インデックスは、<code>numeric</code> または <code>character</code>ベクトルか、空（欠損）または<code>NULL</code>です。  数値は、<code>as.integer</code>によって整数に強制されます（したがって、ゼロに向かって切り捨てられます）。文字ベクトルは、オブジェクトの<code>names</code>（行列/配列の場合は、<code>dimnames</code>）にマッチします。

<code>[</code>-インデックスのみ：<code>i</code>, <code>j</code>, <code>...</code>は、選択する要素/スライスを示す論理ベクトルである。  <code>i</code>, <code>j</code>, <code>...</code>は、選択から外す要素/スライスを示す負の整数であることもできます。

<code>[</code> によって配列にインデックスを付ける場合、単一の引数 <code>i</code> は、<code>x</code> の次元数と同じ数の列を持つ行列とすることができます; 結果は、<code>i</code> の各行のインデックスの集合に対応する要素を持つベクトルとなります。

<code>NULL</code>のインデックス値は、<code>integer(0)</code>であるかのように扱われる。
リテラル文字列または名前（バックチク引用符で囲むこともできる）。  抽出の場合、これは通常（'Environments'の項を参照）オブジェクトの<code>names</code>に部分的にマッチします。
行列と配列の場合。  <code>TRUE</code>の場合、結果は可能な限り小さい次元に強制されます（例を参照）。  これは要素の抽出にのみ働き、置換には働きません。  詳細は<code>drop</code>を参照してください。
文字ベクトルによる抽出の際に、<code>[[</code>の部分一致を制御します。  デフォルトは部分マッチングなしです。  値<code>NA</code>は、部分マッチングを許可しますが、部分マッチングが発生すると警告を出します。  値<code>FALSE</code>は、警告なしで部分マッチを許可します。
通常、配列のような<span style="font-family：color：<code>x</code>と似たようなクラスの<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>オブジェクトです。
<span style="font-family：(フォント名: Courier New, Courier; color：<span style="font: Courier New; color: #666666;"><b>R</b></span> オブジェクト、通常は<code>文字列</code>のベクトル。
<code>print()</code>に渡されるオプションの<code>logical</code>は、<code>print.default()</code>で使用され、文字列を右寄せにするかどうかを示します。
クラス<code>"noquote"</code>のオブジェクト。
<code>print</code>のような次のメソッドに渡されるさらなるオプション。
汎用<code>c</code>関数との互換性のため。
<code>package_version</code>の場合は、<code>R.version</code>で得られるRversionオブジェクト。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理。
<code>"octmode"</code>クラスを継承するメソッド用のオブジェクト。
<code>NULL</code>または、使用される最小フィールド幅を指定する正の整数。
他のメソッドに渡される、または他のメソッドから渡されるさらなる引数。
date-timeクラスの1つから出力または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
date-timeクラスの1つから、印刷または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
要素を抽出する、または要素を置換するオブジェクト。
抽出または置換する要素を指定するインデックス。  インデックスは、<code>数値</code>または<code>文字</code>ベクトルか、空（欠損）または<code>NULL</code>です。  数値は、<code>as.integer</code>によって整数に強制されます（したがって、ゼロに向かって切り捨てられます）。文字ベクトルは、オブジェクトの<code>names</code>（行列/配列の場合は、<code>dimnames</code>）にマッチします。

<code>[</code>-インデックスのみ：<code>i</code>, <code>j</code>, <code>...</code>は、選択する要素/スライスを示す論理ベクトルである。  <code>i</code>, <code>j</code>, <code>...</code>は、選択から外す要素/スライスを示す負の整数であることもできます。

<code>[</code> によって配列にインデックスを付ける場合、単一の引数 <code>i</code> は、<code>x</code> の次元数と同じ数の列を持つ行列とすることができます; 結果は、<code>i</code> の各行のインデックスの集合に対応する要素を持つベクトルとなります。

<code>NULL</code>のインデックス値は、<code>integer(0)</code>であるかのように扱われる。
リテラル文字列または名前（バックチク引用符で囲むこともできる）。  抽出の場合、これは通常（'Environments'の項を参照）オブジェクトの<code>names</code>に部分的にマッチします。
行列と配列の場合。  <code>TRUE</code>の場合、結果は可能な限り小さい次元に強制されます（例を参照）。  これは要素の抽出にのみ働き、置換には働きません。  詳細は<code>drop</code>を参照してください。
文字ベクトルによる抽出の際に、<code>[[</code>の部分一致の可能性を制御します(ほとんどのオブジェクトに適用されますが、'Environments'の項を参照してください)。  デフォルトは部分マッチングなしです。  値<code>NA</code>は部分マッチングを許可するが、部分マッチングが発生すると警告を発する。  値<code>FALSE</code>は、警告なしで部分一致を許可します。
通常、配列のような<span style="font-family：color：<code>x</code>と同じようなクラスの<span style="font-family: Courier New; color: #666666;"><b>R</b></span>オブジェクトです。
要素(文字列を含む)として解釈可能な1つ以上のオブジェクト、または、そのように解釈可能な要素を持つリスト(またはデータフレーム)。  (<code>as.table</code>では, 特定のメソッドに渡される引数; <code>as.data.frame</code>では, 未使用).
<code>...</code>内の全ての因子に対して削除する水準を指定する。  itが<code>NA</code>を含まず、<code>useNA</code>が指定されていない場合、<code>useNA = "ifany"</code>を意味する。  非要素引数に対する解釈は'Details'を参照のこと。
<code>NA</code> の値をテーブルに含めるかどうか。  省略可能。
結果の次元に与える名前 (<em>dimnames names</em>) を指定します。
デフォルトの<code>dnn</code>がどのように構成されるかを制御します。  詳細'を参照してください。
任意の<span style="font-family：courier new, Courier; color：</span>オブジェクト、または<code>as.data.frame</code>メソッド用のクラス<code>"table"</code>を継承したオブジェクトです。<code>as.data.frame.table(x,*)</code>は、<code>array</code>を "reshaping "するために、テーブルでない<code>x</code>に対して明示的に呼び出されることに注意して下さい。
データフレームの行名を指定する文字ベクトル。
テーブルエントリの列に使用される名前、通常はカウント。
論理: 分類因子は因子(デフォルト)として返すべきか、文字ベクトルとして返すべきか。
<code>provideDimnames</code> に渡されます。
(<code>warnings()</code>の)<code>cat</code>に渡される引数。
<code>warnings()</code>が返す<code>"warnings"</code>オブジェクト。
<code>"warnings"</code>または<code>"summary.warnings"</code>オブジェクト。
もし<code>missing</code>でなければ、<code>x</code>と同じ<code>長さの<code>文字</code>ベクトル。  デフォルトは <code>paste0(seq_len(n), ": ")</code> for<i>n &gt;= 2</i> where <code>n &lt;- length(x)</code>.
文字列<code>cat()</code>は、メッセージが表示される前に出力されます。
要素を取り出したり、要素を置き換えたりするオブジェクト。
抽出または置換する要素を指定するインデックス。  インデックスは、<code>数値</code>または<code>文字</code>ベクトルか、空（欠損）または<code>NULL</code>です。  数値は、<code>as.integer</code>によって整数に強制されます（したがって、ゼロに向かって切り捨てられます）。文字ベクトルは、オブジェクトの<code>names</code>（行列/配列の場合は、<code>dimnames</code>）にマッチします。

<code>[</code>-インデックスのみ：<code>i</code>, <code>j</code>, <code>...</code>は、選択する要素/スライスを示す論理ベクトルである。  <code>i</code>, <code>j</code>, <code>...</code>は、選択から外す要素/スライスを示す負の整数であることもできます。

<code>[</code> によって配列にインデックスを付ける場合、単一の引数 <code>i</code> は、<code>x</code> の次元数と同じ数の列を持つ行列とすることができます; 結果は、<code>i</code> の各行のインデックスの集合に対応する要素を持つベクトルとなります。

<code>NULL</code>のインデックス値は、<code>integer(0)</code>であるかのように扱われる。
リテラル文字列または名前（バックチク引用符で囲むこともできる）。  抽出の場合、これは通常（'Environments'の項を参照）オブジェクトの<code>names</code>に部分的にマッチします。
行列と配列の場合。  <code>TRUE</code>の場合、結果は可能な限り小さい次元に強制されます（例を参照）。  これは要素の抽出にのみ働き、置換には働きません。  詳細は<code>drop</code>を参照してください。
文字ベクトルによる抽出の際に、<code>[[</code>の部分一致の可能性を制御します(ほとんどのオブジェクトに適用されますが、'Environments'の項を参照してください)。  デフォルトは部分マッチングなしです。  値<code>NA</code>は部分マッチングを許可するが、部分マッチングが発生すると警告を発する。  値<code>FALSE</code>は、警告なしで部分一致を許可します。
通常、配列のような<span style="font-family：color：<code>x</code>と同じようなクラスの<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>オブジェクトです。
データフレーム。
要素を抽出または置換します。  <code>[</code>と<code>[[</code>の場合、これらは<code>数値</code>か<code>文字</code>か、<code>[</code>だけの場合、空か<code>論理</code>です。  数値は、<code>as.integer</code>によってifのように整数に強制されます。  <code>[</code> による置換では、論理行列が許される。
リテラル文字列または名前（バックティック引用符で囲むこともできる）。
論理的な文字列。  <code>TRUE</code>の場合、結果は可能な限り低い次元に強制されます。  デフォルトでは、1列しか残っていない場合は削除されますが、1行しか残っていない場合は<b>削除されません</b>。
適切な置換値: 必要であれば何度でも繰り返され、強制されるかもしれません: Coercionセクションを参照してください。  <code>NULL</code>の場合、単一列が選択された場合、その列を削除します。
論理: <code>[</code> を参照。
要約または印刷される <code>Date</code> オブジェクト。
計算の有効桁数。
数値または<code>NULL</code>で、印刷されるエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>, <code>getOption("max.print")</code>が使用されます。
他のメソッドから、または他のメソッドに渡される更なる引数。
係数
インデックスの指定 - <code>Extract</code>を参照。
論理。  trueの場合、未使用レベルは削除される。
character: レベルの集合。  因子値はcharacterに強制される。
<code>package_version</code>の場合は、<code>R.version</code>で得られるRversionオブジェクト。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理。
date-timeクラスの1つから出力または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
date-timeクラスの1つから、印刷または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
要素を抽出する、または要素を置換するオブジェクト。
抽出または置換する要素を指定するインデックス。  インデックスは、<code>数値</code>または<code>文字</code>ベクトル、または空（欠損）または<code>NULL</code>です。  数値は、<code>as.integer</code>によって整数に強制されます（したがって、ゼロに向かって切り捨てられます）。文字ベクトルは、オブジェクトの<code>names</code>（行列/配列の場合は、<code>dimnames</code>）にマッチします。

<code>[</code>-インデックスのみ：<code>i</code>, <code>j</code>, <code>...</code>は、選択する要素/スライスを示す論理ベクトルである。  <code>i</code>, <code>j</code>, <code>...</code>は、選択から外す要素/スライスを示す負の整数であることもできます。

<code>[</code> によって配列にインデックスを付ける場合、単一の引数 <code>i</code> は、<code>x</code> の次元数と同じ数の列を持つ行列とすることができます; 結果は、<code>i</code> の各行のインデックスの集合に対応する要素を持つベクトルとなります。

<code>NULL</code>のインデックス値は、<code>integer(0)</code>であるかのように扱われる。
リテラル文字列または名前（バックチク引用符で囲むこともできる）。  抽出の場合、これは通常（'Environments'の項を参照）オブジェクトの<code>names</code>に部分的にマッチします。
行列と配列の場合。  <code>TRUE</code>の場合、結果は可能な限り小さい次元に強制されます（例を参照）。  これは要素の抽出にのみ働き、置換には働きません。  詳細は<code>drop</code>を参照してください。
文字ベクトルによる抽出の際に、<code>[[</code>の部分一致の可能性を制御します(ほとんどのオブジェクトに適用されますが、'Environments'の項を参照してください)。  デフォルトは部分マッチングなしです。  値<code>NA</code>は部分マッチングを許可するが、部分マッチングが発生すると警告を発する。  値<code>FALSE</code>は、警告なしで部分一致を許可します。
通常、配列のような<span style="font-family：color：<code>x</code>と同じようなクラスの<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>オブジェクトです。
データフレーム。
要素を抽出または置換します。  <code>[</code>と<code>[[</code>の場合、これらは<code>数値</code>か<code>文字</code>か、<code>[</code>だけの場合、空か<code>論理</code>です。  数値は、<code>as.integer</code>によってifのように整数に強制されます。  <code>[</code> による置換では、論理行列が許される。
リテラル文字列または名前（バックティック引用符で囲むこともできる）。
論理的な文字列。  <code>TRUE</code>の場合、結果は可能な限り低い次元に強制されます。  デフォルトでは、1列しか残っていない場合は削除されますが、1行しか残っていない場合は<b>削除されません</b>。
適切な置換値: 必要であれば何度でも繰り返され、強制されるかもしれません: Coercionセクションを参照してください。  <code>NULL</code>の場合、単一列が選択された場合、その列を削除します。
論理: <code>[</code> を参照。
要素
インデックスの指定 - <code>Extract</code> を参照。
を参照してください。  真の場合、未使用レベルは削除される。
character: レベルの集合。  因子値はcharacterに強制される。
<code>package_version</code>の場合は、<code>R.version</code>で得られるRversionオブジェクト。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理。
date-timeクラスの1つから出力または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
要素を抽出する、または要素を置換するオブジェクト。
抽出または置換する要素を指定するインデックス。  インデックスは、<code>数値</code>または<code>文字</code>ベクトルか、空（欠損）または<code>NULL</code>です。  数値は、<code>as.integer</code>によって整数に強制されます（したがって、ゼロに向かって切り捨てられます）。文字ベクトルは、オブジェクトの<code>names</code>（行列/配列の場合は、<code>dimnames</code>）にマッチします。

<code>[</code>-インデックスのみ：<code>i</code>, <code>j</code>, <code>...</code>は、選択する要素/スライスを示す論理ベクトルである。  <code>i</code>, <code>j</code>, <code>...</code>は、選択から外す要素/スライスを示す負の整数であることもできます。

<code>[</code> によって配列にインデックスを付ける場合、単一の引数 <code>i</code> は、<code>x</code> の次元数と同じ数の列を持つ行列とすることができます; 結果は、<code>i</code> の各行のインデックスの集合に対応する要素を持つベクトルとなります。

<code>NULL</code>のインデックス値は、<code>integer(0)</code>であるかのように扱われる。
リテラル文字列または名前（バックチク引用符で囲むこともできる）。  抽出の場合、これは通常（'Environments'の項を参照）オブジェクトの<code>names</code>に部分的にマッチします。
行列と配列の場合。  <code>TRUE</code>の場合、結果は可能な限り小さい次元に強制されます（例を参照）。  これは要素の抽出にのみ働き、置換には働きません。  詳細は<code>drop</code>を参照してください。
文字ベクトルによる抽出の際に、<code>[[</code>の部分一致の可能性を制御します(ほとんどのオブジェクトに適用されますが、'Environments'の項を参照してください)。  デフォルトは部分マッチングなしです。  値<code>NA</code>は部分マッチングを許可するが、部分マッチングが発生すると警告を発する。  値<code>FALSE</code>は、警告なしで部分一致を許可します。
通常、配列のような<span style="font-family：color：<code>x</code>と同じようなクラスの<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>オブジェクトです。
データフレーム。
要素を抽出または置換します。  <code>[</code>と<code>[[</code>の場合、これらは<code>数値</code>か<code>文字</code>か、<code>[</code>だけの場合、空か<code>論理</code>です。  数値は、<code>as.integer</code>によってifのように整数に強制されます。  <code>[</code> による置換では、論理行列が許される。
リテラル文字列または名前（バックティック引用符で囲むこともできる）。
論理的な文字列。  <code>TRUE</code>の場合、結果は可能な限り低い次元に強制されます。  デフォルトでは、1列しか残っていない場合は削除されますが、1行しか残っていない場合は<b>削除されません</b>。
適切な置換値: 必要であれば何度でも繰り返され、強制されるかもしれません: Coercionセクションを参照してください。  <code>NULL</code>の場合、単一列が選択された場合、その列を削除します。
論理: <code>[</code> を参照。
要約または印刷される <code>Date</code> オブジェクト。
計算の有効桁数。
数値または<code>NULL</code>で、印刷されるエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>, <code>getOption("max.print")</code>が使用されます。
他のメソッドから、または他のメソッドに渡される更なる引数。
date-timeまたはdateオブジェクト。
主に<code>"POSIXlt"</code>オブジェクトのために、変換に使用されるオプションのタイムゾーン指定。
文字列。  変換結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数、または他のメソッドから渡される引数。
係数
インデックスの指定 - <code>Extract<//code> を参照。
論理。  true の場合、未使用レベルは削除されます。
character: レベルの集合。  因子値はcharacterに強制される。
<code>package_version</code>の場合は、<code>R.version</code>で得られるRversionオブジェクト。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理。
date-timeクラスの1つから出力または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>で変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
date-timeクラスの1つから、印刷または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>で変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
正式に定義された(S4)クラスのオブジェクト。
スロットの文字列名。  classof <code>オブジェクト</code>の定義におけるスロットの名前でなければなりません。
これは、<code>object</code>のクラスの定義でこのスロットに対して定義されたクラスと互換性のあるクラスからのものでなければならない。
正式に定義された(S4)クラスからのオブジェクト。
スロットの文字列名。  <code>object</code> のクラスの定義におけるスロットの名前でなければなりません。
これは、<code>object</code>のクラスの定義でこのスロットに対して定義されたクラスと互換性のあるクラスでなければならない。
数値ベクトル、複素数ベクトル、またはそのようなオブジェクトに強制できるオブジェクト、またはメソッドが書かれた他のオブジェクト。
date-time または date オブジェクト。
主に<code>"POSIXlt"</code>オブジェクトのために、変換に使用されるオプションのタイムゾーン指定。
文字列。  変換結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数、または他のメソッドから渡される引数。
数値ベクトルや複素数ベクトル、またはそのように強制できるオブジェクト、メソッドが書かれた他のオブジェクト。
date-time または date オブジェクト。
主に<code>"POSIXlt"</code>オブジェクトのために、変換に使われるオプションのタイムゾーン指定。
文字列。  変換結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数、または他のメソッドから渡される引数。
<code>raw</code>、<code>logical</code> または 'number-like' vector (すなわち、<code>double</code>型 (<code>numeric</code>クラス)、<code>integer</code> および <code>complex</code>)、またはメソッドが書かれたオブジェクト。
<code>"hexmode"</code>クラスから継承したメソッドのためのオブジェクト。
<code>NULL</code>または、使用される最小フィールド幅を指定する正の整数。
大文字を使うか小文字を使うかを示す論理値（デフォルト）。
他のメソッドに渡される、または他のメソッドから渡されるさらなる引数。
<code>"octmode"</code>クラスから継承したメソッド用のオブジェクト。
<code>NULL</code>または、使用する最小フィールド幅を指定する正の整数。
他のメソッドに渡される、または他のメソッドから渡される引数。
<code>raw</code>、<code>logical</code> または 'number-like' ベクトル（すなわち、<code>double</code>型（クラス <code>numeric</code>）、<code>integer</code> および <code>complex</code>）、またはメソッドが記述されたオブジェクト。
数値または複素数の行列またはベクトル。
数値ベクトルまたは複素数ベクトル、またはそのようなものに強制できるオブジェクト、またはメソッドが書かれた他のオブジェクト。
数値または複素数ベクトル、またはそのようなものに強制できるオブジェクト、またはメソッドが書かれた他のオブジェクト。
vector または <code>NULL</code>: マッチされる値。
vector または <code>NULL</code>: マッチされる値。
マッチしなかった場合に返される値。  <code>integer</code>に強制されることに注意してください。
マッチできない値のベクトル。  <code>x</code> の中でこのベクトル内の値と一致する値には、<code>nomatch</code>値が割り当てられます。  歴史的な理由から、<code>FALSE</code>は<code>NULL</code>と等価である。
関数 <code>FUN</code> の第1引数と第2引数。
<em>経由</em><code>match.fun<//code>で見つかる外積で使用する関数（特別な場合<code>"*"</code>を除く）。
<code>FUN</code>に渡すオプション引数。
ベクトルか配列。
ベクトルまたは配列。
引用符で囲まれた文字列でもよい。
<code>X</code> と <code>Y</code> の dimnames の積である dimnames を指定する。
<code>FUN</code> に渡すオプション引数。
数値ベクトル、複素数ベクトル、または、そのようなものに強制できるオブジェクト、または、メソッドが書かれた他のオブジェクト。
数値ベクトル、複素数ベクトル、または、そのようなオブジェクトに強制できるオブジェクト、または、メソッドが書かれた他のオブジェクト。
日付オブジェクト
日付オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.Date</code>で変換されます)。
数値ベクトル(日単位) <em>または</em>クラス<code>"difftime"</code>のオブジェクト。
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
date-timeクラスの1つから、印刷または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
アトミック・ベクタ、シンボル、呼び出し、またはメソッドが書かれた他のオブジェクト。
変数名（引用符で囲まれることもある）。
<code>x</code> に代入される値。
変数名(引用符で囲まれることもある)。
<code>x</code>に代入される値。
アトミックベクタ、シンボル、呼び出し、またはメソッドが書かれた他のオブジェクト。
変数名 (引用符で囲まれることもある)。
<code>x</code>に代入される値。
アトミックベクタ、シンボル、コール、またはメソッドが書かれた他のオブジェクト。
アトミックベクター、シンボル、コール、またはメソッドが書かれた他のオブジェクト。
アトミックベクター、シンボル、コール、またはメソッド用の他のオブジェクトが書かれました。
<code>raw</code>、<code>logical</code> または 'number-like' ベクタ (すなわち、<code>double</code>型 (<code>numeric</code>クラス)、<code>integer</code> および <code>complex</code>型)、またはメソッドが書かれたオブジェクト。
<code>"hexmode"</code>クラスから継承したメソッドのためのオブジェクト。
<code>NULL</code>または、使用される最小フィールド幅を指定する正の整数。
大文字を使うか小文字を使うかを示す論理値（デフォルト）。
他のメソッドに渡される、または他のメソッドから渡されるさらなる引数。
<code>"octmode"</code>クラスから継承したメソッド用のオブジェクト。
<code>NULL</code>または、使用する最小フィールド幅を指定する正の整数。
他のメソッドに渡される、または他のメソッドから渡される引数。
<code>raw</code>、<code>logical</code> または 'number-like' vector (すなわち、<code>double</code> (class <code>numeric</code>)、<code>integer</code> および <code>complex</code>の型)、またはメソッドが書かれたオブジェクト。
記号式。
要素を抽出する、または要素を置換するオブジェクト。
抽出または置換する要素を指定するインデックス。  インデックスは<code>数値</code>または<code>文字</code>ベクトル、または空（欠損）または<code>NULL</code>です。  数値は、<code>as.integer</code>によって整数に強制されます（したがって、ゼロに向かって切り捨てられます）。文字ベクトルは、オブジェクトの<code>names</code>（行列/配列の場合は、<code>dimnames</code>）にマッチします。

<code>[</code>-インデックスのみ：<code>i</code>, <code>j</code>, <code>...</code>は、選択する要素/スライスを示す論理ベクトルである。  <code>i</code>, <code>j</code>, <code>...</code>は、選択から外す要素/スライスを示す負の整数であることもできます。

<code>[</code> によって配列にインデックスを付ける場合、単一の引数 <code>i</code> は、<code>x</code> の次元数と同じ数の列を持つ行列とすることができます; 結果は、<code>i</code> の各行のインデックスの集合に対応する要素を持つベクトルとなります。

<code>NULL</code>のインデックス値は、<code>integer(0)</code>であるかのように扱われる。
リテラル文字列または名前（バックチク引用符で囲むこともできる）。  抽出の場合、これは通常（'Environments'の項を参照）オブジェクトの<code>names</code>に部分的にマッチします。
行列と配列の場合。  <code>TRUE</code>の場合、結果は可能な限り小さい次元に強制されます（例を参照）。  これは要素の抽出にのみ働き、置換には働きません。  詳細は<code>drop</code>を参照してください。
文字ベクトルによる抽出の際に、<code>[[</code>の部分一致を制御します。  デフォルトは部分マッチングなしです。  値<code>NA</code>は、部分マッチングを許可しますが、部分マッチングが発生すると警告を出します。  値<code>FALSE</code>は、警告なしで部分マッチを許可します。
通常、配列のような<span style="font-family：color：<code>x</code>と似たようなクラスの<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>オブジェクトです。
<code>package_version</code> の場合は、<code>R.version</code>で得られるRversionオブジェクト。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理。
要素を抽出する、または要素を置換するオブジェクト。
抽出または置換する要素を指定するインデックス。  インデックスは、<code>数値</code>または<code>文字</code>ベクトルか、空（欠損）または<code>NULL</code>です。  数値は、<code>as.integer</code>によって整数に強制されます（したがって、ゼロに向かって切り捨てられます）。文字ベクトルは、オブジェクトの<code>names</code>（行列/配列の場合は、<code>dimnames</code>）にマッチします。

<code>[</code>-インデックスのみ：<code>i</code>, <code>j</code>, <code>...</code>は、選択する要素/スライスを示す論理ベクトルである。  <code>i</code>, <code>j</code>, <code>...</code>は、選択から外す要素/スライスを示す負の整数であることもできます。

<code>[</code> によって配列にインデックスを付ける場合、単一の引数 <code>i</code> は、<code>x</code> の次元数と同じ数の列を持つ行列とすることができます; 結果は、<code>i</code> の各行のインデックスの集合に対応する要素を持つベクトルとなります。

<code>NULL</code>のインデックス値は、<code>integer(0)</code>であるかのように扱われる。
リテラル文字列または名前（バックチク引用符で囲むこともできる）。  抽出の場合、これは通常（'Environments'の項を参照）オブジェクトの<code>names</code>に部分的にマッチします。
行列と配列の場合。  <code>TRUE</code>の場合、結果は可能な限り小さい次元に強制されます（例を参照）。  これは要素の抽出にのみ働き、置換には働きません。  詳細は<code>drop</code>を参照してください。
文字ベクトルによる抽出の際に、<code>[[</code>の部分一致の可能性を制御します(ほとんどのオブジェクトに適用されますが、'Environments'の項を参照してください)。  デフォルトは部分マッチングなしです。  値<code>NA</code>は部分マッチングを許可するが、部分マッチングが発生すると警告を発する。  値<code>FALSE</code>は、警告なしで部分一致を許可します。
通常、配列のような<span style="font-family：color：<code>x</code>と同じようなクラスの<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>オブジェクトです。
データフレーム。
要素を抽出または置換します。  <code>[</code>と<code>[[</code>の場合、これらは<code>数値</code>または<code>文字</code>であり、<code>[</code>のみの場合、空または<code>論理</code>です。  数値は、<code>as.integer</code>によってifのように整数に強制されます。  <code>[</code> による置換では、論理行列が許される。
リテラル文字列または名前（バックティック引用符で囲むこともできる）。
論理的な文字列。  <code>TRUE</code>の場合、結果は可能な限り低い次元に強制されます。  デフォルトでは、1列しか残っていない場合は削除されますが、1行しか残っていない場合は<b>削除されません</b>。
適切な置換値: 必要であれば何度でも繰り返され、強制されるかもしれません: Coercionセクションを参照してください。  <code>NULL</code>の場合、単一列が選択された場合、その列を削除します。
論理: <code>[</code>を参照。
省略される名前の文字ベクトル、または<code>as.character</code>によって文字ベクトルに強制されるオブジェクト。
省略形の最小の長さ。
論理: 小文字を最初に削除すべきか。
論理：ドット（<code>"."</code>）を付加すべきか？
論理: <code>minlength</code>は厳密に守られるべきか？<code>strict = TRUE</code>を設定すると、<em>非</em>省略文字列が返される可能性があることに注意。
デフォルトの<code>"left.keeped"</code>で使用されるメソッドを指定する文字列。  部分一致を許す。
論理: <code>名前</code> (元のベクトル付き) を返す。
数値または<code>複素数</code>ベクトルまたは配列。
数値または複素数ベクトル。
数値または複素数ベクトル
環境。
バインディングをロックするかどうかを指定する論理。
名前オブジェクトまたは文字列。
0個または1個の引数をとる関数。
データのベクトルで、通常は少数の異なる値を取ります。
<code>x</code>が取りうるユニークな値(文字列)のオプションのベクトル。  デフォルトは、<code>as.character(x)</code>が取った値のユニークな集合で、<em><code>x</code></em>の昇順にソートされています。  この集合は、<code>sort(unique(x))</code>より小さく指定できることに注意。
<em>either</em>レベルのラベルのオプションの文字ベクトル(<code>exclude</code>内のものを取り除いた後、<code>levels</code>と同じ順序で)、<em>または</em>長さ 1の文字列。 <code>labels</code>内の重複した値は、<code>x</code>の異なる値を同じ因子レベルにマップするために使用することができます。
レベルの集合を形成するときに除外される値のベクトル。  これは、<code>x</code>と同じレベルセットを持つ因子であってもよいし、<code>文字</code>であるべきである。
論理フラグで、レベルが(与えられた順序で)並べ替えられたとみなされるべきかどうかを決定する。
詳細'を参照のこと。
(<code>ordered(.)</code>内): <code>ordered</code>自身を除いた上記のいずれか。
もし<code>any(is.na(x))</code>が使われるなら、<code>na<//code>レベルを追加する。
トップレベルタスクが成功裏に完了するたびに呼び出される関数。  これは、<code>data</code>が指定されているかどうかによって、それぞれ5つまたは4つの引数で呼び出される。戻り値は、アクティブなコールバックのリストにコールバックを保持するか、破棄するかを示す論理値でなければならない。
指定された場合、これはコールバック関数<code>f</code>の呼び出しの5番目の引数となる。
整数のインデックスは1ベースで、つまり最初の要素は1です。現在登録されているハンドラの名前は、<code>getTaskCallbackNames</code>で利用可能で、<code>addTaskCallback</code>の呼び出しでも返されます。
文字: 使用する名前。
マッチする空でない文字列。  <code>fixed = FALSE</code> の場合、これは拡張正規表現を含む必要があります。可能であれば、<code>as.character</code>によって文字列に強制されます。
可能であれば、<code>as.character</code>によって文字ベクトルに強制されます。
マッチに許される最大距離。  整数か、<em>パターン</em>の長さに最大変換コストを掛けた値の小数(対応する小数より小さくない最も小さい整数に置き換えられます)、または可能な構成要素のリストで表されます。

一致コストの最大数/分数(一般化レーベンシュタイン距離)
すべての</em>変換（挿入、欠失、置換）の最大数/百分率
挿入の最大数/割合
欠失の最大数/割合
置換の最大数/割合
<code>cost</code>が与えられない場合、<code>all</code>はデフォルトで10%になり、その他の変形回数の境界は<code>all</code>になります。
<span class="samp">挿入</span>, <span class="samp">削除</span>, <span class="samp">置換</span>に部分的にマッチする名前を持つ数値ベクトルまたはリストで、一般化レーベンシュテ距離を計算するためのそれぞれのコストを与えるか、または<code>NULL</code> (デフォルト)で、3つの可能な変換すべてに単位コストを使用することを示します。
もし<code>FALSE</code>なら、パターンマッチは<em>大文字小文字を区別する</em>、もし<code>TRUE</code>なら、マッチング中に大文字小文字は無視される。
もし<code>FALSE</code>なら、決定されたマッチの(整数)インデックスを含むベクトルが返され、もし<code>TRUE</code>なら、マッチした要素そのものを含むベクトルが返されます。
を論理的に返します。  <code>TRUE</code>の場合（デフォルト）、パターンは文字通り（そのまま）マッチします。  そうでない場合は、正規表現としてマッチします。
マルチバイトのロケールでは、比較は文字単位 (デフォルト) かバイト単位かを指定します。
マッチする空でない文字列。  <code>fixed = FALSE</code>の場合、これは拡張正規表現を含むべきである。可能であれば、<code>as.character</code>によって文字列に強制されます。
可能であれば、<code>as.character</code>によって文字ベクトルに強制されます。
マッチに許される最大距離。  整数か、<em>パターン</em>の長さに最大変換コストを掛けた値の小数(対応する小数より小さくない最も小さい整数に置き換えられます)、または可能な構成要素のリストで表されます。

一致コストの最大数/分数(一般化レーベンシュタイン距離)
すべての</em>変換（挿入、欠失、置換）の最大数/百分率
挿入の最大数/割合
欠失の最大数/割合
置換の最大数/割合
<code>cost</code>が与えられない場合、<code>all</code>はデフォルトで10%になり、その他の変形回数の境界は<code>all</code>になります。
<span class="samp">挿入</span>, <span class="samp">削除</span>, <span class="samp">置換</span>に部分的にマッチする名前を持つ数値ベクトルまたはリストで、一般化レーベンシュテ距離を計算するためのそれぞれのコストを与えるか、または<code>NULL</code> (デフォルト)で、可能な3つの変換すべてに単位コストを使用することを示します。
もし<code>FALSE</code>なら、パターンマッチは<em>大文字小文字を区別する</em>、もし<code>TRUE</code>なら、マッチング中に大文字小文字は無視される。
もし<code>FALSE</code>なら、決定されたマッチの(整数)インデックスを含むベクトルが返され、もし<code>TRUE</code>なら、マッチした要素そのものを含むベクトルが返されます。
を論理的に返します。  <code>TRUE</code>の場合（デフォルト）、パターンは文字通り（そのまま）マッチします。  そうでない場合は、正規表現としてマッチします。
マルチバイトのロケールでは、比較は文字単位 (デフォルト) かバイト単位かを指定します。
オブジェクトを指定します。
強制またはテストされるオブジェクト。
すべての値をコピーするか、(デフォルトでは)名前がドットで始まらないものだけをコピーするかを示す論理。
結果のリストの<code>names</code>をソートするかどうかを示す論理。  これは多少コストがかかるが、環境の比較には有用であることに注意。
0個以上の論理ベクトル。  長さがゼロの他のオブジェクトは無視され、残りはどのクラスも無視した論理に強制される。
論理的。  真の場合、<code>NA</code>値は結果が計算される前に取り除かれる。
<span style="font-family：font-family: Courier New, Courier; color：#666666;"><b>R</b></span>オブジェクト。
他の<span style="font-family：Courier New, Courier; color：<code>target</code>と比較される<span style="font: Courier New Courier;"><b>R</b></span> オブジェクト。
特に次の2つは数値比較のためのものです：
数値 <i>≥</i> 0. <code>許容差</code>より小さい差は報告されません。  デフォルト値は<code>1.5e-8</code>に近い。
<code>NULL</code> または数値 &gt; 0, 典型的には長さ 1 または<code>length(target)</code>。  詳細'を参照。
<code>target == current</code> のケースを平均（絶対または相対）差を計算する際にカウントすべきかどうかを示す論理。  デフォルトの<code>FALSE</code>は、<code>target</code>と<code>current</code>が数箇所しか違わないような場合、誤解を招くかもしれません。
2つの引数、<code>err</code>、相対エラー、絶対エラー、拡大縮小エラー、<code>what</code>、エラーの<em>種類</em>を示す文字列からなる<code>function</code>は、例えば、相対エラーと絶対エラーを異なる書式にするために使用されます。
(名前以外の) <code>target</code> と <code>current</code> の <code>attributes</code> が比較されるべきかどうかを示す論理。
<code>list</code> 比較が、整数インデックスの代わりに、(一致する場合) 名前によって異なるコンポーネントを報告すべきかどうかを示す論理。  これは <code>...</code> の後に来るので、完全な名前で指定しなければならないことに注意。
<code>ls</code>に渡される論理は、"hidden "オブジェクトも環境で考慮されるべきかどうかを示します。
<code>environment</code>メソッドに渡されます：<code>logical</code>は、"約束が強制されるべきかどうか"、すなわち、典型的な形式的な関数の引数が比較のために評価されるかどうかを示します。  falseの場合、2つの環境のオブジェクトの<code>names</code>だけが等しいかチェックされます。
2つの<code>nls()</code>フィットを比較する場合など、予期しない場合に<code>check.environment=FALSE</code>を設定する必要があるかもしれません。
<code>target</code> と <code>current</code> の <code>"tzone"</code> 属性を比較すべきかどうかを示す論理。
<code>target</code> と <code>current</code> の <code>names(.)</code> が比較されるべきかどうかを示す論理。
<span style="font-family：Courier New, Courier; color：#666666;"><b>R</b></span>オブジェクト。
他の<span style="font-family：Courier New, Courier; color：<code>target</code>と比較される<span style="font: Courier New Courier;"><b>R</b></span> オブジェクト。
特に次の2つは数値比較のためのものです：
数値 <i>≥</i> 0. <code>許容差</code>より小さい差は報告されません。  デフォルト値は<code>1.5e-8</code>に近い。
<code>NULL</code> または数値 &gt; 0, 通常は長さ 1 または<code>length(target)</code>。  詳細'を参照。
<code>target == current</code> のケースを平均（絶対または相対）差を計算する際にカウントすべきかどうかを示す論理。  デフォルトの<code>FALSE</code>は、<code>target</code>と<code>current</code>が数箇所しか違わないような場合、誤解を招くかもしれません。
2つの引数、<code>err</code>、相対エラー、絶対エラー、拡大縮小エラー、<code>what</code>、エラーの<em>種類</em>を示す文字列からなる<code>function</code>は、例えば、相対エラーと絶対エラーを異なる書式にするために使用されます。
(名前以外の) <code>target</code> と <code>current</code> の <code>attributes</code> が比較されるべきかどうかを示す論理。
<code>list</code> 比較が、整数インデックスの代わりに、(一致する場合) 名前によって異なるコンポーネントを報告すべきかどうかを示す論理。  これは <code>...</code> の後に来るので、完全な名前で指定しなければならないことに注意。
<code>ls</code>に渡される論理は、"hidden "オブジェクトも環境で考慮されるべきかどうかを示します。
<code>environment</code>メソッドに渡されます：<code>logical</code>は、"約束が強制されるべきかどうか"、すなわち、典型的な形式的な関数の引数が比較のために評価されるかどうかを示します。  falseの場合、2つの環境のオブジェクトの<code>names</code>だけが等しいかチェックされます。
2つの<code>nls()</code>フィットを比較する場合など、予期しない場合に<code>check.environment=FALSE</code>を設定する必要があるかもしれません。
<code>target</code> と <code>current</code> の <code>"tzone"</code> 属性を比較すべきかどうかを示す論理。
<code>target</code> と <code>current</code> の <code>names(.)</code> が比較されるべきかどうかを示す論理。
<span style="font-family：Courier New, Courier; color：#666666;"><b>R</b></span>オブジェクト。
他の<span style="font-family：Courier New, Courier; color：<code>target</code>と比較される<span style="font: Courier New Courier;"><b>R</b></span> オブジェクト。
特に次の2つは数値比較のためのものです：
数値 <i>≥</i> 0. <code>許容差</code>より小さい差は報告されません。  デフォルト値は<code>1.5e-8</code>に近い。
<code>NULL</code> または数値 &gt; 0, 典型的には長さ 1 または<code>length(target)</code>。  詳細'を参照。
<code>target == current</code> のケースを平均（絶対または相対）差を計算する際にカウントすべきかどうかを示す論理。  デフォルトの<code>FALSE</code>は、<code>target</code>と<code>current</code>が数箇所しか違わないような場合、誤解を招くかもしれません。
2つの引数、<code>err</code>、相対エラー、絶対エラー、拡大縮小エラー、<code>what</code>、エラーの<em>種類</em>を示す文字列からなる<code>function</code>は、例えば、相対エラーと絶対エラーを異なる書式にするために使用されます。
(名前以外の) <code>target</code> と <code>current</code> の <code>attributes</code> が比較されるべきかどうかを示す論理。
<code>list</code> 比較が、整数インデックスの代わりに、(一致する場合) 名前によって異なるコンポーネントを報告すべきかどうかを示す論理。  これは <code>...</code> の後に来るので、完全な名前で指定しなければならないことに注意。
<code>ls</code>に渡される論理は、"hidden "オブジェクトも環境で考慮されるべきかどうかを示します。
<code>environment</code>メソッドに渡されます：<code>logical</code>は、"約束が強制されるべきかどうか"、すなわち、典型的な形式的な関数の引数が比較のために評価されるかどうかを示します。  falseの場合、2つの環境のオブジェクトの<code>names</code>だけが等しいかチェックされます。
2つの<code>nls()</code>フィットを比較する場合など、予期しない場合に<code>check.environment=FALSE</code>を設定する必要があるかもしれません。
<code>target</code> と <code>current</code> の <code>"tzone"</code> 属性を比較すべきかどうかを示す論理。
<code>target</code> と <code>current</code> の <code>names(.)</code> が比較されるべきかどうかを示す論理。
<span style="font-family：Courier New, Courier; color：#666666;"><b>R</b></span>オブジェクト。
他の<span style="font-family：Courier New, Courier; color：<code>target</code>と比較される<span style="font: Courier New Courier;"><b>R</b></span> オブジェクト。
特に次の2つは数値比較のためのものです：
数値 <i>≥</i> 0. <code>許容差</code>より小さい差は報告されません。  デフォルト値は<code>1.5e-8</code>に近い。
<code>NULL</code> または数値 &gt; 0, 通常は長さ 1 または<code>length(target)</code>。  詳細'を参照。
<code>target == current</code> のケースを平均（絶対または相対）差を計算する際にカウントすべきかどうかを示す論理。  デフォルトの<code>FALSE</code>は、<code>target</code>と<code>current</code>が数箇所しか違わないような場合、誤解を招くかもしれません。
2つの引数、<code>err</code>、相対エラー、絶対エラー、拡大縮小エラー、<code>what</code>、エラーの<em>種類</em>を示す文字列からなる<code>function</code>は、例えば、相対エラーと絶対エラーを異なる書式にするために使用されます。
(名前以外の) <code>target</code> と <code>current</code> の <code>attributes</code> が比較されるべきかどうかを示す論理。
<code>list</code> 比較が、整数インデックスの代わりに、(一致する場合) 名前によって異なるコンポーネントを報告すべきかどうかを示す論理。  これは <code>...</code> の後に来るので、完全な名前で指定しなければならないことに注意。
<code>ls</code>に渡される論理は、"hidden "オブジェクトも環境で考慮されるべきかどうかを示します。
<code>environment</code>メソッドに渡されます：<code>logical</code>は、"約束が強制されるべきかどうか"、すなわち、典型的な形式的な関数の引数が比較のために評価されるかどうかを示します。  falseの場合、2つの環境のオブジェクトの<code>names</code>だけが等しいかチェックされます。
2つの<code>nls()</code>フィットを比較する場合など、予期しない場合に<code>check.environment=FALSE</code>を設定する必要があるかもしれません。
<code>target</code> と <code>current</code> の <code>"tzone"</code> 属性を比較すべきかどうかを示す論理。
<code>target</code> と <code>current</code> の <code>names(.)</code> が比較されるべきかどうかを示す論理。
<span style="font-family：Courier New, Courier; color：#666666;"><b>R</b></span>オブジェクト。
他の<span style="font-family：Courier New, Courier; color：<code>target</code>と比較される<span style="font: Courier New Courier;"><b>R</b></span> オブジェクト。
特に次の2つは数値比較のためのものです：
数値 <i>≥</i> 0. <code>許容差</code>より小さい差は報告されません。  デフォルト値は<code>1.5e-8</code>に近い。
<code>NULL</code> または数値 &gt; 0, 典型的には長さ 1 または<code>length(target)</code>。  詳細'を参照。
<code>target == current</code> のケースを平均（絶対または相対）差を計算する際にカウントすべきかどうかを示す論理。  デフォルトの<code>FALSE</code>は、<code>target</code>と<code>current</code>が数箇所しか違わないような場合、誤解を招くかもしれません。
2つの引数、<code>err</code>、相対エラー、絶対エラー、拡大縮小エラー、<code>what</code>、エラーの<em>種類</em>を示す文字列からなる<code>function</code>は、例えば、相対エラーと絶対エラーを異なる書式にするために使用されます。
(名前以外の) <code>target</code> と <code>current</code> の <code>attributes</code> が比較されるべきかどうかを示す論理。
<code>list</code> 比較が、整数インデックスの代わりに、(一致する場合) 名前によって異なるコンポーネントを報告すべきかどうかを示す論理。  これは <code>...</code> の後に来るので、完全な名前で指定しなければならないことに注意。
<code>ls</code>に渡される論理は、"hidden "オブジェクトも環境で考慮されるべきかどうかを示します。
<code>environment</code>メソッドに渡されます：<code>logical</code>は、"約束が強制されるべきかどうか"、すなわち、典型的な形式的な関数の引数が比較のために評価されるかどうかを示します。  falseの場合、2つの環境のオブジェクトの<code>names</code>だけが等しいかチェックされます。
2つの<code>nls()</code>フィットを比較する場合など、予期しない場合に<code>check.environment=FALSE</code>を設定する必要があるかもしれません。
<code>target</code> と <code>current</code> の <code>"tzone"</code> 属性を比較すべきかどうかを示す論理。
<code>target</code> と <code>current</code> の <code>names(.)</code> が比較されるべきかどうかを示す論理。
<span style="font-family：Courier New, Courier; color：#666666;"><b>R</b></span>オブジェクト。
他の<span style="font-family：Courier New, Courier; color：<code>target</code>と比較される<span style="font: Courier New Courier;"><b>R</b></span> オブジェクト。
特に次の2つは数値比較のためのものです：
数値 <i>≥</i> 0. <code>許容差</code>より小さい差は報告されません。  デフォルト値は<code>1.5e-8</code>に近い。
<code>NULL</code> または数値 &gt; 0, 通常は長さ 1 または<code>length(target)</code>。  詳細'を参照。
<code>target == current</code> のケースを平均（絶対または相対）差を計算する際にカウントすべきかどうかを示す論理。  デフォルトの<code>FALSE</code>は、<code>target</code>と<code>current</code>が数箇所しか違わないような場合、誤解を招くかもしれません。
<code>err</code>は相対エラー、絶対エラー、拡大縮小エラー、<code>what</code>はエラーの<em>種類</em>を示す文字列の2つの引数からなる<code>function</code>です。
(名前以外の) <code>target</code> と <code>current</code> の <code>attributes</code> が比較されるべきかどうかを示す論理。
<code>list</code> 比較が、整数インデックスの代わりに、(一致する場合) 名前によって異なるコンポーネントを報告すべきかどうかを示す論理。  これは <code>...</code> の後に来るので、完全な名前で指定しなければならないことに注意。
<code>ls</code>に渡される論理は、"hidden "オブジェクトも環境で考慮されるべきかどうかを示します。
<code>environment</code>メソッドに渡されます：<code>logical</code>は、"約束が強制されるべきかどうか"、すなわち、典型的な形式的な関数の引数が比較のために評価されるかどうかを示します。  falseの場合、2つの環境のオブジェクトの<code>names</code>だけが等しいかチェックされます。
2つの<code>nls()</code>フィットを比較する場合など、予期しない場合に<code>check.environment=FALSE</code>を設定する必要があるかもしれません。
<code>target</code> と <code>current</code> の <code>"tzone"</code> 属性を比較すべきかどうかを示す論理。
<code>target</code> と <code>current</code> の <code>names(.)</code> が比較されるべきかどうかを示す論理。
<span style="font-family：Courier New, Courier; color：#666666;"><b>R</b></span>オブジェクト。
他の<span style="font-family：Courier New, Courier; color：<code>target</code>と比較される<span style="font: Courier New Courier;"><b>R</b></span> オブジェクト。
特に以下の2つは数値比較のためのものです：
数値 <i>≥</i> 0. <code>許容差</code>より小さい差は報告されません。  デフォルト値は<code>1.5e-8</code>に近い。
<code>NULL</code> または数値 &gt; 0, 通常は長さ 1 または<code>length(target)</code>。  詳細'を参照。
<code>target == current</code> のケースを平均（絶対または相対）差を計算する際にカウントすべきかどうかを示す論理。  デフォルトの<code>FALSE</code>は、<code>target</code>と<code>current</code>が数箇所しか違わないような場合、誤解を招くかもしれません。
<code>err</code>は相対エラー、絶対エラー、拡大縮小エラー、<code>what</code>はエラーの<em>種類</em>を示す文字列の2つの引数からなる<code>function</code>です。
(名前以外の) <code>target</code> と <code>current</code> の <code>attributes</code> が比較されるべきかどうかを示す論理。
<code>list</code> 比較が、整数インデックスの代わりに、(一致する場合) 名前によって異なるコンポーネントを報告すべきかどうかを示す論理。  これは <code>...</code> の後に来るので、完全な名前で指定されなければならないことに注意。
<code>ls</code>に渡される論理は、"hidden "オブジェクトも環境で考慮されるべきかどうかを示します。
<code>environment</code>メソッドに渡されます：<code>logical</code>は、"約束が強制されるべきかどうか"、すなわち、典型的な形式的な関数の引数が比較のために評価されるかどうかを示します。  falseの場合、2つの環境のオブジェクトの<code>names</code>だけが等しいかチェックされます。
2つの<code>nls()</code>フィットを比較する場合など、予期しない場合に<code>check.environment=FALSE</code>を設定する必要があるかもしれません。
<code>target</code> と <code>current</code> の <code>"tzone"</code> 属性を比較すべきかどうかを示す論理。
<code>target</code> と <code>current</code> の <code>names(.)</code> が比較されるべきかどうかを示す論理。
<span style="font-family：Courier New, Courier; color：#666666;"><b>R</b></span>オブジェクト。
他の<span style="font-family：Courier New, Courier; color：<code>target</code>と比較される<span style="font: Courier New Courier;"><b>R</b></span> オブジェクト。
特に以下の2つは数値比較のためのものです：
数値 <i>≥</i> 0. <code>許容差</code>より小さい差は報告されません。  デフォルト値は<code>1.5e-8</code>に近い。
<code>NULL</code> または数値 &gt; 0, 通常は長さ 1 または<code>length(target)</code>。  詳細'を参照。
<code>target == current</code> のケースを平均（絶対または相対）差を計算する際にカウントすべきかどうかを示す論理。  デフォルトの<code>FALSE</code>は、<code>target</code>と<code>current</code>が数箇所しか違わないような場合、誤解を招くかもしれません。
<code>err</code>は相対エラー、絶対エラー、拡大縮小エラー、<code>what</code>はエラーの<em>種類</em>を示す文字列の2つの引数からなる<code>function</code>です。
(名前以外の) <code>target</code> と <code>current</code> の <code>attributes</code> が比較されるべきかどうかを示す論理。
<code>list</code> 比較が、整数インデックスの代わりに、(一致する場合) 名前によって異なるコンポーネントを報告すべきかどうかを示す論理。  これは <code>...</code> の後に来るので、完全な名前で指定しなければならないことに注意。
<code>ls</code>に渡される論理は、"hidden "オブジェクトも環境で考慮されるべきかどうかを示します。
<code>environment</code>メソッドに渡されます：<code>logical</code>は、"約束が強制されるべきかどうか"、すなわち、典型的な形式的な関数の引数が比較のために評価されるかどうかを示します。  falseの場合、2つの環境のオブジェクトの<code>names</code>だけが等しいかチェックされます。
2つの<code>nls()</code>フィットを比較する場合など、予期しない場合に<code>check.environment=FALSE</code>を設定する必要があるかもしれません。
<code>target</code> と <code>current</code> の <code>"tzone"</code> 属性を比較すべきかどうかを示す論理。
<code>target</code> と <code>current</code> の <code>names(.)</code> が比較されるべきかどうかを示す論理。
<span style="font-family：Courier New, Courier; color：#666666;"><b>R</b></span>オブジェクト。
他の<span style="font-family：Courier New, Courier; color：<code>target</code>と比較される<span style="font: Courier New Courier;"><b>R</b></span> オブジェクト。
特に次の2つは数値比較のためのものです：
数値 <i>≥</i> 0. <code>許容差</code>より小さい差は報告されません。  デフォルト値は<code>1.5e-8</code>に近い。
<code>NULL</code> または数値 &gt; 0, 典型的には長さ 1 または<code>length(target)</code>。  詳細'を参照。
<code>target == current</code> のケースを平均（絶対または相対）差を計算する際にカウントすべきかどうかを示す論理。  デフォルトの<code>FALSE</code>は、<code>target</code>と<code>current</code>が数箇所しか違わないような場合、誤解を招くかもしれません。
<code>err</code>は相対エラー、絶対エラー、拡大縮小エラー、<code>what</code>はエラーの<em>種類</em>を示す文字列の2つの引数からなる<code>function</code>です。
(名前以外の) <code>target</code> と <code>current</code> の <code>attributes</code> が比較されるべきかどうかを示す論理。
<code>list</code> 比較が、整数インデックスの代わりに、(一致する場合) 名前によって異なるコンポーネントを報告すべきかどうかを示す論理。  これは <code>...</code> の後に来るので、完全な名前で指定しなければならないことに注意。
<code>ls</code>に渡される論理は、"hidden "オブジェクトも環境で考慮されるべきかどうかを示します。
<code>environment</code>メソッドに渡されます：<code>logical</code>は、"約束が強制されるべきかどうか"、すなわち、典型的な形式的な関数の引数が比較のために評価されるかどうかを示します。  falseの場合、2つの環境のオブジェクトの<code>names</code>だけが等しいかチェックされます。
2つの<code>nls()</code>フィットを比較する場合など、予期しない場合に<code>check.environment=FALSE</code>を設定する必要があるかもしれません。
<code>target</code> と <code>current</code> の <code>"tzone"</code> 属性を比較すべきかどうかを示す論理。
<code>target</code> と <code>current</code> の <code>names(.)</code> が比較されるべきかどうかを示す論理。
<span style="font-family：Courier New, Courier; color：#666666;"><b>R</b></span>オブジェクト。
他の<span style="font-family：Courier New, Courier; color：<code>target</code>と比較される<span style="font: Courier New Courier;"><b>R</b></span> オブジェクト。
特に次の2つは数値比較のためのものです：
数値 <i>≥</i> 0. <code>許容差</code>より小さい差は報告されません。  デフォルト値は<code>1.5e-8</code>に近い。
<code>NULL</code> または数値 &gt; 0, 通常は長さ 1 または<code>length(target)</code>。  詳細'を参照。
<code>target == current</code> のケースを平均（絶対または相対）差を計算する際にカウントすべきかどうかを示す論理。  デフォルトの<code>FALSE</code>は、<code>target</code>と<code>current</code>が数箇所しか違わないような場合、誤解を招くかもしれません。
<code>err</code>は相対エラー、絶対エラー、拡大縮小エラー、<code>what</code>はエラーの<em>種類</em>を示す文字列の2つの引数からなる<code>function</code>です。
(名前以外の) <code>target</code> と <code>current</code> の <code>attributes</code> が比較されるべきかどうかを示す論理。
<code>list</code> 比較が、整数インデックスの代わりに、(一致する場合) 名前によって異なるコンポーネントを報告すべきかどうかを示す論理。  これは <code>...</code> の後に来るので、完全な名前で指定しなければならないことに注意。
<code>ls</code>に渡される論理は、"hidden "オブジェクトも環境で考慮されるべきかどうかを示します。
<code>environment</code>メソッドに渡されます：<code>logical</code>は、"約束が強制されるべきかどうか"、すなわち、典型的な形式的な関数の引数が比較のために評価されるかどうかを示します。  falseの場合、2つの環境のオブジェクトの<code>names</code>だけが等しいかチェックされます。
2つの<code>nls()</code>フィットを比較する場合など、予期しない場合に<code>check.environment=FALSE</code>を設定する必要があるかもしれません。
<code>target</code> と <code>current</code> の <code>"tzone"</code> 属性を比較すべきかどうかを示す論理。
<code>target</code> と <code>current</code> の <code>names(.)</code> が比較されるべきかどうかを示す論理。
<span style="font-family：Courier New, Courier; color：#666666;"><b>R</b></span>オブジェクト。
他の<span style="font-family：Courier New, Courier; color：<code>target</code>と比較される<span style="font: Courier New Courier;"><b>R</b></span> オブジェクト。
特に次の2つは数値比較のためのものです：
数値 <i>≥</i> 0. <code>許容差</code>より小さい差は報告されません。  デフォルト値は<code>1.5e-8</code>に近い。
<code>NULL</code> または数値 &gt; 0, 典型的には長さ 1 または<code>length(target)</code>。  詳細'を参照。
<code>target == current</code> のケースを平均（絶対または相対）差を計算する際にカウントすべきかどうかを示す論理。  デフォルトの<code>FALSE</code>は、<code>target</code>と<code>current</code>が数箇所しか違わないような場合、誤解を招くかもしれません。
2つの引数、<code>err</code>、相対エラー、絶対エラー、拡大縮小エラー、<code>what</code>、エラーの<em>種類</em>を示す文字列からなる<code>function</code>は、例えば、相対エラーと絶対エラーを異なる書式にするために使用されます。
(名前以外の) <code>target</code> と <code>current</code> の <code>attributes</code> が比較されるべきかどうかを示す論理。
<code>list</code> 比較が、整数インデックスの代わりに、(一致する場合) 名前によって異なるコンポーネントを報告すべきかどうかを示す論理。  これは <code>...</code> の後に来るので、完全な名前で指定しなければならないことに注意。
<code>ls</code>に渡される論理は、"hidden "オブジェクトも環境で考慮されるべきかどうかを示します。
<code>environment</code>メソッドに渡されます：<code>logical</code>は、"約束が強制されるべきかどうか"、すなわち、典型的な形式的な関数の引数が比較のために評価されるかどうかを示します。  falseの場合、2つの環境のオブジェクトの<code>names</code>だけが等しいかチェックされます。
2つの<code>nls()</code>フィットを比較する場合など、予期しない場合に<code>check.environment=FALSE</code>を設定する必要があるかもしれません。
<code>target</code> と <code>current</code> の <code>"tzone"</code> 属性を比較すべきかどうかを示す論理。
<code>target</code> と <code>current</code> の <code>names(.)</code> が比較されるべきかどうかを示す論理。
<span style="font-family：Courier New, Courier; color：#666666;"><b>R</b></span>オブジェクト。
他の<span style="font-family：Courier New, Courier; color：<code>target</code>と比較される<span style="font: Courier New Courier;"><b>R</b></span> オブジェクト。
特に次の2つは数値比較のためのものです：
数値 <i>≥</i> 0. <code>許容差</code>より小さい差は報告されません。  デフォルト値は<code>1.5e-8</code>に近い。
<code>NULL</code> または数値 &gt; 0, 通常は長さ 1 または<code>length(target)</code>。  詳細'を参照。
<code>target == current</code> のケースを平均（絶対または相対）差を計算する際にカウントすべきかどうかを示す論理。  デフォルトの<code>FALSE</code>は、<code>target</code>と<code>current</code>が数箇所しか違わないような場合、誤解を招くかもしれません。
2つの引数、<code>err</code>、相対エラー、絶対エラー、拡大縮小エラー、<code>what</code>、エラーの<em>種類</em>を示す文字列からなる<code>function</code>は、例えば、相対エラーと絶対エラーを異なる書式にするために使用されます。
(名前以外の) <code>target</code> と <code>current</code> の <code>attributes</code> が比較されるべきかどうかを示す論理。
<code>list</code> 比較が、整数インデックスの代わりに、(一致する場合) 名前によって異なるコンポーネントを報告すべきかどうかを示す論理。  これは <code>...</code> の後に来るので、完全な名前で指定しなければならないことに注意。
<code>ls</code>に渡される論理は、"hidden "オブジェクトも環境で考慮されるべきかどうかを示します。
<code>environment</code>メソッドに渡されます：<code>logical</code>は、"約束が強制されるべきかどうか"、すなわち、典型的な形式的な関数の引数が比較のために評価されるかどうかを示します。  falseの場合、2つの環境のオブジェクトの<code>names</code>だけが等しいかチェックされます。
2つの<code>nls()</code>フィットを比較する場合など、予期しない場合に<code>check.environment=FALSE</code>を設定する必要があるかもしれません。
<code>target</code> と <code>current</code> の <code>"tzone"</code> 属性を比較すべきかどうかを示す論理。
<code>target</code> と <code>current</code> の <code>names(.)</code> が比較されるべきかどうかを示す論理。
<span style="font-family：Courier New, Courier; color：#666666;"><b>R</b></span>オブジェクト。
他の<span style="font-family：Courier New, Courier; color：<code>target</code>と比較される<span style="font: Courier New Courier;"><b>R</b></span> オブジェクト。
特に次の2つは数値比較のためのものです：
数値 <i>≥</i> 0. <code>許容差</code>より小さい差は報告されません。  デフォルト値は<code>1.5e-8</code>に近い。
<code>NULL</code> または数値 &gt; 0, 典型的には長さ 1 または<code>length(target)</code>。  詳細'を参照。
<code>target == current</code> のケースを平均（絶対または相対）差を計算する際にカウントすべきかどうかを示す論理。  デフォルトの<code>FALSE</code>は、<code>target</code>と<code>current</code>が数箇所しか違わないような場合、誤解を招くかもしれません。
2つの引数、<code>err</code>、相対エラー、絶対エラー、拡大縮小エラー、<code>what</code>、エラーの<em>種類</em>を示す文字列からなる<code>function</code>は、例えば、相対エラーと絶対エラーを異なる書式にするために使用されます。
(名前以外の) <code>target</code> と <code>current</code> の <code>attributes</code> が比較されるべきかどうかを示す論理。
<code>list</code> 比較が、整数インデックスの代わりに、(一致する場合) 名前によって異なるコンポーネントを報告すべきかどうかを示す論理。  これは <code>...</code> の後に来るので、完全な名前で指定しなければならないことに注意。
<code>ls</code>に渡される論理は、"hidden "オブジェクトも環境で考慮されるべきかどうかを示します。
<code>environment</code>メソッドに渡されます：<code>logical</code>は、"約束が強制されるべきかどうか"、すなわち、典型的な形式的な関数の引数が比較のために評価されるかどうかを示します。  falseの場合、2つの環境のオブジェクトの<code>names</code>だけが等しいかチェックされます。
2つの<code>nls()</code>フィットを比較する場合など、予期しない場合に<code>check.environment=FALSE</code>を設定する必要があるかもしれません。
<code>target</code> と <code>current</code> の <code>"tzone"</code> 属性を比較すべきかどうかを示す論理。
<code>target</code> と <code>current</code> の <code>names(.)</code> が比較されるべきかどうかを示す論理。
名前が抽出される式または呼び出し。
関数名を結果に含めるかどうかを示す論理値。
返される名前の最大数。  <code>-1</code>は無制限を示します（ベクトル・サイズの制限を除く）。
重複する名前を値から削除するかどうかを示す論理値。
名前が抽出される式または呼び出し。
関数名を結果に含めるかどうかを示す論理値。
返す名前の最大数。  <code>-1</code>は無制限を示します（ベクトル・サイズの制限を除く）。
重複する名前を値から削除すべきかどうかを示す論理値。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式。
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
追加の引数。
0個以上の論理ベクトル。  長さ0の他のオブジェクトは無視され、残りは任意のクラスを無視した論理に強制される。
論理的。  真の場合、<code>NA</code>値は結果が計算される前に取り除かれます。
ベクトル、データフレーム、配列、<code>NULL</code>。
<code>FALSE</code>は特別な値で、全ての値が比較されることを意味し、デフォルト以外のメソッドで受け入れられる唯一の値かもしれません。  内部的には<code>x</code>と同じ型に強制されます。
すなわち、同一要素の最後(または右端)は<code>duplicated = FALSE</code>に対応する。
期待される一意な項目の最大数(1より大きい)。
特定のメソッドの引数。
固定される配列のマージン: <code>apply</code> を参照し、<code>MARGIN = 0</code> が有用であることに注意。
ベクトル、データフレーム、配列、<code>NULL</code>。
<code>FALSE</code>は特別な値で、全ての値が比較可能であることを意味し、デフォルト以外のメソッドで受け入れられる唯一の値かもしれません。  内部的には<code>x</code>と同じ型に強制されます。
すなわち、同一要素の最後(または右端)は<code>duplicated = FALSE</code>に対応する。
期待される一意な項目の最大数(1より大きい)。
特定のメソッドの引数。
固定される配列のマージン: <code>apply</code> を参照し、<code>MARGIN = 0</code> が有用であることに注意。
ベクトル、データフレーム、配列、<code>NULL</code>。
<code>FALSE</code>は特別な値で、全ての値が比較可能であることを意味し、デフォルト以外のメソッドで受け入れられる唯一の値かもしれません。  内部的には<code>x</code>と同じ型に強制されます。
すなわち、同一要素の最後(または右端)は<code>duplicated = FALSE</code>に対応する。
期待される一意な項目の最大数(1より大きい)。
特定のメソッドの引数。
固定される配列のマージン: <code>apply</code> を参照し、<code>MARGIN = 0</code> が有用であることに注意。
ベクトル、データフレーム、配列、<code>NULL</code>。
<code>FALSE</code>は特別な値で、全ての値が比較可能であることを意味し、デフォルト以外のメソッドで受け入れられる唯一の値かもしれません。  内部的には<code>x</code>と同じ型に強制されます。
すなわち、同一要素の最後(または右端)は<code>duplicated = FALSE</code>に対応する。
期待される一意な項目の最大数(1より大きい)。
特定のメソッドの引数。
固定される配列のマージン: <code>apply</code> を参照し、<code>MARGIN = 0</code> が有用であることに注意。
ベクトル、データフレーム、配列、<code>NULL</code>。
<code>FALSE</code>は特別な値で、全ての値が比較可能であることを意味し、デフォルト以外のメソッドで受け入れられる唯一の値かもしれません。  内部的には<code>x</code>と同じ型に強制されます。
すなわち、同一要素の最後(または右端)は<code>duplicated = FALSE</code>に対応する。
期待される一意な項目の最大数(1より大きい)。
特定のメソッドの引数。
固定される配列のマージン: <code>apply</code> を参照し、 <code>MARGIN = 0</code> が有用であることに注意してください。
<span style="font-family：courier new, Courier; color：テストされる<span style="font: Courier New; color: #666666;"><b>R</b></span> オブジェクト: <code>is.na</code>のデフォルトメソッドと<code>anyNA</code>は、原子ベクトル、リスト、ペアリスト、<code>NULL</code>を扱います。
論理: <code>anyNA</code>はリストやペアリストに再帰的に適用されるべきか?
<code>x</code>で使用するための適切なインデックス・ベクトル。
<span style="font-family：courier new, Courier; color：テストされる<span style="font: Courier New; color: #666666;"><b>R</b></span> オブジェクト: <code>is.na</code>と<code>anyNA</code>のデフォルト・メソッドは、アトミック・ベクトル、リスト、ペアリスト、<code>NULL</code>を扱います。
論理: <code>anyNA</code>はリストやペアリストに再帰的に適用されるべきか?
<code>x</code> で使用するための適切なインデックス・ベクトル。
<code>package_version</code>の場合は、<code>R.version</code>で得られるRversionオブジェクト。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理。
date-timeクラスの1つから出力または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
転置される配列。
添え字の並べ替えベクトル, 通常は整数 <code>1:n</code> の並べ替えで, <code>n</code> は <code>a</code> の次元数です.  <code>a</code> が dimnames という名前を持つ場合、その名前の並べ替えを与える長さ <code>n</code> の文字ベクトルとなります。デフォルト(<code>perm</code>の長さが0の場合は常に使用されます)は、次元の順序を逆にします。
要素の並び替えだけでなく、ベクトルのサイズも変更すべきかどうかを示すフラグ (デフォルトは <code>TRUE</code>)。
結果が<code>a</code>と同じクラスであるべきかを示す論理。
メソッドの更なる引数の可能性。
転置される配列。
通常、整数の並べ替え <code>1:n</code> で、 <code>n</code> は <code>a</code> の次元数です。  <code>a</code> が dimnames という名前を持つ場合、その名前の並べ替えを与える長さ <code>n</code> の文字ベクトルとなります。デフォルト(<code>perm</code>の長さが0の場合は常に使用されます)は、次元の順序を逆にします。
要素の並び替えだけでなく、ベクトルのサイズも変更すべきかどうかを示すフラグ (デフォルトは <code>TRUE</code>)。
結果が<code>a</code>と同じクラスであるべきかを示す論理。
メソッドの更なる引数の可能性。
転置される配列。
通常、整数の並べ替え <code>1:n</code> で、 <code>n</code> は <code>a</code> の次元数です。  <code>a</code> が dimnames という名前を持つ場合、その名前の並べ替えを与える長さ <code>n</code> の文字ベクトルとなります。デフォルトでは(<code>perm</code>の長さが0の場合は常に使用されます)、次元の順序を逆にします。
要素の並び替えだけでなく、ベクトルのサイズ変更も行うべきかを示すフラグ (デフォルトは <code>TRUE</code>)。
結果が<code>a</code>と同じクラスであるべきかを示す論理。
メソッドの更なる引数の可能性。
値が追加されるベクトル。
修正されたベクトルに含まれる
値が追加される添え字。
行列を含む配列。
関数を適用する添え字を指定するベクトル。  例えば、行列の場合、 <code>1</code> は行、<code>2</code> は列を表し、<code>c(1, 2)</code> は行と列を表す。<code>X</code>がdimnamesという名前を持つ場合、次元名を選択する文字ベクトルとすることができる。
<code>+</code>、<code>%*%</code>などの関数の場合、関数名はバッククォートまたは引用符で囲む必要があります。
<code>FUN</code>のオプション引数。
可能であれば、結果を簡略化するかどうかを示す論理。
数値。  入力は必要に応じて再利用される。
数値ベクトル.
数値ベクトル.
数値ベクトル。
数値ベクトル。
おそらくモード<code>complex</code>のオブジェクト。
モード<code>complex</code>のオブジェクト、またはメソッドが定義されているクラスの1つ。
他のメソッドに渡される、あるいは他のメソッドから渡される引数。
もし<code>name</code>が文字列であれば、その名前の関数が見つかり、使用されます。
ベクトル（リストまたは<code>式</code>ベクトルを含む）。  アトミックでないクラス化されたオブジェクトは、<code>as.vector</code>で強制されます。
作成される配列の dim 属性は、各次元の最大インデックスを与える1以上の長さの整数ベクトルです。
これは、<code>NULL</code>か、その次元の<code>dim</code>で与えられた長さの文字ベクトルです。  リストには名前を付けることができ、リスト名は次元の名前として使用されます。  リストが次元数より短い場合は、<code>NULL</code>で必要な長さまで拡張されます。
<span style="font-family：font-family: Courier New, Courier; color：#オブジェクト。
メソッドに渡す、またはメソッドから渡される追加引数。
<code>logical</code> ベクタまたは配列。  <code>NA</code>は省略可能（<code>FALSE</code>のように扱われる）。
論理; <code>x</code>が配列の場合、<b>arr</b>ay <b>ind</b>ices を返すべきか？
<code>which(x)</code>から得られるような整数値のインデックス・ベクトル。
<code>dim(.)</code> 整数ベクトル
<code>useNames</code>がtrueの場合、<code>arrayInd()</code>（したがって、<code>which(*, arr.ind=TRUE)</code>）のためのdimnamesの構築に使用されます。<code>names(.dimnames)</code>が空でない場合、これらは列名として使用されます。  <code>.dimnames[[1]]</code>は行名として使用されます。
<code>arrayInd()</code>の値が(nullでない)dimnamesを持つべきかどうかを論理的に示します。
ベクトル（リストまたは<code>式</code>ベクトルを含む）。  アトミックでないクラス化されたオブジェクトは、<code>as.vector</code>によって強制されます。
作成される配列の dim 属性は、各次元の最大インデックスを与える1以上の長さの整数ベクトルです。
これは、<code>NULL</code>か、その次元の<code>dim</code>で与えられた長さの文字ベクトルです。  リストには名前を付けることができ、リスト名は次元の名前として使用されます。  リストが次元数より短い場合は、<code>NULL</code>で必要な長さまで拡張されます。
<span style="font-family：font-family: Courier New, Courier; color：#オブジェクト。
メソッドに渡す、またはメソッドから渡される追加引数。
配列を埋めるデータを与えるベクトル（リストまたは<code>式</code>ベクトルを含む）。  アトミックでないクラス化されたオブジェクトは、<code>as.vector</code>で強制されます。
作成される配列の dim 属性は、各次元の最大インデックスを与える1以上の長さの整数ベクトルです。
これは、<code>NULL</code>か、その次元の<code>dim</code>で与えられた長さの文字ベクトルです。  リストには名前を付けることができ、リスト名は次元の名前として使用されます。  リストが次元数より短い場合は、<code>NULL</code>で必要な長さまで拡張されます。
<span style="font-family：font-family: Courier New, Courier; color：#オブジェクト。
メソッドに渡す、またはメソッドから渡される追加引数。
呼び出される関数を指定する、空でない文字列。
呼び出しの一部となる引数。
任意の<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
Double値はintegerに強制されます:1以外の長さの引数を与えるとエラーになります。
ダブル値は integer に強制されます。
他のメソッドに渡される、または他のメソッドから渡されるさらなる引数。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式。
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
追加の引数。
変換されるオブジェクト。
<code>文字列。  指定がない場合、最初の<code>NA</code>でない要素に対して<code>tryFormats</code>を1つずつ試し、どれもうまくいかなかった場合はエラーを出す。  そうでなければ、<code>strptime()</code>によって処理されます。
<code>format</code> が指定されていない場合に試行する <code>format</code> 文字列の <code>character</code> ベクタ。
<code>logical</code> は、フォーマット推測が成功しなかった場合に、(エラーを通知する代わりに) <code>NA</code> を返すことを示す。
<code>Date</code>オブジェクト、または<code>as.Date(origin, ...)</code>によってそのようなオブジェクトに強制できるもの。
タイムゾーン名。
<code>as.character</code>や<code>as.Date</code>メソッドのための<code>format</code>を含む、他のメソッドから、または他のメソッドに渡される更なる引数。
double 値は integer に強制されます: 1 以外の長さの引数を与えるとエラーになります。
強制されるかテストされるオブジェクト。
他のメソッドに渡される、または他のメソッドから渡されるさらなる引数。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式。
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
詳細は以下を参照。
Double 値は integer に強制されます。1 以外の長さの引数を指定するとエラーになります。
強制されるかテストされるオブジェクト。
他のメソッドに渡される、あるいは他のメソッドから渡されるさらなる引数。
<code>"hexmode"</code>クラスを継承するメソッドのためのオブジェクト。
<code>NULL</code>または、使用する最小フィールド幅を指定する正の整数。
大文字を使うか小文字を使うかを示す論理値（デフォルト）。
他のメソッドに渡される、または他のメソッドから渡されるさらなる引数。
<code>package_version</code>の場合は、<code>R.version</code>で得られるRversionオブジェクト。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理。
<code>"octmode"</code>クラスを継承するメソッド用のオブジェクト。
<code>NULL</code>または、使用される最小フィールド幅を指定する正の整数。
他のメソッドに渡される、または他のメソッドから渡されるさらなる引数。
変換されるオブジェクト：<code>strptime</code>では文字ベクトル、<code>strftime</code>では<code>"POSIXlt"</code>に変換できるオブジェクト。
変換に使用するタイムゾーンを指定する文字列。  システム固有(<code>as.POSIXlt<//code>を参照)ですが、<code>""</code>は現在のタイムゾーンで、<code>"GMT"</code>はUTCです。
文字列。  <code>format</code>メソッドのデフォルトは、<code>"%Y-%m-%d %H:%M:%S"</code> であり、それ以外の場合は<code>"%Y-%m-%d"</code>となります。  もし<code>options("digits.secs")</code>が設定されていれば、指定された桁数までの秒数が表示される。
他のメソッドから、あるいは他のメソッドに渡す引数。
を論理的に指定します。  タイムゾーンの省略形を出力に付加するか。  これは時刻を表示する際に使われ、<code>"%Z"</code>を使うよりも信頼性が高い。
 ファイル名。
 ファイルの文字エンコーディング。
 <code>parse</code>の<code>encoding</code>引数を参照のこと。
 ソース行の文字ベクトル。  その他の<span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトは文字に強制されます。
 ファイルのコピーに使用するタイムスタンプ。
 この <code>srcfilecopy<//code> はファイルシステムファイルから来たものですか？
 <code>srcfile</code> オブジェクト。
 行番号。
 詳細'を参照。
 適切なクラスのオブジェクト。
 <code>srcref</code> のテキストを得るために <code>srcfile</code> を読むかどうか。
 文字範囲の終端を示すオプションの 2 番目の <code>srcref</code> オブジェクト。
 これらは無視されます。
数値。  入力は必要に応じて再利用されます。
数値ベクトル。
数値ベクトル。
数値ベクトル。
数値ベクトル。
おそらくモード<code>complex</code>のオブジェクト。
モード<code>complex</code>のオブジェクト、またはメソッドが定義されているクラスの1つ。
他のメソッドに渡される、あるいは他のメソッドから渡される引数。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
<code>NULL</code> またはデータフレームのローネームを示す文字ベクトル。  欠損値は許されない。
論理値。<code>TRUE</code>の場合、行名の設定と列名の変換（構文名への変換：<code>make.names</code>を参照）はオプションです。  <span style="font-family：color：<code>data.frame(*, check.names = !optional)</code>のテーマ化では、基本的に列名の処理にのみ<code>optional</code>を使用します。
メソッドに渡される、またはメソッドから渡される追加引数。
論理: 文字ベクトルを因数に変換するか。
256(または数値の場合は<code>cut.names</code>)文字以上の列名を短くするか(そして最後の6文字を<code>" ..."</code>で置き換えるか)を示します。
(オプション) 列名の文字ベクトル。
空の列名、すなわち<code>""</code>を(<code>data.frame</code>内で)修正すべきかどうかを示す論理。
論理値; <code>data.frame()</code>呼び出しに渡されます。
つまり、<code>FALSE, NA, TRUE</code> のいずれかであり、(行列<code>x</code>の)行名が無効な場合にどうすべきかを示します。  もし無効であれば、デフォルトの<code>TRUE</code>は、<code>make.names(*, unique=TRUE)</code>を呼び出します。<code>make.names=NA</code>は "自動的な "行名を使用し、<code>FALSE</code>は無効な行名に対するエラーを知らせます。
<span style="font-family：font-family: Courier New, Courier; color：#"><b>R</b></span>オブジェクト。
<code>NULL</code> またはデータフレームの行名を指定する文字ベクトル。  欠損値は許されない。
論理値。<code>TRUE</code>の場合、行名の設定と列名の変換（構文名への変換：<code>make.names</code>を参照）はオプションです。  <span style="font-family：color：<code>data.frame(*, check.names = !optional)</code>のテーマ化では、基本的に列名の処理にのみ<code>optional</code>を使用します。
メソッドに渡される、またはメソッドから渡される追加引数。
論理: 文字ベクトルを因数に変換するか。
256(または数値の場合は<code>cut.names</code>)文字以上の列名を短くするか(そして最後の6文字を<code>" ..."</code>で置き換えるか)を示します。
(オプション) 列名の文字ベクトル。
空の列名、すなわち<code>""</code>を(<code>data.frame</code>内で)修正すべきかどうかを示す論理。
論理値; <code>data.frame()</code>呼び出しに渡されます。
つまり、<code>FALSE, NA, TRUE</code> のいずれかであり、(行列<code>x</code>の)行名が無効な場合にどうすべきかを示します。  もし無効であれば、デフォルトの<code>TRUE</code>は、<code>make.names(*, unique=TRUE)</code>を呼び出します。<code>make.names=NA</code>は "自動的な "行名を使用し、<code>FALSE</code>は無効な行名に対するエラーを知らせます。
<span style="font-family：font-family: Courier New, Courier; color：#"><b>R</b></span>オブジェクト。
<code>NULL</code> またはデータフレームの行名を指定する文字ベクトル。  欠損値は許されない。
論理値。<code>TRUE</code>の場合、行名の設定と列名の変換（構文名への変換：<code>make.names</code>を参照）はオプションです。  <span style="font-family：color：<code>data.frame(*, check.names = !optional)</code>のテーマ化では、基本的に列名の処理にのみ<code>optional</code>を使用します。
メソッドに渡される、またはメソッドから渡される追加引数。
論理: 文字ベクトルを因数に変換するか。
256(または数値の場合は<code>cut.names</code>)文字以上の列名を短くするか(そして最後の6文字を<code>" ..."</code>で置き換えるか)を示します。
(オプション) 列名の文字ベクトル。
空の列名、すなわち<code>""</code>を(<code>data.frame</code>内で)修正すべきかどうかを示す論理。
論理値; <code>data.frame()</code>呼び出しに渡されます。
つまり、<code>FALSE, NA, TRUE</code> のいずれかであり、(行列<code>x</code>の)行名が無効な場合にどうすべきかを示します。  もし無効であれば、デフォルトの<code>TRUE</code>は、<code>make.names(*, unique=TRUE)</code>を呼び出します。<code>make.names=NA</code>は "自動的な "行名を使用し、<code>FALSE</code>は無効な行名に対するエラーを知らせます。
<span style="font-family：font-family: Courier New, Courier; color：#"><b>R</b></span>オブジェクト。
<code>NULL</code> またはデータフレームの行名を指定する文字ベクトル。  欠損値は許されない。
論理値。<code>TRUE</code>の場合、行名の設定と列名の変換（構文名への変換：<code>make.names</code>を参照）はオプションです。  <span style="font-family：color：<code>data.frame(*, check.names = !optional)</code>のテーマ化では、基本的に列名の処理にのみ<code>optional</code>を使用します。
メソッドに渡される、またはメソッドから渡される追加引数。
論理: 文字ベクトルを因数に変換するか。
256(または数値の場合は<code>cut.names</code>)文字以上の列名を短くするか(そして最後の6文字を<code>" ..."</code>で置き換えるか)を示します。
(オプション) 列名の文字ベクトル。
空の列名、すなわち<code>""</code>を(<code>data.frame</code>内で)修正すべきかどうかを示す論理。
論理値; <code>data.frame()</code>呼び出しに渡されます。
つまり、<code>FALSE, NA, TRUE</code> のいずれかであり、(行列<code>x</code>の)行名が無効な場合にどうすべきかを示します。  もし無効であれば、デフォルトの<code>TRUE</code>は、<code>make.names(*, unique=TRUE)</code>を呼び出します。<code>make.names=NA</code>は "自動的な "行名を使用し、<code>FALSE</code>は無効な行名に対するエラーを知らせます。
<span style="font-family：font-family: Courier New, Courier; color：#"><b>R</b></span>オブジェクト。
<code>NULL</code> またはデータフレームの行名を指定する文字ベクトル。  欠損値は許されない。
論理値。<code>TRUE</code>の場合、行名の設定と列名の変換（構文名への変換：<code>make.names</code>を参照）はオプションです。  <span style="font-family：color：<code>data.frame(*, check.names = !optional)</code>のテーマ化では、基本的に列名の処理にのみ<code>optional</code>を使用します。
メソッドに渡される、またはメソッドから渡される追加引数。
論理: 文字ベクトルを因数に変換するか。
256(または数値の場合は<code>cut.names</code>)文字以上の列名を短くするか(そして最後の6文字を<code>" ..."</code>で置き換えるか)を示します。
(オプション) 列名の文字ベクトル。
空の列名、すなわち<code>""</code>を(<code>data.frame</code>内で)修正すべきかどうかを示す論理。
論理値; <code>data.frame()</code>呼び出しに渡されます。
つまり、<code>FALSE, NA, TRUE</code> のいずれかであり、(行列<code>x</code>の)行名が無効な場合にどうすべきかを示します。  もし無効であれば、デフォルトの<code>TRUE</code>は、<code>make.names(*, unique=TRUE)</code>を呼び出します。<code>make.names=NA</code>は "自動的な "行名を使用し、<code>FALSE</code>は無効な行名に対するエラーを知らせます。
<span style="font-family：font-family: Courier New, Courier; color：#"><b>R</b></span>オブジェクト。
<code>NULL</code> またはデータフレームの行名を指定する文字ベクトル。  欠損値は許されない。
論理値。<code>TRUE</code>の場合、行名の設定と列名の変換（構文名への変換：<code>make.names</code>を参照）はオプションです。  <span style="font-family：color：<code>data.frame(*, check.names = !optional)</code>のテーマで、基本的に列名の処理にのみ<code>optional</code>を使用します。<code>matrix</code>メソッドの<code>make.names</code>引数も参照してください。
メソッドに渡される、またはメソッドから渡される追加引数。
論理: 文字ベクトルを因数に変換するか。
256(または数値の場合は<code>cut.names</code>)文字以上の列名を短くするか(そして最後の6文字を<code>" ..."</code>で置き換えるか)を示します。
(オプション) 列名の文字ベクトル。
空の列名、すなわち<code>""</code>を(<code>data.frame</code>内で)修正すべきかどうかを示す論理。
論理値; <code>data.frame()</code>呼び出しに渡されます。
つまり、<code>FALSE, NA, TRUE</code> のいずれかであり、(行列<code>x</code>の)行名が無効な場合にどうすべきかを示します。  もし無効であれば、デフォルトの<code>TRUE</code>は、<code>make.names(*, unique=TRUE)</code>を呼び出します。<code>make.names=NA</code>は "自動的な "行名を使用し、<code>FALSE</code>は無効な行名に対するエラーを通知します。
要約または印刷される<code>Date</code>オブジェクト。
計算の有効桁数。
数値または<code>NULL</code>で、印刷されるエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>, <code>getOption("max.print")</code>が使用されます。
他のメソッドから、または他のメソッドに渡される更なる引数。
任意の<span style="font-family：courier new, Courier; color：<b>R</b></span>オブジェクト。
<code>NULL</code> またはデータフレームのローネームを指定する文字ベクトル。  欠損値は許されない。
論理値。<code>TRUE</code>の場合、行名の設定と列名の変換（構文名への変換：<code>make.names</code>を参照）はオプションです。  <span style="font-family：color：<code>data.frame(*, check.names = !optional)</code>のテーマで、基本的に列名の処理にのみ<code>optional</code>を使用します。<code>matrix</code>メソッドの<code>make.names</code>引数も参照してください。
メソッドに渡される、またはメソッドから渡される追加引数。
論理: 文字ベクトルを因数に変換するか。
256(または数値の場合は<code>cut.names</code>)文字以上の列名を短くするか(そして最後の6文字を<code>" ..."</code>で置き換えるか)を示します。
(オプション) 列名の文字ベクトル。
空の列名、すなわち<code>""</code>を(<code>data.frame</code>内で)修正すべきかどうかを示す論理。
論理値; <code>data.frame()</code>呼び出しに渡されます。
つまり、<code>FALSE, NA, TRUE</code> のいずれかであり、(行列<code>x</code>の)行名が無効な場合にどうすべきかを示します。  もし無効であれば、デフォルトの<code>TRUE</code>は、<code>make.names(*, unique=TRUE)</code>を呼び出します。<code>make.names=NA</code>は "自動的な "行名を使用し、<code>FALSE</code>は無効な行名に対するエラーを知らせます。
<span style="font-family：font-family: Courier New, Courier; color：#"><b>R</b></span>オブジェクト。
<code>NULL</code> またはデータフレームの行名を指定する文字ベクトル。  欠損値は許されない。
論理値。<code>TRUE</code>の場合、行名の設定と列名の変換（構文名への変換：<code>make.names</code>を参照）はオプションです。  <span style="font-family：color：<code>data.frame(*, check.names = !optional)</code>のテーマで、基本的に列名の処理にのみ<code>optional</code>を使用します。<code>matrix</code>メソッドの<code>make.names</code>引数も参照してください。
メソッドに渡される、またはメソッドから渡される追加引数。
論理: 文字ベクトルを因数に変換するか。
256(または数値の場合は<code>cut.names</code>)文字以上の列名を短くするか(そして最後の6文字を<code>" ..."</code>で置き換えるか)を示します。
(オプション) 列名の文字ベクトル。
空の列名、すなわち<code>""</code>を(<code>data.frame</code>内で)修正すべきかどうかを示す論理。
論理値; <code>data.frame()</code>呼び出しに渡されます。
つまり、<code>FALSE, NA, TRUE</code> のいずれかであり、(行列<code>x</code>の)行名が無効な場合にどうすべきかを示します。  もし無効であれば、デフォルトの<code>TRUE</code>は、<code>make.names(*, unique=TRUE)</code>を呼び出します。<code>make.names=NA</code>は "自動的な "行名を使用し、<code>FALSE</code>は無効な行名に対するエラーを知らせます。
<span style="font-family：font-family: Courier New, Courier; color：#"><b>R</b></span>オブジェクト。
<code>NULL</code> またはデータフレームの行名を指定する文字ベクトル。  欠損値は許されない。
論理値。<code>TRUE</code>の場合、行名の設定と列名の変換（構文名への変換：<code>make.names</code>を参照）はオプションです。  <span style="font-family：color：<code>data.frame(*, check.names = !optional)</code>のテーマで、基本的に列名の処理にのみ<code>optional</code>を使用します。<code>matrix</code>メソッドの<code>make.names</code>引数も参照してください。
メソッドに渡される、またはメソッドから渡される追加引数。
論理: 文字ベクトルを因数に変換するか。
256(または数値の場合は<code>cut.names</code>)文字以上の列名を短くするか(そして最後の6文字を<code>" ..."</code>で置き換えるか)を示します。
(オプション) 列名の文字ベクトル。
空の列名、すなわち<code>""</code>を(<code>data.frame</code>内で)修正すべきかどうかを示す論理。
論理値; <code>data.frame()</code>呼び出しに渡されます。
つまり、<code>FALSE, NA, TRUE</code> のいずれかであり、(行列<code>x</code>の)行名が無効な場合にどうすべきかを示します。  もし無効であれば、デフォルトの<code>TRUE</code>は、<code>make.names(*, unique=TRUE)</code>を呼び出します。<code>make.names=NA</code>は "自動的な "行名を使用し、<code>FALSE</code>は無効な行名に対するエラーを知らせます。
<span style="font-family：font-family: Courier New, Courier; color：#"><b>R</b></span>オブジェクト。
<code>NULL</code> またはデータフレームの行名を指定する文字ベクトル。  欠損値は許されない。
論理値。<code>TRUE</code>の場合、行名の設定と列名の変換（構文名への変換：<code>make.names</code>を参照）はオプションです。  <span style="font-family：color：<code>data.frame(*, check.names = !optional)</code>のテーマで、基本的に列名の処理にのみ<code>optional</code>を使用します。<code>matrix</code>メソッドの<code>make.names</code>引数も参照してください。
メソッドに渡される、またはメソッドから渡される追加引数。
論理: 文字ベクトルを因数に変換するか。
256(または数値の場合は<code>cut.names</code>)文字以上の列名を短くするか(そして最後の6文字を<code>" ..."</code>で置き換えるか)を示します。
(オプション) 列名の文字ベクトル。
空の列名、すなわち<code>""</code>を(<code>data.frame</code>内で)修正すべきかどうかを示す論理。
論理値; <code>data.frame()</code>呼び出しに渡されます。
つまり、<code>FALSE, NA, TRUE</code> のいずれかであり、(行列<code>x</code>の)行名が無効な場合にどうすべきかを示します。  もし無効であれば、デフォルトの<code>TRUE</code>は、<code>make.names(*, unique=TRUE)</code>を呼び出します。<code>make.names=NA</code>は "自動的な "行名を使用し、<code>FALSE</code>は無効な行名に対するエラーを知らせます。
<span style="font-family：font-family: Courier New, Courier; color：#"><b>R</b></span>オブジェクト。
<code>NULL</code> またはデータフレームの行名を指定する文字ベクトル。  欠損値は許されない。
論理値。<code>TRUE</code>の場合、行名の設定と列名の変換（構文名への変換：<code>make.names</code>を参照）はオプションです。  <span style="font-family：color：<code>data.frame(*, check.names = !optional)</code>のテーマ化では、基本的に列名の処理にのみ<code>optional</code>を使用します。
メソッドに渡される、またはメソッドから渡される追加引数。
論理: 文字ベクトルを因数に変換するか。
256(または数値の場合は<code>cut.names</code>)文字以上の列名を短くするか(そして最後の6文字を<code>" ..."</code>で置き換えるか)を示します。
(オプション) 列名の文字ベクトル。
空の列名、すなわち<code>""</code>を(<code>data.frame</code>内で)修正すべきかどうかを示す論理。
論理値; <code>data.frame()</code>呼び出しに渡されます。
つまり、<code>FALSE, NA, TRUE</code> のいずれかであり、(行列<code>x</code>の)行名が無効な場合にどうすべきかを示します。  もし無効であれば、デフォルトの<code>TRUE</code>は、<code>make.names(*, unique=TRUE)</code>を呼び出します。<code>make.names=NA</code>は "自動的な "行名を使用し、<code>FALSE</code>は無効な行名に対するエラーを知らせます。
<span style="font-family：font-family: Courier New, Courier; color：#"><b>R</b></span>オブジェクト。
<code>NULL</code> またはデータフレームの行名を指定する文字ベクトル。  欠損値は許されない。
論理値。<code>TRUE</code>の場合、行名の設定と列名の変換（構文名への変換：<code>make.names</code>を参照）はオプションです。  <span style="font-family：color：<code>data.frame(*, check.names = !optional)</code>のテーマ化では、基本的に列名の処理にのみ<code>optional</code>を使用します。
メソッドに渡される、またはメソッドから渡される追加引数。
論理: 文字ベクトルを因数に変換するか。
256(または数値の場合は<code>cut.names</code>)文字以上の列名を短くするか(そして最後の6文字を<code>" ..."</code>で置き換えるか)を示します。
(オプション) 列名の文字ベクトル。
空の列名、すなわち<code>""</code>を(<code>data.frame</code>内で)修正すべきかどうかを示す論理。
論理値; <code>data.frame()</code>呼び出しに渡されます。
つまり、<code>FALSE, NA, TRUE</code> のいずれかであり、(行列<code>x</code>の)行名が無効な場合にどうすべきかを示します。  もし無効であれば、デフォルトの<code>TRUE</code>は、<code>make.names(*, unique=TRUE)</code>を呼び出します。<code>make.names=NA</code>は "自動的な "行名を使用し、<code>FALSE</code>は無効な行名に対するエラーを知らせます。
<span style="font-family：font-family: Courier New, Courier; color：#"><b>R</b></span>オブジェクト。
<code>NULL</code> またはデータフレームの行名を指定する文字ベクトル。  欠損値は許されない。
論理値。<code>TRUE</code>の場合、行名の設定と列名の変換（構文名への変換：<code>make.names</code>を参照）はオプションです。  <span style="font-family：color：<code>data.frame(*, check.names = !optional)</code>のテーマ化では、基本的に列名の処理にのみ<code>optional</code>を使用します。
メソッドに渡される、またはメソッドから渡される追加引数。
論理: 文字ベクトルを因数に変換するか。
256(または数値の場合は<code>cut.names</code>)文字以上の列名を短くするか(そして最後の6文字を<code>" ..."</code>で置き換えるか)を示します。
(オプション) 列名の文字ベクトル。
空の列名、すなわち<code>""</code>を(<code>data.frame</code>内で)修正すべきかどうかを示す論理。
論理値; <code>data.frame()</code>呼び出しに渡されます。
つまり、<code>FALSE, NA, TRUE</code> のいずれかであり、(行列<code>x</code>の)行名が無効な場合にどうすべきかを示します。  もし無効であれば、デフォルトの<code>TRUE</code>は、<code>make.names(*, unique=TRUE)</code>を呼び出します。<code>make.names=NA</code>は "自動的な "行名を使用し、<code>FALSE</code>は無効な行名に対するエラーを知らせます。
<span style="font-family：font-family: Courier New, Courier; color：#"><b>R</b></span>オブジェクト。
<code>NULL</code> またはデータフレームの行名を指定する文字ベクトル。  欠損値は許されない。
論理値。<code>TRUE</code>の場合、行名の設定と列名の変換（構文名への変換：<code>make.names</code>を参照）はオプションです。  <span style="font-family：color：<code>data.frame(*, check.names = !optional)</code>のテーマ化では、基本的に列名の処理にのみ<code>optional</code>を使用します。
メソッドに渡される、またはメソッドから渡される追加引数。
論理: 文字ベクトルを因数に変換するか。
256(または数値の場合は<code>cut.names</code>)文字以上の列名を短くするか(そして最後の6文字を<code>" ..."</code>で置き換えるか)を示します。
(オプション) 列名の文字ベクトル。
空の列名、すなわち<code>""</code>を(<code>data.frame</code>内で)修正すべきかどうかを示す論理。
論理値; <code>data.frame()</code>呼び出しに渡されます。
つまり、<code>FALSE, NA, TRUE</code> のいずれかであり、(行列<code>x</code>の)行名が無効な場合にどうすべきかを示します。  もし無効であれば、デフォルトの<code>TRUE</code>は、<code>make.names(*, unique=TRUE)</code>を呼び出します。<code>make.names=NA</code>は "自動的な "行名を使用し、<code>FALSE</code>は無効な行名に対するエラーを知らせます。
<span style="font-family：font-family: Courier New, Courier; color：#"><b>R</b></span>オブジェクト。
<code>NULL</code> またはデータフレームの行名を指定する文字ベクトル。  欠損値は許されない。
論理値。<code>TRUE</code>の場合、行名の設定と列名の変換（構文名への変換：<code>make.names</code>を参照）はオプションです。  <span style="font-family：color：<code>data.frame(*, check.names = !optional)</code>のテーマ化では、基本的に列名の処理にのみ<code>optional</code>を使用します。
メソッドに渡される、またはメソッドから渡される追加引数。
論理: 文字ベクトルを因数に変換するか。
256(または数値の場合は<code>cut.names</code>)文字以上の列名を短くするか(そして最後の6文字を<code>" ..."</code>で置き換えるか)を示します。
(オプション) 列名の文字ベクトル。
空の列名、すなわち、<code>""</code>を(<code>data.frame</code>内で)修正すべきかどうかを示す論理。
論理値; <code>data.frame()</code>呼び出しに渡されます。
つまり、<code>FALSE, NA, TRUE</code> のいずれかであり、(行列<code>x</code>の)行名が無効な場合に何が起こるかを示します。  もし無効であれば、デフォルトの<code>TRUE</code>は、<code>make.names(*, unique=TRUE)</code>を呼び出します。<code>make.names=NA</code>は "自動的な "行名を使用し、<code>FALSE</code>は無効な行名に対するエラーを知らせます。
<span style="font-family：font-family: Courier New, Courier; color：#"><b>R</b></span>オブジェクト。
<code>NULL</code> またはデータフレームの行名を指定する文字ベクトル。  欠損値は許されない。
論理値。<code>TRUE</code>の場合、行名の設定と列名の変換（構文名への変換：<code>make.names</code>を参照）はオプションです。  <span style="font-family：color：<code>data.frame(*, check.names = !optional)</code>のテーマ化では、基本的に列名の処理にのみ<code>optional</code>を使用します。
メソッドに渡される、またはメソッドから渡される追加引数。
論理: 文字ベクトルを因数に変換するか。
256(または数値の場合は<code>cut.names</code>)文字以上の列名を短くする(そして最後の6文字を<code>" ..."</code>に置き換える)かどうかを示します。
(オプション) 列名の文字ベクトル。
空の列名、すなわち、<code>""</code>を(<code>data.frame</code>内で)修正すべきかどうかを示す論理。
論理値; <code>data.frame()</code>呼び出しに渡されます。
つまり、<code>FALSE, NA, TRUE</code> のいずれかであり、(行列<code>x</code>の)行名が無効な場合に何が起こるかを示します。  もし無効であれば、デフォルトの<code>TRUE</code>は、<code>make.names(*, unique=TRUE)</code>を呼び出します。<code>make.names=NA</code>は "自動 "行名を使用し、<code>FALSE</code>は無効な行名に対するエラーを通知します。
<code>package_version</code>の場合は、<code>R.version</code>で得られるRversionオブジェクト。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理。
任意の<span style="font-family：font-family: Courier New, Courier; color：</b>R</b></span>オブジェクト。
<code>NULL</code> またはデータフレームのローネームを指定する文字ベクトル。  欠損値は許されない。
論理値。<code>TRUE</code>の場合、行名の設定と列名の変換（構文名への変換：<code>make.names</code>を参照）はオプションです。  <span style="font-family：color：<code>data.frame(*, check.names = !optional)</code>のテーマ化では、基本的に列名の処理にのみ<code>optional</code>を使用します。
メソッドに渡される、またはメソッドから渡される追加引数。
論理: 文字ベクトルを因数に変換するか。
256(または数値の場合は<code>cut.names</code>)文字以上の列名を短くする(そして最後の6文字を<code>" ..."</code>に置き換える)かどうかを示します。
(オプション) 列名の文字ベクトル。
空の列名、すなわち、<code>""</code>を(<code>data.frame</code>内で)修正すべきかどうかを示す論理。
論理値; <code>data.frame()</code>呼び出しに渡されます。
つまり、<code>FALSE, NA, TRUE</code> のいずれかであり、(行列<code>x</code>の)行名が無効な場合に何が起こるかを示します。  もし無効であれば、デフォルトの<code>TRUE</code>は、<code>make.names(*, unique=TRUE)</code>を呼び出します。<code>make.names=NA</code>は "自動的な "行名を使用し、<code>FALSE</code>は無効な行名に対するエラーを通知します。
date-timeクラスの1つから、出力または要約されるオブジェクトを指定します。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>で変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
date-timeクラスの1つから、印刷または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>で変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
<span style="font-family：クーリエ・ニュー、クーリエ; color：<b>R</b></span> オブジェクト。
<code>NULL</code> またはデータフレームのローネームを指定する文字ベクトル。  欠損値は許されない。
論理値。<code>TRUE</code>の場合、行名の設定と列名の変換（構文名への変換：<code>make.names</code>を参照）はオプションです。  <span style="font-family：color：<code>data.frame(*, check.names = !optional)</code>のテーマ化では、基本的に列名の処理にのみ<code>optional</code>を使用します。
メソッドに渡される、またはメソッドから渡される追加引数。
論理: 文字ベクトルを因数に変換するか。
256(または数値の場合は<code>cut.names</code>)文字以上の列名を短くする(そして最後の6文字を<code>" ..."</code>に置き換える)かどうかを示します。
(オプション) 列名の文字ベクトル。
空の列名、すなわち、<code>""</code>を(<code>data.frame</code>内で)修正すべきかどうかを示す論理。
論理; <code>data.frame()</code>呼び出しに渡されます。
つまり、<code>FALSE, NA, TRUE</code> のいずれかであり、(行列<code>x</code>の)行名が無効な場合にどうすべきかを示します。  もし無効であれば、デフォルトの<code>TRUE</code>は、<code>make.names(*, unique=TRUE)</code>を呼び出します。<code>make.names=NA</code>は、"自動的な "行名を使用し、<code>FALSE</code>は、無効な行名に対するエラーを通知します。
要素(文字列を含む)として解釈できる1つ以上のオブジェクト、または、そのように解釈できる要素を持つリスト(またはデータフレーム)。  (<code>as.table</code>では、特定のメソッドに渡される引数、 <code>as.data.frame</code>では、未使用)
<code>...</code>内の全ての要素について削除する水準を指定する。  itが<code>NA</code>を含まず、<code>useNA</code>が指定されていない場合、<code>useNA = "ifany"</code>を意味する。  非要素引数に対する解釈は'Details'を参照のこと。
<code>NA</code> の値をテーブルに含めるかどうか。  省略可能。
結果の次元に与える名前 (<em>dimnames names</em>) を指定します。
デフォルトの<code>dnn</code>がどのように構成されるかを制御します。  詳細'を参照してください。
任意の<span style="font-family：courier new, Courier; color：</span>オブジェクト、または<code>as.data.frame</code>メソッド用のクラス<code>"table"</code>を継承したオブジェクトです。<code>as.data.frame.table(x,*)</code>は、<code>array</code>を "reshaping "するために、テーブルでない<code>x</code>に対して明示的に呼び出されることに注意して下さい。
データフレームの行名を指定する文字ベクトル。
テーブルエントリの列に使用される名前、通常はカウント。
論理: 分類因子は因子(デフォルト)として返すべきか、文字ベクトルとして返すべきか。
<code>provideDimnames</code>に渡されます。
任意の<span style="font-family：color：</b>R</b></span>オブジェクト。
<code>NULL</code> またはデータフレームのローネームを指定する文字ベクトル。  欠損値は許されない。
論理値。<code>TRUE</code>の場合、行名の設定と列名の変換（構文名への変換：<code>make.names</code>を参照）はオプションです。  <span style="font-family：color：<code>data.frame(*, check.names = !optional)</code>のテーマ化では、基本的に列名の処理にのみ<code>optional</code>を使用します。
メソッドに渡される、またはメソッドから渡される追加引数。
論理: 文字ベクトルを因数に変換するか。
256(または数値の場合は<code>cut.names</code>)文字以上の列名を短くするか(そして最後の6文字を<code>" ..."</code>で置き換えるか)を示します。
(オプション) 列名の文字ベクトル。
空の列名、すなわち<code>""</code>を(<code>data.frame</code>内で)修正すべきかどうかを示す論理。
論理; <code>data.frame()</code>呼び出しに渡されます。
つまり、<code>FALSE, NA, TRUE</code> のいずれかであり、(行列<code>x</code>の)行名が無効な場合にどうすべきかを示します。  もし無効であれば、デフォルトの<code>TRUE</code>は、<code>make.names(*, unique=TRUE)</code>を呼び出します。<code>make.names=NA</code>は "自動的な "行名を使用し、<code>FALSE</code>は無効な行名に対するエラーを知らせます。
<span style="font-family：font-family: Courier New, Courier; color：#"><b>R</b></span>オブジェクト。
<code>NULL</code> またはデータフレームの行名を指定する文字ベクトル。  欠損値は許されない。
を論理的に指定します。<code>TRUE</code>の場合、行名の設定と列名の変換（構文名への変換：<code>make.names</code>を参照）はオプションです。  <span style="font-family：color：<code>data.frame(*, check.names = !optional)</code>のテーマ化では、基本的に列名の処理にのみ<code>optional</code>を使用します。
メソッドに渡される、またはメソッドから渡される追加引数。
論理: 文字ベクトルを因数に変換するか。
256(または数値の場合は<code>cut.names</code>)文字以上の列名を短くする(そして最後の6文字を<code>" ..."</code>に置き換える)かどうかを示します。
(オプション) 列名の文字ベクトル。
空の列名、すなわち、<code>""</code>を(<code>data.frame</code>内で)修正すべきかどうかを示す論理。
論理; <code>data.frame()</code>呼び出しに渡されます。
つまり、<code>FALSE, NA, TRUE</code> のいずれかであり、(行列<code>x</code>の)行名が無効な場合に何が起こるかを示します。  もし無効であれば、デフォルトの<code>TRUE</code>は、<code>make.names(*, unique=TRUE)</code>を呼び出します。<code>make.names=NA</code>は "自動 "行名を使用し、<code>FALSE</code>は無効な行名に対するエラーを通知します。
変換されるオブジェクト。
<code>文字列。  指定されていない場合、最初の<code>NA</code>以外の要素で<code>tryFormats</code>を1つずつ試し、どれもうまくいかなかった場合はエラーを出します。  そうでなければ、<code>strptime()</code>で処理されます。
<code>format</code> が指定されていない場合に試行する <code>format</code> 文字列の <code>character</code> ベクタ。
<code>logical</code> は、フォーマット推測が成功しなかった場合に、(エラーを通知する代わりに) <code>NA</code> を返すことを示す。
<code>Date</code>オブジェクト、または<code>as.Date(origin, ...)</code>によってそのようなオブジェクトに強制できるもの。
タイムゾーン名。
<code>as.character</code>や<code>as.Date</code>メソッドの<code>format</code>を含む、他のメソッドから渡される引数。
変換されるオブジェクト。
<code>文字列。  指定されていない場合、最初の<code>NA</code>以外の要素で<code>tryFormats</code>を1つずつ試し、どれもうまくいかなかった場合はエラーを出します。  そうでなければ、<code>strptime()</code>で処理されます。
<code>format</code> が指定されていない場合に試行する <code>format</code> 文字列の <code>character</code> ベクタ。
<code>logical</code> は、フォーマット推測が成功しなかった場合に、(エラーを通知する代わりに) <code>NA</code> を返すことを示す。
<code>Date</code>オブジェクト、または<code>as.Date(origin, ...)</code>によってそのようなオブジェクトに強制できるもの。
タイムゾーン名。
<code>as.character</code>や<code>as.Date</code>メソッドの<code>format</code>を含む、他のメソッドから渡される引数。
変換されるオブジェクト。
<code>文字列。  指定されていない場合、最初の<code>NA</code>以外の要素で<code>tryFormats</code>を1つずつ試し、どれもうまくいかなかった場合はエラーを出します。  そうでなければ、<code>strptime()</code>で処理されます。
<code>format</code> が指定されていない場合に試行する <code>format</code> 文字列の <code>character</code> ベクタ。
<code>logical</code> は、フォーマット推測が成功しなかった場合に、(エラーを通知する代わりに) <code>NA</code> を返すことを示す。
<code>Date</code>オブジェクト、または<code>as.Date(origin, ...)</code>によってそのようなオブジェクトに強制できるもの。
タイムゾーン名。
<code>as.character</code>や<code>as.Date</code>メソッドの<code>format</code>を含む、他のメソッドから渡される引数。
変換されるオブジェクト。
<code>文字列。  指定されていない場合、最初の<code>NA</code>以外の要素で<code>tryFormats</code>を1つずつ試し、どれもうまくいかなかった場合はエラーを出します。  そうでなければ、<code>strptime()</code>によって処理されます。
<code>format</code> が指定されていない場合に試行する <code>format</code> 文字列の <code>character</code> ベクタ。
<code>logical</code> は、フォーマット推測が成功しなかった場合に、(エラーを通知する代わりに) <code>NA</code> を返すことを示す。
<code>Date</code>オブジェクト、または<code>as.Date(origin, ...)</code>によってそのようなオブジェクトに強制できるもの。
タイムゾーン名。
<code>as.character</code>や<code>as.Date</code>メソッドの<code>format</code>を含む、他のメソッドから渡される引数。
変換されるオブジェクト。
<code>文字列。  指定されていない場合、最初の<code>NA</code>以外の要素で<code>tryFormats</code>を1つずつ試し、どれもうまくいかなかった場合はエラーを出します。  そうでなければ、<code>strptime()</code>によって処理されます。
<code>format</code> が指定されていない場合に試行する <code>format</code> 文字列の <code>character</code> ベクタ。
<code>logical</code> は、フォーマット推測が成功しなかった場合に、(エラーを通知する代わりに) <code>NA</code> を返すことを示す。
<code>Date</code>オブジェクト、または<code>as.Date(origin, ...)</code>によってそのようなオブジェクトに強制できるもの。
タイムゾーン名。
<code>as.character</code>や<code>as.Date</code>メソッドの<code>format</code>を含む、他のメソッドから渡される引数。
変換されるオブジェクト。
<code>文字列。  指定されていない場合、最初の<code>NA</code>以外の要素で<code>tryFormats</code>を1つずつ試し、どれもうまくいかなかった場合はエラーを出します。  そうでなければ、<code>strptime()</code>によって処理されます。
<code>format</code> が指定されていない場合に試行する <code>format</code> 文字列の <code>character</code> ベクタ。
<code>logical</code> は、フォーマット推測が成功しなかった場合に、(エラーを通知する代わりに) <code>NA</code> を返すことを示す。
<code>Date</code>オブジェクト、または<code>as.Date(origin, ...)</code>によってそのようなオブジェクトに強制できるもの。
タイムゾーン名。
<code>as.character</code>や<code>as.Date</code>メソッドの<code>format</code>を含む、他のメソッドから渡される引数。
変換されるオブジェクト。
<code>文字列。  指定されていない場合、最初の<code>NA</code>以外の要素で<code>tryFormats</code>を1つずつ試し、どれもうまくいかなかった場合はエラーを出します。  そうでなければ、<code>strptime()</code>によって処理されます。
<code>format</code> が指定されていない場合に試行する <code>format</code> 文字列の <code>character</code> ベクタ。
<code>logical</code> は、フォーマット推測が成功しなかった場合に、(エラーを通知する代わりに) <code>NA</code> を返すことを示す。
<code>Date</code>オブジェクト、または<code>as.Date(origin, ...)</code>によってそのようなオブジェクトに強制できるもの。
タイムゾーン名。
<code>as.character</code>や<code>as.Date</code>メソッドの<code>format</code>を含む、他のメソッドから渡される引数。
date-time または date オブジェクト。
主に<code>"POSIXlt"</code>オブジェクトのために、変換に使用されるオプションのタイムゾーン指定。
文字列。  変換結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数。
Double値はintegerに強制されます:1以外の長さの引数を与えるとエラーになります。
強制またはテストされるオブジェクト。
他のメソッドに渡される、あるいは他のメソッドから渡される引数。
date-time または date オブジェクト。
主に<code>"POSIXlt"</code>オブジェクトのために、変換に使用されるオプションのタイムゾーン指定。
文字列。  変換結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数、または他のメソッドから渡される引数。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 変換するオブジェクト。
<em>必要であれば</em>、変換に使用するタイムゾーン指定。  システム固有(タイムゾーンを参照)ですが、<code>""</code>は現在のタイムゾーンで、<code>"GMT"</code>はUTC(協定世界時)です。  無効な値はほとんどの場合UTCとして扱われ、プラットフォームによっては警告が表示されます。
他のメソッドに渡す引数。
<code>strptime</code>で使用される日付-時刻フォーマットを与える文字列。
<code>format</code> が指定されなかった場合に試す <code>format</code> 文字列の <code>character</code> ベクトル。
<code>logical</code> は、フォーマット推測が成功しなかった場合に、(エラーを通知する代わりに) <code>NA</code> を返すことを示す。
日付時刻オブジェクト、または<code>as.POSIXct(tz = "GMT")</code>によってそのようなオブジェクトに強制できるもの。
<span style="font-family：をそのようなオブジェクトに強制することができます：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトに変換します。  すでにenvironmentであれば、それを返します。  それが正の数であれば、検索リストのその位置に対応する環境を返します。それが<code>-1</code>の場合は、その環境から呼び出されます。  文字列の場合は、その文字列を検索リストの名前にマッチさせる。

リストであれば、<code>list2env(x, parent = emptyenv())</code>と同等のものが返される。

もし<code>is.object(x)</code>が真で、<code>as.environment</code>メソッドが見つかる<code>class</code>があれば、それが使われる。
<code>式</code>を使用します：<span style="font-family：font-family: Courier New, Courier; color：<br><code>as.expression</code>：メソッドに渡される引数。
任意の<span style="font-family：<span style="font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
<code>式</code>：<span style="font-family：color：<br><code>as.expression</code>：メソッドに渡される引数。
任意の<span style="font-family：<span style="font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
データのベクトルで、通常は少数の異なる値を取ります。
(文字列として)<code>x</code</code>が取ったかもしれないユニークな値のオプションのベクトル。  デフォルトは、<code>as.character(x)</code>が取った値のユニークな集合で、<em><code>x<//code>の昇順にソートされています。  この集合は、<code>sort(unique(x))</code>より小さく指定できることに注意。
<em>either</em>レベルのラベルのオプションの文字ベクトル(<code>exclude</code>内のものを取り除いた後、<code>levels</code>と同じ順序で)、<em>または</em>長さ 1の文字列。 <code>labels</code>内の重複した値は、<code>x</code>の異なる値を同じ因子レベルにマップするために使用することができます。
レベルの集合を形成するときに除外される値のベクトル。  これは、<code>x</code>と同じレベルセットを持つ因子であってもよいし、<code>文字</code>であるべきである。
論理フラグで、レベルが(与えられた順序で)並べ替えられたとみなされるべきかどうかを決定する。
詳細'を参照のこと。
(<code>ordered(.)</code>内): <code>ordered</code>自身を除いた上記のいずれか。
もし<code>any(is.na(x))</code>が使われるなら、<code>na<//code>レベルを追加する。
変換するオブジェクト、デフォルト・メソッドのリスト。
追加引数。
関数が定義されるべき環境
変換するオブジェクト、デフォルトメソッドのリスト。
追加引数。
関数が定義されるべき環境
クラス<code>"hexmode"</code>を継承するメソッドのためのオブジェクト。
<code>NULL</code>または、使用する最小フィールド幅を指定する正の整数。
大文字を使うか小文字を使うかを示す論理値（デフォルト）。
他のメソッドに渡される、または他のメソッドから渡されるさらなる引数。
Double 値は integer に強制されます。1 以外の長さの引数を指定するとエラーになります。
強制またはテストされるオブジェクト。
他のメソッドに渡される、あるいは他のメソッドから渡される引数。
オブジェクト。
強制またはテストされるオブジェクト。
すべての値をコピーするか、(デフォルトでは)名前がドットで始まらないものだけをコピーするかを示す論理。
結果のリストの<code>names</code>をソートするかどうかを示す論理。  これは多少コストがかかるが、環境の比較には有用であることに注意。
オブジェクト。
強制またはテストされるオブジェクト。
すべての値をコピーするか、(デフォルトでは)名前がドットで始まらないものだけをコピーするかを示す論理。
結果のリストの<code>names</code>をソートするかどうかを示す論理。  これは多少コストがかかるが、環境の比較には有用であることに注意。
要約または印刷される <code>Date</code> オブジェクト。
計算の有効桁数。
数値または<code>NULL</code>で、表示するエントリの最大数を指定する。  デフォルトでは、<code>NULL</code>, <code>getOption("max.print")</code>が使用されます。
他のメソッドから、あるいは他のメソッドに渡される更なる引数。
オブジェクト。
強制またはテストされるオブジェクト。
すべての値をコピーするか、(デフォルトでは)名前がドットで始まらないものだけをコピーするかを示す論理。
結果のリストの<code>names</code>をソートするかどうかを示す論理。  これは多少コストがかかるが、環境の比較には有用であることに注意。
date-timeまたはdateオブジェクト。
主に<code>"POSIXlt"</code>オブジェクトのために変換に使用されるオプションのタイムゾーン指定。
文字列。  結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数。
オブジェクト。
強制またはテストされるオブジェクト。
すべての値をコピーするか、(デフォルトでは)名前がドットで始まらないものだけをコピーするかを示す論理。
結果のリストの<code>names</code>をソートするかどうかを示す論理。  これは多少コストがかかるが、環境の比較には有用であることに注意。
オブジェクト。
強制またはテストされるオブジェクト。
すべての値をコピーするか、(デフォルトでは)名前がドットで始まらないものだけをコピーするかを示す論理。
結果のリストの<code>names</code>をソートするかどうかを示す論理。  これは多少コストがかかるが、環境の比較には有用であることに注意。
オブジェクト。
強制またはテストされるオブジェクト。
すべての値をコピーするか、(デフォルトでは)名前がドットで始まらないものだけをコピーするかを示す論理。
結果のリストの<code>names</code>をソートするかどうかを示す論理。  これは多少コストがかかるが、環境の比較には有用であることに注意。
<code>package_version</code>の場合は、代わりに<code>R.version</code>で得られるRversionオブジェクト。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理。
date-timeクラスの1つから出力または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
date-timeクラスの1つから、印刷または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
Double 値は integer に強制されます: 1 以外の長さの引数を与えるとエラーになります。
強制されるかテストされるオブジェクト。
他のメソッドに渡される、あるいは他のメソッドから渡されるさらなる引数。
Double 値は integer に強制されます: 1 以外の長さの引数を与えるとエラーになります。
強制またはテストされるオブジェクト。
他のメソッドに渡される、あるいは他のメソッドから渡されるさらなる引数。
オプションのデータベクトル（リストまたは<code>式</code>ベクトルを含む）。  非アトミッククラスの<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New; color: #666666;"><b>R</b></span> オブジェクトは、<code>as.vector</code>によって強制され、すべての属性は破棄されます。
希望の行数。
希望する列数。
論理的です。もし <code>FALSE</code> (デフォルト) ならば行列は列で埋められ、そうでなければ行列は行で埋められます。
行列の <code>dimnames</code> 属性は、<code>NULL</code> または長さ 2 の <code>list</code> で、それぞれ行と列の名前を指定します。  空のリストは <code>NULL</code> として扱われ、長さ 1 のリストは行名として扱われます。  リストには名前を付けることができ、リスト名は次元の名前として使用される。
<span style="font-family：font-family: Courier New, Courier; color：font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
メソッドに渡される、またはメソッドから渡される追加引数。
結果の行列が文字（<code>NULL</code>ではなく）<code>rownames</code>を持つべきかどうかを示す論理。  デフォルトの <code>NA</code> は、データフレームが 'automatic' row.names を持つ場合、または 0 行データフレームの場合に <code>NULL</code>rownames を使用します。
オプションのデータベクタ（リストまたは<code>式</code>ベクタを含む）。  アトミックでないクラス<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New; color: #666666;"><b>R</b></span> オブジェクトは、<code>as.vector</code>によって強制され、すべての属性は破棄されます。
希望の行数。
希望する列数。
論理的です。もし <code>FALSE</code> (デフォルト) ならば行列は列で埋められ、そうでなければ行列は行で埋められます。
行列の <code>dimnames</code> 属性は、<code>NULL</code> または長さ 2 の <code>list</code> で、それぞれ行と列の名前を指定します。  空のリストは <code>NULL</code> として扱われ、長さ 1 のリストは行名として扱われます。  リストには名前を付けることができ、リスト名は次元の名前として使用される。
<span style="font-family：font-family: Courier New, Courier; color：font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
メソッドに渡される、またはメソッドから渡される追加引数。
結果の行列が文字（<code>NULL</code>ではなく）<code>rownames</code>を持つべきかどうかを示す論理。  デフォルトの <code>NA</code> は、データフレームが 'automatic' row.names を持つ場合、または 0 行データフレームの場合に <code>NULL</code>rownames を使用します。
オプションのデータベクタ（リストまたは<code>式</code>ベクタを含む）。  アトミックでないクラス<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New; color: #666666;"><b>R</b></span> オブジェクトは、<code>as.vector</code>によって強制され、すべての属性は破棄されます。
希望の行数。
希望する列数。
論理的です。もし <code>FALSE</code> (デフォルト) ならば行列は列で埋められ、そうでなければ行列は行で埋められます。
行列の <code>dimnames</code> 属性は、<code>NULL</code> または長さ 2 の <code>list</code> で、それぞれ行と列の名前を指定します。  空のリストは <code>NULL</code> として扱われ、長さ 1 のリストは行名として扱われます。  リストには名前を付けることができ、リスト名は次元の名前として使用される。
<span style="font-family：font-family: Courier New, Courier; color：font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
メソッドに渡される、またはメソッドから渡される追加引数。
結果の行列が文字（<code>NULL</code>ではなく）<code>rownames</code>を持つべきかどうかを示す論理。  デフォルトの <code>NA</code> は、データフレームに 'automatic' row.names がある場合、またはゼロ行データフレームの場合に <code>NULL</code>rownames を使用します。
任意の<span style="font-family：font-family: Courier New, Courier; color：<span style="font: Courier New; color: #666666;"><b>R</b></span> オブジェクト、通常は<code>character</code> 文字列のベクトル。
<code>print()</code>に渡されるオプションの<code>logical</code>は、<code>print.default()</code>で使用され、文字列を右寄せにするかどうかを示します。
クラス<code>"noquote"</code>のオブジェクト。
<code>print</code>のような次のメソッドに渡されるさらなるオプション。
汎用<code>c</code>関数との互換性のため。
date-timeクラスの1つから出力または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
強制またはテストされるオブジェクト。
テストまたは強制されるオブジェクト。
無視される。
テストまたは強制されるオブジェクト。
無視される。
Double 値は integer に強制されます。1 以外の長さの引数を指定するとエラーになります。
強制またはテストされるオブジェクト。
他のメソッドに渡される、あるいは他のメソッドから渡されるさらなる引数。
<code>package_version</code>の場合は、<code>R.version</code>で得られるRversionオブジェクト。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理。
<code>"octmode"</code>クラスを継承するメソッド用のオブジェクト。
<code>NULL</code>または、使用される最小フィールド幅を指定する正の整数。
他のメソッドに渡される、または他のメソッドから渡される引数。
データのベクトルで、通常は少数個の値を取ります。
(文字列として)<code>x</code>が取ったかもしれないユニークな値のオプションのベクトル。  デフォルトは、<code>as.character(x)</code>が取った値のユニークな集合で、<em><code>x<//code>の昇順にソートされています。  この集合は、<code>sort(unique(x))</code>より小さく指定できることに注意。
<em>either</em>レベルのラベルのオプションの文字ベクトル(<code>exclude</code>内のものを取り除いた後、<code>levels</code>と同じ順序で)、<em>または</em>長さ 1の文字列。 <code>labels</code>内の重複した値は、<code>x</code>の異なる値を同じ因子レベルにマップするために使用することができます。
レベルの集合を形成するときに除外される値のベクトル。  これは、<code>x</code>と同じレベルセットを持つ因子であってもよいし、<code>文字</code>であるべきである。
論理フラグで、レベルが(与えられた順序で)並べ替えられたとみなされるべきかどうかを決定する。
詳細'を参照のこと。
(<code>ordered(.)</code>内): <code>ordered</code>自身を除いた上記のいずれか。
もし<code>any(is.na(x))</code>が使われるなら、<code>na<//code>レベルを追加する。
<code>package_version</code> の場合は、代わりに <code>R.version</code> によって得られる Rversion オブジェクトを指定します。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理。
オブジェクトの名前。
強制またはテストされるオブジェクト。
すべての値をコピーするか、(デフォルトでは)名前がドットで始まらないものだけをコピーするかを示す論理。
結果のリストの<code>names</code>をソートするかどうかを示す論理。  これは多少コストがかかるが、環境の比較には有用であることに注意。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 変換するオブジェクト。
変換に使用されるタイムゾーン指定(<em>必要な場合</em>)。  システム固有(タイムゾーンを参照)ですが、<code>""</code>は現在のタイムゾーンで、<code>"GMT"</code>はUTC(協定世界時)です。  無効な値はほとんどの場合UTCとして扱われ、プラットフォームによっては警告が表示されます。
他のメソッドに渡す引数。
<code>strptime</code>で使用される日付-時刻フォーマットを与える文字列。
<code>format</code> が指定されなかった場合に試す <code>format</code> 文字列の <code>character</code> ベクトル。
<code>logical</code> は、フォーマット推測が成功しなかった場合に、(エラーを通知する代わりに) <code>NA</code> を返すことを示す。
日付時刻オブジェクト、または<code>as.POSIXct(tz = "GMT")</code>によってそのようなオブジェクトに強制できるもの。
<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 変換するオブジェクト。
<em>必要な場合</em>、変換に使用するタイムゾーン指定。  システム固有(タイムゾーンを参照)ですが、<code>""</code>は現在のタイムゾーンで、<code>"GMT"</code>はUTC(協定世界時)です。  無効な値はほとんどの場合UTCとして扱われ、プラットフォームによっては警告が表示されます。
他のメソッドに渡す引数。
<code>strptime</code>で使用される日付-時刻フォーマットを与える文字列。
<code>format</code> が指定されなかった場合に試す <code>format</code> 文字列の <code>character</code> ベクトル。
<code>logical</code> は、フォーマット推測が成功しなかった場合に、(エラーを通知する代わりに) <code>NA</code> を返すことを示す。
日付時刻オブジェクト、または<code>as.POSIXct(tz = "GMT")</code>によってそのようなオブジェクトに強制できるもの。
<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 変換するオブジェクト。
<em>必要な場合</em>、変換に使用するタイムゾーン指定。  システム固有(タイムゾーンを参照)ですが、<code>""</code>は現在のタイムゾーンで、<code>"GMT"</code>はUTC(協定世界時)です。  無効な値はほとんどの場合UTCとして扱われ、プラットフォームによっては警告が表示されます。
他のメソッドに渡す引数。
<code>strptime</code>で使用される日付-時刻フォーマットを与える文字列。
<code>format</code> が指定されなかった場合に試す <code>format</code> 文字列の <code>character</code> ベクトル。
<code>logical</code> は、フォーマット推測が成功しなかった場合に、(エラーを通知する代わりに) <code>NA</code> を返すことを示す。
日付時刻オブジェクト、または<code>as.POSIXct(tz = "GMT")</code>によってそのようなオブジェクトに強制できるもの。
<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 変換するオブジェクト。
<em>必要な場合</em>、変換に使用するタイムゾーン指定。  システム固有(タイムゾーンを参照)ですが、<code>""</code>は現在のタイムゾーンで、<code>"GMT"</code>はUTC(協定世界時)です。  無効な値はほとんどの場合UTCとして扱われ、プラットフォームによっては警告が表示されます。
他のメソッドに渡す引数。
<code>strptime</code>で使用される日付-時刻フォーマットを与える文字列。
<code>format</code> が指定されなかった場合に試す <code>format</code> 文字列の <code>character</code> ベクトル。
<code>logical</code> は、フォーマット推測が成功しなかった場合に、(エラーを通知する代わりに) <code>NA</code> を返すことを示す。
日付時刻オブジェクト、または<code>as.POSIXct(tz = "GMT")</code>によってそのようなオブジェクトに強制できるもの。
<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 変換するオブジェクト。
<em>必要な場合</em>、変換に使用するタイムゾーン指定。  システム固有(タイムゾーンを参照)ですが、<code>""</code>は現在のタイムゾーンで、<code>"GMT"</code>はUTC(協定世界時)です。  無効な値はほとんどの場合UTCとして扱われ、プラットフォームによっては警告が表示されます。
他のメソッドに渡す引数。
<code>strptime</code>で使用される日付-時刻フォーマットを与える文字列。
<code>format</code> が指定されなかった場合に試す <code>format</code> 文字列の <code>character</code> ベクトル。
<code>logical</code> は、フォーマット推測が成功しなかった場合に、(エラーを通知する代わりに) <code>NA</code> を返すことを示す。
日付時刻オブジェクト、または<code>as.POSIXct(tz = "GMT")</code>によってそのようなオブジェクトに強制できるもの。
<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 変換するオブジェクト。
<em>必要な場合</em>、変換に使用するタイムゾーン指定。  システム固有(タイムゾーンを参照)ですが、<code>""</code>は現在のタイムゾーンで、<code>"GMT"</code>はUTC(協定世界時)です。  無効な値はほとんどの場合UTCとして扱われ、プラットフォームによっては警告が表示されます。
他のメソッドに渡す引数。
<code>strptime</code>で使用される日付-時刻フォーマットを与える文字列。
<code>format</code> が指定されなかった場合に試す <code>format</code> 文字列の <code>character</code> ベクトル。
<code>logical</code> は、フォーマット推測が成功しなかった場合に、(エラーを通知する代わりに) <code>NA</code> を返すことを示す。
日付時刻オブジェクト、または<code>as.POSIXct(tz = "GMT")</code>によってそのようなオブジェクトに強制できるもの。
<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 変換するオブジェクト。
<em>必要な場合</em>、変換に使用するタイムゾーン指定。  システム固有(タイムゾーンを参照)ですが、<code>""</code>は現在のタイムゾーンで、<code>"GMT"</code>はUTC(協定世界時)です。  無効な値はほとんどの場合UTCとして扱われ、プラットフォームによっては警告が表示されます。
他のメソッドに渡す引数。
<code>strptime</code>で使用される日付-時刻フォーマットを与える文字列。
<code>format</code> が指定されなかった場合に試す <code>format</code> 文字列の <code>character</code> ベクトル。
<code>logical</code> は、フォーマット推測が成功しなかった場合に、(エラーを通知する代わりに) <code>NA</code> を返すことを示す。
日付時刻オブジェクト、または<code>as.POSIXct(tz = "GMT")</code>によってそのようなオブジェクトに強制できるもの。
<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 変換するオブジェクト。
<em>必要な場合</em>、変換に使用するタイムゾーン指定。  システム固有(タイムゾーンを参照)ですが、<code>""</code>は現在のタイムゾーンで、<code>"GMT"</code>はUTC(協定世界時)です。  無効な値はほとんどの場合UTCとして扱われ、プラットフォームによっては警告が表示されます。
他のメソッドに渡す引数。
<code>strptime</code>で使用される日付-時刻フォーマットを与える文字列。
<code>format</code> が指定されなかった場合に試す <code>format</code> 文字列の <code>character</code> ベクトル。
<code>logical</code> は、フォーマット推測が成功しなかった場合に、(エラーを通知する代わりに) <code>NA</code> を返すことを示す。
日付時刻オブジェクト、または<code>as.POSIXct(tz = "GMT")</code>によってそのようなオブジェクトに強制できるもの。
<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 変換するオブジェクト。
<em>必要な場合</em>、変換に使用するタイムゾーン指定。  システム固有(タイムゾーンを参照)ですが、<code>""</code>は現在のタイムゾーンで、<code>"GMT"</code>はUTC(協定世界時)です。  無効な値はほとんどの場合UTCとして扱われ、プラットフォームによっては警告が表示されます。
他のメソッドに渡す引数。
<code>strptime</code>で使用される日付-時刻フォーマットを与える文字列。
<code>format</code> が指定されなかった場合に試す <code>format</code> 文字列の <code>character</code> ベクトル。
<code>logical</code> は、フォーマット推測が成功しなかった場合に、(エラーを通知する代わりに) <code>NA</code> を返すことを示す。
日付時刻オブジェクト、または<code>as.POSIXct(tz = "GMT")</code>によってそのようなオブジェクトに強制できるもの。
<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 変換するオブジェクト。
<em>必要な場合</em>、変換に使用するタイムゾーン指定。  システム固有(タイムゾーンを参照)ですが、<code>""</code>は現在のタイムゾーンで、<code>"GMT"</code>はUTC(協定世界時)です。  無効な値はほとんどの場合UTCとして扱われ、プラットフォームによっては警告が表示されます。
他のメソッドに渡す引数。
<code>strptime</code>で使用される日付-時刻フォーマットを与える文字列。
<code>format</code> が指定されなかった場合に試す <code>format</code> 文字列の <code>character</code> ベクトル。
<code>logical</code> は、フォーマット推測が成功しなかった場合に、(エラーを通知する代わりに) <code>NA</code> を返すことを示す。
日付時刻オブジェクト、または<code>as.POSIXct(tz = "GMT")</code>によってそのようなオブジェクトに強制できるもの。
<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 変換するオブジェクト。
<em>必要な場合</em>、変換に使用するタイムゾーン指定。  システム固有(タイムゾーンを参照)ですが、<code>""</code>は現在のタイムゾーンで、<code>"GMT"</code>はUTC(協定世界時)です。  無効な値はほとんどの場合UTCとして扱われ、プラットフォームによっては警告が表示されます。
他のメソッドに渡す引数。
<code>strptime</code>で使用される日付-時刻フォーマットを与える文字列。
<code>format</code> が指定されなかった場合に試す <code>format</code> 文字列の <code>character</code> ベクトル。
<code>logical</code> は、フォーマット推測が成功しなかった場合に、(エラーを通知する代わりに) <code>NA</code> を返すことを示す。
日付時刻オブジェクト、または<code>as.POSIXct(tz = "GMT")</code>によってそのようなオブジェクトに強制できるもの。
<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 変換するオブジェクト。
<em>必要な場合</em>、変換に使用するタイムゾーン指定。  システム固有(タイムゾーンを参照)ですが、<code>""</code>は現在のタイムゾーンで、<code>"GMT"</code>はUTC(協定世界時)です。  無効な値はほとんどの場合UTCとして扱われ、プラットフォームによっては警告が表示されます。
他のメソッドに渡す引数。
<code>strptime</code>で使用される日付-時刻フォーマットを与える文字列。
<code>format</code> が指定されなかった場合に試す <code>format</code> 文字列の <code>character</code> ベクトル。
<code>logical</code> は、フォーマット推測が成功しなかった場合に、(エラーを通知する代わりに) <code>NA</code> を返すことを示す。
日付時刻オブジェクト、または<code>as.POSIXct(tz = "GMT")</code>によってそのようなオブジェクトに強制できるもの。
QR分解を行う数値行列または複素行列。  論理行列は数値に強制されます。
<code>x</code> の列における線形従属性を検出するための許容誤差。<code>LAPACK</code>が偽で、<code>x</code>が実数の場合のみ使用されます。
<code>qr</code> によって計算されるタイプの QR 分解。
方程式の右辺のベクトルまたは行列。
QR分解または(<code>qr.solve</code>のみ)矩形行列。
実効ランク。
論理的.  実数 <code>x</code> の場合、真ならば LAPACK を使用し、そうでなければ LINPACK (デフォルト) を使用します。
他のメソッドに渡される、または他のメソッドから渡される引数
希望の長さ。
強制されるオブジェクト。
double 値は integer に強制されます: 1 以外の長さの引数を与えるとエラーになります。
強制されるかテストされるオブジェクト。
他のメソッドに渡される、あるいは他のメソッドから渡されるさらなる引数。
Double 値は integer に強制されます: 1 以外の長さの引数を与えるとエラーになります。
強制またはテストされるオブジェクト。
他のメソッドに渡される、あるいは他のメソッドから渡されるさらなる引数。
強制またはテストされるオブジェクト。
(文字列を含む)因子として解釈できる1つ以上のオブジェクト、またはそのように解釈できる要素を持つリスト(またはデータフレーム)。  (<code>as.table</code>では、特定のメソッドに渡される引数; <code>as.data.frame</code>では、未使用)
<code>...</code>内の全ての要素について削除する水準を指定する。  itが<code>NA</code>を含まず、<code>useNA</code>が指定されていない場合、<code>useNA = "ifany"</code>を意味する。  非要素引数に対する解釈は'Details'を参照のこと。
<code>NA</code> の値をテーブルに含めるかどうか。  省略可能。
結果の次元に与える名前 (<em>dimnames names</em>) を指定します。
デフォルトの<code>dnn</code>がどのように構成されるかを制御します。  詳細'を参照してください。
任意の<span style="font-family：courier new, Courier; color：</span>オブジェクト、または<code>as.data.frame</code>メソッド用のクラス<code>"table"</code>を継承したオブジェクトです。<code>as.data.frame.table(x,*)</code>は、<code>array</code>を "reshaping "するために、テーブルでない<code>x</code>に対して明示的に呼び出されることに注意して下さい。
データフレームの行名を指定する文字ベクトル。
テーブルエントリの列に使用される名前、通常はカウント。
論理: 分類因子は因子(デフォルト)として返すべきか、文字ベクトルとして返すべきか。
<code>provideDimnames</code> に渡されます。
(文字列を含む)因子として解釈できる1つ以上のオブジェクト、またはそのように解釈できる要素を持つリスト(またはデータフレーム)。  (<code>as.table</code>の場合は特定のメソッドに渡される引数; <code>as.data.frame</code>の場合は未使用)
<code>...</code>内の全ての要素について削除する水準を指定する。  <code>NA</code>を含まず、<code>useNA</code>が指定されていない場合、<code>useNA = "ifany"</code>を意味する。  非要素引数に対する解釈は'Details'を参照のこと。
<code>NA</code> の値をテーブルに含めるかどうか。  省略可能。
結果の次元に与える名前 (<em>dimnames names</em>) を指定します。
デフォルトの<code>dnn</code>がどのように構成されるかを制御します。  詳細'を参照してください。
任意の<span style="font-family：courier new, Courier; color：</span>オブジェクト、または<code>as.data.frame</code>メソッド用のクラス<code>"table"</code>を継承したオブジェクトです。<code>as.data.frame.table(x,*)</code>は、<code>array</code>を "reshaping "するために、テーブルでない<code>x</code>に対して明示的に呼び出されることに注意して下さい。
データフレームの行名を指定する文字ベクトル。
テーブルエントリの列に使用される名前、通常はカウント。
論理: 分類因子は因子(デフォルト)として返すべきか、文字ベクトルとして返すべきか。
<code>provideDimnames</code>に渡されます。
アトミックモードを指定する文字列か、<code>"list"</code>か、<code>"expression"</code>か、(<code>vector</code>を除く)<code>"any"</code>か。  現在のところ、<code>is.vector()</code>は<code>mode</code>に対して任意の型(<code>typeof</code>を参照)を許し、modeが<code>"any"</code>でないとき、<code>is.vector(x, mode)</code>は<code>typeof(x) == mode</code>とほぼ同じです。
は、希望する長さを指定する非負の整数です。  長いベクトル、すなわち<code>length &gt; .Machine$integer.max</code>の場合、<code>"double"</code>型でなければなりません。  1以外の長さの引数を与えるとエラーになります。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
アトミックモードまたは<code>"list"</code>または<code>"expression"</code>または(<code>vector</code>を除く)<code>"any"</code>を指定する文字列。  現在のところ、<code>is.vector()</code>は<code>mode</code>に対して任意の型(<code>typeof</code>を参照)を許し、modeが<code>"any"</code>でないとき、<code>is.vector(x, mode)</code>は<code>typeof(x) == mode</code>とほぼ同じです。
は、希望する長さを指定する非負の整数です。  長いベクトル、すなわち<code>length &gt; .Machine$integer.max</code>の場合、<code>"double"</code>型でなければなりません。  1以外の長さの引数を与えるとエラーになります。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
数値ベクトルまたは複素数ベクトル。
数値または複素数ベクトル
文字列または名前空間環境。
論理。
環境。
名前空間環境。
文字ベクトル。
オプションの文字ベクトル。
名前空間環境。
ロードするパッケージ/名前空間を指定する文字列。
<code>generics</code>と並列なパッケージ名のベクトル。
ライブラリを指定する文字ベクトル
論理。
文字。
文字。
環境。
3列の文字行列。
文字。
任意のオブジェクト
文字引数。
メソッド・テーブル名。
symbol: 名前空間の名前。
特に<code>vars</code>がない場合に便利。
行列を含む配列。
例えば、行列の場合、<code>1</code>は行を、<code>2</code>は列を、<code>c(1, 2)</code>は行と列を表します。<code>x</code>がdimnamesという名前を持つ場合、次元名を選択する文字ベクトルを指定することができます。
任意のRオブジェクト。
オプション, 論理: 変換の方向を示す。
オプション, 論理: S3への変換が完了したかどうか。  通常は必要ないが、詳細セクションを参照。
任意の R オブジェクト。
オプション、論理：変換の方向を示す。
オプション、論理：S3への変換が完了したかどうか。  通常は必要ないが、詳細セクションを参照。
文字列として与えられる変数名。  強制は行われず、警告とともに、長さが1より大きい文字ベクトルの最初の要素が使用されます。
<code>x</code>に代入される値。
代入先。  デフォルトでは、現在の環境に代入される。  他の可能性については '詳細' を参照のこと。
使用する<code>環境</code>。  詳細'を参照。
環境を囲むフレームを検査するか。
無視される互換性機能です。
数値ベクトルまたは複素数ベクトル。
数値ベクトルまたは複素数ベクトル。
数値または複素数ベクトル
'データベース'。  これは<code>data.frame</code>や<code>list</code>や<span style="font-family：color：<code>save</code>または<code>NULL</code>で作成されたデータ・ファイルか環境です。  詳細'も参照のこと。
アタッチする<code>search()</code>内の位置を指定する整数。
アタッチするデータベースに使用する名前。<code>package:</code>で始まる名前は<code>library</code>のために予約されています。
を論理的に指定します。  <code>TRUE</code>の場合、<code>.conflicts.OK</code>オブジェクトが含まれていない限り、データベースをアタッチする際に<code>conflictts</code>に関する警告が表示されます。  コンフリクトは関数をマスクする関数、または非関数をマスクする非関数です。
文字列または名前空間オブジェクト。
アタッチする位置を指定する整数。
<code>NULL</code> またはパッケージ内のオブジェクト <code>.Depends</code> に記録される依存関係の文字ベクトル。
ロードするパッケージ/名前空間を指定する文字列。
ライブラリ検索パスを指定する文字ベクトル。
パッケージインストール時以外は無視されます。
パッケージのインストール中以外は無視されます。
trueを指定すると、コードを読み込んだ直後に停止します。
<code>NULL</code> またはバージョン指定 (<code>op</code> と <code>version</code> を含むリスト)。
論理: 進捗メッセージとエラーメッセージを抑制するか。
文字列または'名前', <code>as.symbol</code>を参照。
文字ベクトル; <code>library</code> を参照。
<code>loadNamespace</code> に渡される引数。
アクセスされる属性を持つオブジェクト。
アクセスされる属性を指定する空でない文字列。
論理: <code>which</code> は正確に一致しなければならないか？
オブジェクト、属性の新しい値、または<code>NULL</code>で属性を削除します。
<span style="font-family：font-family: Courier New, Courier; color：font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
他の<span style="font-family：Courier New, Courier; color：<code>target</code>と比較される<span style="font: Courier New Courier;"><b>R</b></span> オブジェクト。
特に次の2つは数値比較のためのものです：
数値 <i>≥</i> 0. <code>許容差</code>より小さい差は報告されません。  デフォルト値は<code>1.5e-8</code>に近い。
<code>NULL</code> または数値 &gt; 0, 通常は長さ 1 または<code>length(target)</code>。  詳細'を参照。
<code>target == current</code> のケースを平均（絶対または相対）差を計算する際にカウントすべきかどうかを示す論理。  デフォルトの<code>FALSE</code>は、<code>target</code>と<code>current</code>が数箇所しか違わないような場合、誤解を招くかもしれません。
2つの引数、<code>err</code>、相対エラー、絶対エラー、拡大縮小エラー、<code>what</code>、エラーの<em>種類</em>を示す文字列からなる<code>function</code>は、例えば、相対エラーと絶対エラーを異なる書式にするために使用されます。
(名前以外の) <code>target</code> と <code>current</code> の <code>attributes</code> が比較されるべきかどうかを示す論理。
<code>list</code> 比較が、整数インデックスの代わりに、(一致する場合) 名前によって異なるコンポーネントを報告すべきかどうかを示す論理。  これは <code>...</code> の後に来るので、完全な名前で指定しなければならないことに注意。
<code>ls</code>に渡される論理は、"hidden "オブジェクトも環境で考慮されるべきかどうかを示します。
<code>environment</code>メソッドに渡されます：<code>logical</code>は、"約束が強制されるべきかどうか"、すなわち、典型的な形式的な関数の引数が比較のために評価されるかどうかを示します。  falseの場合、2つの環境のオブジェクトの<code>names</code>だけが等しいかチェックされます。
2つの<code>nls()</code>フィットを比較する場合など、予期しない場合に<code>check.environment=FALSE</code>を設定する必要があるかもしれません。
<code>target</code> と <code>current</code> の <code>"tzone"</code> 属性を比較すべきかどうかを示す論理。
<code>target</code> と <code>current</code> の <code>names(.)</code> が比較されるべきかどうかを示す論理。
アクセスされる属性を持つオブジェクト。
どの属性にアクセスするかを指定する空でない文字列。
論理: <code>which</code> は正確に一致させるべきか？
オブジェクト、属性の新しい値、または属性を削除する<code>NULL</code>。
任意の<span style="font-family：font-family: Courier New, Courier; color：#"><b>R</b></span>オブジェクト。
属性の適切な名前付き<code>リスト</code>、または<code>NULL</code>。
任意の<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
属性の適切な名前の<code>リスト</code>、または<code>NULL</code>。
オブジェクトの名前を指定する文字列。
オブジェクトを含むパッケージ名を表す文字列。
logical: <code>autoloader</code> による内部使用。
その他の <code>library</code> への引数。
オブジェクトの名前を指定する文字列。
オブジェクトを含むパッケージ名を指定する文字列。
logical: <code>autoloader</code>が内部的に使用する。
その他の <code>library</code> への引数。
解かれるシステムの係数を与える上(または下)三角行列.  対角より下(上)の値は無視されます.
列が方程式の右辺を与える行列.
使用する <code>r</code> の列数と <code>x</code> の行数.
論理; もし <code>TRUE</code> (デフォルト) なら、<code>r</code>の<em>上</em><em>三</em>角部分が使用されます。  そうでない場合は、下側のものが使われる。
論理; もし <code>TRUE</code> なら、<i>r' * y = x</i> for<i>y</i>, すなわち <code>t(r) %*% y == x</code>.
<code>function</code>、<code>formula</code>、または<code>NULL</code>。
関数に関連付ける環境
任意の<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
もし <code>TRUE</code> ならば、環境はハッシュテーブルを使う。
作成された環境のエンクロージャとして使用される環境。
環境
ハッシュ環境の初期サイズを指定する整数。  <code>size</code> が <code>NA</code> またはゼロの場合、内部デフォルト値が使用されます。  <code>hash</code> が <code>FALSE</code> の場合、この引数は無視される。
パス名を含む文字ベクトル。
数値, <i>≥ 0</i>.
数値; 対応するBessel関数の<em>次数</em> (分数や負の場合もあります)。
logical; <code>TRUE</code>の場合, オーバーフロー(<i>I(nu)</i>)またはアンダーフロー(<i>K(nu)</i>)を避けるため, 結果はそれぞれ指数関数的にスケーリングされます.
numeric, <i>≥ 0</i>.
数値; 対応するBessel関数の<em>次数</em> (分数で負かもしれません).
logical; <code>TRUE</code>の場合, オーバーフロー(<i>I(nu)</i>)またはアンダーフロー(<i>K(nu)</i>)を避けるために, 結果はそれぞれ指数関数的にスケーリングされます.
numeric, <i>≥ 0</i>.
数値; 対応するBessel関数の<em>次数</em> (分数で負かもしれません).
logical; <code>TRUE</code>の場合, オーバーフロー(<i>I(nu)</i>)またはアンダーフロー(<i>K(nu)</i>)を避けるために, 結果はそれぞれ指数関数的にスケーリングされます.
numeric, <i>≥ 0</i>.
数値; 対応するBessel関数の<em>次数</em> (分数で負かもしれません).
論理; <code>TRUE</code>の場合, オーバーフロー(<i>I(nu)</i>)またはアンダーフロー(<i>K(nu)</i>)を避けるため, 結果はそれぞれ指数関数的にスケーリングされます.
非負の数値ベクトル.
数値ベクトル。
整数ベクトル
環境変数。
バインディングをロックするかどうかを指定する論理。
名前オブジェクトまたは文字列。
0個または1個の引数をとる関数
環境。
バインディングをロックするかどうかを指定する論理。
名前オブジェクトまたは文字列。
0個または1個の引数をとる関数。
1つ以上の文字ベクトル。
翻訳の「ドメイン」。
非負の整数。
<code>n = 1</code>のときに英語で使われるメッセージ。
<code>n = 0, 2, 3, ...</code> の場合に英語で使われるメッセージ。
ドメイン用に翻訳されたメッセージカタログを探すディレクトリ。
整数ベクトル; 数値ベクトルは整数ベクトルに強制されます。
31までの非負整数ベクトル。
数値ベクトルは整数ベクトルに強制されます。
31までの非負整数ベクトル。
数値ベクトルは整数ベクトルに強制されます。
31までの非負整数ベクトル。
数値ベクトルは整数ベクトルに強制されます。
31までの非負整数ベクトル。
数値ベクトルは整数ベクトルに強制されます。
31までの非負整数ベクトル。
数値ベクトルは整数ベクトルに強制されます。
31までの非負整数ベクトル。
関数オブジェクト、または'詳細'を参照。
関数を定義する環境。
オブジェクト、通常は言語オブジェクト。
関数オブジェクト。
関数を定義する環境。
オブジェクト。通常は言語オブジェクト。
言語オブジェクト。
環境。
<code>TRUE</code> スプライシングが有効な場合。
<code>NA</code>でない長さ1の論理ベクトル。1より大きい長さの条件は、現在、警告とともに受け入れられるが、最初の要素だけが使用される。  環境変数<span class="env">_R_CHECK_LENGTH_1_CONDITION_</span> がtrueに設定されると、代わりにエラーが通知されます。  その他の型は、可能であれば論理型に強制され、クラスは無視される。
変数の構文名。
ベクトル（リストと式を含む）、ペアリスト、<code>NULL</code>に評価される式。  因子値は文字ベクトルに強制される。  <span style="font-family：のように、<span style="font-family: Courier New, Courier; color：<span style="font-family: Courier New; color: #666666;"><b>R</b></span>4.0.0から、これは長いベクトルになります。
形式的な意味での<em>式</em>。  これは単純な式か、いわゆる<em>複合式</em>で、通常は<code>{ expr1 ; expr2 }<//code> の形式です。
ブラウザが起動された時点で取得できるテキスト文字列。
ブラウザが起動されると取得できる条件。
条件 "です。  デフォルトでは、<code>logical</code>に強制された後、falseでない場合は常に、デバッガが呼び出されます。
呼び出されたコンテキストを報告するときに、いくつ前の呼び出しをスキップするか。
スキップするコンテキストの数で、負であってはならない。
スキップするコンテキストの数。
スキップするコンテキストの数。
'internal'関数（<code>.internal</code>で呼び出すことができる）のみを返すかどうかを示す論理。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト、通常はデータフレーム、場合によっては行列。
長さ<code>nrow(data)</code>の因子または因子のリスト。
(通常はデータフレームの)サブセット<code>data</code>に適用される関数。
<code>FUN</code> へのさらなる引数。
論理: <code>tapply</code> を参照。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New; color: #666666;"><b>R</b></span> オブジェクト、通常はデータフレーム、場合によっては行列。
長さ<code>nrow(data)</code>の因子または因子のリスト。
(通常はデータフレームの)サブセット<code>data</code>に適用される関数。
<code>FUN</code> へのさらなる引数。
論理: <code>tapply</code> を参照。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New; color: #666666;"><b>R</b></span> オブジェクト、通常はデータフレーム、場合によっては行列。
長さ<code>nrow(data)</code>の因子または因子のリスト。
(通常はデータフレームの)サブセット<code>data</code>に適用される関数。
<code>FUN</code> へのさらなる引数。
論理: <code>tapply</code> を参照。
文字列。  接続の説明： '詳細'を参照。
文字列。  接続の開き方(最初に開く場合)。  指定可能な値は「モード」のセクションを参照。
論理値。  ブロック」のセクションを参照。
想定するエンコーディングの名前。  エンコーディング」のセクションを参照。
論理値。  trueを指定すると、'raw'インターフェイスが使用され、 通常のファイルではない引数、例えばキャラクタデバイスなどに適している。  これは、テキストモードでの読み込みのためにオープンする際の 圧縮ファイルのチェックを抑制し、'ファイル'がシーク可能でない可能性があることを 保証する。
<code>c("default", "internal", "winet", "libcurl")</code>に部分的にマッチする文字列。
HTTPrequests で使用する HTTP ヘッダの名前付き文字ベクトル。  非 HTTP URL では無視されます。  <code>HTTPUserAgent</code> オプション (<code>options</code> を参照) から得られる <code>User-Agent</code> ヘッダは、自動的に最初のヘッダとして使われます。
0-9 の整数。  書き込み時に適用する圧縮の量を、なしから最大まで指定します。  <code>xzfile</code>の場合は負の値も指定できます: '圧縮'のセクションを参照してください。
数値: この接続で使用するタイムアウト(秒単位)。  OSによっては、非常に大きな値をゼロとして扱うことがあるので注意してください: しかし、POSIX標準では31日までの値をサポートしています。
オプションの文字ベクトル。現在TCPソケットでサポートされているのは<code>"no-delay"</code>のみである。
zip ファイル内のファイル名。
文字列。  ポートのホスト名。
整数。  TCP ポート番号。
論理。  ソケットをクライアントにするかサーバーにするか。
接続をリッスンするサーバソケット。
コネクション。
文字列。  現在は無視される。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
他のメソッドに渡される、または他のメソッドから渡される引数。
連結されるオブジェクト。  すべての <code>NULL</code> エントリは、引数リストの先頭でない限り、メソッドディスパッチ前に削除されます。
論理的です。  <code>recursive = TRUE</code> の場合、関数はリスト(およびペアリスト)を再帰的に下降し、すべての要素をベクトルに結合します。
<code>names</code> が保存されるべきかどうかを示す論理。
要約または印刷される <code>Date</code> オブジェクト。
計算の有効桁数。
数値または<code>NULL</code>で、表示するエントリの最大数を指定する。  デフォルトでは、<code>NULL</code>, <code>getOption("max.print")</code>が使用されます。
他のメソッドから、または他のメソッドに渡される引数。
date-timeまたはdateオブジェクト。
主に<code>"POSIXlt"</code>オブジェクトのために、変換に使用されるオプションのタイムゾーン指定。
文字列。  変換結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数。
データのベクトルで、通常は少数の値を取ります。
(文字列として)<code>x</code>が取ったかもしれないユニークな値のオプションのベクトル。  デフォルトは、<code>as.character(x)</code>が取った値のユニークな集合で、<em><code>x<//code>の昇順にソートされています。  この集合は、<code>sort(unique(x))</code>より小さく指定できることに注意。
<em>either</em>レベルのラベルのオプションの文字ベクトル(<code>exclude</code>内のものを取り除いた後、<code>levels</code>と同じ順序で)、<em>または</em>長さ 1の文字列。 <code>labels</code>内の重複した値は、<code>x</code>の異なる値を同じ因子レベルにマップするために使用することができます。
レベルの集合を形成するときに除外される値のベクトル。  これは、<code>x</code>と同じレベルセットを持つ因子であってもよいし、<code>文字</code>であるべきである。
論理フラグで、レベルが(与えられた順序で)並べ替えられたとみなされるべきかどうかを決定する。
詳細'を参照のこと。
(<code>ordered(.)</code>内): <code>ordered</code>自身を除いた上記のいずれか。
もし<code>any(is.na(x))</code>が使われるなら、<code>na</code>レベルを追加する。
<span style="font-family：クーリエ・ニュー、クーリエ; color：<span style="font: Courier New; color: #666666;"><b>R</b></span> オブジェクト、通常は<code>文字列</code>のベクトル。
<code>print()</code>に渡されるオプションの<code>logical</code>は、<code>print.default()</code>で使用され、文字列を右寄せにするかどうかを示します。
クラス<code>"noquote"</code>のオブジェクト。
<code>print</code>のような次のメソッドに渡されるさらなるオプション。
汎用<code>c</code>関数との互換性のため。
<code>package_version</code>の場合は、<code>R.version</code>で得られるRversionオブジェクト。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理。
date-timeクラスの1つから出力または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
date-timeクラスの1つから、印刷または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
(<code>warnings()</code>の)<code>cat</code>に渡される引数。
<code>warnings()</code>が返す<code>"warnings"</code>オブジェクト。
<code>"warnings"</code>または<code>"summary.warnings"</code>オブジェクト。
もし<code>missing</code>でなければ、<code>x</code>と同じ<code>長さの<code>文字</code>ベクトル。  デフォルトは <code>paste0(seq_len(n), ": ")</code> for<i>n &gt;= 2</i> where <code>n &lt;- length(x)</code>.
<code>cat()</code> は、メッセージが表示される前に出力される文字列である。
呼び出される関数を示す空でない文字列。
呼び出しの一部となる引数。
任意の<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
引数1つの関数、終了手続き。
文字ベクトルまたは<code>NULL</code>で、必要なコンポーネントを指定します。  <code>NULL</code>は、すべてが必要であることを意味する。
<code>logical</code>はスマートなデフォルトで、特にmacOSの場合、X11関連のケイパビリティが完全にチェックされるべきかを示す。falseに設定すると、"No protocol specified "という警告を避けることができ、例えば "X11 "ケイパビリティは<code>NA</code>として返される。
文字ベクトル、または<code>as.character</code>によって文字に強制できるオブジェクト。
翻訳される文字を指定する文字列。  長さが2以上の文字ベクトルが与えられた場合、警告とともに最初の要素が使用されます。
翻訳を指定する文字列。長さが2以上の文字ベクトルが与えられた場合、警告とともに最初の要素が使用される。
論理: 大文字または小文字に変換しますか?
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>オブジェクトを指定します(許可されるオブジェクトのタイプについては「詳細」を参照してください)。
接続、または印刷するファイルを指定する文字列。  <code>""</code> (デフォルト)の場合、<code>cat</code>は、<code>sink</code>によってリダイレクトされない限り、標準出力接続であるコンソールに出力します。<code>"|cmd"</code>の場合、出力は、パイプ接続を開くことによって、'<span class="file">cmd</span>'によって与えられたコマンドにパイプされます。
各要素の後に追加する文字列の文字ベクトル。
論理または(正の)数値で、出力をどのように連続した行に分割するかを制御する。  <code>FALSE</code> (デフォルト)の場合、<span class="samp">" \n"</span> によって明示的に生成された改行のみが出力される。  そうでない場合は、<code>fill</code>が<code>TRUE</code>の場合はオプション<code>width</code>に等しい印字幅で、数値の場合は<code>fill</code>の値で改行されます。  改行は<em>要素間</em>にのみ挿入され、<code>fill</code>より幅の広い文字列は折り返されません。  正でない<code>fill</code>値は警告とともに無視されます。
<code>fill</code> が <code>FALSE</code> の場合は無視されます。
論理。<code>TRUE</code> なら出力は<code>file</code>に追加され、そうでなければ<code>file</code>の内容を上書きする。
(一般化された)ベクトルや行列。  これらは名前付き引数として与えられる。  その他の<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New; color: #666666;"><b>R</b></span> オブジェクトは適宜強制されるか、S4methodsが使われます。  (<code>cbind</code>の<code>"data.frame"</code>メソッドでは、これらは<code>stringsAsFactors</code>のような<code>data.frame</code>へのさらなる引数とすることができます)。
<br><code>deparse.level=0</code>はラベルを作成しません。デフォルトの<br><code>deparse.level=1または2</code>は引数名からラベルを作成します。
(データフレームメソッドのみ:) logical引数からユニークで有効な<code>row.names</code>を構築するかどうかを示します。
logicalは、<code>as.data.frame</code>に渡され、<code>...</code>引数が(<code>data.frame</code>でない)<code>文字</code>を含む場合にのみ効果を持ちます。
データフレームが因子を含む場合、デフォルトの<code>TRUE</code>は、<a href="https://bugs.R-project.org/show_bug.cgi?id=17562">PR#17562</a> および 'Data frame methods' を参照して、因子の<code>NA</code>レベルを確実に保持します。  <span style="font-family：color：<span style="font: Courier New; color: #666666;"><b>R</b></span> 3.6.x までのバージョンでは、<code>factor.exclude = NA</code> は暗黙的にハードコードされています (<span style="font-family：courier new, Courier; color：<span style="font: Courier New; color: #666666;"><b>R</b></span> &lt;= 3.6.0) またはデフォルト (<span style="font-family：)、またはデフォルト(<span style="font-family: Courier New, Courier; color：<span style="font: Courier New, Courier; color: #666666;"><b>R</b></span> = 3.6.x, x &gt;= 1）。
(一般化された)ベクトルまたは行列。  これらは名前付き引数として与えられる。  その他の<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New; color: #666666;"><b>R</b></span> オブジェクトは適宜強制されるか、S4methodsが使われます。  (<code>cbind</code>の<code>"data.frame"</code>メソッドでは、これらは<code>stringsAsFactors</code>のような<code>data.frame</code>へのさらなる引数とすることができます)。
<br><code>deparse.level=0</code>はラベルを作成しません。デフォルトの<br><code>deparse.level=1または2</code>は引数名からラベルを作成します。
(データフレームメソッドのみ:) logical引数からユニークで有効な<code>row.names</code>を構築するかどうかを示します。
logicalは、<code>as.data.frame</code>に渡され、<code>...</code>引数が(<code>data.frame</code>でない)<code>文字</code>を含む場合にのみ効果を持ちます。
データフレームが因子を含む場合、デフォルトの<code>TRUE</code>は、<a href="https://bugs.R-project.org/show_bug.cgi?id=17562">PR#17562</a> および 'Data frame methods' を参照して、因子の<code>NA</code>レベルを確実に保持します。  <span style="font-family：color：<span style="font: Courier New; color: #666666;"><b>R</b></span> 3.6.x までのバージョンでは、<code>factor.exclude = NA</code> は暗黙的にハードコードされています (<span style="font-family：courier new, Courier; color：<span style="font: Courier New; color: #666666;"><b>R</b></span> &lt;= 3.6.0) またはデフォルト (<span style="font-family：)、またはデフォルト(<span style="font-family: Courier New, Courier; color：<span style="font: Courier New, Courier; color: #666666;"><b>R</b></span> = 3.6.x, x &gt;= 1）。
数値ベクトル。  または、<code>round</code>と<code>signif</code>の場合は、複素数ベクトル。
小数点以下の桁数(<code>round</code>)または有効桁数(<code>signif</code>)を示す整数。負の値も許される(「詳細」を参照)。
メソッドに渡す引数。
展開される文字列。
マッチする値を持つ文字ベクトル。
<span style="font-family：font-family: Courier New, Courier; color：#展開できなかった場合に評価される<span style="font-family: Courier New, Courier;"><b>R</b></span> 式。
2倍値は整数に強制されます。1以外の長さの引数を与えるとエラーになります。
強制またはテストされるオブジェクト。
他のメソッドに渡される、あるいは他のメソッドから渡されるさらなる引数。
<code>as.character</code>によって文字ベクトルに変換されます。  長いベクトルもサポートされています。
マッチする値：文字ベクトルに変換される。  長いベクトルはサポートされていません。
マッチしない位置で返される(整数)値。
変換またはシフトされるオブジェクト。
論理：変換対象は単一文字列か、複数の文字列か。
シフトするビット数。  正の数は右にシフトし、負の数は左にシフトします: 許容される値は <code>-8 ... 8</code> です。
部分的にマッチした結果の型。
文字ベクトル、または<code>as.character</code>でcharacterに強制できるオブジェクト。
翻訳される文字を指定する文字列。  長さが2以上の文字ベクトルが与えられた場合、警告とともに最初の要素が使用されます。
翻訳を指定する文字列。長さが2以上の文字ベクトルが与えられた場合、警告とともに最初の要素が使用される。
論理: 大文字または小文字に変換しますか?
date-timeクラスの1つから出力または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定する。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>で変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
呼び出し元から渡された "ドット"。
<code>sys.call()</code>に渡される。  メッセージが<em>その</em>呼び出し元について言及する必要がある場合、呼び出し元は-2を使うことができる。
未実装: <code>...</code>内の<em>名前付き</em>要素のうち、"許可 "され、それゆえ警告されないものの文字ベクトル。
メソッドが存在するオブジェクト。  デフォルトのメソッドは、数値（または論理）対称の正定値行列に適用されます。
メソッドへの、あるいはメソッドからの引数。
ピボット処理を使用するか？
論理を使用するか。  LINPACK を使用すべきか (現在はエラー)。
<code>pivot = TRUE</code> で使用する数値許容誤差。
メソッドが存在するオブジェクト。  デフォルトのメソッドは、数値（または論理）対称の正定値行列に適用されます。
メソッドへの、またはメソッドからの引数。
ピボット化を使用するか？
論理を使用するか。  LINPACK を使用すべきか (現在はエラー)。
<code>pivot = TRUE</code> で使用する数値許容誤差。
行列。  上の三角形の最初の<code>size</code>列は、反転される行列のコレスキー分解を含む。
コレスキー分解を含む <code>x</code> の列数.
論理的。  無効でエラーとなる。
非負の数値ベクトル。
数値ベクトル
整数ベクトル。
a <span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
文字ベクトルの命名クラス。  <code>value</code> には <code>NULL</code> を指定することもできます。
戻り値に影響を与える論理: '詳細'を参照。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
クラスを指定する文字ベクトル。  <code>value</code> には <code>NULL</code> を指定することもできます。
戻り値に影響を与える論理: '詳細'を参照。
文字ベクトル。
接続。
論理値。  trueの場合、押し戻された各文字列に改行が追加されます。
部分的にマッチした文字列。  詳細を参照。
文字列。  詳細」を参照のこと。
文字列。  接続のオープン方法の説明(最初にオープンする場合)。  指定できる値についてはセクション「モード」を参照。
論理値。  ブロック」のセクションを参照。
想定するエンコーディングの名前。  エンコーディング」のセクションを参照。
論理値。  trueを指定すると、'raw'インターフェイスが使用され、 通常のファイルではない引数、例えばキャラクタデバイスに適している。  これは、テキストモードでの読み込みのためにオープンする際の 圧縮ファイルのチェックを抑制し、'ファイル'がシーク可能でない可能性があることを 保証する。
<code>c("default", "internal", "winet", "libcurl")</code>に部分的にマッチする文字列。
HTTPrequests で使用する HTTP ヘッダの名前付き文字ベクトル。  非 HTTP URL では無視されます。  <code>HTTPUserAgent</code> オプション (<code>options</code> を参照) から得られる <code>User-Agent</code> ヘッダは、自動的に最初のヘッダとして使われます。
0-9 の整数。  書き込み時に適用する圧縮の量を、なしから最大まで指定します。  <code>xzfile</code>の場合は負の値も指定できます: '圧縮'のセクションを参照してください。
数値: この接続で使用するタイムアウト(秒単位)。  OSによっては、非常に大きな値をゼロとして扱うことがあるので注意してください: しかし、POSIX標準では31日までの値をサポートしています。
オプションの文字ベクトル。現在TCPソケットでサポートされているのは<code>"no-delay"</code>のみである。
zip ファイル内のファイル名。
文字列。  ポートのホスト名。
整数。  TCP ポート番号。
論理。  ソケットをクライアントにするかサーバーにするか。
接続をリッスンするサーバソケット。
コネクション。
文字列。  現在は無視される。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
他のメソッドに渡される、または他のメソッドから渡される引数。
文字列。  接続の説明: '詳細'を参照。
文字列。  接続のオープン方法(最初にオープンする場合)。  指定できる値についてはセクション 'モード' を参照。
論理値。  ブロック」のセクションを参照。
想定するエンコーディングの名前。  エンコーディング」のセクションを参照。
論理値。  trueを指定すると、'raw'インターフェイスが使用され、 通常のファイルではない引数、例えばキャラクタデバイスに適している。  これは、テキストモードでの読み込みのためにオープンする際の 圧縮ファイルのチェックを抑制し、'ファイル'がシーク可能でない可能性があることを 保証する。
<code>c("default", "internal", "winet", "libcurl")</code>に部分的にマッチする文字列。
HTTPrequests で使用する HTTP ヘッダの名前付き文字ベクトル。  非 HTTP URL では無視されます。  <code>HTTPUserAgent</code> オプション (<code>options</code> を参照) から得られる <code>User-Agent</code> ヘッダは、自動的に最初のヘッダとして使われます。
0-9 の整数。  書き込み時に適用する圧縮の量を、なしから最大まで指定します。  <code>xzfile</code>の場合は負の値も指定できます: '圧縮'のセクションを参照してください。
数値: この接続で使用するタイムアウト(秒単位)。  OSによっては、非常に大きな値をゼロとして扱うことがあるので注意してください: しかし、POSIX標準では31日までの値をサポートしています。
オプションの文字ベクトル。現在TCPソケットでサポートされているのは<code>"no-delay"</code>のみである。
zip ファイル内のファイル名。
文字列。  ポートのホスト名。
整数。  TCP ポート番号。
論理。  ソケットをクライアントにするかサーバーにするか。
接続をリッスンするサーバソケット。
コネクション。
文字列。  現在は無視される。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
他のメソッドに渡される、または他のメソッドから渡される引数。
 ファイル名。
 ファイルの文字エンコーディング。
 <code>parse</code>の<code>encoding</code>引数を参照のこと。
 ソース行の文字ベクトル。  その他の<span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトは文字に強制されます。
 ファイルのコピーに使用するタイムスタンプ。
 この <code>srcfilecopy<//code> はファイルシステムファイルから来たものですか？
 <code>srcfile</code> オブジェクト。
 行番号。
 詳細'を参照。
 適切なクラスのオブジェクト。
 <code>srcref</code> のテキストを得るために <code>srcfile</code> を読むかどうか。
 文字範囲の終端を示すオプションの 2 番目の <code>srcref</code> オブジェクト。
 これらは無視される。
 ファイル名。
 ファイルの文字エンコーディング。
 <code>parse</code> の<code>encoding</code>引数を参照のこと。
 ソース行の文字ベクトル。  その他の<span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトは文字に強制されます。
 ファイルのコピーに使用するタイムスタンプ。
 この <code>srcfilecopy<//code> はファイルシステムファイルから来たものですか？
 <code>srcfile</code> オブジェクト。
 行番号。
 詳細'を参照。
 適切なクラスのオブジェクト。
 <code>srcref</code> のテキストを得るために <code>srcfile</code> を読むかどうか。
 文字範囲の終端を示すオプションの 2 番目の <code>srcref</code> オブジェクト。
 これらは無視されます。
logical: true の場合、閉じた接続と標準の接続を含むすべての接続が表示されます。  false の場合は、ユーザが作成したオープンな接続のみが含まれます。
integer: <code>showConnections</code> で指定したテーブルの行番号。
コネクション。
行列のようなオブジェクト、つまり2次元の<code>dim</code>を持つもの。
行列の次元、つまり長さ 2 の整数値の数値ベクトル (非負のエントリを持つ)。
数値としてではなく、列ラベルの係数（必要に応じて作成される）として値を返すかどうかを示す論理値。
数値、複素数、整数、または論理値を含む2次元以上の配列、または数値データ・フレーム。  <code>.colSums()</code>などの場合は、数値、整数または論理行列（または長さ<code>m * n</code>のベクトル）。
論理行列。  欠損値(<code>NaN</code>を含む)は計算から省略されるべきか？
整数：どの次元を'行'または'列'とみなして合計するか。  <code>row*</code>の場合は、次元<code>dims+1, ...</code>上の和または平均となり、<code>col*</code>の場合は、次元<code>1:dims</code>上の和となります。
<code>.colSums()</code>などの行列の次元<code>x</code>。
行列のような<span style="font-family：Courier New, Courier; color：<code>colnames</code>に対して少なくとも2次元の<span style="font: Courier New, Courier; color: #666666;"><b>R</b></span>オブジェクト。
論理的でなければなりません。<code>FALSE</code>で名前が<code>NULL</code>の場合、名前が作成されます。
作成された名前。
<code>dimnames(x)</code>の構成要素に有効な値。  行列や配列の場合、これは<code>NULL</code>か、適切な次元に等しい長さの0でない文字ベクトルです。
行列のような<span style="font-family：font-family: Courier New, Courier; color：<code>colnames</code>のために少なくとも2つの次元を持つ、<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
論理的でなければなりません。<code>FALSE</code>で名前が<code>NULL</code>の場合、名前が作成されます。
作成された名前。
<code>dimnames(x)</code>の構成要素に有効な値。  行列や配列の場合、これは<code>NULL</code>か、適切な次元に等しい長さの0でない文字ベクトルです。
数値、複素数、整数、論理値を含む2次元以上の配列、または数値データフレーム。  <code>.colSums()</code>などの場合は、数値、整数または論理行列（または長さ<code>m * n</code>のベクトル）。
論理行列。  欠損値（<code>NaN</code>を含む）は計算から省略されるべきか？
整数：どの次元を'行'または'列'とみなして合計するか。  <code>row*</code>の場合は、次元<code>dims+1, ...</code>上の和または平均となり、<code>col*</code>の場合は、次元<code>1:dims</code>上の和となります。
行列の次元 <code>x</code> for<code>.colSums()</code> など.
論理的である。  <span class="option">--args</span>の後の引数のみを返すべきか？
<span style="font-family：を返さなければなりませんか?</span>オブジェクトを返します。
<code>character</code> ベクタ、または <code>NULL</code>.
<span style="font-family：font-family: Courier New, Courier; color：</span>オブジェクト。
<code>character</code> ベクタ、または <code>NULL</code>.
数値。  必要に応じて再利用される入力。
数値ベクトル.
数値ベクトル。
数値ベクトル
数値ベクトル。
おそらくモード<code>complex</code>のオブジェクト。
モード<code>complex</code>のオブジェクト、またはメソッドが定義されているクラスの1つ。
他のメソッドに渡される、または他のメソッドから渡される引数。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式。
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
追加の引数。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式。
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
追加の引数。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式。
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
追加の引数。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式。
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
追加の引数。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式。
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
詳細は以下を参照のこと。
<code>character.only</code> が<code>FALSE</code>（デフォルト）か<code>TRUE</code>かによって、パッケージ名か文字列、または文字列が指定されます。
ロードされた名前空間をアタッチする検索リストの位置。  <code>search()</code>で指定された現在の検索リスト上の位置の名前でもよい。
<span style="font-family：font-family: Courier New, Courier; color：#または <code>NULL</code>.  デフォルト値の<code>NULL</code>は、現在<code>.libPaths()</code>が知っている全てのライブラリに対応します。
<code>package</code> または <code>help</code> が文字列であると仮定できるかどうかを示す論理。
を論理的に指定する。  これが<code>TRUE</code>の場合、<code>FALSE</code>または<code>TRUE</code>が成功を示すために返される。
を論理的に返します。  <code>TRUE</code>の場合、新しいパッケージのアタッチによる<code>衝突</code>に関する警告が表示される。  衝突とは、関数をマスクする関数、または非関数をマスクする非関数のことです。デフォルトは、<code>conflicts.policy</code>オプションで<code>FALSE</code>と指定されない限り、<code>TRUE</code>である。
論理的である。  <code>TRUE</code>の場合、追加の診断が表示される。
論理。  <code>TRUE</code> の場合、パッケージのアタッチを確認するメッセージは表示されず、パッケージのアタッチに失敗してもエラーや警告は表示されません。
パッケージ名を示す文字列。
ストリクト・コンフリクト・チェックが有効な場合に、エラーを通知することなく検索パス上のオブジェクトをマスクすることができるオブジェクト名の文字ベクトル。
アタッチされたフレームに除外または含めるオブジェクト名の文字ベクトル。<code>library</code>または<code>require</code>の呼び出しでは、これらの引数のうち1つのみを使用することができます。
<code>DESCRIPTION</code> ファイルの <code>Depends</code> 節にリストされた必須パッケージを自動的にアタッチするかどうかを指定する論理。
検索パスのサブセット、デフォルトでは検索パス全体。
<code>TRUE</code>の場合、検索パスのすべてのメンバに対してマスクまたはマスク関数を与える。
数値。  入力は必要に応じて再利用される。
数値ベクトル.
数値ベクトル.
数値ベクトル.
数値ベクトル。
おそらくモード<code>complex</code>のオブジェクト。
モード<code>complex</code>のオブジェクト、またはメソッドが定義されているクラスの1つ。
他のメソッドに渡される、または他のメソッドから渡される引数。
数値ベクトルまたは複素数ベクトル。
数値または複素数ベクトル
数値または複素ベクトル。
数値または複素行列（またはベクトル）：<code>y = NULL</code> は <code>x</code> と同じ行列とみなされます。  ベクトルは、文脈に応じて、1列または1行の行列に昇格します。
数値または複素数 (<code>cummin</code> や <code>cummax</code> ではない)オブジェクト、または、これらのいずれかに強制できるオブジェクト。
数値または複素数 (<code>cummin</code> または <code>cummax</code> ではない)オブジェクト、またはこれらのいずれかに強制できるオブジェクト。
数値または複素数 (<code>cummin</code> または <code>cummax</code> ではない)オブジェクト、またはこれらのいずれかに強制できるオブジェクト。
数値または複合（<code>cummin</code>または<code>cummax</code>ではない）オブジェクト、またはこれらのいずれかに強制できるオブジェクト。
URLを指定する文字列。
論理：リダイレクトに従うべきか？
論理: 証明書が有効で、そのホストに適用されていることを検証すべきか。
integer: リクエストが許容される最大時間(秒)。  正でない値や無効な値は無視されます (デフォルトを含む)。  (<span style="font-family：(added in <span style="font-family: Courier New, Courier; color：#666666;"><b>R</b></span> 4.1.0.)
character: <code>https://</code> URL に使用する TLS プロトコルの最小バージョン: デフォルト (<code>""</code>) は、基礎となる <code>libcurl</code> (通常は 1.0) 以上の制限はありません。  その他の有効な値は、<code>"1.1"</code>、<code>"1.2"</code> (<code>libcurl</code>7.34.0 以降)、<code>"1.3"</code> (7.52.0 以降) です。
カットによって係数に変換される数値ベクトル。
2つ以上のユニークなカットポイントの数値ベクトルか、<code>x</code>がカットされる区間数を与える1つの数値(2以上)。
結果のカテゴリのレベルのラベル。  デフォルトでは、ラベルは<code>"(a,b]"</code>区間表記を用いて構築されます。  もし<code>labels = FALSE</code> なら、因数の代わりに単純な整数コードが返されます。
論理的で、最も低い (<code>right = FALSE</code> の場合は最も高い) 'breaks' 値に等しい 'x[i]' が含まれるべきかどうかを示す。
論理で、区間を右側で閉じ(左側で開き)、あるいはその逆とするかを指定する。
ラベルが与えられない場合に使用される整数。  これは、区切り番号の書式設定に使用される桁数を決定する。
論理: 結果を順序付き因数にするか。
他のメソッドに渡される、または他のメソッドから渡されるさらなる引数。
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したオブジェクト。
<code>x</code> が切り取られる区間数を与える <em> または</em> 区間指定のベクトル <code>"sec"</code>, <code>"min"</code>, <code>"hour"</code>、<code>"day"</code>、<code>"DSTday"</code>、<code>"week"</code>、<code>"month"</code>、<code>"quarter"</code>、または<code>"year"</code>のいずれか。オプションで、整数とスペースが先行するか、<code>"s"</code>が続く。(<code>"Date"</code>オブジェクトでは、<code>"day"</code>、<code>"week"</code>、<code>"month"</code>、<code>"quarter"</code>、<code>"year"</code>を用いた区間指定のみが許される)。
結果のカテゴリのレベルのラベル。  デフォルトでは、ラベルは区間の左端から作成されます(デフォルト値の<code>right</code>に含まれます)。  もし<code>labels = FALSE</code>ならば、因数の代わりに単純な整数コードが返されます。
を論理的に返します。  <code>breaks = "weeks"</code> の場合、週の始まりは月曜日か日曜日か。
他のメソッドに渡す引数。
切断によって因数に変換される数値ベクトル。
2つ以上のユニークなカットポイントの数値ベクトルか、<code>x</code>がカットされる区間数を与える1つの数値(2以上)。
結果のカテゴリのレベルのラベル。  デフォルトでは、ラベルは<code>"(a,b]"</code>区間表記を用いて構築されます。  もし<code>labels = FALSE</code> なら、因数の代わりに単純な整数コードが返されます。
論理的で、最も低い (<code>right = FALSE</code> の場合は最も高い) 'breaks' 値に等しい 'x[i]' が含まれるべきかどうかを示す。
論理で、区間を右側で閉じ(左側で開き)、あるいはその逆とするかを指定する。
ラベルが与えられない場合に使用される整数。  これは、区切り番号の書式設定に使用される桁数を決定する。
論理: 結果を順序付き因数にするか。
他のメソッドに渡される、または他のメソッドから渡されるさらなる引数。
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したオブジェクト。
<code>x</code> が切り取られる区間数を与える <em> または</em> 区間指定のベクトル <code>"sec"</code>, <code>"min"</code>, <code>"hour"</code>、<code>"day"</code>、<code>"DSTday"</code>、<code>"week"</code>、<code>"month"</code>、<code>"quarter"</code>、または<code>"year"</code>のいずれか。オプションで、整数とスペースが先行するか、<code>"s"</code>が続く。(<code>"Date"</code>オブジェクトでは、<code>"day"</code>、<code>"week"</code>、<code>"month"</code>、<code>"quarter"</code>、<code>"year"</code>を用いた区間指定のみが許される)。
結果のカテゴリのレベルのラベル。  デフォルトでは、ラベルは区間の左端から作成されます(デフォルト値の<code>right</code>に含まれます)。  もし<code>labels = FALSE</code>ならば、因数の代わりに単純な整数コードが返されます。
を論理的に返します。  <code>breaks = "weeks"</code> の場合、週の始まりは月曜日か日曜日か。
他のメソッドに渡す引数。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
これらの引数は<code>value</code>または<code>tag = value</code>の形式です。  コンポーネント名は、タグ（存在する場合）またはdeparsed引数そのものに基づいて作成されます。
<code>NULL</code> または行名として使用する列を指定する1つの整数または文字列、またはデータフレームの行名を与える文字または整数ベクトル。
もし<code>TRUE</code>ならば、行の長さと名前の一貫性がチェックされます。
を論理的に返します。  もし<code>TRUE</code>ならば、データフレーム内の変数名は、合成的に有効な変数名であり、重複していないことを確認するためにチェックされます。もし必要ならば、(<code>make.names</code>によって)調整されます。
(正式には<code>someName = arg</code>として呼び出されないという意味で)「名前なし」である引数が、<code>""</code>という名前ではなく、自動的に構築された名前を得るかどうかを示す論理。  もし<code>""</code>の名前が保持されるべきなら、<code>check.names</code>がfalseであっても<code>FALSE</code>に設定する必要がある。
論理: 文字ベクトルは因数に変換されるべきか?  factory-fresh' のデフォルトは <code>TRUE</code> でしたが、<span style="font-family：color：#666666;"><b>R</b></span> 4.0.0.
論理ベクトル、因子、数値ベクトル、文字ベクトルを構成要素とするデータフレーム。
結果の行列が文字（<code>NULL</code>ではなく）<code>rownames</code>を持つべきかどうかを示す論理。  デフォルトの <code>NA</code> は、データフレームに 'automatic' row.names がある場合、またはゼロ行データフレームの場合に <code>NULL</code>rownames を使用します。
解釈された<span style="font-family：color：<b>R</b></span>関数。
ブラウザ入力時に取得可能なテキスト文字列。
ブラウザが入力されたときに取得できる条件。
オプションのメソッド・シグネチャ。指定された場合、メソッドはジェネリックではなくデバッグされます。
サポート関数<code>debuggingState</code>の呼び出しは、デバッグがグローバルにオンになっていれば<code>TRUE</code>を返し、そうでなければ<code>FALSE</code>を返します。  これらの値のどちらか一方の引数は、状態を設定します。  デバッグ状態が<code>FALSE</code>の場合、デバッグ動作は何も起こりません (ただし、関数内の明示的な<code>ブラウザ</code>呼び出しは動作し続けます)。
解釈された<span style="font-family：を使用している場合、<span style="font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 関数。
ブラウザ入力時に取得できるテキスト文字列。
ブラウザが入力されたときに取得できる条件。
オプションのメソッド・シグネチャ。指定された場合、メソッドはジェネリックではなくデバッグされます。
サポート関数<code>debuggingState</code>の呼び出しは、デバッグがグローバルにオンになっていれば<code>TRUE</code>を返し、そうでなければ<code>FALSE</code>を返します。  これらの値のどちらか一方の引数は、状態を設定します。  デバッグ状態が<code>FALSE</code>の場合、デバッグ動作は何も起こりません (ただし、関数内の明示的な<code>ブラウザ</code>呼び出しは動作し続けます)。
解釈された<span style="font-family：を使用している場合、<span style="font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 関数。
ブラウザ入力時に取得できるテキスト文字列。
ブラウザが入力されたときに取得できる条件。
オプションのメソッド・シグネチャ。指定された場合、メソッドはジェネリックではなくデバッグされます。
サポート関数<code>debuggingState</code>の呼び出しは、デバッグがグローバルにオンになっていれば<code>TRUE</code>を返し、そうでなければ<code>FALSE</code>を返します。  これらの値のどちらか一方の引数は、状態を設定します。  デバッグ状態が<code>FALSE</code>の場合、デバッグ動作は何も起こりません（しかし、関数内の明示的な<code>browser</code>呼び出しは動作し続けます）。
これらの引数は、<code>value</code>または<code>tag = value</code>のいずれかの形式です。  コンポーネント名は、タグ（存在する場合）またはdeparsed引数そのものに基づいて作成されます。
<code>NULL</code> または行名として使用する列を指定する1つの整数または文字列、またはデータフレームの行名を与える文字または整数ベクトル。
もし<code>TRUE</code>ならば、行の長さと名前の一貫性がチェックされます。
を論理的に返します。  もし<code>TRUE</code>ならば、データフレーム内の変数名は、合成的に有効な変数名であり、重複していないことを確認するためにチェックされます。もし必要ならば、(<code>make.names</code>によって)調整されます。
(正式には<code>someName = arg</code>として呼び出されないという意味で)「名前なし」である引数が、<code>""</code>という名前ではなく、自動的に構築された名前を得るかどうかを示す論理。  もし<code>""</code>の名前が保持されるべきなら、<code>check.names</code>がfalseであっても<code>FALSE</code>に設定する必要がある。
論理: 文字ベクトルは因数に変換されるべきか?  factory-fresh' のデフォルトは <code>TRUE</code> でしたが、<span style="font-family：color：#666666;"><b>R</b></span> 4.0.0.
変数名（関数呼び出しの中で引用符で囲まれた文字列として与えられる）
<code>x</code>に代入される式
<code>値</code>を評価する環境。
<code>x</code>を代入する環境
<span style="font-family：font-family: Courier New, Courier; color：font-family: Courier New; color: #666666;"><b>R</b></span> 式を割り当てる環境。
<i>[20, 500]</i>の整数で、改行が試みられるカットオフ (バイト単位) を決定する。
シンボル名が標準構文に従わない場合に、バックティックで閉じるべきかどうかを示す論理。
<code>.deparseOpts</code> を参照。
整数: 出力する行の最大数。負の値は制限なしを示します。
<code>paste()</code> に渡される文字列。
<code>deparse()</code>に渡される引数。
<span style="font-family：Courier New, Courier; color：#666666;"><b>R</b></span>式。
<i>[20, 500]</i>の整数で、改行を試みるカットオフ(バイト単位)を決定する。
シンボル名が標準構文に従わない場合に、バックティックで閉じるべきかどうかを示す論理。
<code>.deparseOpts</code> を参照。
整数: 出力する行の最大数。負の値は制限なしを示します。
<code>paste()</code> に渡される文字列。
<code>deparse()</code>に渡されるその他の引数。
数値行列: 論理行列は数値に強制される。
論理; もし <code>TRUE</code> (デフォルト) ならば、行列式のモジュラスの対数を返します。
オプションの引数。  現時点では何も使用されない。  この引数は無視されますが、エラーは発生しません。
デタッチするオブジェクト。  デフォルトは<code>search()[pos]</code>です。これは引用符で囲まれていない名前か文字列ですが、<em>文字ベクトルではありません</em>。  数値が与えられた場合、これは <code>pos</code> として扱われます。
todetachデータベースの<code>search()</code>内のインデックス位置。  <code>name</code>が数値の場合、<code>pos = name</code>が使用される。
パッケージがデタッチされる際に名前空間のロードを試みるかどうかを示す論理値。  パッケージに名前空間があり、<code>unload</code> が <code>TRUE</code> である場合、<code>detach</code> は、<em>via</em><code>unloadNamespace</code> によって名前空間のアンロードを試みます: 名前空間が他の名前空間によってインポートされているか、<code>unload</code> が <code>FALSE</code> である場合、アンロードは行われません。
<code>name</code> が文字列であると仮定できるかどうかを示す論理。
論理: パッケージに依存している他のパッケージがあるにもかかわらず、そのパッケージを切り離すべきか。
数値行列: 論理行列は数値に強制される。
論理; <code>TRUE</code> の場合 (デフォルト) 行列式のモジュラスの対数を返します。
オプションの引数。  現時点では何も使用されない。  この引数は無視されますが、エラーは発生しません。
数値行列: 論理行列は数値に強制されます。
論理; もし <code>TRUE</code> (デフォルト) ならば、行列式のモジュラスの対数を返します。
オプションの引数。  現時点では何も使用されない。  この引数は無視されますが、エラーは発生しません。
オブジェクト。
ファイルか接続を指定する文字列。<code>""</code>はコンソールへの出力を示す。
<code>.deparseOpts</code>を参照してください。
論理: 可能であれば、関数を解析する際にソースの書式を保持する必要がありますか?
行列、ベクトル、1次元の<code>array</code>、または見つからない。
<code>x</code> が行列でない場合、結果の次元は任意である。
(<code>x</code>が行列の場合) <code>x</code>の対角である結果のベクトルが、もし可能であれば、<code>dimnames(x)</code>から<code>names</code>を継承するかどうかを示す論理。
単一の値か、現在の対角と同じ長さのベクトル。  <code>x</code> のモードと強制できるモードでなければなりません。
行列, ベクトル, 1次元 <code>array</code>, あるいは欠損。
<code>x</code> が行列でない場合の結果のオプション次元.
(<code>x</code>が行列の場合) <code>x</code>の対角である結果のベクトルが、利用可能であれば<code>dimnames(x)</code>から<code>names</code>を継承するかどうかを示す論理。
単一の値か、現在の対角と同じ長さのベクトル。  <code>x</code>に強制できるモードでなければなりません。
参照する値を含む数値ベクトルまたは行列。
どのラグを使用するかを示す整数。
差の順序を示す整数。
メソッドに渡される、またはメソッドから渡されるさらなる引数。
差分する値を含む数値ベクトルまたは行列。
使用するラグを示す整数。
差の順序を示す整数。
メソッドに渡される、またはメソッドから渡されるその他の引数。
差分する値を含む数値ベクトルまたは行列。
使用するラグを示す整数。
差の順序を示す整数。
メソッドに渡される、またはメソッドから渡されるその他の引数。
date-time または date オブジェクト。
主に<code>"POSIXlt"</code>オブジェクトで使用されます。
文字列。  変換結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数、または他のメソッドから渡される引数。
参照する値を含む数値ベクトルまたは行列。
どのラグを使うかを示す整数。
差の順序を示す整数。
メソッドに渡される、またはメソッドから渡されるその他の引数。
date-time または date オブジェクト。
主に<code>"POSIXlt"</code>オブジェクトで使用されます。
文字列。  変換結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数、または他のメソッドから渡される引数。
非負の数値ベクトル。
数値ベクトル。
整数ベクトル。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font: Courier New; color: #666666;"><b>R</b></span> オブジェクト (行列、配列、データ・フレームなど)。
デフォルトのメソッドでは、<code>NULL</code> または数値ベクトル。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト（行列、配列、データフレームなど）。
デフォルトのメソッドでは、<code>NULL</code> または数値ベクトル。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト（行列、配列、データフレームなど）。
デフォルトのメソッドでは、<code>NULL</code> または数値ベクトル。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト（行列、配列、データフレームなど）。
<code>dimnames(x)</code> に指定できる値: 'Value' セクションを参照してください。
構築された dimnames の <code>base</code> 記号と数字を区切るための文字列。
文字ベクトルの空でない<code>list</code>。  listコンポーネントは、空のdmnamesコンポーネントの置換を構築するために順番に使用されます（必要な場合は再利用されます）。  例題も参照のこと。
構築されたdimnamesは、<code>make.unique</code>の意味で各次元内で一意であることを示す論理です。
<span style="font-family：クーリエ・ニュー、クーリエ; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト（行列、配列、データ・フレームなど）。
<code>dimnames(x)</code> に指定できる値: 'Value' セクションを参照してください。
構築された dimnames の <code>base</code> 記号と数字を区切るための文字列。
文字ベクトルの空でない<code>list</code>。  listコンポーネントは、空のdmnamesコンポーネントの置換を構築するために順番に使用されます（必要な場合は再利用されます）。  例題も参照のこと。
構築されたdimnamesは、<code>make.unique</code>の意味で各次元内で一意であることを示す論理です。
<span style="font-family：クーリエ・ニュー、クーリエ; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト（行列、配列、データ・フレームなど）。
<code>dimnames(x)</code> に指定できる値: 'Value' セクションを参照してください。
構築された dimnames の <code>base</code> 記号と数字を区切るための文字列。
文字ベクトルの空でない<code>list</code>。  listコンポーネントは、空のdmnamesコンポーネントの置換を構築するために順番に使用されます（必要な場合は再利用されます）。  例題も参照のこと。
構築されたdimnamesは、<code>make.unique</code>の意味で各次元内で一意であることを示す論理です。
<span style="font-family：クーリエ・ニュー、クーリエ; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト（行列、配列、データ・フレームなど）。
<code>dimnames(x)</code> に指定できる値: 'Value' セクションを参照してください。
構築された dimnames の <code>base</code> 記号と数字を区切るための文字列。
文字ベクトルの空でない<code>list</code>。  listコンポーネントは、空のdmnamesコンポーネントの置換を構築するために順番に使用されます（必要な場合は再利用されます）。  例題も参照のこと。
<code>make.unique</code>の意味で、構成されるdimnamesが各次元内で一意であることを示す論理。
デフォルトは作業ディレクトリに対応する<code>getwd()</code>です。  Tildeexpansion（<code>path.expand</code>を参照）が実行されます。  欠落した値は無視される。  マークされたエンコーディングの要素は、ネイティブエンコーディングに変換されます (変換に失敗した場合は、存在しないとみなされます)。
オプションの正規表現。  正規表現にマッチするファイル名のみが返されます。
論理値。  <code>FALSE</code>の場合、可視ファイル名のみが返されます(Unixスタイルの可視性、つまり名前がドットで始まらないファイル)。  <code>TRUE</code>の場合、すべてのファイル名が返されます。
論理値。  <code>TRUE</code>の場合、ファイル名の前にディレクトリパスが付加され、相対ファイルパスが返される。<code>FALSE</code>の場合、（パスではなく）ファイル名が返される。
を論理的に返します。  リストをディレクトリに再帰させるか？
論理的です。  大文字小文字を区別しないパターンマッチングを行うか。
論理的です。  再帰リストにはサブディレクトリ名を含めるべきか?  (再帰でないリストでは常に含まれます)。
論理的。  <code>"."</code>と<code>"."</code>の両方を非再帰的リストから除外すべきか。
単一のパス名を含む文字ベクトル。  Tildeexpansion(<code>path.expand<//code>を参照)が行われます。
ファイルやディレクトリのパスを含む文字ベクトル。  Tildeexpansion（<code>path.expand<//code>を参照）が実行される。
logical; 失敗時の警告を表示するか。
論理的。last以外のパスの要素を作成すべきか。  trueの場合、Unixコマンド<code>mkdir -p</code>のようになる。
Unix-alike で使われるモード: <code>as.octmode</code> によって強制されます。  <code>Sys.chmod</code>では、<code>paths</code>に沿ってリサイクルされる。
論理: モードが<code>umask</code>設定によって制限されるべきか。
単一のパス名を含む文字ベクトル。  Tildeexpansion(<code>path.expand<//code>参照)が行われます。
ファイルまたはディレクトリのパスを含む文字ベクトル。  Tildeexpansion（<code>path.expand<//code>を参照）が実行される。
logical; 失敗時の警告を表示するか。
論理的。last以外のパスの要素を作成すべきか。  trueの場合、Unixコマンド<code>mkdir -p</code>のようになる。
Unix-alike で使われるモード: <code>as.octmode</code> によって強制されます。  <code>Sys.chmod</code>では、<code>paths</code>に沿ってリサイクルされる。
論理: モードが<code>umask</code>設定によって制限されるか。
パス名を含む文字ベクトル。
関数か、呼び出される関数を指定する空でない文字列。
関数呼び出しの引数の<em>リスト</em>。  <code>args</code>の<code>names</code>属性が引数名を与える。
引数を引用するかどうかを示す論理値。
呼び出しを評価する環境。  これは、<code>what</code>が文字列で、引数が記号や引用符で囲まれた式である場合に最も有用です。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
doubleの値はintegerに強制されます:1以外の長さの引数を与えるとエラーになります。
ダブル値は integer に強制されます。
他のメソッドに渡される、あるいは他のメソッドから渡されるさらなる引数。
オブジェクト。
ファイル名または接続名を示す文字列。<code>""</code>はコンソールへの出力を示す。
<code>.deparseOpts</code> を参照してください。
論理：可能であれば、関数をパースする際にソースの書式を保持すべきでしょうか？
<span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトで、文字ベクトルに強制されます。
詳細'を参照。
配列（行列を含む）。
未使用の因子レベルを落とすためのオブジェクト。
<code>factor()</code>に渡される; 存在しても結果から除外されるべき因子レベル。  これは<span style="font-family：クーリエ・ニュー、クーリエ; color：</span style="font: Courier New; color: #666666;"><b>R</b></span> &lt;= 3.3.1 では、ドキュメントに反して、<code>x</code> に存在しても <code>NA</code> レベルを落としていました。  現在のデフォルトは<code>x[ , drop=TRUE]</code>と互換性があります。
メソッドに渡される更なる引数
レベルを落とす<em>落とさない</em>列のインデックス。
未使用の因子レベルをドロップするオブジェクト。
<code>factor()</code>に渡される引数; 存在しても結果から除外されるべき因子レベル。  これは<span style="font-family：クーリエ・ニュー、クーリエ; color：</span style="font: Courier New; color: #666666;"><b>R</b></span> &lt;= 3.3.1 では、ドキュメントに反して、<code>x</code> に存在しても <code>NA</code> レベルを落としていました。  現在のデフォルトは<code>x[ , drop=TRUE]</code>と互換性があります。
メソッドに渡される更なる引数
レベルを落とす<em>落とさない</em>列のインデックス。
未使用の因子レベルをドロップするオブジェクト。
<code>factor()</code>に渡される引数; 存在しても結果から除外されるべき因子レベル。  これは<span style="font-family：クーリエ・ニュー、クーリエ; color：</span style="font: Courier New; color: #666666;"><b>R</b></span> &lt;= 3.3.1 では、ドキュメントに反して、<code>x</code> に存在しても <code>NA</code> レベルを落としていました。  現在のデフォルトは<code>x[ , drop=TRUE]</code>と互換性があります。
メソッドに渡される更なる引数
<em>レベルを落とさない</em>列のインデックス。
文字ベクトル。  1つ以上の<span style="font-family：クーリエニュー、クーリエ; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトをダンプする。
ファイルまたは接続を指定する文字列。  <code>""</code>はコンソールへの出力を示します。
<code>TRUE</code> かつ <code>file</code> が文字列の場合、出力は <code>file</code> に追加されます。
そうでない場合は、<code>.deparseOpts</code>の内容が上書きされます。
オブジェクトを検索する環境。
論理的です。  約束は評価されるべきか？
ベクトル、データ・フレーム、配列、<code>NULL</code>。
<code>FALSE</code>は特別な値で、すべての値が比較されることを意味し、デフォルト以外のメソッドで受け入れられる唯一の値かもしれません。  内部的には<code>x</code>と同じ型に強制されます。
すなわち、同一要素の最後(または右端)は<code>duplicated = FALSE</code>に対応する。
期待される一意な項目の最大数(1より大きい)。
特定のメソッドの引数。
固定される配列のマージン: <code>apply</code> を参照し、<code>MARGIN = 0</code> が有用であることに注意。
ベクトル、データフレーム、配列、<code>NULL</code>。
<code>FALSE</code>は特別な値で、全ての値が比較可能であることを意味し、デフォルト以外のメソッドで受け入れられる唯一の値かもしれません。  内部的には<code>x</code>と同じ型に強制されます。
すなわち、同一要素の最後(または右端)は<code>duplicated = FALSE</code>に対応する。
期待される一意な項目の最大数(1より大きい)。
特定のメソッドの引数。
固定される配列のマージン: <code>apply</code> を参照し、<code>MARGIN = 0</code> が有用であることに注意。
ベクトル、データフレーム、配列、<code>NULL</code>。
<code>FALSE</code>は特別な値で、全ての値が比較可能であることを意味し、デフォルト以外のメソッドで受け入れられる唯一の値かもしれません。  内部的には<code>x</code>と同じ型に強制されます。
すなわち、同一要素の最後(または右端)は<code>duplicated = FALSE</code>に対応する。
期待される一意な項目の最大数(1より大きい)。
特定のメソッドの引数。
固定される配列のマージン: <code>apply</code> を参照し、<code>MARGIN = 0</code> が有用であることに注意。
ベクトル、データフレーム、配列、<code>NULL</code>。
<code>FALSE</code>は特別な値で、全ての値が比較可能であることを意味し、デフォルト以外のメソッドで受け入れられる唯一の値かもしれません。  内部的には<code>x</code>と同じ型に強制されます。
すなわち、同一要素の最後(または右端)は<code>duplicated = FALSE</code>に対応する。
期待される一意な項目の最大数(1より大きい)。
特定のメソッドの引数。
固定される配列のマージン: <code>apply</code> を参照し、<code>MARGIN = 0</code> が有用であることに注意。
ベクトル、データフレーム、配列、<code>NULL</code>。
<code>FALSE</code>は特別な値で、全ての値が比較可能であることを意味し、デフォルト以外のメソッドで受け入れられる唯一の値かもしれません。  内部的には<code>x</code>と同じ型に強制されます。
すなわち、同一要素の最後(または右端)は<code>duplicated = FALSE</code>に対応する。
期待される一意な項目の最大数(1より大きい)。
特定のメソッドの引数。
固定される配列のマージン: <code>apply</code> を参照し、 <code>MARGIN = 0</code> が有用であることに注意。
<code>package_version</code>の場合は、<code>R.version</code>で得られるRversionオブジェクト。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理。
date-timeクラスの1つから出力または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
(<code>warnings()</code>の)<code>cat</code>に渡される引数。
<code>warnings()</code>が返す<code>"warnings"</code>オブジェクト。
<code>"warnings"</code>または<code>"summary.warnings"</code>オブジェクト。
もし<code>missing</code>でなければ、<code>x</code>と同じ<code>長さの<code>文字</code>ベクトル。  デフォルトは <code>paste0(seq_len(n), ": ")</code> for<i>n &gt;= 2</i> where <code>n &lt;- length(x)</code>.
<code>cat()</code> は、メッセージが表示される前に出力される文字列である。
動的共有オブジェクトとしても知られる DLL へのパス名を与える文字列。  (これらの用語の意味については「詳細」を参照のこと)。
DLL 内のシンボルを DLL 間で共有せず、独自のローカル・テーブルに格納するか、グローバル・シンボル・テーブルに追加するかを制御する論理値。  この効果があるかどうかはシステムに依存する。
すべてのシンボルを、ライブラリがロードされた直後に解決（および再配置）するか、使用されるまで延期するかを制御する論理。  この制御は、開発者がライブラリが完全で、必要なシンボルがすべてあるかどうかをテストしたり、ユーザーが不足シンボルを無視したりするのに便利です。  この効果があるかどうかはシステムに依存する。
将来の拡張のためのその他の引数。
シンボル名を示す文字列。
与えられた場合、<code></code> 名の検索をこの引数で与えられた DLL (従来の拡張子、'<span class="file">.so</span>', '<span class="file">.sl</span>', '<span class="file">.dll</span>', ...) に限定する。  これはパッケージの安全性を高めるためのもので、この引数を使うことで、他のパッケージが外部シンボルを上書きできないようにすることができます。  これは、<code>.C</code>、<code>.Call</code>、<code>.Fortran</code>、<code>.External</code> 関数と同じように使用されます。
探すシンボルの種類：任意（<code>""</code>、デフォルト）、<code>"Fortran"</code>、<code>"Call"</code>または<code>"External"</code>。
動的共有オブジェクトとしても知られる DLL へのパス名を示す文字列。  (これらの用語の意味については「詳細」を参照のこと)。
DLL 内のシンボルを DLL 間で共有せずに独自のローカル・テーブルに格納するか、 グローバル・シンボル・テーブルに追加するかを制御する論理値。  この効果があるかどうかはシステムに依存する。
すべてのシンボルを、ライブラリがロードされた直後に解決（および再配置）するか、使用されるまで延期するかを制御する論理。  この制御は、開発者がライブラリが完全で、必要なシンボルがすべてあるかどうかをテストしたり、ユーザーが不足シンボルを無視したりするのに便利です。  この効果があるかどうかはシステムに依存する。
将来の拡張のためのその他の引数。
シンボル名を示す文字列。
与えられた場合、<code></code> 名の検索をこの引数で与えられた DLL (従来の拡張子、'<span class="file">.so</span>', '<span class="file">.sl</span>', '<span class="file">.dll</span>', ...) に限定する。  これはパッケージの安全性を高めるためのもので、この引数を使うことで、他のパッケージが外部シンボルを上書きできないようにすることができます。  これは、<code>.C</code>、<code>.Call</code>、<code>.Fortran</code>、<code>.External</code> 関数と同じように使用されます。
探すシンボルの種類: 任意(<code>""</code>、デフォルト)、<code>"Fortran"</code>、<code>"Call"</code>または<code>"External"</code>。
<code>get</code>の場合は、オブジェクト名（文字列またはシンボルで指定）。<br><code>mget</code>の場合は、オブジェクト名の文字ベクトル。
<br><code>mget</code>の場合は、オブジェクト名の文字ベクトル。オブジェクトを探す場所(「詳細」を参照)。
探しているオブジェクトのモードまたはタイプ。
環境を囲むフレームを検索するか？
<code>mget</code>では、アイテムが見つからない場合に使用される値の<code>list</code>です: 必要であれば、リストに強制されます。<br><code>dynGet</code>では、任意の<span style="font-family：color：#666666;"><b>R</b></span>オブジェクト、例えば<code>stop()</code>への呼び出し。
ルックインする最小フレーム番号を指定する整数。
使用する環境。
<code>+</code>、<code>%*%</code>などの関数の場合、関数名はバッククォートか引用符で囲む必要があります。
<code>FUN</code>のオプション引数。
すべての値に関数を適用するかどうかを示す論理。
結果のリストが<code>names</code>を持つべきかどうかを示す論理。
スペクトル分解を計算する数値行列または複素行列。  論理行列は数値に強制されます。
<code>TRUE</code> の場合, 行列は対称行列(複素行列の場合はエルミート行列)であると仮定され, 下三角形(対角行列を含む)のみが使用されます.  <code>symmetric</code> が指定されない場合、<code>isSymmetric(x)</code> が使用されます。
<code>TRUE</code> が指定された場合、固有値のみが計算されて返され、そうでない場合は固有値と固有ベクトルの両方が返されます。
論理値。無効で無視される。
デフォルトは、<code>function</code>、<code>formula</code>、または<code>NULL</code>です。
関数に関連付ける環境
任意の<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
もし <code>TRUE</code> ならば、環境はハッシュテーブルを使う。
作成された環境のエンクロージャとして使用される環境。
環境
ハッシュ環境の初期サイズを指定する整数。  <code>size</code> が <code>NA</code> またはゼロの場合、内部デフォルト値が使用されます。  <code>hash</code> が <code>FALSE</code> の場合、この引数は無視される。
文字ベクトル。
正の長さの文字ベクトル。
文字ベクトル。
正の長さの文字ベクトル。
文字ベクトル、または<code>as.character</code>によって強制的に1つにできるオブジェクト。
integer: フィールド幅の最小値。  <code>NULL</code> または <code>NA</code> の場合、これは <code>x</code> の要素に必要な最大のフィールド幅とみなされる。
character: もしあれば、引用文字。
logical: <code>NA</code> 文字列はエンコードされるべきか。
character: 部分一致が許される。  <code>justify=="none"</code>は、<code>format.default</code>との整合性のために、<code>width = 0</code>と等価です。
文字ベクトル。
正の長さの文字ベクトル。
文字ベクトル。
正の長さの文字ベクトル。
<code>文字</code>文字列の "開始 "が考慮されるベクトル。
<code>文字</code>ベクトル (多くの場合長さは1)。
構文的に有効な<span style="font-family：(多くの場合、長さは1です)：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 式。
<code>call</code>、すなわち<span style="font-family：(font-family: "クーリエ・ニュー, クーリエ; color：つまり、<span style="font: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトの <code>class</code> (および <code>mode</code>) <code>"call"</code>.
環境またはリスト・オブジェクト。  デフォルトは現在の評価環境です。
デフォルトは、<code>function</code>、<code>formula</code>、または<code>NULL</code>です。
関数に関連付ける環境
任意の<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
もし <code>TRUE</code> ならば、環境はハッシュテーブルを使う。
作成された環境のエンクロージャとして使用される環境。
環境
ハッシュ環境の初期サイズを指定する整数。  <code>size</code> が <code>NA</code> またはゼロの場合、内部デフォルト値が使用されます。  <code>hash</code> が <code>FALSE</code> の場合、この引数は無視される。
デフォルトは、<code>function</code>、<code>formula</code>、または<code>NULL</code>である。
関数に関連付ける環境
任意の<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
もし <code>TRUE</code> ならば、環境はハッシュテーブルを使う。
作成された環境のエンクロージャとして使用される環境。
環境
ハッシュ環境の初期サイズを指定する整数。  <code>size</code> が <code>NA</code> またはゼロの場合、内部デフォルト値が使用されます。  <code>hash</code> が <code>FALSE</code> の場合、この引数は無視される。
デフォルトは、<code>function</code>、<code>formula</code>、または<code>NULL</code>である。
関数に関連付ける環境
任意の<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
もし <code>TRUE</code> ならば、環境はハッシュテーブルを使う。
作成された環境のエンクロージャとして使用される環境。
環境
ハッシュ環境の初期サイズを指定する整数。  <code>size</code> が <code>NA</code> またはゼロの場合、内部デフォルト値が使用されます。  <code>hash</code> が <code>FALSE</code> の場合、この引数は無視される。
環境。
バインディングをロックするかどうかを指定する論理。
名前オブジェクトまたは文字列。
0個または1個の引数をとる関数。
<code>function</code>、<code>formula</code>、またはデフォルトの<code>NULL</code>。
関数に関連付ける環境
任意の<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
もし <code>TRUE</code> ならば、環境はハッシュテーブルを使う。
作成された環境のエンクロージャとして使用される環境。
環境
ハッシュ環境の初期サイズを指定する整数。  <code>size</code> が <code>NA</code> またはゼロの場合、内部デフォルト値が使用されます。  <code>hash</code> が <code>FALSE</code> の場合、この引数は無視される。
条件オブジェクト。
呼び出し式
条件オブジェクト。
評価される式。
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
追加の引数。
評価されるオブジェクト。  詳細'を参照。
<code>expr</code> が評価される <code>environment</code>.  <code>sys.call</code>に指定された<code>NULL</code>、リスト、データフレーム、ペアリスト、整数でもよい。
<code>envir</code> が(ペア)リストまたはデータフレームである場合に関連する：color：<b>R</b></span> が<code>envir</code>で見つからないオブジェクトを探す場所です。  これは、<code>NULL</code> (ベースパッケージの環境、<code>baseenv()</code>と解釈されます) または環境です。
遡る親世代数
評価されるオブジェクト。  詳細'を参照。
<code>expr</code> が評価される <code>environment</code> 。  <code>sys.call</code>に指定されるように、<code>NULL</code>、リスト、データフレーム、ペアリスト、整数でもよい。
<code>envir</code> が(ペア)リストまたはデータフレームである場合に関連する：color：<b>R</b></span> が<code>envir</code>で見つからないオブジェクトを探す場所です。  これは、<code>NULL</code> (ベースパッケージの環境、<code>baseenv()</code>と解釈されます) または環境です。
遡る親世代数
評価されるオブジェクト。  詳細'を参照。
<code>expr</code> が評価される <code>environment</code> 。  <code>sys.call</code>に指定されるように、<code>NULL</code>、リスト、データフレーム、ペアリスト、整数でもよい。
<code>envir</code> が(ペア)リストまたはデータフレームである場合に関連する：color：<b>R</b></span> が<code>envir</code>で見つからないオブジェクトを探す場所です。  これは、<code>NULL</code> (ベースパッケージの環境、<code>baseenv()</code>と解釈されます) または環境です。
遡る親世代数
変数名（文字列またはシンボルで指定）。
もし省略された場合、この関数は、オブジェクトの名前が式の中で引用符で囲まれていないかのように検索します。
を指定することもできますが、通常は <code>where</code> 引数を使用する方が簡単です。
呼び出しリストのフレーム。  <code>sys.frame(frame)</code>のように<code>where</code>を与えるのと同じです。
求めるオブジェクトのモードまたはタイプ: 「詳細」セクションを参照してください。
環境を囲むフレームを探すべきか？
<code>x</code>が存在しない場合の<code>get0(x, *)</code>の戻り値。
数値または複素数ベクトル.
正数または複素数: 対数が計算される基底。  デフォルトは <i>e</i>=<code>exp(1)</code> です。
ベクトル、因子、またはこれらを含むリスト。
<code>"out.attrs"</code>属性(下記参照)が計算されて返されるべきことを示す論理。
文字ベクトルを因数に変換するかどうかを指定する論理。
数値または複素数ベクトル。
正数または複素数: 対数が計算される基底。  デフォルトは <i>e</i>=<code>exp(1)</code> です。
<code>式</code>：<span style="font-family：font-family: Courier New, Courier; color：<br><code>as.expression</code>: メソッドに渡される引数。
任意の<span style="font-family：<span style="font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
Double値はintegerに強制されます:1以外の長さの引数を与えるとエラーになります。
ダブル値は integer に強制されます。
他のメソッドに渡される、あるいは他のメソッドから渡される引数。
データのベクトルで、通常は少数の値を取ります。
<code>x</code>が取りうるユニークな値(文字列)のオプションのベクトル。  デフォルトは、<code>as.character(x)</code>が取った値のユニークな集合で、<em><code>x<//code>の昇順にソートされています。  この集合は、<code>sort(unique(x))</code>より小さく指定できることに注意。
<em>either</em>レベルのラベルのオプションの文字ベクトル(<code>exclude</code>内のものを取り除いた後、<code>levels</code>と同じ順序で)、<em>または</em>長さ 1の文字列。 <code>labels</code>内の重複した値は、<code>x</code>の異なる値を同じ因子レベルにマップするために使用することができます。
レベルの集合を形成するときに除外される値のベクトル。  これは、<code>x</code>と同じレベルセットを持つ因子であってもよいし、<code>文字</code>であるべきである。
論理フラグで、レベルが(与えられた順序で)並べ替えられたとみなされるべきかどうかを決定する。
詳細'を参照のこと。
(<code>ordered(.)</code>内): <code>ordered</code>自身を除いた上記のいずれか。
もし<code>any(is.na(x))</code>が使われるなら、<code>na<//code>レベルを追加する。
非負の数値ベクトル。
数値ベクトル。
整数ベクトル
文字列。  接続の説明: '詳細'を参照。
文字列。  接続のオープン方法(最初にオープンする場合)。  指定できる値についてはセクション 'モード' を参照。
論理値。  ブロック」のセクションを参照。
想定するエンコーディングの名前。  エンコーディング」のセクションを参照。
論理値。  trueを指定すると、'raw'インターフェイスが使用され、 通常のファイルではない引数、例えばキャラクタデバイスなどに適している。  これは、テキストモードでの読み込みのためにオープンする際の 圧縮ファイルのチェックを抑制し、'ファイル'がシーク可能でない可能性があることを 保証する。
<code>c("default", "internal", "winet", "libcurl")</code>に部分的にマッチする文字列。
HTTPrequests で使用する HTTP ヘッダの名前付き文字ベクトル。  非 HTTP URL では無視されます。  <code>HTTPUserAgent</code> オプション (<code>options</code> を参照) から得られる <code>User-Agent</code> ヘッダは、自動的に最初のヘッダとして使われます。
0-9 の整数。  書き込み時に適用する圧縮の量を、なしから最大まで指定します。  <code>xzfile</code>の場合は負の値も指定できます: '圧縮'のセクションを参照してください。
数値: この接続で使用するタイムアウト(秒単位)。  OSによっては、非常に大きな値をゼロとして扱うことがあるので注意してください: しかし、POSIX標準では31日までの値をサポートしています。
オプションの文字ベクトル。現在TCPソケットでサポートされているのは<code>"no-delay"</code>のみである。
zip ファイル内のファイル名。
文字列。  ポートのホスト名。
整数。  TCP ポート番号。
論理。  ソケットをクライアントにするかサーバーにするか。
接続をリッスンするサーバソケット。
コネクション。
文字列。  現在は無視される。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
他のメソッドに渡される、または他のメソッドから渡される引数。
文字列。  接続の説明: '詳細'を参照。
文字列。  接続のオープン方法(最初にオープンする場合)。  指定できる値についてはセクション 'モード' を参照。
論理値。  ブロック」のセクションを参照。
想定するエンコーディングの名前。  エンコーディング」のセクションを参照。
論理値。  trueを指定すると、'raw'インターフェイスが使用され、 通常のファイルではない引数、例えばキャラクタデバイスなどに適している。  これは、テキストモードでの読み込みのためにオープンする際の 圧縮ファイルのチェックを抑制し、'ファイル'がシーク可能でない可能性があることを 保証する。
<code>c("default", "internal", "winet", "libcurl")</code>に部分的にマッチする文字列。
HTTPrequests で使用する HTTP ヘッダの名前付き文字ベクトル。  非 HTTP URL では無視されます。  <code>HTTPUserAgent</code> オプション (<code>options</code> を参照) から得られる <code>User-Agent</code> ヘッダは、自動的に最初のヘッダとして使われます。
0-9 の整数。  書き込み時に適用する圧縮の量を、なしから最大まで指定します。  <code>xzfile</code>の場合は負の値も指定できます: '圧縮'のセクションを参照してください。
数値: この接続で使用するタイムアウト(秒単位)。  OSによっては、非常に大きな値をゼロとして扱うことがあるので注意してください: しかし、POSIX標準では31日までの値をサポートしています。
オプションの文字ベクトル。現在TCPソケットでサポートされているのは<code>"no-delay"</code>のみである。
zip ファイル内のファイル名。
文字列。  ポートのホスト名。
整数。  TCP ポート番号。
論理。  ソケットをクライアントにするかサーバーにするか。
接続をリッスンするサーバソケット。
コネクション。
文字列。  現在は無視される。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
他のメソッドに渡される、または他のメソッドから渡される引数。
チルダ展開が行われます: <code>path.expand</code>を参照してください。
必要なアクセスモードを指定する整数: '詳細'を参照。
ファイル名またはパスを含む文字ベクトル。
<code>file.copy</code>と<code>file.symlink</code><code>to</code>では、ファイル名またはパスを文字ベクトルで指定します。
論理的; 既存のコピー先ファイルは上書きされるべきか？
論理的; 失敗時の警告は表示されるべきか？
を論理的に指定します。  <code>to</code> がディレクトリの場合、<code>from</code> にあるディレクトリも(その内容も)コピーすべきか?  (POSIX OSの<code>cp -R</code>のように。)
論理：ファイルのパーミッションビットは、可能な限りコピーされるべきか？
論理：可能であれば、ファイルの日付は保存されるべきか？<code>Sys.setFileTime</code>を参照。
論理: ユーザに表示されるダイアログ・ボックスのスタイルを選択します: 現在、new = FALSEのみが使用されています。
ファイル名またはパスを含む文字ベクトル。
<code>file.copy</code>と<code>file.symlink</code><code>to</code>では、ファイル名またはパスを文字ベクトルで指定します。
論理的; 既存のコピー先ファイルは上書きされるべきか？
論理的; 失敗時の警告は表示されるべきか？
を論理的に指定します。  <code>to</code> がディレクトリの場合、<code>from</code> にあるディレクトリも(その内容も)コピーすべきか?  (POSIX OSの<code>cp -R</code>のように。)
論理：ファイルのパーミッションビットは、可能な限りコピーされるべきか？
論理：可能であれば、ファイルの日付は保存されるべきか？<code>Sys.setFileTime</code> を参照。
ファイル名またはパスを含む文字ベクトル。
<code>file.copy</code>と<code>file.symlink</code><code>to</code>では、ファイル名またはパスを含む文字ベクトルを指定することができます。
論理的; 既存のコピー先ファイルは上書きされるべきか？
論理的; 失敗時の警告は表示されるべきか？
を論理的に指定します。  <code>to</code> がディレクトリの場合、<code>from</code> にあるディレクトリも(その内容も)コピーすべきか?  (POSIX OSの<code>cp -R</code>のように。)
論理：ファイルのパーミッションビットは、可能な限りコピーされるべきか？
論理：可能であれば、ファイルの日付は保存されるべきか？<code>Sys.setFileTime</code> を参照。
ファイル名またはパスを含む文字ベクトル。
<code>file.copy</code>と<code>file.symlink</code><code>to</code>では、ファイル名またはパスを含む文字ベクトルを指定することができます。
論理的; 既存のコピー先ファイルは上書きされるべきか？
論理的; 失敗時の警告は表示されるべきか？
を論理的に指定します。  <code>to</code> がディレクトリの場合、<code>from</code> にあるディレクトリも(その内容も)コピーすべきか?  (POSIX OSの<code>cp -R</code>のように。)
論理：ファイルのパーミッションビットは、可能な限りコピーされるべきか？
論理：可能であれば、ファイルの日付は保存されるべきか？<code>Sys.setFileTime</code> を参照。
ファイルパスを含む文字ベクトル。  チルダ展開が行われる: <code>path.expand</code> を参照。
論理: 最初の6列だけでなく、すべての列を返します。
ファイル名またはパスを含む文字ベクトル。
<code>file.copy</code>と<code>file.symlink</code><code>to</code>では、ファイル名またはパスを含む文字ベクトルを返します。
論理的; 既存のコピー先ファイルは上書きされるべきか？
論理的; 失敗時の警告は表示されるべきか？
を論理的に指定します。  <code>to</code> がディレクトリの場合、<code>from</code> にあるディレクトリも(その内容も)コピーすべきか?  (POSIX OSの<code>cp -R</code>のように。)
論理：ファイルのパーミッションビットは、可能な限りコピーされるべきか？
論理：可能であれば、ファイルの日付は保存されるべきか？<code>Sys.setFileTime</code> を参照。
ファイルパスを含む文字ベクトル。  チルダ展開が行われる: <code>path.expand</code> を参照。
論理: 最初の6列だけでなく、すべての列を返します。
ファイルパスを含む文字ベクトル。  チルダ展開が行われます: <code>path.expand</code> を参照してください。
論理: 最初の6列だけでなく、すべての列を返します。
文字ベクトル。  長いベクタはサポートされていません。
使用するパス区切り文字(ASCIIと仮定)。
ファイル名またはパスを含む文字ベクトル。
<code>file.copy</code>と<code>file.symlink</code><code>to</code>の場合は、既存の1つのディレクトリへのパスとすることもできます。
論理的; 既存のコピー先ファイルは上書きされるべきか？
論理的; 失敗時の警告は表示されるべきか？
を論理的に指定します。  <code>to</code> がディレクトリの場合、<code>from</code> にあるディレクトリも(その内容も)コピーすべきか?  (POSIX OSの<code>cp -R</code>のように。)
論理：ファイルのパーミッションビットは、可能な限りコピーされるべきか？
論理：可能であれば、ファイルの日付は保存されるべきか？<code>Sys.setFileTime<//code> を参照。
ファイル名またはパスを含む文字ベクトル。
<code>file.copy</code>と<code>file.symlink</code><code>to</code>では、ファイル名またはパスを含む文字ベクトルを指定することができます。
論理的; 既存のコピー先ファイルは上書きされるべきか？
論理的; 失敗時の警告は表示されるべきか？
を論理的に指定します。  <code>to</code> がディレクトリの場合、<code>from</code> にあるディレクトリも(その内容も)コピーすべきか?  (POSIX OSの<code>cp -R</code>のように。)
論理：ファイルのパーミッションビットは、可能な限りコピーされるべきか？
論理：可能であれば、ファイルの日付は保存されるべきか？<code>Sys.setFileTime</code>を参照のこと。
表示するファイル名を含む1つ以上の文字ベクトル。  パスはチルダ展開されます。
(<code>...</code>で指定されたファイル数と同じ長さの)文字ベクトルで、表示される各ファイルのヘッダを指定します。  デフォルトは空文字列。
表示全体のタイトル。  表示に単一の独立したウィンドウが使われる場合、<code>title</code>がウィンドウタイトルとして使われます。  複数のウィンドウが使用される場合、それらのタイトルはタイトルとファイル固有のヘッダを組み合わせる必要があります。
表示後にファイルを削除しますか？  一時ファイルに使用されます。
使用するページャー：すべてのプラットフォームで使用されるわけではありません。
ファイルのエンコーディングを指定する文字列。
ファイルパスを含む文字ベクトル。  チルダ展開: <code>path.expand</code>を参照。
論理: 最初の6列だけでなく、すべての列を返します。
ファイル名またはパスを含む文字ベクトル。
<code>file.copy</code>と<code>file.symlink</code><code>to</code>では、ファイル名またはパスを含む文字ベクトルを返します。
論理的; 既存のコピー先ファイルは上書きされるべきか？
論理的; 失敗時の警告は表示されるべきか？
を論理的に指定します。  <code>to</code> がディレクトリの場合、<code>from</code> にあるディレクトリも(その内容も)コピーすべきか?  (POSIX OSの<code>cp -R</code>のように。)
論理：ファイルのパーミッションビットは、可能な限りコピーされるべきか？
論理：可能であれば、ファイルの日付は保存されるべきか？<code>Sys.setFileTime</code>を参照のこと。
適切なアリティの関数（<code>Reduce</code>ではバイナリ、<code>Filter</code>, <code>Find</code>, <code>Position</code>ではユナリ、<code>Map</code>では<i>k</i>-ary、<i>k</i>引数で呼び出される場合）。  <code>Negate</code>のための任意の述語関数。
ベクトル。
<span style="font-family：font-family: Courier New, Courier; color：<code>x</code>の要素と同じ種類の<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
左から右(デフォルト)に進むか、右から左に進むかを示す論理。
連続する reducecombination を累積するかどうかを示す論理。  デフォルトでは、finalcombinationのみが使用されます。
一致しない」（述語を満たす要素がない）場合に返される値。
ベクトル。
適切なアリティの関数（<code>Reduce</code>ではバイナリ、<code>Filter</code>, <code>Find</code>と<code>Position</code>ではユナリ、<code>Map</code>では<i>k</i>-ary（これが<i>k</i>個の引数で呼ばれる場合））。  <code>Negate</code>のための任意の述語関数。
ベクトル。
<span style="font-family：font-family: Courier New, Courier; color：<code>x</code>の要素と同じ種類の<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
左から右(デフォルト)に進むか、右から左に進むかを示す論理。
連続する reducecombination を累積するかどうかを示す論理。  デフォルトでは、finalcombinationのみが使用されます。
一致しない」（述語を満たす要素がない）場合に返される値。
ベクトル。
文字ベクトル：パッケージ名。
<span style="font-family：の位置を記述する文字ベクトル：#または<code>NULL</code>となります。  <code>NULL</code>のデフォルト値は、ロードされた名前空間をチェックし、<code>.libPaths()</code>で現在知られているすべてのライブラリをチェックすることに対応します。
を論理的にチェックします。  パッケージが見つからない場合、警告やエラーは表示されないのですか？
論理的。  <code>TRUE</code>の場合、特にパッケージが複数回見つかった場合に追加の診断が表示されます。
呼び出し式。
数値。
数値, (弱く)どんどんソートされる, 長さ <code>N</code>, say.
論理; trueの場合、右端の区間<code>vec[N-1] ... vec[N]</code>は<em>closed</em>として扱われる。
すなわち、<code>0</code>は<code>1</code>に、 <code>N</code>は<code>N-1</code>にマップされる。
以下の式では、<i>≤</i>は<i>&lt;</i>と入れ替えられ(<i>&gt;</i>は<i>≥</i>と入れ替えられる)、<code>rightmost.closed</code>は「左端が閉じている」ことを意味する。  これは、例えば、生存分析の計算で役に立つかもしれません。
オブジェクト

から要素を抽出する。
<code>"row.names"</code>属性を持つ、典型的にはデータフレーム。
通常はS3またはS4クラス。
パッケージの'<span class="file">DESCRIPTION</span>'ファイルへのフルパス。
lazyload データベースへのファイルパス。
<span style="font-family：font-family: Courier New, Courier; color：#または、<code>NULL</code>となります。  デフォルト値の<code>NULL</code>は、現在<code>.libPaths()</code>で知られているすべてのライブラリに対応します。
を論理的に指定します。  パッケージが見つからない場合、警告やエラーを出すべきではないか?
論理的です。  <code>Imports</code> フィールドを処理すべきか?
論理的: メッセージを表示すべきか。
<code>"packageDescription2"</code> クラスの '<span class="file">DESCRIPTION</span>' ファイル。
<code>"cpu-vendor-os"</code>形式のプラットフォーム文字列。
保存またはロードする画像ファイルの名前。
整数。  現在、<code>type = 0</code>は内部の<code>"row.names"</code>属性(<code>NULL</code>の可能性もある)を返し、<code>type = 2</code>は属性が意味する行数を返し、<code>type = 1</code>は'自動'行名を負符号で返す。
整数。  行数。
<code>"package:MASS"</code> のような文字列。
lazyloadデータベースのオブジェクト名。
論理: データベースの値が圧縮されているか。
ロードフック: <code>unserialize</code>を参照。
長さ1の整数ベクトル。
インデックス。
論理的な値です。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
クラスに入れるクラスレス・オブジェクト。
オプションのタイムゾーン。
デフォルト・クラスを<em>含む</em>クラスのオプションの文字ベクトル。
<code>difftime</code> を参照のこと。
ドット名でないバージョンに渡される引数。
整数。
<em>same</em> オブジェクトの文字ベクトル。
マスクされるパッケージを示す文字列。
<em>by</em><code>pkg</code>、または (<code>by = FALSE</code>) <code>pkg</code>からマスクされるかを示す論理値。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式
戻り値または終了前に評価される式
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
追加の引数。
数値ベクトル。  または、<code>round</code> と <code>signif</code> の場合は、複素数ベクトル。
小数点以下の桁数(<code>round</code>)または有効桁数(<code>signif</code>)を示す整数。
メソッドに渡す引数。
文字列。  詳細' を参照。
文字列。  接続のオープン方法 (最初にオープンする場合)。  指定できる値についてはセクション 'モード' を参照。
論理値。  ブロック」のセクションを参照。
想定するエンコーディングの名前。  エンコーディング」のセクションを参照。
論理値。  trueを指定すると、'raw'インターフェイスが使用され、 通常のファイルではない引数、例えばキャラクタデバイスに適している。  これは、テキストモードでの読み込みのためにオープンする際の 圧縮ファイルのチェックを抑制し、'ファイル'がシーク可能でない可能性があることを 保証する。
<code>c("default", "internal", "winet", "libcurl")</code>に部分的にマッチする文字列。
HTTPrequests で使用する HTTP ヘッダの名前付き文字ベクトル。  非 HTTP URL では無視されます。  <code>HTTPUserAgent</code> オプション (<code>options</code> を参照) から得られる <code>User-Agent</code> ヘッダは、自動的に最初のヘッダとして使われます。
0-9 の整数。  書き込み時に適用する圧縮の量を、なしから最大まで指定します。  <code>xzfile</code>の場合は負の値も指定できます: '圧縮'のセクションを参照してください。
数値: この接続で使用するタイムアウト(秒単位)。  OSによっては、非常に大きな値をゼロとして扱うことがあるので注意してください: しかし、POSIX標準では31日までの値をサポートしています。
オプションの文字ベクトル。現在TCPソケットでサポートされているのは<code>"no-delay"</code>のみである。
zip ファイル内のファイル名。
文字列。  ポートのホスト名。
整数。  TCP ポート番号。
論理。  ソケットをクライアントにするかサーバーにするか。
接続をリッスンするサーバソケット。
コネクション。
文字列。  現在は無視される。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
他のメソッドに渡される、または他のメソッドから渡される引数。
文字列。  接続の説明: '詳細'を参照。
文字列。  接続のオープン方法(最初にオープンする場合)。  指定できる値についてはセクション 'モード' を参照。
論理値。  ブロック」のセクションを参照。
想定するエンコーディングの名前。  エンコーディング」のセクションを参照。
論理値。  trueを指定すると、'raw'インターフェイスが使用され、 通常のファイルではない引数、例えばキャラクタデバイスなどに適している。  これは、テキストモードでの読み込みのためにオープンする際の 圧縮ファイルのチェックを抑制し、'ファイル'がシーク可能でない可能性があることを 保証する。
<code>c("default", "internal", "winet", "libcurl")</code>に部分的にマッチする文字列。
HTTPrequests で使用する HTTP ヘッダの名前付き文字ベクトル。  非 HTTP URL では無視されます。  <code>HTTPUserAgent</code> オプション (<code>options</code> を参照) から得られる <code>User-Agent</code> ヘッダは、自動的に最初のヘッダとして使われます。
0-9 の整数。  書き込み時に適用する圧縮の量を、なしから最大まで指定します。  <code>xzfile</code>の場合は負の値も指定できます: '圧縮'のセクションを参照してください。
数値: この接続で使用するタイムアウト(秒単位)。  OSによっては、非常に大きな値をゼロとして扱うことがあるので注意してください: しかし、POSIX標準では31日までの値をサポートしています。
オプションの文字ベクトル。現在TCPソケットでサポートされているのは<code>"no-delay"</code>のみである。
zip ファイル内のファイル名。
文字列。  ポートのホスト名。
整数。  TCP ポート番号。
論理。  ソケットをクライアントにするかサーバーにするか。
接続をリッスンするサーバソケット。
コネクション。
文字列。  現在は無視される。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
他のメソッドに渡される、または他のメソッドから渡される引数。
<code>NA</code>でない長さ1の論理ベクトル。1より大きい長さの条件は、現在のところ警告付きで受け入れられるが、最初の要素だけが使用される。  環境変数<span class="env">_R_CHECK_LENGTH_1_CONDITION_</span> がtrueに設定されると、代わりにエラーが通知されます。  その他の型は、可能であれば論理型に強制され、クラスは無視される。
変数の構文名。
ベクトル（リストと式を含む）、ペアリスト、<code>NULL</code>に評価される式。  因子値は文字ベクトルに強制される。  <span style="font-family：のように、<span style="font-family: Courier New, Courier; color：<span style="font-family: Courier New; color: #666666;"><b>R</b></span>4.0.0から、これは長いベクトルになります。
形式的な意味での<em>式</em>。  これは単純な式か、いわゆる<em>複合式</em>で、通常は<code>{ expr1 ; expr2 }<//code> の形式です。
囲む関数の形式引数。
強制する先行引数の数。
呼び出す関数。
<code>FUN</code>の引数。
<code>function</code> の引数。
<code>関数が定義されるべき<code>environment</code>（最初の場合、および<code>fun</code>が文字列の場合は、<code>get()</code>によって見つけられる）。
<span style="font-family：の<span style="font-family: Courier New, Courier; color：</span>式の<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>リスト。
<code>function</code> を使うか、「詳細」を参照してください。
<code>関数が定義されるべき<code>environment</code> (または、最初の場合と<code>fun</code>が文字列の場合、<code>get()</code>によって見つけられる)。
<span style="font-family：の<span style="font-family: Courier New, Courier; color：</span>式の<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>リスト。
任意の<span style="font-family：を指定します：<span style="font: Courier New; color: #666666;"><b>R</b></span> オブジェクト (概念的); 通常は数値。
論理値; <code>FALSE</code>の場合、論理値、数値、複素数は共通の幅で右寄せされます: <code>TRUE</code>の場合、右寄せのための先頭の空白は抑制されます。
<code>TRUE</code>の場合、数値と複素数<code>x</code>の有効桁数を指定します。  デフォルトの<code>NULL</code>は、<code>getOption("digits")</code>を使用します。  これは提案です: (大きさの) 最小の数がこれだけの有効桁数を持つように、また <code>nsmall</code> を満たすように、十分な小数位が使用されます(複素数の解釈については <code>signif</code> を参照してください)。
許容される値は <code>0 &lt;= nsmall &lt;= 20</code> です。
<em>文字</em>ベクトルを左寄せ(デフォルト)、右寄せ、中央揃え、またはそのままにします。  省略可能。
<code>default</code> method: <em>最小</em>フィールド幅、または<code>NULL</code>または<code>0</code>で制限なし。

<code>AsIs</code>メソッド: 非文字オブジェクトの<em>最大</em>フィールド幅。  <code>NULL</code> はデフォルトの <code>12</code> に対応します。
論理: <code>NA</code> 文字列はエンコードされるべきか？  これは文字ベクトルの要素にのみ適用され、数値、複素数、論理の<code>NA</code>には適用されません。
実数または複素数ベクトルの要素が scientificformat でエンコードされるべきかを指定する論理か、整数のペナルティ(<code>options("scipen")</code>を参照)のどちらかを指定します。
他のメソッドに渡される、あるいは他のメソッドから渡される更なる引数。
<code>prettyNum</code>に渡されます: そのヘルプページに詳細が説明されています。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト (概念的); 通常は数値。
論理値; <code>FALSE</code>の場合、論理値、数値、複素数は共通の幅で右寄せされます: <code>TRUE</code>の場合、右寄せのための先頭の空白は抑制されます。
<code>TRUE</code>の場合、数値と複素数<code>x</code>の有効桁数を指定します。  デフォルトの<code>NULL</code>は、<code>getOption("digits")</code>を使用します。  これは提案です: (大きさの) 最小の数がこれだけの有効桁数を持つように、また <code>nsmall</code> を満たすように、十分な小数位が使用されます(複素数に対する解釈は <code>signif</code> を参照してください)。
許容される値は <code>0 &lt;= nsmall &lt;= 20</code> です。
<em>文字</em>ベクトルを左寄せ(デフォルト)、右寄せ、中央揃え、またはそのままにします。  省略可能。
<code>default</code> method: <em>最小</em>フィールド幅、または<code>NULL</code>または<code>0</code>で制限なし。

<code>AsIs</code>メソッド: 非文字オブジェクトの<em>最大</em>フィールド幅。  <code>NULL</code> はデフォルトの <code>12</code> に対応します。
論理: <code>NA</code> 文字列はエンコードされるべきか？  これは文字ベクトルの要素にのみ適用され、数値、複素数、論理の<code>NA</code>には適用されません。
実数または複素数ベクトルの要素が scientificformat でエンコードされるべきかどうかを指定する論理か、整数のペナルティ(<code>options("scipen")</code>を参照)のどちらかを指定します。
他のメソッドに渡される、あるいは他のメソッドから渡される更なる引数。
<code>prettyNum</code>に渡されます: そのヘルプページに詳細が説明されています。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト (概念的); 通常は数値。
論理値; <code>FALSE</code>の場合、論理値、数値、複素数は共通の幅で右寄せされます: <code>TRUE</code>の場合、右寄せのための先頭の空白は抑制されます。
<code>TRUE</code>の場合、数値と複素数<code>x</code>の有効桁数を指定します。  デフォルトの<code>NULL</code>は、<code>getOption("digits")</code>を使用します。  これは提案です: (大きさの) 最小の数がこれだけの有効桁数を持つように、また <code>nsmall</code> を満たすように、十分な小数位が使用されます(複素数の解釈については <code>signif</code> を参照してください)。
許容される値は <code>0 &lt;= nsmall &lt;= 20</code> です。
<em>文字</em>ベクトルを左寄せ(デフォルト)、右寄せ、中央揃え、またはそのままにします。  省略可能。
<code>default</code> method: <em>最小</em>フィールド幅、または<code>NULL</code>または<code>0</code>で制限なし。

<code>AsIs</code>メソッド: 非文字オブジェクトの<em>最大</em>フィールド幅。  <code>NULL</code> はデフォルトの <code>12</code> に対応します。
論理: <code>NA</code> 文字列はエンコードされるべきか？  これは文字ベクトルの要素にのみ適用され、数値、複素数、論理の<code>NA</code>には適用されません。
実数または複素数ベクトルの要素が scientificformat でエンコードされるべきかを指定する論理か、整数のペナルティ(<code>options("scipen")</code>を参照)のどちらかを指定します。
他のメソッドに渡される、あるいは他のメソッドから渡される更なる引数。
<code>prettyNum</code>に渡されます: 詳細はヘルプページを参照してください。
変換されるオブジェクト。
<code>文字列。  もし指定されなければ、最初の<code>NA</code>以外の要素に対して<code>tryFormats</code>を一つずつ試し、どれもうまくいかなければエラーを出します。  そうでなければ、<code>strptime()</code>によって処理されます。
<code>format</code> が指定されていない場合に試行する <code>format</code> 文字列の <code>character</code> ベクタ。
<code>logical</code> は、フォーマット推測が成功しなかった場合に、(エラーを通知する代わりに) <code>NA</code> を返すことを示す。
<code>Date</code>オブジェクト、または<code>as.Date(origin, ...)</code>によってそのようなオブジェクトに強制できるもの。
タイムゾーン名。
<code>as.character</code>や<code>as.Date</code>メソッドの<code>format</code>を含む、他のメソッドから渡される引数。
<span style="font-family：font-family: Courier New, Courier; color：#オブジェクト (概念的に); 通常は数値。
論理値; <code>FALSE</code>の場合、論理値、数値、複素数は共通の幅で右寄せされます: <code>TRUE</code>の場合、右寄せのための先頭の空白は抑制されます。
<code>TRUE</code>の場合、数値と複素数<code>x</code>の有効桁数を指定します。  デフォルトの<code>NULL</code>は、<code>getOption("digits")</code>を使用します。  これは提案です: (大きさの) 最小の数がこれだけの有効桁数を持つように、また <code>nsmall</code> を満たすように、十分な小数位が使用されます(複素数の解釈については <code>signif</code> を参照してください)。
許容される値は <code>0 &lt;= nsmall &lt;= 20</code> です。
<em>文字</em>ベクトルを左寄せ(デフォルト)、右寄せ、中央揃え、またはそのままにします。  省略可能。
<code>default</code> method: <em>最小</em>フィールド幅、または<code>NULL</code>または<code>0</code>で制限なし。

<code>AsIs</code>メソッド: 非文字オブジェクトの<em>最大</em>フィールド幅。  <code>NULL</code> はデフォルトの <code>12</code> に対応します。
論理: <code>NA</code> 文字列はエンコードされるべきか？  これは文字ベクトルの要素にのみ適用され、数値、複素数、論理の<code>NA</code>には適用されません。
実数または複素数ベクトルの要素が scientificformat でエンコードされるべきかを指定する論理か、整数のペナルティ(<code>options("scipen")</code>を参照)のどちらかを指定します。
他のメソッドに渡される、あるいは他のメソッドから渡される更なる引数。
<code>prettyNum</code>に渡されます: 詳細はヘルプページを参照してください。
date-timeまたはdateオブジェクト。
主に<code>"POSIXlt"</code>オブジェクトに使われます。
文字列。  変換結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数、または他のメソッドから渡される引数。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New; color: #666666;"><b>R</b></span> オブジェクト (概念的); 通常は数値。
論理値; <code>FALSE</code>の場合、論理値、数値、複素数は共通の幅で右寄せされます: <code>TRUE</code>の場合、右寄せのための先頭の空白は抑制されます。
<code>TRUE</code>の場合、数値と複素数<code>x</code>の有効桁数を指定します。  デフォルトの<code>NULL</code>は、<code>getOption("digits")</code>を使用します。  これは提案です: (大きさの) 最小の数がこれだけの有効桁数を持つように、また <code>nsmall</code> を満たすように、十分な小数位が使用されます(複素数の解釈については <code>signif</code> を参照してください)。
許容される値は <code>0 &lt;= nsmall &lt;= 20</code> です。
<em>文字</em>ベクトルを左寄せ(デフォルト)、右寄せ、中央揃え、またはそのままにします。  省略可能。
<code>default</code> method: <em>最小</em>フィールド幅、または<code>NULL</code>または<code>0</code>で制限なし。

<code>AsIs</code>メソッド: 非文字オブジェクトの<em>最大</em>フィールド幅。  <code>NULL</code> はデフォルトの <code>12</code> に対応します。
論理: <code>NA</code> 文字列はエンコードされるべきか？  これは文字ベクトルの要素にのみ適用され、数値、複素数、論理の<code>NA</code>には適用されません。
実数または複素数ベクトルの要素が scientificformat でエンコードされるべきかを指定する論理か、整数のペナルティ(<code>options("scipen")</code>を参照)のどちらかを指定します。
他のメソッドに渡される、あるいは他のメソッドから渡される更なる引数。
<code>prettyNum</code>に渡されます: 詳細はヘルプページを参照してください。
<code>"hexmode"</code>クラスを継承するメソッド用のオブジェクト。
<code>NULL</code>または、使用する最小フィールド幅を指定する正の整数。
大文字を使うか小文字を使うかを示す論理値（デフォルト）。
他のメソッドに渡される、または他のメソッドから渡されるさらなる引数。
<code>format(x,...)</code>の潜在的な引数。
数値や複素数の<code>x</code>に対して、有効桁数をいくつにするか。  デフォルトの<code>NULL</code>は、<code>getOption("digits")</code>を使用します。
 (<code>format(..., nsmall)</code>を参照)。
パッケージ名は、<code>character.only</code>が<code>FALSE</code> (デフォルト)か<code>TRUE</code>かによって、名前か文字列、または文字列で指定されます。
ロードされた名前空間をアタッチする検索リストの位置。  <code>search()</code>で指定された現在の検索リスト上の位置の名前でもよい。
<span style="font-family：font-family: Courier New, Courier; color：#または <code>NULL</code>.  デフォルト値の<code>NULL</code>は、現在<code>.libPaths()</code>で知られている全てのライブラリに対応します。
<code>package</code> または <code>help</code> が文字列であると仮定できるかどうかを示す論理。
を論理的に指定する。  これが<code>TRUE</code>の場合、<code>FALSE</code>または<code>TRUE</code>が成功を示すために返される。
を論理的に返します。  <code>TRUE</code>の場合、新しいパッケージのアタッチによる<code>衝突</code>に関する警告が表示される。  衝突とは、関数をマスクする関数、または非関数をマスクする非関数のことです。デフォルトは、<code>conflicts.policy</code>オプションで<code>FALSE</code>と指定されない限り、<code>TRUE</code>である。
論理的である。  <code>TRUE</code>の場合、追加の診断が表示される。
論理。  <code>TRUE</code> の場合、パッケージのアタッチを確認するメッセージは表示されず、パッケージのアタッチに失敗してもエラーや警告は表示されません。
パッケージ名を示す文字列。
ストリクト・コンフリクト・チェックが有効な場合に、エラーを通知することなく検索パス上のオブジェクトをマスクすることができるオブジェクト名の文字ベクトル。
アタッチされたフレームに除外または含めるオブジェクト名の文字ベクトル。<code>library</code>または<code>require</code>の呼び出しでは、これらの引数のうち1つのみを使用することができます。
<code>DESCRIPTION</code> ファイルの <code>Depends</code> 節にリストされた必須パッケージを自動的にアタッチするかどうかを指定する論理。
<code>package_version</code>の場合は、<code>R.version</code>で得られるRversionオブジェクト。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理。
<code>"octmode"</code>クラスを継承するメソッド用のオブジェクト。
<code>NULL</code>または、使用される最小フィールド幅を指定する正の整数。
他のメソッドに渡される、または他のメソッドから渡される引数。
パッケージ名。<code>character.only</code>が<code>FALSE</code>（デフォルト）か<code>TRUE</code>かによって、名前か文字列、または文字列として与えられる。
ロードされた名前空間をアタッチする検索リストの位置。  <code>search()</code>で指定された現在の検索リスト上の位置の名前でもよい。
<span style="font-family：font-family: Courier New, Courier; color：#または <code>NULL</code>.  デフォルト値の<code>NULL</code>は、現在<code>.libPaths()</code>で知られている全てのライブラリに対応します。
<code>package</code> または <code>help</code> が文字列であると仮定できるかどうかを示す論理。
を論理的に指定する。  これが<code>TRUE</code>の場合、<code>FALSE</code>または<code>TRUE</code>が成功を示すために返される。
を論理的に返します。  <code>TRUE</code>の場合、新しいパッケージのアタッチによる<code>衝突</code>に関する警告が表示される。  衝突とは、関数をマスクする関数、または非関数をマスクする非関数のことです。デフォルトは、<code>conflicts.policy</code>オプションで<code>FALSE</code>と指定されない限り、<code>TRUE</code>である。
論理的である。  <code>TRUE</code>の場合、追加の診断が表示される。
論理。  <code>TRUE</code> の場合、パッケージのアタッチを確認するメッセージは表示されず、パッケージのアタッチに失敗してもエラーや警告は表示されません。
パッケージ名を示す文字列。
ストリクト・コンフリクト・チェックが有効な場合に、エラーを通知することなく検索パス上のオブジェクトをマスクすることができるオブジェクト名の文字ベクトル。
アタッチされたフレームに除外または含めるオブジェクト名の文字ベクトル。<code>library</code>または<code>require</code>の呼び出しでは、これらの引数のうち1つのみを使用することができます。
<code>DESCRIPTION</code> ファイルの <code>Depends</code> 節にリストされた必須パッケージを自動的にアタッチするかどうかを指定する論理。
変換されるオブジェクト：<code>strptime</code>では文字ベクトル、<code>strftime</code>では<code>"POSIXlt"</code>に変換できるオブジェクト。
変換に使用するタイムゾーンを指定する文字列。  システム固有(<code>as.POSIXlt<//code>を参照)ですが、<code>""</code>は現在のタイムゾーンで、<code>"GMT"</code>はUTCです。
文字列。  <code>format</code>メソッドのデフォルトは、<code>"%Y-%m-%d %H:%M:%S"</code> であり、それ以外の場合は<code>"%Y-%m-%d"</code>となります。  もし<code>options("digits.secs")</code>が設定されていれば、指定された桁数までの秒数が表示される。
他のメソッドから、あるいは他のメソッドに渡す引数。
を論理的に指定します。  タイムゾーンの省略形を出力に付加するか。  これは時刻を表示する際に使われ、<code>"%Z"</code>を使うよりも信頼性が高い。
変換されるオブジェクト：<code>strptime</code>では文字ベクトル、<code>strftime</code>では<code>"POSIXlt"</code>に変換できるオブジェクト。
変換に使用するタイムゾーンを指定する文字列。  システム固有(<code>as.POSIXlt<//code>を参照)ですが、<code>""</code>は現在のタイムゾーンで、<code>"GMT"</code>はUTCです。
文字列。  <code>format</code>メソッドのデフォルトは、<code>"%Y-%m-%d %H:%M:%S"</code> であり、それ以外の場合は<code>"%Y-%m-%d"</code>となります。  もし<code>options("digits.secs")</code>が設定されていれば、指定された桁数までの秒数が表示される。
他のメソッドから、あるいは他のメソッドに渡す引数。
を論理的に指定します。  タイムゾーンの省略形を出力に付加するか。  これは時刻を表示する際に使われ、<code>"%Z"</code>を使うよりも信頼性が高い。
数値ベクトル。
何桁の有効数字を使うか。
数値許容誤差: '詳細'を参照。
<code>NA</code>s の文字表現。
<code>nsmall</code> のような、<code>format</code>に渡されるさらなる引数。
要約が必要なオブジェクト。
<code>summary()</code>の<em>default</em>メソッドの結果。
<code>factor</code>に対して、いくつのレベルを表示すべきかを示す整数。
<code>signif()</code>（<code>summary.default</code>の場合）または<code>format()</code>（<code>summary.data.frame</code>の場合）で数値をフォーマットするために使用される整数。  <code>summary.default</code>では、もし指定されなければ(すなわち、<code>missing(.)</code>)、<code>signif()</code>はもう呼び出されません(<span style="font-family：Courier New, Courier; color：<span style="font: Courier New; color: #666666;"><b>R</b></span> &gt;= 3.4.0 では、デフォルトは <code>print</code> と <code>format</code> メソッドで round のみとなりました)。
<code>quantile(*, type=quantile.type)</code>でデフォルトのメソッドに使用される整数コード。
生成される要約に影響を与える追加引数。
原子数値または文字オブジェクトで、<code>prettyNum()</code>の場合のみ<code>complex</code>となる可能性があり、通常は実数のベクトルです。  どのようなクラスでも警告とともに破棄される。
小数点以下の桁数(<code>format = "f"</code>)、または<em>有効</em>桁数(<code>format = "g"</code>、 <code>= "e"</code>または<code>= "fg"</code>)。

デフォルト：整数の場合は2、実数の場合は4。  0未満の場合、Cのデフォルトである6桁が使われる。  50桁以上指定した場合、<code>format = "f"</code>で通常324桁に制限されない限り、警告とともに50桁が使用される。(使用するOSやコンパイラにもよりますが、15～21桁以下が正確である必要はありません。  この制限は、基礎となるCランタイムのセグメンテーション・フォールトに対する予防措置に過ぎない)。
<code>digits</code> と <code>width</code> の両方が指定されていない場合、 <code>width</code> のデフォルトは 1 で、そうでなければ <code>digits + 1</code> となります。  <code>width = 0</code> は<code>width = digits</code> を使用し、<code>width &lt; 0</code> はこのフィールドの数値を左詰めにすることを意味する (<code>flag = "-"</code> と等価)。  文字データの場合、これは文字数で解釈される(バイト数でも表示幅でもない)。
<code>"d"</code> (整数の場合)、<code>"f"</code>、<code>"e"</code>、<code>"E"</code>、<code>"g"</code>、<code>"G"</code> (整数の場合)、<code>"fg"</code> (整数の場合)、<code>"s"</code> (文字列の場合) に等しい。  デフォルトは、整数の場合は <code>"d"</code>、実数の場合は <code>"g"</code>。

<code>"f"</code>は通常の<code>xxx.xxx</code>の書式で数値を与える; <code>"e"</code>と<code>"E"</code>は<code>n.ddde+nn</code>または<code>n.dddE+nn</code> (scientific format); <code>"g"</code> and <code>"G"</code> put<code>x[i]</code> into scientific format only if it saves space to do so<em></em> drop trailing zeros and decimal point - unless <code>flag</code>contains <code>"#"</code> which keeps trailing zeros for the <code>"g", "G"</code>formats.

<code>"fg"</code>(我々のハイブリッドフォーマット)は、<code>"f"</code>と同じ固定フォーマットを使用しますが、<code>digits</code>を<em>有効数字</em>の最小数として使用します。  これは、<code>signif</code>とは異なり、<code>digits</code>よりも有効桁数の多い大きな数値を表示することに注意してください。  <code>flag</code> に<code>"#"</code> が含まれていない限り、このフォーマットでは末尾のゼロは<em>取り除かれる</em>。
<code>formatC</code>の場合は、Kernighan and Ritchie (1988, page 243)やC+99標準のような書式修飾子を与える文字列。

先頭のゼロをパッドする；
左詰めを行う、
すべての場合において符号を保証する、すなわち、正の数の場合は<code>"+"</code>となる、
最初の文字が符号でない場合、スペース文字 <code>" "</code> が代わりに使われる。
は、特に<code>format</code>に依存して、「別の出力形式」を指定します。
プラットフォームとロケールの組み合わせによっては、10進数変換のために「千のグループ化」を有効にする、
また、'<span class="file">glibc</span>' のバージョンによっては、整数変換でロケールの代替出力桁があれば、それを使用することができます。
これらのフラグは、任意の順番で複数指定することができる。  その他の文字は、<code>文字</code>フォーマットには影響しないが、<span style="font-family：color：#666666;"><b>R</b></span> 3.4.0.
<code>"double"</code> (または<code>"real"</code>), <code>"integer"</code>または<code>"character"</code>：<code>x</code>の保存モードから決定されます。
もし空でなければ、<code>big.interval</code>の小数点<em>before</em>(したがって<code>big</code>)の間のマークとして使用されます。
上記の<code>big.mark<//code>を参照; デフォルトは3.
文字; もし空でなければ、<code>small.interval</code> 小数点の<em>後</em> (従って、<code>small</code>) 小数点間のマークとして使用されます。
上記の<code>small.mark<//code>を参照してください。
小数点を示すために使われる文字。
<code>x</code> が <code>character</code> の場合、<code>x</code> で小数点として使われていることが知られている文字。
マーク(<code>big.mark</code> または <code>small.mark</code>)が追加された場合に、文字列の幅を可能な限り維持するかどうかを指定する文字列。  デフォルトの<code>"common"</code>は、<code>format</code>のような動作に対応し、<code>"individual"</code>は、<code>formatC()</code>でのデフォルトです。値は省略可能である。
論理値、文字列、または<code>NULL</code>で、<em>ゼロ</em>が特別にフォーマットされるべきかどうかを指定します。  疎な'オブジェクトを印刷するのに便利です。
論理; <code>zero.print</code>が文字列の場合、<code>x</code>内の正確なゼロのエントリが単に<code>zero.print</code>で置き換えられるべきかを示します。  そうでなければ、それぞれの文字列の幅に応じて、(フォーマットされた)ゼロは<code>zero.print<//code>によって<em>部分的に</em>置き換えられ、<code>""</code>で右詰めにされます。  この場合(偽の<code>replace[.zero]</code>)、<code>zero.print</code>文字列が適合しない場合、警告が出されます(<code>warn.non.fitting</code>が真の場合)。

これは<code>.format.zeros(*, replace=replace.zero)</code> を3回呼び出す<code>prettyNum()</code>によって動作します。
論理; これが真で、<code>replace[.zero]</code>が偽で、<code>zero.print</code>文字列が収まらない場合、<code>警告</code>が通知されます。
論理的で、小数点以下の<code>"0"</code>が削除されるべきかどうかを示します。また、指数フォーマットでは<code>"e+00"</code>も削除されます。  これは単に<code>prettyNum()</code>に渡されます。
オプションの論理で、<code>x</code> が<code>"character"</code>の場合に使用され、それが<code>complex</code>ベクトルに由来するかどうかを示します。  デフォルト(<code>NA</code>)では、<code>x</code>は'complexのように見える'ようにチェックされます。
<code>format</code> に渡される引数。
<code>x</code> と同じ長さの数値ベクトルで、典型的には、文字ベクトル <code>x</code> がプリフォーマットである数値。
記述される項目を与えるベクトル、または長さ2のリスト、または項目と記述の両方を与える2列の行列。
<code>x</code> と同じ長さのベクトル。  <code>x</code>がまだ説明を与えていない場合にのみ使用されます。
説明情報のレンダリングスタイルを指定する文字列。  <code>"table"</code>の場合、項目と説明をカラムとする2カラムのテーブルが生成されます（Texinfoの<code style="white-space: pre;">@table</code>環境に似ています）。  <code>"list"</code> の場合、LaTeX 形式のタグ付き説明文リストが得られます。
出力の折り返し行の対象となる列を指定する正の整数。
表形式では2番目の列のインデントを、リスト形式では継続行のインデントを指定する正の整数。  <code>width/2</code>より大きくてはならず、デフォルトは、テーブルスタイルでは<code>width/3</code>、リストスタイルでは<code>width/9</code>である。
解かれるシステムの係数を与える上(または下)三角行列.  対角より下(上)の値は無視される.
列が方程式の右辺を与える行列.
使用する <code>r</code> の列数と <code>x</code> の行数.
論理; もし <code>TRUE</code> (デフォルト) なら、<code>r</code>の<em>上</em><em>三</em>角部分が使用されます。  そうでない場合は、下側のものが使われる。
論理; もし <code>TRUE</code> なら、<i>r' * y = x</i> for<i>y</i>, すなわち <code>t(r) %*% y == x</code>.
空または 1 つ以上の name または name=expression 項。
式。
式。
非負数値ベクトル。
数値ベクトル。
整数ベクトル
論理; <code>TRUE</code>の場合、ガベージコレクションはconsセルとベクタに割り当てられた領域に関する統計を表示する。
logical; もし <code>TRUE</code> ならば、最大使用領域の値は現在の値にリセットされる。
論理; もし <code>TRUE</code> ならば、完全なコレクションが実行される。
論理; もし <code>TRUE</code> なら、GC タイミングを有効にする。
論理; もし <code>TRUE</code> なら、ガベージコレクションは cons セルとベクタに割り当てられた領域に関する統計を表示する。
logical; もし <code>TRUE</code> ならば、最大使用領域の値は現在の値にリセットされる。
論理; もし <code>TRUE</code> ならフルコレクションが実行され、そうでなければ最近割り当てられたオブジェクトのみがコレクションされる。
論理; on/offを切り替える。
integer; <code>step</code>割り当てごとにGCを実行する; <code>step = 0</code>はGCの拷問をオフにする。
integer; GC拷問を開始する前に待つ割り当て数。
論理; フリーオブジェクトを再使用のために解放しない。
logical; オン/オフを切り替える。
integer; <code>step</code>アロケーションごとにGCを実行する。<code>step = 0</code>はGCの拷問をオフにする。
integer; GC拷問を開始する前に待つ割り当て数。
論理; フリーオブジェクトを再使用のために解放しない: 注意して使用すること。
<code>get</code>の場合は、オブジェクト名（文字列またはシンボルで指定）。<br><code>mget</code>の場合は、オブジェクト名の文字ベクトル。
<br><code>mget</code>の場合は、オブジェクト名の文字ベクトル。オブジェクトを探す場所（'詳細'を参照）。
探しているオブジェクトのモードまたはタイプ。
環境を囲むフレームを検索するか？
<code>mget</code>では、アイテムが見つからない場合に使用される値の<code>list</code>です: 必要であれば、リストに強制されます。<br><code>dynGet</code>では、任意の<span style="font-family：color：#666666;"><b>R</b></span>オブジェクト、例えば<code>stop()</code>への呼び出し。
検索する最小フレーム番号を指定する整数。
変数名（文字列またはシンボルで指定）。
もし省略された場合、この関数はオブジェクトの名前が式の中で引用符で囲まれていないかのように検索します。
を指定することもできますが、通常は <code>where</code> 引数を使用する方が簡単です。
呼び出しリストのフレーム。  <code>sys.frame(frame)</code>のように<code>where</code>を与えるのと同じです。
求めるオブジェクトのモードまたはタイプ: 「詳細」セクションを参照してください。
環境を囲むフレームが検索されるべきか？
<code>x</code>が存在しない場合の<code>get0(x, *)</code> の戻り値。
logical: true の場合、閉じた接続と標準の接続を含むすべての接続が表示されます。  falseの場合、ユーザが作成したオープン接続のみが表示されます。
integer: <code>showConnections</code> で指定されたテーブルの行番号。
接続。
デフォルトでは、ネイティブ・ルーチンが呼び出されている現在の関数が呼び出されます。
名前空間やDLLが見つからないことがエラー（<code>TRUE</code>）かそうでないか（<code>FALSE</code>）を示す論理値。  デフォルトは<code>FALSE</code>で、<code>.C</code>, <code>.Call</code>, <code>.Fortran</code>, <code>.External</code>呼び出しで<code>PACKAGE</code>引数がないために呼び出された場合、エラーは発生せず、すべてのDLLを順番に検索して通常の検索が実行されます。
環境。
デフォルトでは、ネイティブ・ルーチンが呼び出されている現在の関数が呼び出されます。
名前空間やDLLが見つからないことがエラー（<code>TRUE</code>）かそうでないか（<code>FALSE</code>）を示す論理値。  デフォルトは<code>FALSE</code>で、<code>.C</code>, <code>.Call</code>, <code>.Fortran</code>, <code>.External</code>呼び出しで<code>PACKAGE</code>引数がないために呼び出された場合、エラーは発生せず、すべてのDLLを順番に検索して通常の検索が実行されます。
環境。
論理: true の場合、閉じた接続と標準の接続を含むすべての接続が表示されます。  false の場合、ユーザが作成したオープン接続のみが表示されます。
integer: <code>showConnections</code> で指定されたテーブルの行番号。
コネクション。
文字列または<code>DLLInfo</code>オブジェクト.文字列は、対象となるDLLのファイル名を指定します、ファイル '<span class="file">MyPackage/libs/MyPackage.so</span>' は、<span class="samp">MyPackage</span> として指定されます。

<code>DLLInfo</code>オブジェクトは、<code>dyn.load</code>と<code>library.dynam</code>の呼び出しで直接得ることができ、また、DLLがロードされた後に、<code>getLoadedDLLs</code>を使用して見つけることができます。

<code>DLLInfo</code>のアプローチは、同じ名前を持つが、異なるディレクトリのファイルに対応する2つのDLLに関連するあいまいさを回避する。
論理値。  これが<code>TRUE</code>の場合、返されるリストの要素は、ルーチンの名前を使って命名される。  <code>FALSE</code>の場合、これらの名前は計算されず、リストに代入されません。  その結果、呼び出しはより速くなるはずである。  名前情報は、リスト内の<code>NativeSymbolInfo</code>オブジェクトでも利用可能です。
文字列または<code>DLLInfo</code>オブジェクト.文字列は、対象となるDLLのファイル名を指定し、ファイル名の拡張子なしで指定されます（例、ファイル '<span class="file">MyPackage/libs/MyPackage.so</span>' は、<span class="samp">MyPackage</span> として指定されます。

<code>DLLInfo</code>オブジェクトは、<code>dyn.load</code>と<code>library.dynam</code>の呼び出しで直接得ることができ、また、DLLがロードされた後に、<code>getLoadedDLLs</code>を使用して見つけることができます。

<code>DLLInfo</code>のアプローチは、同じ名前を持つが、異なるディレクトリのファイルに対応する2つのDLLに関連するあいまいさを回避する。
論理値。  これが<code>TRUE</code>の場合、返されるリストの要素は、ルーチンの名前を使って命名される。  <code>FALSE</code>の場合、これらの名前は計算されず、リストに代入されません。  その結果、呼び出しはより速くなるはずである。  名前情報は、リスト内の<code>NativeSymbolInfo</code>オブジェクトでも利用可能です。
文字列または<code>DLLInfo</code>オブジェクト.文字列は、対象となるDLLのファイル名を指定し、ファイル名の拡張子なしで指定されます（例、ファイル '<span class="file">MyPackage/libs/MyPackage.so</span>' は、<span class="samp">MyPackage</span> として指定されます。

<code>DLLInfo</code>オブジェクトは、<code>dyn.load</code>と<code>library.dynam</code>の呼び出しで直接得ることができ、また、DLLがロードされた後に、<code>getLoadedDLLs</code>を使用して見つけることができます。

<code>DLLInfo</code>アプローチは、同じ名前を持つが、異なるディレクトリのファイルに対応する2つのDLLに関連するあいまいさを回避する。
論理値。  これが<code>TRUE</code>の場合、返されるリストの要素は、ルーチンの名前を使って命名される。  <code>FALSE</code>の場合、これらの名前は計算されず、リストに代入されません。  その結果、呼び出しはより速くなるはずである。  名前情報は、リスト内の<code>NativeSymbolInfo</code>オブジェクトでも利用可能です。
要素を抽出する、あるいは要素を置換するオブジェクト。
抽出または置換する要素を指定するインデックス。  インデックスは<code>numeric</code>または<code>character</code>ベクトル、または空（欠損）または<code>NULL</code>です。  数値は、<code>as.integer</code>によって整数に強制されます（したがって、ゼロに向かって切り捨てられます）。文字ベクトルは、オブジェクトの<code>names</code>（行列/配列の場合は、<code>dimnames</code>）にマッチします。

<code>[</code>-インデックスのみ：<code>i</code>, <code>j</code>, <code>...</code>は、選択する要素/スライスを示す論理ベクトルである。  <code>i</code>, <code>j</code>, <code>...</code>は、選択から外す要素/スライスを示す負の整数であることもできます。

<code>[</code> によって配列にインデックスを付ける場合、単一の引数 <code>i</code> は、<code>x</code> の次元数と同じ数の列を持つ行列とすることができます; 結果は、<code>i</code> の各行のインデックスの集合に対応する要素を持つベクトルとなります。

<code>NULL</code>のインデックス値は、<code>integer(0)</code>であるかのように扱われる。
リテラル文字列または名前（バックチク引用符で囲むこともできる）。  抽出の場合、これは通常（'Environments'の項を参照）オブジェクトの<code>names</code>に部分的にマッチします。
行列と配列の場合。  <code>TRUE</code>の場合、結果は可能な限り小さい次元に強制されます（例を参照）。  これは要素の抽出にのみ働き、置換には働きません。  詳細は<code>drop</code>を参照してください。
文字ベクトルによる抽出の際に、<code>[[</code>の部分一致の可能性を制御します(ほとんどのオブジェクトに適用されますが、'Environments'の項を参照してください)。  デフォルトは部分マッチングなしです。  値<code>NA</code>は部分マッチングを許可するが、部分マッチングが発生すると警告を発する。  値<code>FALSE</code>は、警告なしで部分一致を許可します。
通常、配列のような<span style="font-family：color：<code>x</code>と同じようなクラスの<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>オブジェクト。
文字に強制することができる0個以上のオブジェクト(セパレータなしで一緒に貼り付けられる)、または単一の条件オブジェクト。
論理的な、呼び出しがエラーメッセージの一部になるかどうかを示す。
<code>gettext</code> を参照のこと。  <code>NA</code>の場合、メッセージは翻訳されない。
文字列または名前空間オブジェクト。
文字列または名前。
文字列: フック名
文字列: パッケージ/名前空間名
文字列: パッケージのイベント。  省略可能。
関数または関数のリスト、<code>action = "replace"</code>の場合は<code>NULL</code>。
実行するアクション。  省略可能。
文字列または名前空間オブジェクト。
文字列または名前。
文字列または名前空間オブジェクト。
文字列または名前。
文字列または名前空間オブジェクト。
文字列または名前。
文字列または名前空間環境。
論理。
環境。
名前空間環境。
文字ベクトル。
オプションの文字ベクトル。
名前空間環境。
ロードするパッケージ/名前空間を指定する文字列。
<code>generics</code>と並列なパッケージ名のベクトル。
ライブラリを指定する文字ベクトル
論理。
文字。
文字。
環境。
3列の文字行列。
文字。
任意のオブジェクト
文字引数。
メソッド・テーブル名。
symbol: 名前空間の名前。
<code>vars</code>がない場合に特に便利。
文字列または名前空間オブジェクト。
文字列または名前。
文字列または名前空間オブジェクト。
文字列または名前。
文字列または名前空間オブジェクト。
文字列または名前。
ネイティブ・シンボルの名前。
このシンボルの検索をどのDLLに制限するかを指定するオプションの引数。  これが<code>"base"</code>の場合、<span style="font-family：courier new, Courier; color：#666666;"><b>R</b></span>実行ファイルそのものを検索します。
<code>unlist</code>が<code>TRUE</code>で、<code>name</code>に含まれるシンボル名の数が1の場合、<code>NativeSymbolInfo</code>オブジェクトが返されます。  もし<code>FALSE</code>であれば、<code>NativeSymbolInfo</code>オブジェクトのリストが返される。<code>name</code>に渡されたシンボルの数が1以上であれば、これは無視される。
もし<code>TRUE</code>なら、<span style="font-family：で登録された情報を返すかどうかを示す論理値：もし<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>で登録されたシンボルとそのパラメータの型に関する情報があればその情報を返し、<code>FALSE</code>ならシンボルのアドレスだけを返す。
<code>name = value</code>を使うことで、どんなオプションでも定義することができます：color：#666666;"><b>R</b></span>で使用されます。

オプションは、名前付きリストである単一の無名引数を与えて渡すこともできる。
オプション名を保持する文字列。
指定したオプションがオプションリストに設定されていない場合は、この値が返されます。  これにより、オプションを取得して、それが設定されているかどうかをチェックし、設定されていない場合は個別に設定することが容易になります。
<code>package_version</code> の場合は、<code>R.version</code> で得られる Rversion オブジェクト。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理値。
 ファイル名。
 ファイルの文字エンコーディング。
 <code>parse</code> の<code>encoding</code>引数を参照のこと。
 ソース行の文字ベクトル。  その他の<span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトは文字に強制されます。
 ファイルのコピーに使用するタイムスタンプ。
 この <code>srcfilecopy<//code> はファイルシステムファイルから来たものですか？
 <code>srcfile</code> オブジェクト。
 行番号。
 詳細'を参照。
 適切なクラスのオブジェクト。
 <code>srcref</code> のテキストを得るために <code>srcfile</code> を読むかどうか。
 文字範囲の終端を示すオプションの 2 番目の <code>srcref</code> オブジェクト。
 これらは無視されます。
1つ以上の文字ベクトル。
変換の'ドメイン'。
非負の整数。
<code>n = 1</code>の場合に英語で使われるメッセージ。
<code>n = 0, 2, 3, ...</code> の場合に英語で使われるメッセージ。
ドメイン用に翻訳されたメッセージカタログを探すディレクトリ。
最大8192バイトのフォーマット文字列の文字ベクトル。
<code>fmt</code>に渡す値。  論理ベクトル、整数ベクトル、実数ベクトル、文字ベクトルのみがサポートされるが、多少の強制は行われる。最大100まで。
<code>gettext</code> を参照のこと。
文字列: チルダ展開が行われます。
レベル数を示す整数。
複製数を示す整数。
結果の長さを示す整数。
結果の factorlevels のラベルのオプションのベクトル。
結果を並べ替えるかどうかを示す論理。
条件オブジェクト。
call式。
条件オブジェクト。
評価される式。
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
詳細は後述する。
<code>function</code>、<code>formula</code>、または<code>NULL</code>。
関数に関連付ける環境
任意の<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
もし <code>TRUE</code> ならば、環境はハッシュテーブルを使う。
作成された環境のエンクロージャとして使用される環境。
環境
ハッシュ環境の初期サイズを指定する整数。  <code>size</code> が <code>NA</code> またはゼロの場合、内部デフォルト値が使用されます。  <code>hash</code> が <code>FALSE</code> の場合、この引数は無視される。
与えられた文字ベクトルでマッチする正規表現(<code>fixed = TRUE</code>の場合は文字列)を含む文字列。  可能であれば、<code>as.character</code>によって文字列に強制されます。  長さが2以上の文字ベクトルが与えられた場合、警告とともに最初の要素が使用されます。  <code>regexpr</code>、<code>gregexpr</code>、<code>regexec</code>を除き、欠落値も許される。
マッチを求める文字ベクトル、または、<code>as.character</code>によって文字ベクトルに強制できるオブジェクト。  長いベクトルもサポートされています。
<code>FALSE</code> の場合、パターンマッチは <em>casesensitive</em> となり、 <code>TRUE</code> の場合、大文字小文字は無視されます。
を使用します。  Perl 互換の正規表現を使うべきか？
もし<code>FALSE</code>ならば、<code>grep</code>によって決定されたマッチの(<code>integer</code>)インデックスを含むベクトルが返され、もし<code>TRUE</code>ならば、マッチした要素そのものを含むベクトルが返されます。
を論理的に返します。  もし<code>TRUE</code>ならば、<code>pattern</code>はそのままマッチする文字列となる。  競合するすべての引数を上書きする。
論理的な引数。  <code>TRUE</code>の場合、マッチングは文字単位ではなくバイト単位で行われる。  詳細'を参照のこと。
論理的なマッチングを行う。  <code>TRUE</code> の場合、マッチしない要素のインデックスまたは値を返す。
<code>sub</code> および <code>gsub</code> でマッチしたパターンの置換。  可能であれば文字に強制される。  <code>fixed=FALSE</code>の場合、<code>"◆1"</code>から<code>"◆9"</code>まで、<code>pattern</code>の括弧で囲まれた部分式への後方参照<code>"◆1"</code>を含むことができます。  <code>perl=TRUE</code>の場合のみ、<code>"˶"</code>または<code>"˶L"</code>で大文字または小文字に変換し、<code>"˶"</code>で大文字小文字の変換を終了します。  長さが2以上の文字ベクトルが供給された場合、最初の要素は警告とともに使用される。  <code>NA</code> の場合、マッチに対応する結果の全ての要素は <code>NA</code> に設定される。
与えられた文字ベクトルでマッチする正規表現(<code>fixed = TRUE</code>の場合は文字列)を含む文字列。  可能であれば、<code>as.character</code>によって文字列に強制されます。  長さが2以上の文字ベクトルが与えられた場合、警告とともに最初の要素が使用されます。  <code>regexpr</code>、<code>gregexpr</code>、<code>regexec</code>を除き、欠落値も許される。
マッチを求める文字ベクトル、または、<code>as.character</code>によって文字ベクトルに強制できるオブジェクト。  長いベクトルもサポートされています。
<code>FALSE</code> の場合、パターンマッチは <em>casesensitive</em> となり、 <code>TRUE</code> の場合、大文字小文字は無視されます。
を使用します。  Perl 互換の正規表現を使うべきか？
もし<code>FALSE</code>ならば、<code>grep</code>によって決定されたマッチの(<code>integer</code>)インデックスを含むベクトルが返され、もし<code>TRUE</code>ならば、マッチした要素そのものを含むベクトルが返されます。
を論理的に返します。  もし<code>TRUE</code>ならば、<code>pattern</code>はそのままマッチする文字列となる。  競合するすべての引数を上書きする。
論理的な引数。  <code>TRUE</code>の場合、マッチングは文字単位ではなくバイト単位で行われる。  詳細'を参照のこと。
論理的なマッチングを行う。  <code>TRUE</code> の場合、マッチしない要素のインデックスまたは値を返す。
<code>sub</code> および <code>gsub</code> でマッチしたパターンの置換。  可能であれば文字に強制される。  <code>fixed=FALSE</code>の場合、<code>"◆1"</code>から<code>"◆9"</code>まで、<code>pattern</code>の括弧で囲まれた部分式への後方参照<code>"◆1"</code>を含むことができます。  <code>perl=TRUE</code>の場合のみ、<code>"˶"</code>または<code>"˶L"</code>で大文字または小文字に変換し、<code>"˶"</code>で大文字小文字の変換を終了します。  長さが2以上の文字ベクトルが供給された場合、最初の要素は警告とともに使用される。  <code>NA</code> の場合、マッチに対応する結果の全ての要素は <code>NA</code> に設定される。
与えられた文字ベクトルでマッチする正規表現(<code>fixed = TRUE</code>の場合は文字列)を含む文字列。  可能であれば、<code>as.character</code>によって文字列に強制されます。  長さが2以上の文字ベクトルが与えられた場合、警告とともに最初の要素が使用されます。  <code>regexpr</code>、<code>gregexpr</code>、<code>regexec</code>を除き、欠落値も許される。
マッチを求める文字ベクトル、または、<code>as.character</code>によって文字ベクトルに強制できるオブジェクト。  長いベクトルもサポートされています。
<code>FALSE</code> の場合、パターンマッチは <em>casesensitive</em> となり、 <code>TRUE</code> の場合、大文字小文字は無視されます。
を使用します。  Perl 互換の正規表現を使うべきか？
もし<code>FALSE</code>ならば、<code>grep</code>によって決定されたマッチの(<code>integer</code>)インデックスを含むベクトルが返され、もし<code>TRUE</code>ならば、マッチした要素そのものを含むベクトルが返されます。
を論理的に返します。  もし<code>TRUE</code>ならば、<code>pattern</code>はそのままマッチする文字列となる。  競合するすべての引数を上書きする。
論理的な引数。  <code>TRUE</code>の場合、マッチングは文字単位ではなくバイト単位で行われる。  詳細'を参照のこと。
論理的なマッチングを行う。  <code>TRUE</code> の場合、マッチしない要素のインデックスまたは値を返す。
<code>sub</code> および <code>gsub</code> でマッチしたパターンの置換。  可能であれば文字に強制される。  <code>fixed=FALSE</code>の場合、<code>"◆1"</code>から<code>"◆9"</code>まで、<code>pattern</code>の括弧で囲まれた部分式への後方参照<code>"◆1"</code>を含むことができます。  <code>perl=TRUE</code>の場合のみ、<code>"˶"</code>または<code>"˶L"</code>で大文字または小文字に変換し、<code>"˶"</code>で大文字小文字の変換を終了します。  長さが2以上の文字ベクトルが供給された場合、最初の要素は警告とともに使用される。  <code>NA</code> の場合、マッチに対応する結果の全ての要素は <code>NA</code> に設定される。
与えられた文字ベクトルでマッチする正規表現(<code>fixed = TRUE</code>の場合は文字列)を含む文字列。  可能であれば、<code>as.character</code>によって文字列に強制されます。  長さが2以上の文字ベクトルが与えられた場合、警告とともに最初の要素が使用されます。  <code>regexpr</code>、<code>gregexpr</code>、<code>regexec</code>を除き、欠落値も許される。
マッチを求める文字ベクトル、または、<code>as.character</code>によって文字ベクトルに強制できるオブジェクト。  長いベクトルもサポートされています。
<code>FALSE</code> の場合、パターンマッチは <em>casesensitive</em> となり、 <code>TRUE</code> の場合、大文字小文字は無視されます。
を使用します。  Perl 互換の正規表現を使うべきか？
もし<code>FALSE</code>ならば、<code>grep</code>によって決定されたマッチの(<code>integer</code>)インデックスを含むベクトルが返され、もし<code>TRUE</code>ならば、マッチした要素そのものを含むベクトルが返されます。
を論理的に返します。  もし<code>TRUE</code>ならば、<code>pattern</code>はそのままマッチする文字列となる。  競合するすべての引数を上書きする。
論理的な引数。  <code>TRUE</code>の場合、マッチングは文字単位ではなくバイト単位で行われる。  詳細'を参照のこと。
論理的なマッチングを行う。  <code>TRUE</code> の場合、マッチしない要素のインデックスまたは値を返す。
<code>sub</code> および <code>gsub</code> でマッチしたパターンの置換。  可能であれば文字に強制される。  <code>fixed=FALSE</code>の場合、<code>"◆1"</code>から<code>"◆9"</code>までの<code>pattern</code>の括弧で囲まれた部分式への後方参照<code>"◆1"</code>を含むことができます。  <code>perl=TRUE</code>の場合のみ、<code>"˶"</code>または<code>"˶L"</code>で大文字または小文字に変換し、<code>"˶"</code>で大文字小文字の変換を終了します。  長さが2以上の文字ベクトルが供給された場合、最初の要素は警告とともに使用される。  <code>NA</code> の場合、マッチに対応する結果の全ての要素は <code>NA</code> に設定される。
与えられた生ベクトルでマッチする正規表現(<code>fixed = TRUE</code>の場合は固定パターン)を含む生ベクトル。  可能であれば、<code>charToRaw</code>によって文字列に強制されます。
マッチを求める生ベクトル、または <code>charToRaw</code> によって生ベクトルに強制できるオブジェクト。  長いベクトルはサポートされていません。
<code>FALSE</code> の場合、パターンマッチは <em>casesensitive</em> となり、 <code>TRUE</code> の場合、大文字小文字は無視されます。
検索を開始するオフセットを指定する整数。  正の値でなければならない。  行頭はそのオフセットにあると定義されるので、 <code>"^"</code>はそこでマッチする。
論理。  戻り値を決定する。
を参照。  <code>TRUE</code>の場合、<code>pattern</code>はそのままマッチするパターンである。
を指定する。  もし <code>TRUE</code> ならば全てのマッチが返され、そうでなければ最初のマッチだけが返される。
を論理的に返します。  <code>TRUE</code> の場合、マッチしない要素のインデックスまたは値を返す。  <code>value = TRUE</code>でない限り無視される（警告付き）。
数値ベクトル、文字ベクトル、論理ベクトル、すべて同じ長さのベクトル、またはクラス化された<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
与えられた文字ベクトルでマッチする正規表現(<code>fixed = TRUE</code>の場合は文字列)を含む文字列。  可能であれば、<code>as.character</code>によって文字列に強制されます。  長さが2以上の文字ベクトルが与えられた場合、警告とともに最初の要素が使用されます。  <code>regexpr</code>、<code>gregexpr</code>、<code>regexec</code>を除き、欠落値も許される。
マッチを求める文字ベクトル、または、<code>as.character</code>によって文字ベクトルに強制できるオブジェクト。  長いベクトルもサポートされています。
<code>FALSE</code> の場合、パターンマッチは <em>casesensitive</em> となり、 <code>TRUE</code> の場合、大文字小文字は無視されます。
を使用します。  Perl 互換の正規表現を使うべきか？
もし<code>FALSE</code>ならば、<code>grep</code>によって決定されたマッチの(<code>integer</code>)インデックスを含むベクトルが返され、もし<code>TRUE</code>ならば、マッチした要素そのものを含むベクトルが返されます。
を論理的に返します。  もし<code>TRUE</code>ならば、<code>pattern</code>はそのままマッチする文字列となる。  競合するすべての引数を上書きする。
論理的な引数。  <code>TRUE</code>の場合、マッチングは文字単位ではなくバイト単位で行われる。  詳細'を参照のこと。
論理的なマッチングを行う。  <code>TRUE</code> の場合、マッチしない要素のインデックスまたは値を返す。
<code>sub</code> および <code>gsub</code> でマッチしたパターンの置換。  可能であれば文字に強制される。  <code>fixed=FALSE</code>の場合、<code>"◆1"</code>から<code>"◆9"</code>まで、<code>pattern</code>の括弧で囲まれた部分式への後方参照<code>"◆1"</code>を含むことができます。  <code>perl=TRUE</code>の場合のみ、<code>"˶"</code>または<code>"˶L"</code>で大文字または小文字に変換し、<code>"˶"</code>で大文字小文字の変換を終了します。  長さが2以上の文字ベクトルが供給された場合、最初の要素は警告とともに使用される。  <code>NA</code> の場合、マッチに対応する結果の全ての要素は <code>NA</code> に設定される。
接続。
0 から 9 までの整数、書き込み時の圧縮レベル。
論理値。  読み込み時に非圧縮入力を許可するか。
論理的。接続をテキスト指向にするか。<code>TRUE</code>の場合、<code>pushBack</code>が動作し、そうでない場合は<code>readBin</code>とそのフレンズが適用されます。
文字列。  接続の説明: '詳細'を参照。
文字列。  接続の開き方(最初に開く場合)。  指定できる値については「モード」のセクションを参照。
論理値。  ブロック」のセクションを参照。
想定するエンコーディングの名前。  エンコーディング」のセクションを参照。
論理値。  trueを指定すると、'raw'インターフェイスが使用され、 通常のファイルではない引数、例えばキャラクタデバイスに適している。  これは、テキストモードでの読み込みのためにオープンする際の 圧縮ファイルのチェックを抑制し、'ファイル'がシーク可能でない可能性があることを 保証する。
<code>c("default", "internal", "winet", "libcurl")</code>に部分的にマッチする文字列。
HTTPrequests で使用する HTTP ヘッダの名前付き文字ベクトル。  非 HTTP URL では無視されます。  <code>HTTPUserAgent</code> オプション (<code>options</code> を参照) から得られる <code>User-Agent</code> ヘッダは、自動的に最初のヘッダとして使われます。
0-9 の整数。  書き込み時に適用する圧縮の量を、なしから最大まで指定します。  <code>xzfile</code>の場合は負の値も指定できます: '圧縮'のセクションを参照してください。
数値: この接続で使用するタイムアウト(秒単位)。  OSによっては、非常に大きな値をゼロとして扱うことがあるので注意してください: しかし、POSIX標準では31日までの値をサポートしています。
オプションの文字ベクトル。現在TCPソケットでサポートされているのは<code>"no-delay"</code>のみである。
zip ファイル内のファイル名。
文字列。  ポートのホスト名。
整数。  TCP ポート番号。
論理。  ソケットをクライアントにするかサーバーにするか。
接続をリッスンするサーバソケット。
コネクション。
文字列。  現在は無視される。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
他のメソッドに渡される、または他のメソッドから渡される引数。
オブジェクト
文字ベクトル、または <code>as.character</code> によって文字ベクトルに変換されるオブジェクト、または <code>iconv(toRaw = TRUE)</code> によって返される <code>NULL</code> と <code>raw</code> 要素を持つリスト。
現在のエンコーディングを表す文字列。
ターゲットエンコーディングを表す文字列。
文字列。  もし<code>NA</code>でなければ、入力中の変換不可能なバイトを置き換えるために使われる。  (<code>"byte"</code>の場合、<code>"&lt;xx&gt;"</code>とバイトの16進コードが表示される。  <code>"Unicode"</code>でUTF-8から変換する場合は、<code>"&lt;U+xxxx&gt;"</code>の形式でUnicodeのポイントを示します。
論理的に、専門家の使用のために。  エンコーディングにマークを付けるべきか。
論理的。  文字ベクトルではなく、生のベクトルのリストを返すべきか。
文字ベクトル、または <code>as.character</code> によって文字ベクトルに変換されるオブジェクト、あるいは <code>iconv(toRaw = TRUE)</code> によって返される <code>NULL</code> と <code>raw</code> 要素を持つリスト。
現在のエンコーディングを表す文字列。
ターゲットエンコーディングを表す文字列。
文字列。  もし<code>NA</code>でなければ、入力中の変換不可能なバイトを置き換えるために使われる。  (<code>"byte"</code>の場合、<code>"&lt;xx&gt;"</code>とバイトの16進コードが表示される。  <code>"Unicode"</code>でUTF-8から変換する場合は、<code>"&lt;U+xxxx&gt;"</code>の形式でUnicodeのポイントを示します。
論理的に、専門家の使用のために。  エンコーディングにマークを付けるべきか。
論理的。  文字ベクトルではなく、生のベクトルのリストを返すべきか。
名前付き引数。
文字列: 省略可能。  照合に使用する実際のロケールか、有効な最も具体的なロケール。
名前付き引数については'詳細'を参照のこと。
文字列: 省略可能。  照合に使用する実際のロケール、または最も具体的なロケールのいずれかを指定する。
任意の<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>オブジェクト。
(<code>double</code>と<code>complex</code> 非<code>NA</code>) 数値が、<code>==</code> ('equal')を使って比較されるべきか、あるいはbitwisecomparisonによって比較されるべきかを示す論理。  後者(デフォルトではない)は、<code>-0</code>と<code>+0</code>を区別する。
<code>single.NA = FALSE</code>はビットパターンを区別します。
<code>x</code> と <code>y</code> の <code>attributes</code> が、<em>unordered</em> taggedpairlists ("sets") として扱われるべきかどうかを示す論理; これは現在、S4 オブジェクトの <code>slot</code>s にも適用されます。  <code>attrib.as.set=FALSE</code>とするのは厳しすぎるかもしれません。
クロージャを比較する際に、バイトコードが無視されるべきかどうかを示す論理。
クロージャを比較する際に、それらの環境を無視すべきかどうかを示す論理。
クロージャを比較する際に、<code>"srcref"</code>属性が無視されるべきかどうかを示す論理。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New; color: #666666;"><b>R</b></span> オブジェクト。
<code>NA</code>でない長さ1の論理ベクトル。1より大きい長さの条件は、現在、警告付きで受け付けられますが、最初の要素だけが使用されます。  環境変数<span class="env">_R_CHECK_LENGTH_1_CONDITION_</span> がtrueに設定されると、代わりにエラーが通知されます。  その他の型は、可能であれば論理型に強制され、クラスは無視される。
変数の構文名。
ベクトル（リストと式を含む）、ペアリスト、<code>NULL</code>に評価される式。  因子値は文字ベクトルに強制される。  <span style="font-family：のように、<span style="font-family: Courier New, Courier; color：<span style="font-family: Courier New; color: #666666;"><b>R</b></span>4.0.0から、これは長いベクトルになります。
形式的な意味での<em>式</em>。  これは単純な式か、いわゆる<em>複合式</em>で、通常は<code>{ expr1 ; expr2 }<//code> の形式です。
論理モードに強制できるオブジェクト。
<code>test</code> の真要素の値を返す。
<code>test</code> の偽の要素に対する値を返す。
数値。  入力は必要に応じて再利用される。
数値ベクトル.
数値ベクトル.
数値ベクトル.
数値ベクトル。
おそらくモード<code>complex</code>のオブジェクト。
モード<code>complex</code>のオブジェクト、またはメソッドが定義されているクラスの1つ。
他のメソッドに渡される、または他のメソッドから渡される引数。
文字列または名前空間環境。
論理。
環境。
名前空間環境。
文字ベクトル。
オプションの文字ベクトル。
名前空間環境。
ロードするパッケージ/名前空間を指定する文字列。
<code>generics</code>と並列なパッケージ名のベクトル。
ライブラリを指定する文字ベクトル
論理。
文字。
文字。
環境。
3列の文字行列。
文字。
任意のオブジェクト
文字引数。
メソッド・テーブル名。
symbol: 名前空間の名前。
特に<code>vars</code>がない場合に便利です。
<span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトをシリアライズします。
接続または<span style="font-family：のあるファイル名です：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトが保存または読み込まれるファイル名。
論理的です。  <code>TRUE</code>または<code>NA</code>の場合、ASCII表現が書き込まれ、そうでない場合(デフォルト)はバイナリが使用されます。<code>save</code>のヘルプのコメントを参照してください。
使用するワークスペース・フォーマットのバージョン。  <code>NULL</code>は現在のデフォルトバージョン(3)を指定します。他にサポートされている値は <span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 1.4.0 から <span style="font-family：を<span style="font-family::Courier New, Courier; color：#666666;"><b>R</b></span> 3.5.0.
名前付きファイルへの保存が <code>"gzip"</code> 圧縮を使うかどうかを指定する論理か、 <code>"gzip"</code>, <code>"bzip2"</code>, <code>"xz"</code> のどれかを使うかを指定する論理。  <code>file</code> が接続の場合は無視される。
参照オブジェクトを扱うためのフック関数。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
クラスの名前を指定する文字ベクトル。  <code>value</code> には <code>NULL</code> を指定することもできます。
戻り値に影響を与える論理値: '詳細'を参照。
Double 値は integer に強制されます: 1 以外の長さの引数を与えるとエラーになります。
強制されるかテストされるオブジェクト。
他のメソッドに渡される、または他のメソッドから渡されるさらなる引数。
相互作用が計算される因子、またはそれらの因子を与える単一のリスト。
<code>drop</code>が<code>TRUE</code>の場合、未使用の因子レベルは結果から取り除かれます。  デフォルトは、すべての因子レベルを保持します。
文字列は、構成要素を結合して新しいレベル・ラベルを構築します。
要素連結の順序を字句順にするかどうかを示す論理。
重複する値のない一連の項目（概念的）を含むベクトル（同じモード）。
変換またはシフトされるオブジェクト。
論理：変換対象は1文字列か複数文字か。
シフトするビット数。  正の数は右にシフトし、負の数は左にシフトします：許容される値は<code>-8 ... 8</code>です。
部分的にマッチした結果の型。
変換されるオブジェクト。
論理：変換対象は1文字の文字列か、複数の文字か。
論理：サロゲートペアの解釈を試みるべきか？  (「詳細」を参照)<code>multiple = FALSE</code>の場合のみサポートされます。
<code>rle()</code>ではベクトル(アトミック、リストではない); <code>inverse.rle()</code>ではクラス<code>"rle"</code>のオブジェクト。
ここでは無視される。
<code>print.default</code>を参照。
印字される各行の前に付加される文字列。
任意の<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式
リターンまたは終了する前に評価される式
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
追加の引数。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式。
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
詳細は後述する。
ベクトル（リストまたは<code>expression</code>ベクトルを含む）。  原子クラスでないオブジェクトは、<code>as.vector</code>で強制されます。
作成される配列の dim 属性は、各次元の最大インデックスを与える1以上の長さの整数ベクトルです。
これは、<code>NULL</code>か、その次元の<code>dim</code>で指定された長さの文字ベクトルで、各次元に1つの要素を持つリストでなければなりません（無視されます）。  リストには名前を付けることができ、リスト名は次元の名前として使用されます。  リストが次元数より短い場合は、<code>NULL</code>で必要な長さまで拡張されます。
<span style="font-family：font-family: Courier New, Courier; color：#オブジェクト。
メソッドに渡す、またはメソッドから渡される追加引数。
テストされるオブジェクト。
呼び出される関数を示す、空でない文字列。
呼び出しの一部となる引数。
任意の<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
Double値はintegerに強制されます:1以外の長さの引数を与えるとエラーになります。
ダブル値は integer に強制されます。
他のメソッドに渡される、あるいは他のメソッドから渡されるさらなる引数。
数値。  入力は必要に応じて再利用される。
数値ベクトル。
数値ベクトル。
数値ベクトル。
数値ベクトル。
おそらくモード<code>complex</code>のオブジェクト。
モード<code>complex</code>のオブジェクト、またはメソッドが定義されているクラスの1つ。
他のメソッドに渡される、あるいは他のメソッドから渡される引数。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
<code>NULL</code> またはデータフレームのローネームを示す文字ベクトル。  欠損値は許されない。
論理値。<code>TRUE</code>の場合、行名の設定と列名の変換（構文名への変換：<code>make.names</code>を参照）はオプションです。  <span style="font-family：color：<code>data.frame(*, check.names = !optional)</code>のテーマで、基本的に列名の処理にのみ<code>optional</code>を使用します。<code>matrix</code>メソッドの<code>make.names</code>引数も参照してください。
メソッドに渡される、またはメソッドから渡される追加引数。
論理: 文字ベクトルを因数に変換するか。
256(または数値の場合は<code>cut.names</code>)文字以上の列名を短くする(そして最後の6文字を<code>" ..."</code>に置き換える)かどうかを示します。
(オプション) 列名の文字ベクトル。
空の列名、すなわち<code>""</code>を(<code>data.frame</code>内で)修正すべきかどうかを示す論理。
論理; <code>data.frame()</code>呼び出しに渡されます。
つまり、<code>FALSE, NA, TRUE</code> のいずれかであり、(行列<code>x</code>の)行名が無効な場合にどうすべきかを示します。  もし無効であれば、デフォルトの<code>TRUE</code>は、<code>make.names(*, unique=TRUE)</code>を呼び出します。<code>make.names=NA</code>は "自動 "行名を使用し、<code>FALSE</code>は無効な行名に対するエラーを通知します。
Double値はintegerに強制されます。1以外の長さの引数を与えるとエラーになります。
強制されるかテストされるオブジェクト。
他のメソッドに渡される、あるいは他のメソッドから渡される引数。
(同じモードの)ベクトルで、重複する値のない一連の項目(概念的に)を含む。
<code>function</code>、<code>formula</code>、または<code>NULL</code>。
関数に関連付ける環境
任意の<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
もし <code>TRUE</code> ならば、環境はハッシュテーブルを使う。
作成された環境のエンクロージャとして使用される環境。
環境
ハッシュ環境の初期サイズを指定する整数。  <code>size</code> が <code>NA</code> またはゼロの場合、内部デフォルト値が使用されます。  <code>hash</code> が <code>FALSE</code> の場合、この引数は無視される。
<code>expression</code>：<span style="font-family：font-family: Courier New, Courier; color：<br><code>as.expression</code>: メソッドに渡される引数。
任意の<span style="font-family：<span style="font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
データのベクトルで、通常は少数の異なる値を取ります。
(文字列として)<code>x</code</code>が取ったかもしれないユニークな値のオプションのベクトル。  デフォルトは、<code>as.character(x)</code>が取った値のユニークな集合で、<em><code>x<//code>の昇順にソートされています。  この集合は、<code>sort(unique(x))</code>より小さく指定できることに注意。
<em>either</em>レベルのラベルのオプションの文字ベクトル(<code>exclude</code>内のものを取り除いた後、<code>levels</code>と同じ順序で)、<em>または</em>長さ 1の文字列。 <code>labels</code>内の重複した値は、<code>x</code>の異なる値を同じ因子レベルにマップするために使用することができます。
レベルの集合を形成するときに除外される値のベクトル。  これは、<code>x</code>と同じレベルセットを持つ因子であってもよいし、<code>文字</code>であるべきである。
論理フラグで、レベルが(与えられた順序で)並べ替えられたとみなされるべきかどうかを決定する。
詳細'を参照のこと。
(<code>ordered(.)</code>内): <code>ordered</code>自身を除いた上記のいずれか。
もし<code>any(is.na(x))</code>が使われるなら、<code>na<//code>レベルを追加する。
<span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> テストされるオブジェクト: デフォルトのメソッドはアトミックベクトルを扱います。
<span style="font-family：font-family: Courier New, Courier; color：font-family: Courier New, Courier; "color: #666666;"><b>R</b></span> オブジェクト。
<span style="font-family：オブジェクト：<span style="font: Courier New; color: #666666;"><b>R</b></span> オブジェクトをテストする。
double 値は integer に強制されます: 1 以外の長さの引数を指定するとエラーになります。
強制されるかテストされるオブジェクト。
他のメソッドに渡される、あるいは他のメソッドから渡される引数。
テストされるオブジェクト。
テストされるオブジェクト。
強制またはテストされるオブジェクト。
すべての値をコピーするか、(デフォルトでは)名前がドットで始まらないものだけをコピーするかを示す論理。
結果のリストの<code>names</code>をソートするかどうかを示す論理。  これは多少コストがかかるが、環境の比較には有用であることに注意。
動的共有オブジェクトとしても知られるDLLへのパス名を示す文字列。  (用語の意味については「詳細」を参照のこと)。
DLL 内のシンボルを DLL 間で共有せず、独自のローカル・テーブルに格納するか、グローバル・シンボル・テーブルに追加するかを制御する論理値。  この効果があるかどうかはシステムに依存する。
すべてのシンボルを、ライブラリがロードされた直後に解決（および再配置）するか、使用されるまで延期するかを制御する論理。  この制御は、開発者がライブラリが完全で、必要なシンボルがすべてあるかどうかをテストしたり、ユーザーが不足シンボルを無視したりするのに便利です。  この効果があるかどうかはシステムに依存する。
将来の拡張のためのその他の引数。
シンボル名を示す文字列。
与えられた場合、<code></code> 名の検索をこの引数で与えられた DLL (従来の拡張子、'<span class="file">.so</span>', '<span class="file">.sl</span>', '<span class="file">.dll</span>', ...) に限定する。  これはパッケージの安全性を高めるためのもので、この引数を使うことで、他のパッケージが外部シンボルを上書きできないようにすることができます。  これは、<code>.C</code>、<code>.Call</code>、<code>.Fortran</code>、<code>.External</code> 関数と同じように使用されます。
探すシンボルの種類: 任意 (<code>""</code>, デフォルト)、<code>"Fortran"</code>、<code>"Call"</code> または <code>"External"</code>。
double 値は integer に強制されます: 1 以外の長さの引数を与えるとエラーになります。
強制されるかテストされるオブジェクト。
他のメソッドに渡される、あるいは他のメソッドから渡されるさらなる引数。
オプションのデータベクトル（リストまたは<code>式</code>ベクトルを含む）。  非アトミッククラスの<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New; color: #666666;"><b>R</b></span> オブジェクトは、<code>as.vector</code>によって強制され、すべての属性は破棄されます。
希望の行数。
希望する列数。
論理的です。もし <code>FALSE</code> (デフォルト) ならば行列は列で埋められ、そうでなければ行列は行で埋められます。
行列の <code>dimnames</code> 属性は、<code>NULL</code> または長さ 2 の <code>list</code> で、それぞれ行と列の名前を指定します。  空のリストは <code>NULL</code> として扱われ、長さ 1 のリストは行名として扱われます。  リストには名前を付けることができ、リスト名は次元の名前として使用される。
<span style="font-family：font-family: Courier New, Courier; color：font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
メソッドに渡される、またはメソッドから渡される追加引数。
結果の行列が文字（<code>NULL</code>ではなく）<code>rownames</code>を持つべきかどうかを示す論理。  デフォルトの <code>NA</code> は、データフレームに 'automatic' row.names がある場合、または 0 行データフレームの場合に <code>NULL</code>rownames を使用します。
<span style="font-family：font-family: Courier New, Courier; color：テストされる<span style="font: Courier New; color: #666666;"><b>R</b></span> オブジェクト: <code>is.na</code>と<code>anyNA</code>のデフォルトメソッドは、アトミックベクトル、リスト、ペアリスト、<code>NULL</code>を扱います。
論理: <code>anyNA</code>はリストやペアリストに再帰的に適用されるべきか?
<code>x</code>で使用するための適切なインデックス・ベクトル。
<span style="font-family：courier new, Courier; color：テストされる<span style="font: Courier New; color: #666666;"><b>R</b></span> オブジェクト: <code>is.na</code>と<code>anyNA</code>のデフォルト・メソッドは、アトミック・ベクトル、リスト、ペアリスト、<code>NULL</code>を扱います。
論理: <code>anyNA</code>はリストやペアリストに再帰的に適用されるべきか?
<code>x</code> で使用するための適切なインデックス・ベクトル。
<code>package_version</code>の場合は、<code>R.version</code>で得られるRversionオブジェクト。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理。
date-timeクラスの1つから出力または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
<span style="font-family：クーリエ・ニュー、クーリエ; color：テストされる<span style="font: Courier New; color: #666666;"><b>R</b></span> オブジェクト: <code>is.na</code>と<code>anyNA</code>のデフォルトメソッドは、アトミックベクトル、リスト、ペアリスト、<code>NULL</code>を扱います。
論理: <code>anyNA</code>はリストやペアリストに再帰的に適用されるべきか?
<code>x</code>で使用するための適切なインデックス・ベクトル。
<span style="font-family：courier new, Courier; color：テストされる<span style="font: Courier New; color: #666666;"><b>R</b></span> オブジェクト: <code>is.na</code>と<code>anyNA</code>のデフォルト・メソッドは、アトミック・ベクトル、リスト、ペアリスト、<code>NULL</code>を扱います。
論理: <code>anyNA</code>はリストやペアリストに再帰的に適用されるべきか?
<code>x</code>で使用される適切なインデックス・ベクトル。
データのベクトルであり、通常は少数の値をとる。
<code>x</code>が取り得るユニークな値(文字列)のオプションのベクトル。  デフォルトは、<code>as.character(x)</code>が取った値のユニークな集合で、<em><code>x</code></em>の昇順にソートされています。  この集合は、<code>sort(unique(x))</code>より小さく指定できることに注意。
<em>either</em>レベルのラベルのオプションの文字ベクトル(<code>exclude</code>内のものを取り除いた後、<code>levels</code>と同じ順序で)、<em>または</em>長さ 1の文字列。 <code>labels</code>内の重複した値は、<code>x</code>の異なる値を同じ因子レベルにマップするために使用することができます。
レベルの集合を形成するときに除外される値のベクトル。  これは、<code>x</code>と同じレベルセットを持つ因子であってもよいし、<code>文字</code>であるべきである。
論理フラグで、レベルが(与えられた順序で)並べ替えられたとみなされるべきかどうかを決定する。
詳細'を参照のこと。
(<code>ordered(.)</code>内): <code>ordered</code>自身を除いた上記のいずれか。
もし<code>any(is.na(x))</code>が使われるなら、<code>na<//code>レベルを追加する。
<code>package_version</code> の場合は、代わりに <code>R.version</code> によって得られる Rversion オブジェクトを指定します。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理。
強制またはテストされるオブジェクト。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> テストされるオブジェクト。
テストまたは強制されるオブジェクト。
無視される。
Double 値は integer に強制されます。1 以外の長さの引数を指定するとエラーになります。
強制またはテストされるオブジェクト。
他のメソッドに渡される、あるいは他のメソッドから渡されるさらなる引数。
<code>package_version</code>の場合は、<code>R.version</code>で得られるRversionオブジェクト。
無効な数値バージョンはエラーになる (デフォルト) かどうかを示す論理値。
Double値はintegerに強制されます:1以外の長さの引数を与えるとエラーになります。
強制されるかテストされるオブジェクト。
他のメソッドに渡される、あるいは他のメソッドから渡される引数。
date-time または date オブジェクト。
主に<code>"POSIXlt"</code>オブジェクトのために、変換に使用されるオプションのタイムゾーン指定。
文字列。  変換結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数。
Double値はintegerに強制されます:1以外の長さの引数を与えるとエラーになります。
強制またはテストされるオブジェクト。
他のメソッドに渡される、あるいは他のメソッドから渡される引数。
テストされるオブジェクト。
データのベクトルで、通常は少数の値を取ります。
<code>x</code>が取ったかもしれないユニークな値(文字列として)のオプションのベクトル。  デフォルトは、<code>as.character(x)</code>が取った値のユニークな集合で、<em><code>x</code></em>の昇順にソートされています。  この集合は、<code>sort(unique(x))</code>より小さく指定できることに注意。
<em>either</em>レベルのラベルのオプションの文字ベクトル(<code>exclude</code>内のものを取り除いた後、<code>levels</code>と同じ順序で)、<em>または</em>長さ 1の文字列。 <code>labels</code>内の重複した値は、<code>x</code>の異なる値を同じ因子レベルにマップするために使用することができます。
レベルの集合を形成するときに除外される値のベクトル。  これは、<code>x</code>と同じレベルセットを持つ因子であってもよいし、<code>文字</code>であるべきである。
論理フラグで、レベルが(与えられた順序で)並べ替えられたとみなされるべきかどうかを決定する。
詳細'を参照のこと。
(<code>ordered(.)</code>内): <code>ordered</code>自身を除いた上記のいずれか。
もし<code>any(is.na(x))</code>が使われるなら、<code>na<//code>レベルを追加する。
<code>package_version</code> の場合は、代わりに <code>R.version</code> によって得られる Rversion オブジェクトを指定します。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理。
オブジェクトの名前。
強制またはテストされるオブジェクト。
すべての値をコピーするか、(デフォルトでは)名前がドットで始まらないものだけをコピーするかを示す論理。
結果のリストの<code>names</code>をソートするかどうかを示す論理。  これは多少コストがかかるが、環境の比較には有用であることに注意。
<span style="font-family：font-family: Courier New, Courier; color：font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
QR分解が計算される数値行列または複素行列。  論理行列は数値に強制されます。
<code>x</code> の列における線形従属性を検出するための許容誤差。<code>LAPACK</code>が偽で、<code>x</code>が実数の場合のみ使用されます。
<code>qr</code> によって計算されるタイプの QR 分解。
方程式の右辺のベクトルまたは行列。
QR分解または(<code>qr.solve</code>のみ)矩形行列。
実効ランク。
論理的.  実数 <code>x</code> の場合、真ならば LAPACK を使用し、そうでなければ LINPACK (デフォルト) を使用します。
他のメソッドに渡される、または他のメソッドから渡される引数
希望の長さ。
強制されるオブジェクト。
テストされるオブジェクト。
テストされるオブジェクト。
強制またはテストされるオブジェクト。
要素(文字列を含む)として解釈できる1つ以上のオブジェクト、または、そのように解釈できる要素を持つリスト(またはデータフレーム)。  (<code>as.table</code>の場合は、特定のメソッドに渡される引数; <code>as.data.frame</code>の場合は、未使用)
<code>...</code>内の全ての要素について削除する水準を指定する。  itが<code>NA</code>を含まず、<code>useNA</code>が指定されていない場合、<code>useNA = "ifany"</code>を意味する。  非要素引数に対する解釈は'Details'を参照のこと。
<code>NA</code> の値をテーブルに含めるかどうか。  省略可能。
結果の次元に与える名前 (<em>dimnames names</em>) を指定します。
デフォルトの<code>dnn</code>がどのように構成されるかを制御します。  詳細'を参照してください。
任意の<span style="font-family：courier new, Courier; color：</span>オブジェクト、または<code>as.data.frame</code>メソッド用のクラス<code>"table"</code>を継承したオブジェクトです。<code>as.data.frame.table(x,*)</code>は、<code>array</code>を "reshaping "するために、テーブルでない<code>x</code>に対して明示的に呼び出されることに注意して下さい。
データフレームの行名を指定する文字ベクトル。
テーブルエントリの列に使用される名前、通常はカウント。
論理: 分類因子は因子(デフォルト)として返すべきか、文字ベクトルとして返すべきか。
<code>provideDimnames</code>に渡されます。
<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトのクラス、または数値、複素数、文字、論理、ローベクトル。
論理的です。  チェックの前に欠落値を除去すべきか。
チェックが<em>厳密に</em>増加する値に対して行われるべきかどうかを示す論理。
アトミック・モード、<code>"list"</code>、<code>"expression"</code>、または(<code>vector</code>を除く)<code>"any"</code>を指定する文字列。  現在のところ、<code>is.vector()</code>は<code>mode</code>に対して任意の型(<code>typeof</code>を参照)を許し、modeが<code>"any"</code>でないとき、<code>is.vector(x, mode)</code>は<code>typeof(x) == mode</code>とほぼ同じです。
は、希望する長さを指定する非負の整数です。  長いベクトル、すなわち<code>length &gt; .Machine$integer.max</code>の場合、<code>"double"</code>型でなければなりません。  1以外の長さの引数を与えるとエラーになります。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
<span style="font-family：オブジェクト：<span style="font: Courier New, Courier; "color: #666666;"><b>R</b></span> オブジェクト。
クラスを指定する文字ベクトル。  <code>value</code> には <code>NULL</code> を指定することもできます。
戻り値に影響を与える論理: '詳細'を参照。
論理: true の場合、閉じた接続と標準の接続を含むすべての接続が表示されます。  false の場合は、ユーザが作成したオープンな接続のみが含まれます。
integer: <code>showConnections</code> で指定したテーブルの行番号。
接続。
文字列またはネームスペース環境。
論理。
環境。
名前空間環境。
文字ベクトル。
オプションの文字ベクトル。
名前空間環境。
ロードするパッケージ/名前空間を指定する文字列。
<code>generics</code>と並列なパッケージ名のベクトル。
ライブラリを指定する文字ベクトル
論理。
文字。
文字。
環境。
3列の文字行列。
文字。
任意のオブジェクト
文字引数。
メソッド・テーブル名。
symbol: 名前空間の名前。
特に<code>vars</code>がない場合に便利です。
解釈された<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>関数。
ブラウザ入力時に取得できるテキスト文字列。
ブラウザが入力されたときに取得できる条件。
オプションのメソッド・シグネチャ。指定された場合、メソッドはジェネリックではなくデバッグされます。
サポート関数<code>debuggingState</code>の呼び出しは、デバッグがグローバルにオンになっていれば<code>TRUE</code>を返し、そうでなければ<code>FALSE</code>を返します。  これらの値のどちらか一方の引数は、状態を設定します。  デバッグ状態が<code>FALSE</code>の場合、デバッグ動作は何も起こりません（しかし、関数内の明示的な<code>browser</code>呼び出しは動作し続けます）。
<code>raw</code>、<code>logical</code> または 'number-like' vector (すなわち、<code>double</code> (class <code>numeric</code>)、<code>integer</code> および <code>complex</code>の型)、またはメソッドが書かれたオブジェクト。
文字列。  詳細'を参照。
文字列。  接続のオープン方法(最初にオープンする場合)。  指定できる値についてはセクション 'モード' を参照。
論理値。  ブロック」のセクションを参照。
想定するエンコーディングの名前。  エンコーディング」のセクションを参照。
論理値。  trueを指定すると、'raw'インターフェイスが使用され、 通常のファイルではない引数、例えばキャラクタデバイスに適している。  これは、テキストモードでの読み込みのためにオープンする際の 圧縮ファイルのチェックを抑制し、'ファイル'がシーク可能でない可能性があることを 保証する。
<code>c("default", "internal", "winet", "libcurl")</code>に部分的にマッチする文字列。
HTTPrequests で使用する HTTP ヘッダの名前付き文字ベクトル。  非 HTTP URL では無視されます。  <code>HTTPUserAgent</code> オプション (<code>options</code> を参照) から得られる <code>User-Agent</code> ヘッダは、自動的に最初のヘッダとして使われます。
0-9 の整数。  書き込み時に適用する圧縮の量を、なしから最大まで指定します。  <code>xzfile</code>の場合は負の値も指定できます: '圧縮'のセクションを参照してください。
数値: この接続で使用するタイムアウト(秒単位)。  OSによっては、非常に大きな値をゼロとして扱うことがあるので注意してください: しかし、POSIX標準では31日までの値をサポートしています。
オプションの文字ベクトル。現在TCPソケットでサポートされているのは<code>"no-delay"</code>のみである。
zip ファイル内のファイル名。
文字列。  ポートのホスト名。
整数。  TCP ポート番号。
論理。  ソケットをクライアントにするかサーバーにするか。
接続をリッスンするサーバソケット。
コネクション。
文字列。  現在は無視される。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
他のメソッドに渡される、または他のメソッドから渡される引数。
文字列または名前空間環境。
論理。
環境。
名前空間環境。
文字ベクトル。
オプションの文字ベクトル。
名前空間環境。
ロードするパッケージ/名前空間を指定する文字列。
<code>generics</code>と並列なパッケージ名のベクトル。
ライブラリを指定する文字ベクトル
論理。
文字。
文字。
環境。
3列の文字行列。
文字。
任意のオブジェクト
文字引数。
メソッド・テーブル名。
symbol: 名前空間の名前。
<code>vars</code>がない場合に特に便利。
文字列または名前空間オブジェクト。
アタッチする位置を指定する整数。
<code>NULL</code> または、パッケージ内のオブジェクト <code>.Depends</code> に記録される依存関係の文字ベクトル。
ロードするパッケージ/名前空間を指定する文字列。
ライブラリ検索パスを指定する文字ベクトル。
パッケージインストール時以外は無視されます。
パッケージのインストール中以外は無視されます。
trueを指定すると、コードを読み込んだ直後に停止します。
<code>NULL</code> またはバージョン指定 (<code>op</code> と <code>version</code> を含むリスト)。
logical: 進捗メッセージやエラーメッセージを抑制するか。
文字列または'名前', <code>as.symbol</code>を参照。
文字ベクトル; <code>library</code> を参照。
<code>loadNamespace</code> に渡す引数。
日を指定する数値。
1日内の時刻を指定する数値。端数秒が許される。
<code>""</code>は現在のタイムゾーン、<code>"GMT"</code>はUTCです。  無効な値はUTCとして扱われ、プラットフォームによっては警告が表示される。
日を指定する数値。
1日内の時間を指定する数値。端数秒は許される。
<code>""</code>は現在のタイムゾーン、<code>"GMT"</code>はUTCです。  無効な値は最も一般的にはUTCとして扱われ、プラットフォームによっては警告が表示される。
文字列。  接続の説明: '詳細'を参照。
文字列。  接続のオープン方法(最初にオープンする場合)。  指定できる値についてはセクション「モード」を参照のこと。
論理値。  ブロック」のセクションを参照。
想定するエンコーディングの名前。  エンコーディング」のセクションを参照。
論理値。  trueを指定すると、'raw'インターフェイスが使用され、 通常のファイルではない引数、例えばキャラクタデバイスなどに適している。  これは、テキストモードでの読み込みのためにオープンする際の 圧縮ファイルのチェックを抑制し、'ファイル'がシーク可能でない可能性があることを 保証する。
<code>c("default", "internal", "winet", "libcurl")</code>に部分的にマッチする文字列。
HTTPrequests で使用する HTTP ヘッダの名前付き文字ベクトル。  非 HTTP URL では無視されます。  <code>HTTPUserAgent</code> オプション (<code>options</code> を参照) から得られる <code>User-Agent</code> ヘッダは、自動的に最初のヘッダとして使われます。
0-9 の整数。  書き込み時に適用する圧縮の量を、なしから最大まで指定します。  <code>xzfile</code>の場合は負の値も指定できます: '圧縮'のセクションを参照してください。
数値: この接続で使用するタイムアウト(秒単位)。  OSによっては、非常に大きな値をゼロとして扱うことがあるので注意してください: しかし、POSIX標準では31日までの値をサポートしています。
オプションの文字ベクトル。現在TCPソケットでサポートされているのは<code>"no-delay"</code>のみである。
zip ファイル内のファイル名。
文字列。  ポートのホスト名。
整数。  TCP ポート番号。
論理。  ソケットをクライアントにするかサーバーにするか。
接続をリッスンするサーバソケット。
コネクション。
文字列。  現在は無視される。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
他のメソッドに渡される、または他のメソッドから渡される引数。
条件オブジェクト。
呼び出し式。
条件オブジェクト
評価される式
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
追加の引数。
任意のRオブジェクト。
オプション、論理：変換の方向を示す。
オプション、論理：S3への変換が完了したかどうか。  通常は必要ないが、詳細セクションを参照。
接続。
数値。  ファイル位置（<code>origin</code>で指定されたオリジンからの相対位置）、または<code>NA</code>。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
文字列。  <code>"start"</code>, <code>"current"</code>,<code>"end"</code>のいずれか: '詳細'を参照。
他のメソッドに渡される、または他のメソッドから渡される引数。
<span style="font-family：courier new, Courier; color：<b>R</b></span> オブジェクト; 行列メソッド用の <code>matrix</code>.
数値スカラー &gt;= 0. 小さい差は考慮されないので、<code>all.equal.numeric</code>を参照してください。
数値スカラー &gt;= 0. <code>isSymmetric.matrix()</code>は、この許容差で「明らかに」非対称なケースを高速に検出するために、最初と最後の数行を「事前テスト」します。  長さを 0 に設定すると、事前テストはスキップされます。
行列メソッドは、これらを <code>all.equal</code> に渡します。  対称性チェックのために<code>object</code>の行名と列名が異なってもよい場合は、<code>check.attributes = FALSE</code>を使用してください！
<span style="font-family：courier new, Courier; color：<b>R</b></span> オブジェクト; 行列メソッド用の <code>matrix</code>.
数値スカラー &gt;= 0. 小さい差は考慮されないので、<code>all.equal.numeric</code>を参照してください。
数値スカラー &gt;= 0. <code>isSymmetric.matrix()</code>は、この許容差で「明らかに」非対称なケースを高速に検出するために、最初と最後の数行を「事前テスト」します。  長さを 0 に設定すると、事前テストはスキップされます。
行列メソッドは、これらを <code>all.equal</code> に渡します。  対称性チェックのために<code>object</code>の行名と列名が異なってもよい場合は、<code>check.attributes = FALSE</code>を使用する！
<code>raw</code>、<code>logical</code> または 'number-like' ベクトル（すなわち、<code>double</code>型（クラス <code>numeric</code>）、<code>integer</code> および <code>complex</code>）、またはメソッドが書かれたオブジェクト。
<em>jitter</em> を追加する数値ベクトル。
数値。
数値; 正の場合、<em>amount</em> (下記参照) として使用され、そうでない場合、<code>= 0</code> の場合、デフォルトは <code>factor * z/50</code> となります。

デフォルト (<code>NULL</code>)：<code>factor * d/5</code> ここで <code>d</code> は <code>x</code> 値間の最小の差です。
クラス <code>"POSIXt"</code> または <code>"Date"</code> を継承したオブジェクト。
論理ベクトル（おそらくリサイクルされる）。  名前は省略されるべきか？
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したlength-oneオブジェクト。
他のメソッドの引数。
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したオブジェクト。
論理ベクトル（おそらくリサイクルされる）。  名前は省略されるべきか？
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したlength-oneオブジェクト。
他のメソッドの引数。
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したオブジェクト。
論理ベクトル（おそらくリサイクルされる）。  名前は省略されるべきか？
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したlength-oneオブジェクト。
他のメソッドの引数。
行列、<code>qr</code>の結果、または<code>"lm"</code>を継承したクラスからの適合。
論理的。  結果は正確か？
文字列で、条件数を計算する行列のノルムを指定します。  <code>rcond</code> の場合、デフォルトは <code>"O"</code> で、これは <b>O</b>ne- または 1-ノルムを意味します。  (現在のところ唯一の)他の可能な値は、無限大ノルムを意味する<code>"I"</code>である。
<code>"qr"</code> は主にバックコンパチビリティのためのデフォルトです。
論理。  true の場合, 使用される行列は <code>z</code> の低三角部分のみとなります.
論理的である。  もし true で <code>z</code> が複素数でなければ、LINPACK ルーチン <code>dtrco()</code> が呼び出されます。
<code>kappa.*()</code>、特に<code>norm</code>が<code>"2"</code>でない場合は<code>LINPACK</code>に渡されます。
行列、<code>qr</code> の結果、または <code>"lm"</code> を継承するクラスからの適合。
論理的でなければならない。  結果は正確か？
文字列で、条件数を計算する行列のノルムを指定します。  <code>rcond</code> の場合、デフォルトは <code>"O"</code> で、これは <b>O</b>ne- または 1-ノルムを意味します。  (現在のところ唯一の)他の可能な値は、無限大ノルムを意味する<code>"I"</code>である。
<code>"qr"</code> は主にバックコンパチビリティのためのデフォルトです。
論理。  true の場合, 使用される行列は <code>z</code> の低三角部分のみとなります.
論理的である。  もし true で <code>z</code> が複素数でなければ、LINPACK ルーチン <code>dtrco()</code> が呼び出されます。
<code>kappa.*()</code>、特に<code>norm</code>が<code>"2"</code>でない場合は<code>LINPACK</code>に渡されます。
行列、<code>qr</code> の結果、または <code>"lm"</code> を継承するクラスからの適合。
論理的でなければならない。  結果は正確か？
文字列で、条件数を計算する行列のノルムを指定します。  <code>rcond</code> の場合、デフォルトは <code>"O"</code> で、これは <b>O</b>ne- または 1-ノルムを意味します。  (現在のところ唯一の)他の可能な値は、無限大ノルムを意味する<code>"I"</code>である。
<code>"qr"</code> は主にバックコンパチビリティのためのデフォルトです。
論理的。  true の場合, 使用される行列は <code>z</code> の低三角部分のみとなります.
論理的である。  もし true で <code>z</code> が複素数でなければ、LINPACK ルーチン <code>dtrco()</code> が呼び出されます。
<code>kappa.*()</code>、特に<code>norm</code>が<code>"2"</code>でない場合は<code>LINPACK</code>に渡されます。
行列、<code>qr</code> の結果、または <code>"lm"</code> を継承するクラスからの適合。
論理的でなければならない。  結果は正確か？
文字列で、条件数を計算する行列のノルムを指定します。  <code>rcond</code> の場合、デフォルトは <code>"O"</code> で、これは <b>O</b>ne- または 1-ノルムを意味します。  (現在のところ唯一の)他の可能な値は、無限大ノルムを意味する<code>"I"</code>である。
<code>"qr"</code> は主にバックコンパチビリティのためのデフォルトです。
論理的。  true の場合, 使用される行列は <code>z</code> の低三角部分のみとなります.
論理的である。  もし true で <code>z</code> が複素数でなければ、LINPACK ルーチン <code>dtrco()</code> が呼び出されます。
<code>norm</code>が<code>"2"</code>でない場合は、特に<code>LINPACK</code>が呼び出されます。
ベクトルまたは配列
ベクトルまたは配列。
引用符で囲まれた文字列であってもよい。
<code>X</code>と<code>Y</code>のdimnamesの積であるdimnamesを指定する。
<code>FUN</code> に渡すオプション引数.
SVD 分解が計算される数値行列または複素行列.  論理行列は数値に強制されます。
これは <code>0</code> から <code>n = nrow(x)</code> までの間でなければなりません。
これは <code>0</code> から <code>p = ncol(x)</code> の間でなければなりません。
論理的でなければならない。  無効でエラー。
任意の<span style="font-family：クーリエ・ニュー、クーリエ; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト: 関数は汎用です。
他のメソッドに渡された、または他のメソッドから渡された引数。
任意の<span style="font-family：font-family: Courier New, Courier; color：font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト: 関数はジェネリックです。
他のメソッドに渡される、または他のメソッドから渡される引数。
ベクトル（アトミックまたはリスト）または<code>式</code>オブジェクト。  その他のオブジェクト(クラス化されたオブジェクトを含む)は<code>base::as.list</code>によって強制されます。
<code>X</code>の各要素に適用される関数は'詳細'を参照して下さい。  <code>+</code>、<code>%*%</code>のような関数の場合、関数名はバッククォートか引用符で囲む必要があります。
<code>FUN</code>のオプション引数。
論理文字列または文字列; 可能であれば、結果はベクトル、行列、または高次元配列に簡略化されるべきか?  <code>simplify = "array"</code> の場合、結果は<code>FUN(X[[i]])</code>の結果より1つ高い "rank"(<i>=</i><code>length(dim(.))</code>)の<code>array</code>になる可能性があります。
論理; <code>TRUE</code> かつ <code>X</code> が文字の場合、<code>X</code> が既に名前を持っていない限り、<code>X</code> を結果の <code>names</code> として使用します。  この引数は<code>...</code>に続くので、その名前を省略することはできません。
(一般化された)ベクトル; FUNからの戻り値のテンプレート。  詳細'を参照のこと。
整数: 複製数。
繰り返し評価する式（言語オブジェクト、通常は呼び出し）。
通常は<code>lapply()</code>から返される。
trueの場合、<code>simplify2array()</code>は適切な場合("高位")配列を生成し、<code>higher = FALSE</code>は行列(またはベクトル)だけを返す。この2つのケースはそれぞれ<code>sapply(*, simplify = "array")</code>または<code>simplify = TRUE</code>に対応する。
拡張子なしのデータベースへのファイルパス。
オブジェクトがロードされる環境。
オプションの関数で、オブジェクト名の文字ベクトルに対して呼び出されると、論理ベクトルを返します。
引数1つ、環境。
拡張子なしのデータベースへのファイルパス。
オブジェクトがロードされる環境。
オブジェクト名の文字ベクトルに対して呼び出されると、論理ベクトルを返すオプションの関数。
1つの引数、環境を持つ関数。
オブジェクト

から要素を抽出する。
<code>"row.names"</code>属性を持つ、典型的にはデータフレーム。
通常はS3またはS4クラス。
パッケージの'<span class="file">DESCRIPTION</span>'ファイルへのフルパス。
lazyload データベースへのファイルパス。
<span style="font-family：font-family: Courier New, Courier; color：#または、<code>NULL</code>となります。  デフォルト値の<code>NULL</code>は、現在<code>.libPaths()</code>で知られているすべてのライブラリに対応します。
を論理的に指定します。  パッケージが見つからない場合、警告やエラーを出すべきではないか?
論理的です。  <code>Imports</code> フィールドを処理すべきか?
論理的: メッセージを表示すべきか。
<code>"packageDescription2"</code> クラスの '<span class="file">DESCRIPTION</span>' ファイル。
<code>"cpu-vendor-os"</code>形式のプラットフォーム文字列。
保存またはロードする画像ファイルの名前。
整数。  現在のところ、<code>type = 0</code>は内部の<code>"row.names"</code>属性(<code>NULL</code>の可能性もある)を返し、<code>type = 2</code>は属性が意味する行数を返し、<code>type = 1</code>は'自動'行名を負符号付きで返す。
整数。  行数。
<code>"package:MASS"</code> のような文字列。
lazyloadデータベースのオブジェクト名。
論理: データベースの値が圧縮されているか。
ロードフック: <code>unserialize</code>を参照。
長さ1の整数ベクトル。
インデックス。
論理的な値です。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
クラスに入れるクラスレス・オブジェクト。
オプションのタイムゾーン。
デフォルト・クラスを<em>含む</em>クラスのオプションの文字ベクトル。
<code>difftime</code> を参照のこと。
ドット名でないバージョンに渡される引数。
整数。
<em>same</em> オブジェクトの文字ベクトル。
マスクされるパッケージを示す文字列。
<em>by</em><code>pkg</code>か、(<code>by = FALSE</code>)<code>pkg</code>からのマスクかを示す論理値。
非負の数値ベクトル。
数値ベクトル。
整数ベクトル。
非負数値ベクトル。
数値ベクトル。
整数ベクトル。
<span style="font-family：font-family: Courier New, Courier; color：font: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。  置換の場合は、ベクトルまたは因子。
非負の整数またはdouble（切り捨てられる）。
date-timeクラスの1つから出力または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>で変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
<span style="font-family：クーリエ・ニュー、クーリエ; color：#666666;"><b>R</b></span>オブジェクト。  置換の場合は、ベクトルまたは係数。
非負の整数または double (切り捨てられる)。
要約または印刷される <code>Date</code> オブジェクト。
計算の有効桁数。
数値または<code>NULL</code>で、表示されるエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>, <code>getOption("max.print")</code>が使用されます。
他のメソッドから、または他のメソッドに渡される更なる引数。
date-timeまたはdateオブジェクト。
主に<code>"POSIXlt"</code>オブジェクトのために、変換に使用されるオプションのタイムゾーン指定。
文字列。  変換結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数。
<span style="font-family：font-family: Courier New, Courier; color：font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。  置換の場合は、ベクトルまたは因子。
非負の整数またはdouble（切り捨てられる）。
date-timeクラスの1つから出力または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
date-timeクラスの1つから、印刷または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
<code>リスト</code>、<code>式</code>のようなリストのようなもの、またはアトミックベクタ(結果は些細なものである)。
結果が<code>x</code>から<code>names</code>を継承するかどうかを示す論理。
オブジェクト、例えば因子。
<code>levels(x)</code>に有効な値。デフォルト・メソッドでは、<code>NULL</code>または文字ベクトル。  <code>factor</code>メソッドの場合は、<code>x</code>のレベル数以上の長さを持つ文字列のベクトル、またはレベルの名前の付け方を指定する名前付きリスト。
オブジェクト、例えば係数。
<code>levels(x)</code>に有効な値。デフォルト・メソッドでは、<code>NULL</code>または文字ベクトル。  <code>factor</code>メソッドの場合は、<code>x</code>のレベル数以上の長さを持つ文字列のベクトル、またはレベルの名前の付け方を指定する名前付きリスト。
オブジェクト、例えば係数。
<code>levels(x)</code>に有効な値。デフォルト・メソッドでは、<code>NULL</code>または文字ベクトル。  <code>factor</code>メソッドの場合は、<code>x</code>のレベル数以上の長さを持つ文字列のベクトル、またはレベルの名前の付け方を指定する名前付きリスト。
オブジェクト、例えば係数。
<code>levels(x)</code>に有効な値。デフォルト・メソッドでは、<code>NULL</code>または文字ベクトル。  <code>factor</code>メソッドの場合は、<code>x</code>のレベル数以上の長さを持つ文字列のベクトル、またはレベルの名前の付け方を指定する名前付きリスト。
非負の数値ベクトル。
数値ベクトル。
整数ベクトル。
非負数値ベクトル。
数値ベクトル。
整数ベクトル。
パッケージ名。<code>character.only</code> が <code>FALSE</code>（デフォルト）か<code>TRUE</code> かによって、名前か文字列、または文字列が指定されます。
ロードされた名前空間をアタッチする検索リストの位置。  <code>search()</code>で指定された現在の検索リスト上の位置の名前でもよい。
<span style="font-family：font-family: Courier New, Courier; color：#または <code>NULL</code>.  デフォルト値の<code>NULL</code>は、現在<code>.libPaths()</code>が知っている全てのライブラリに対応します。
<code>package</code> または <code>help</code> が文字列であると仮定できるかどうかを示す論理。
を論理的に指定する。  これが<code>TRUE</code>の場合、<code>FALSE</code>または<code>TRUE</code>が成功を示すために返される。
を論理的に返します。  <code>TRUE</code>の場合、新しいパッケージのアタッチによる<code>衝突</code>に関する警告が表示される。  衝突とは、関数をマスクする関数、または非関数をマスクする非関数のことです。デフォルトは、<code>conflicts.policy</code>オプションで<code>FALSE</code>と指定されない限り、<code>TRUE</code>である。
論理的である。  <code>TRUE</code>の場合、追加の診断が表示される。
論理。  <code>TRUE</code> の場合、パッケージのアタッチを確認するメッセージは表示されず、パッケージのアタッチに失敗してもエラーや警告は表示されません。
パッケージ名を示す文字列。
ストリクト・コンフリクト・チェックが有効な場合に、エラーを通知することなく検索パス上のオブジェクトをマスクすることができるオブジェクト名の文字ベクトル。
アタッチされたフレームに除外または含めるオブジェクト名の文字ベクトル。<code>library</code>または<code>require</code>の呼び出しでは、これらの引数のうち1つのみを使用することができます。
<code>DESCRIPTION</code> ファイルの <code>Depends</code> 節にリストされた必須パッケージを自動的にアタッチするかどうかを指定する論理。
ロードするDLL（dynamicshared objectまたはlibraryとも呼ばれる）を指定する文字列。
パッケージ名を表す文字ベクトル
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> ライブラリツリーを検索する場所を記述する文字ベクトル。
そのDLLがアンロードされるロードされたパッケージへのパス。
DLLをロードする前にコンソールにアナウンスを表示するかどうかを示す論理値。  デフォルト値は、system<code>options</code>のverboseエントリから取得されます。
拡張子 (<span class="samp">.</span> を使用する場合はそれも含む) をファイル名に追加して、ロードするライブラリを指定します。  デフォルトは、オペレーティング・システムに適した値である。
<code>dyn.load</code>の呼び出しに渡され、ライブラリとその依存関係がどのようにロードされるかを制御する、いくつかのライブラリで必要とされる追加引数。
パッケージによってロードされるDLLに対応する<code>"DLLInfo"</code>オブジェクトのリスト。  見つからないこともあります。
ロードするDLL（dynamicshared objectまたはlibraryとも呼ばれる）を指定する文字列。
パッケージ名を表す文字ベクトル
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> ライブラリツリーを検索する場所を記述する文字ベクトル。
そのDLLがアンロードされるロードされたパッケージへのパス。
DLLをロードする前にコンソールにアナウンスを表示するかどうかを示す論理値。  デフォルト値は、システム<code>options</code>のverboseエントリから取得されます。
拡張子 (<span class="samp">.</span> を使用する場合はそれも含む) をファイル名に追加して、ロードするライブラリを指定します。  デフォルトは、オペレーティング・システムに適した値である。
<code>dyn.load</code>の呼び出しに渡され、ライブラリとその依存関係がどのようにロードされるかを制御する、いくつかのライブラリで必要とされる追加引数。
パッケージによってロードされるDLLに対応する<code>"DLLInfo"</code>オブジェクトのリスト。  見つからないこともあります。
オブジェクトの名前。
強制またはテストされるオブジェクト。
すべての値をコピーするか、(デフォルトでは)名前がドットで始まらないものだけをコピーするかを示す論理。
結果のリストの<code>names</code>をソートするかどうかを示す論理。  これは多少コストがかかるが、環境の比較には有用であることに注意。
デフォルトは作業ディレクトリに対応する<code>getwd()</code>である。  Tildeexpansion（<code>path.expand</code>を参照）が実行される。  欠落した値は無視される。  マークされたエンコーディングの要素は、ネイティブエンコーディングに変換されます (変換に失敗した場合は、存在しないとみなされます)。
オプションの正規表現。  正規表現にマッチするファイル名のみが返されます。
論理値。  <code>FALSE</code>の場合、可視ファイル名のみが返されます(Unixスタイルの可視性、つまり名前がドットで始まらないファイル)。  <code>TRUE</code>の場合、すべてのファイル名が返されます。
論理値。  <code>TRUE</code>の場合、ファイル名の前にディレクトリパスが付加され、相対ファイルパスが返される。<code>FALSE</code>の場合、（パスではなく）ファイル名が返される。
を論理的に返します。  一覧をディレクトリに再帰させるか？
論理的です。  大文字小文字を区別しないパターンマッチングを行うか。
論理的です。  再帰リストにはサブディレクトリ名を含めるべきか?  (再帰でないリストでは常に含まれます)。
論理的。  <code>"."</code>と<code>"."</code>の両方を非再帰的リストから除外すべきか。
フルパス名の文字ベクトル。デフォルトは作業ディレクトリに対応する<code>getwd()</code>。  チルド展開(<code>path.expand<//code>を参照)が実行されます。  欠落した値は無視される。  マークされたエンコーディングの要素は、ネイティブエンコーディングに変換されます (変換に失敗した場合は、存在しないとみなされます)。
オプションの正規表現。  正規表現にマッチするファイル名のみが返されます。
論理値。  <code>FALSE</code>の場合、可視ファイル名のみが返されます(Unixスタイルの可視性、つまり名前がドットで始まらないファイル)。  <code>TRUE</code>の場合、すべてのファイル名が返されます。
論理値。  <code>TRUE</code>の場合、ファイル名の前にディレクトリパスが付加され、相対ファイルパスが返される。<code>FALSE</code>の場合、（パスではなく）ファイル名が返される。
を論理的に返します。  一覧をディレクトリに再帰させるか？
論理的です。  大文字小文字を区別しないパターンマッチングを行うか。
論理的です。  再帰リストにはサブディレクトリ名を含めるべきか?  (再帰でないリストでは常に含まれます)。
論理的。  <code>"."</code>と<code>"."</code>の両方を非再帰的リストから除外すべきか？
データフレームの変数のリスト。
または<code>NULL</code> (デフォルト)、この場合はリストの要素の最大長が使用されます。  必要であれば、リストの要素は行数と同じ長さに複製されます。
ここで、<code>names(x)</code>は空の(<code>""</code>)要素を含んではならない。
<code>environment</code> または <code>NULL</code>.
(<code>envir=NULL</code>の場合): <code>new.env</code>を参照してください。
(<code>envir=NULL</code>の場合): 作成される環境がハッシュを使用するかどうかを示す論理。
(<code>envir = NULL, hash = TRUE</code>の場合): ハッシュサイズ、 <code>new.env</code> を参照。
(読み取り可能なバイナリモードの)接続、または(チルダ展開が行われた場合の)ロードするファイル名を示す文字列。
データがロードされるべき環境。
ロード中に項目名を表示しますか？
文字列または名前空間オブジェクト。
アタッチする位置を指定する整数。
<code>NULL</code> または、パッケージ内のオブジェクト <code>.Depends</code> に記録される依存関係の文字ベクトル。
ロードするパッケージ/名前空間を指定する文字列。
ライブラリ検索パスを指定する文字ベクトル。
パッケージインストール時以外は無視されます。
パッケージのインストール中以外は無視されます。
trueを指定すると、コードを読み込んだ直後に停止します。
<code>NULL</code> またはバージョン指定 (<code>op</code> と <code>version</code> を含むリスト)。
logical: 進行状況やエラーメッセージを抑制するか。
文字列または'名前', <code>as.symbol</code>を参照。
文字ベクトル; <code>library</code> を参照。
<code>loadNamespace</code> に渡すその他の引数。
文字列または名前空間環境。
論理的な
環境。
名前空間環境。
文字ベクトル。
オプションの文字ベクトル。
名前空間環境。
ロードするパッケージ/名前空間を指定する文字列。
<code>generics</code>と並列なパッケージ名のベクトル。
ライブラリを指定する文字ベクトル
論理。
文字。
文字。
環境。
3列の文字行列。
文字。
任意のオブジェクト
文字引数。
メソッド・テーブル名。
symbol: 名前空間の名前。
特に<code>vars</code>がない場合に便利。
文字列または名前空間オブジェクト。
アタッチする位置を指定する整数。
<code>NULL</code> または、パッケージ内のオブジェクト <code>.Depends</code> に記録される依存関係の文字ベクトル。
ロードするパッケージ/名前空間を指定する文字列。
ライブラリ検索パスを指定する文字ベクトル。
パッケージインストール時以外は無視されます。
パッケージのインストール中以外は無視されます。
trueを指定すると、コードを読み込んだ直後に停止します。
<code>NULL</code> またはバージョン指定 (<code>op</code> と <code>version</code> を含むリスト)。
論理: 進捗メッセージとエラーメッセージを抑制するか。
文字列または'名前', <code>as.symbol</code>を参照。
文字ベクトル; <code>library</code> を参照。
<code>loadNamespace</code> に渡される引数。
評価されるオブジェクト。  詳細'を参照。
<code>expr</code> が評価される <code>environment</code> 。  <code>sys.call</code>に指定された<code>NULL</code>、リスト、データフレーム、ペアリスト、整数でもよい。
<code>envir</code> が(ペア)リストまたはデータフレームである場合に関連する：color：<b>R</b></span> が<code>envir</code>で見つからないオブジェクトを探す場所です。  これは、<code>NULL</code> (ベースパッケージの環境、<code>baseenv()</code>と解釈されます) または環境です。
遡る親世代数
環境。
バインディングをロックするかどうかを指定する論理。
名前オブジェクトまたは文字列。
0個または1個の引数をとる関数。
環境。
バインディングをロックするかどうかを指定する論理。
名前オブジェクトまたは文字列。
0個または1個の引数をとる関数。
数値または複素数ベクトル。
正数または複素数: 対数が計算される基底。  デフォルトは <i>e</i>=<code>exp(1)</code> です。
数値または複素数ベクトル.
正数または複素数: 対数が計算される基数.  デフォルトは <i>e</i>=<code>exp(1)</code> です。
数値または複素数ベクトル.
正数または複素数: 対数が計算される基数.  デフォルトは <i>e</i>=<code>exp(1)</code> です。
数値または複素数ベクトル.
正数または複素数: 対数が計算される基数.  デフォルトは <i>e</i>=<code>exp(1)</code> です。
数値または複素数ベクトル.
正数または複素数: 対数が計算される基数.  デフォルトは <i>e</i>=<code>exp(1)</code> です。
2倍値は整数に強制されます。1以外の長さの引数を与えるとエラーになります。
強制されるかテストされるオブジェクト。
他のメソッドに渡される、または他のメソッドから渡される引数。
行列などの<span style="font-family：font-family: Courier New, Courier; color：<code>length(dim(x)) == 2</code>を持つ<span style="font-family: Courier New; color: #666666;"><b>R</b></span>オブジェクト。互換性のため、上記を満たさない場合、<code>as.matrix(x)</code>が最初に呼ばれます。
論理的です。  対角線を含めるべきか？
利用可能なオブジェクトをリストする際にどの環境を使用するか。デフォルトは<em>current</em>環境です。  互換性のために<code>name</code>と呼ばれていますが、実際にはこの引数はどのような形でも環境を指定することができます。
<code>name</code>の代替引数で、検索リスト内の位置として環境を指定します。  たいていはバックコンパチビリティのためです。
<code>name</code> に代わる引数で、環境を指定します。  ほとんどの場合、下位互換性のために存在します。
論理値。  <code>TRUE</code> の場合、すべてのオブジェクト名が返されます。  <code>FALSE</code>の場合、<span class="samp">.</span>で始まる名前は省略されます。
オプションの正規表現。  <code>パターン</code>にマッチする名前のみが返される。  <code>glob2rx</code>はワイルドカードパターンを正規表現に変換するために使われる。
結果の<code>character</code>をアルファベット順にソートするかどうかを示す論理。  これは<code>ls()</code>の一部であり、ほとんどの場合時間がかかることに注意。
構文的に有効な名前に強制される文字ベクトル。  これは必要に応じて文字に強制される。
もし<code>TRUE</code>ならば、結果の要素は一意である。  これは、例えば、カラム名などのために望まれるかもしれません。
論理的です。  との互換性のために、<span style="font-family：color：1.9.0より前の<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>との互換性のため。
文字ベクトル
重複名とシーケンス番号の区切りに使われる文字列。
環境。
バインディングをロックすべきかどうかを指定する論理。
名前オブジェクトまたは文字列。
0個または1個の引数をとる関数。
適切なアリティの関数（<code>Reduce</code>ではバイナリ、<code>Filter</code>, <code>Find</code>と<code>Position</code>ではユナリ、<code>Map</code>では<i>k</i>-ary、もしこれが<i>k</i>引数で呼ばれるなら）。  <code>Negate</code>のための任意の述語関数。
ベクトル。
<span style="font-family：font-family: Courier New, Courier; color：<code>x</code>の要素と同じ種類の<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
左から右(デフォルト)に進むか、右から左に進むかを示す論理。
連続する reducecombination を累積するかどうかを示す論理。  デフォルトでは、finalcombinationのみが使用されます。
一致しない」（述語を満たす要素がない）場合に返される値。
ベクトル。
適用する関数。<code>match.fun</code>で見つかります。
ベクトル化する引数（厳密に正の長さのベクトルまたはリスト、または長さゼロのリスト）。  詳細'も参照してください。
<code>list</code> または <code>pairlist</code> の引数をベクトル化する。
<code>FUN</code> への他の引数のリスト。
論理文字列または文字列; 結果をベクトル、行列、高次元配列に縮小しようとする; <code>sapply</code> の <code>simplify</code> 引数を参照のこと。
論理; 最初の...引数の名前を使用するか、それが名前のない文字ベクトルであれば、そのベクトルを名前として使用する。
配列
例えば、行列の場合、<code>1</code> は行を、<code>2</code> は列を、<code>c(1, 2)</code> は行と列を表します。<code>x</code> が名前付き dimnames を持つ場合、次元名を選択する文字ベクトルとすることができます。
配列
例えば、行列の場合、 <code>1</code> は行、<code>2</code> は列、<code>c(1, 2)</code> は行と列を示します。
行と列の数。
vector または <code>NULL</code>: マッチされる値。
vector または <code>NULL</code>: マッチされる値。
マッチしなかった場合に返される値。  これは<code>integer</code>に強制されることに注意してください。
マッチできない値のベクトル。  <code>x</code> の中でこのベクトル内の値と一致する値には、<code>nomatch</code>値が割り当てられます。  歴史的な理由から、<code>FALSE</code> は <code>NULL</code> と等価である。
文字ベクトル（<code>several.ok</code>が<code>TRUE</code>でない限り長さは1）または<code>NULL</code>。
候補値の文字ベクトル
<code>arg</code>が複数の要素を持つことを許可するかどうかを指定する論理。
デフォルトでは<code>match.call</code>が呼び出される関数です。  詳細を参照。
<code>call</code>によって生成される、<code>definition</code>によって指定された関数への評価されない呼び出し。
によって生成される。  呼び出しの<code>...</code>にマッチする引数は、<code>...</code>引数として含めるべきか、残すべきか。
もしあれば、<code>call</code>内の<code>...</code>を取得する環境。
関数としてマッチする項目: 関数、シンボル、文字列。  詳細'を参照。
論理: 関数でないオブジェクトを検索するかどうかを制御する。
オブジェクト。
メソッドに渡される更なる引数。
論理: 欠落値を削除するか。
要約または印刷される <code>Date</code> オブジェクト。
計算の有効桁数。
数値または<code>NULL</code>で、表示されるエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>, <code>getOption("max.print")</code>が使用されます。
他のメソッドから、または他のメソッドに渡される引数。
date-timeまたはdateオブジェクト。
主に<code>"POSIXlt"</code>オブジェクトのために、変換に使用されるオプションのタイムゾーン指定。
文字列。  変換結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数。
データのベクトルで、通常は少数の値を取ります。
(文字列として)<code>x</code>が取ったかもしれないユニークな値のオプションのベクトル。  デフォルトは、<code>as.character(x)</code>が取った値のユニークな集合で、<em><code>x<//code>の昇順にソートされています。  この集合は、<code>sort(unique(x))</code>より小さく指定できることに注意。
<em>either</em>レベルのラベルのオプションの文字ベクトル(<code>exclude</code>内のものを取り除いた後、<code>levels</code>と同じ順序で)、<em>または</em>長さ 1の文字列。 <code>labels</code>内の重複した値は、<code>x</code>の異なる値を同じ因子レベルにマップするために使用することができます。
レベルの集合を形成するときに除外される値のベクトル。  これは、<code>x</code>と同じレベルを持つ因子であってもよいし、<code>文字</code>でなければならない。
論理フラグで、レベルが(与えられた順序で)順序付けされたとみなされるべきかどうかを決定する。
詳細'を参照のこと。
(<code>ordered(.)</code>内): <code>ordered</code>自身を除いた上記のいずれか。
もし<code>any(is.na(x))</code>が使われるなら、<code>na<//code>レベルを追加する。
date-timeクラスの1つから、出力または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
オプションのデータベクトル（リストまたは<code>式</code>ベクトルを含む）。  非原子クラス<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New; color: #666666;"><b>R</b></span> オブジェクトは、<code>as.vector</code>によって強制され、すべての属性は破棄されます。
希望の行数。
希望する列数。
論理的です。もし <code>FALSE</code> (デフォルト) ならば行列は列で埋められ、そうでなければ行列は行で埋められます。
行列の <code>dimnames</code> 属性は、<code>NULL</code> または長さ 2 の <code>list</code> で、それぞれ行と列の名前を指定します。  空のリストは <code>NULL</code> として扱われ、長さ 1 のリストは行名として扱われます。  リストには名前を付けることができ、リスト名は次元の名前として使用される。
<span style="font-family：font-family: Courier New, Courier; color：font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
メソッドに渡される、またはメソッドから渡される追加引数。
結果の行列が文字（<code>NULL</code>ではなく）<code>rownames</code>を持つべきかどうかを示す論理。  デフォルトの <code>NA</code> は、データフレームに 'automatic' row.names がある場合、またはゼロ行データフレームの場合に <code>NULL</code>rownames を使用します。
数値引数または文字引数（注を参照）。
欠損値を削除するかどうかを示す論理。
数値行列
<code>"random"</code>はデフォルトで省略可能。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>オブジェクト。  現在、数値/論理ベクトル、日付、日時、時間間隔オブジェクト用のメソッドがあります。  複素数ベクトルは<code>trim = 0</code>でのみ使用可能です。
平均が計算される前に<code>x</code>の各端からトリムされるオブザベーションの割合 (0 から 0.5).
<code>NA</code> 値が計算を進める前に取り除かれるべきかどうかを示す論理値。
他のメソッドに渡される、または他のメソッドから渡される更なる引数。
要約または印刷される <code>Date</code> オブジェクト。
計算の有効桁数。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>, <code>getOption("max.print")</code>が使用されます。
他のメソッドから、または他のメソッドに渡される更なる引数。
<span style="font-family：Courier New, Courier; color：</b>R</b></span>オブジェクト。  現在、数値/論理ベクトル、日付、日時、時間間隔オブジェクト用のメソッドがあります。  複素数ベクトルは<code>trim = 0</code>でのみ使用可能です。
平均が計算される前に<code>x</code>の各端からトリムされるオブザベーションの割合 (0 から 0.5).
<code>NA</code> 値が計算を進める前に取り除かれるべきかどうかを示す論理値。
他のメソッドに渡される、または他のメソッドから渡される更なる引数。
date-time または date オブジェクト。
主に<code>"POSIXlt"</code>オブジェクトの変換に使用されるオプションのタイムゾーン指定。
文字列。  変換結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数、または他のメソッドから渡される引数。
date-timeクラスから出力または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
date-timeクラスの1つから、印刷または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
数値; 新しいサイズの上限 (Mb).
数値; 新しい最大ノード番号。
数値; Mb単位での新しいサイズ制限。
数値; 新しい最大ノード番号。
生のベクトル。  <code>memCompress</code> では、文字ベクトルは <code>"\n"</code> で区切られた文字列を持つ生のベクトルに変換されます。  タイプ <code>"gzip"</code> と <code>"xz"</code> は、<span style="font-family：color：#666666;"><b>R</b></span> 4.0.0.
文字列，圧縮の種類。  1文字に省略可能で、デフォルトは選択肢の1番目。
論理: 結果を文字列に変換するか。  注意: 文字列には<i>2^31 - 1</i> バイトの制限があるため、大きな入力には生のベクトルを使用する必要があります。
生のベクトル。  <code>memCompress</code>の場合、文字ベクトルは<code>"◆n"</code>で区切られた文字列を持つ生ベクトルに変換されます。  タイプ <code>"gzip"</code> と <code>"xz"</code> は、<span style="font-family：color：#666666;"><b>R</b></span> 4.0.0.
文字列，圧縮の種類。  1文字に省略可能で、デフォルトは選択肢の1番目。
論理: 結果を文字列に変換するか。  注意: 文字列には<i>2^31 - 1</i> バイトの制限があるため、大きな入力には生のベクトルを使用する必要があります。
データフレーム、または強制的に1つにするオブジェクト。
詳細'を参照のこと。
logical; <code>all = L</code> は、<code>all.x = L</code> と<code>all.y = L</code> の省略記法であり、<code>L</code> は <code>TRUE</code> または<code>FALSE</code> のいずれかである。
もし<code>TRUE</code>ならば、<code>x</code>の各行が<code>y</code>にマッチする行がない場合、その行が追加される。  これらの行は、通常<code>y</code>の値で埋められている列に<code>NA</code>を持つ。  デフォルトは<code>FALSE</code>で、<code>x</code>と<code>y</code>の両方のデータを持つ行だけが出力に含まれます。
logical; <code>all.x</code>に類似。
論理的。  結果を<code>by</code>列でソートするか？
(<code>by</code>などに現れる) マージに使用されない列の名前を一意にするために使用される接尾辞を指定する長さ2の文字ベクトル。
論理的には、<code>suffixes</code>は、結果内の列名の重複を避けるために、より多くの場合に付加されます。  これは、<span style="font-family：color：</b>R</b></span>バージョン3.5.0までは暗黙的にfalseでした。
の値をマッチさせることはできません。  <code>match</code>を参照してください。  これは、1つのカラムのマージに使用されることを意図しており、これらはそのカラムの比較不可能な値です。
メソッドに渡される、あるいはメソッドから渡される引数。
データフレーム、または強制されるオブジェクト。
詳細'を参照。
logical; <code>all = L</code> は、<code>all.x = L</code> と<code>all.y = L</code> の省略記法で、<code>L</code> は <code>TRUE</code> または<code>FALSE</code> のいずれかです。
もし<code>TRUE</code>ならば、<code>x</code>の各行が<code>y</code>にマッチする行がない場合、その行が追加される。  これらの行は、通常<code>y</code>の値で埋められている列に<code>NA</code>を持つ。  デフォルトは<code>FALSE</code>で、<code>x</code>と<code>y</code>の両方のデータを持つ行だけが出力に含まれます。
logical; <code>all.x</code>に類似。
論理的。  結果を<code>by</code>列でソートするか？
(<code>by</code>などに現れる) マージに使用されない列の名前を一意にするために使用される接尾辞を指定する長さ2の文字ベクトル。
論理的には、<code>suffixes</code>は、結果内の列名の重複を避けるために、より多くの場合に付加されます。  これは、<span style="font-family：color：</b>R</b></span>バージョン3.5.0までは暗黙的にfalseでした。
の値をマッチさせることはできません。  <code>match</code>を参照してください。  これは、1つのカラムのマージに使用されることを意図しており、これらはそのカラムの比較不可能な値です。
メソッドに渡される、あるいはメソッドから渡される引数。
データフレーム、または強制されるオブジェクト。
詳細'を参照。
logical; <code>all = L</code> は、<code>all.x = L</code> と<code>all.y = L</code> の省略記法で、<code>L</code> は <code>TRUE</code> または<code>FALSE</code> のいずれかです。
もし<code>TRUE</code>ならば、<code>x</code>の各行が<code>y</code>にマッチする行がない場合、その行が追加される。  これらの行は、通常<code>y</code>の値で埋められている列に<code>NA</code>を持つ。  デフォルトは<code>FALSE</code>で、<code>x</code>と<code>y</code>の両方のデータを持つ行だけが出力に含まれます。
logical; <code>all.x</code>に類似。
論理的。  結果を<code>by</code>列でソートするか？
(<code>by</code>などに現れる) マージに使用されない列の名前を一意にするために使用される接尾辞を指定する長さ2の文字ベクトル。
論理的には、<code>suffixes</code>は、結果内の列名の重複を避けるために、より多くの場合に付加されます。  これは、<span style="font-family：color：</b>R</b></span>バージョン3.5.0までは暗黙的にfalseでした。
の値をマッチさせることはできません。  <code>match</code>を参照してください。  これは、1つのカラムのマージに使用されることを意図しており、これらはそのカラムの比較不可能な値です。
メソッドに渡される、あるいはメソッドから渡される引数。
文字に強制することができる0個以上のオブジェクト(セパレータなしで一緒に貼り付けられる)、または(<code>message</code>の場合のみ)単一の条件オブジェクト。
<code>gettext</code> を参照。  <code>NA</code> の場合、メッセージは翻訳されません。
logical:文字列として与えられたメッセージは改行されるべきか？
評価する式を指定します。
文字列として与えられたメッセージは改行されるべきか？
<code>get</code>の場合は、オブジェクト名（文字列またはシンボルで指定）。<br><code>mget</code>の場合は、オブジェクト名の文字ベクトル。
<br><code>mget</code>の場合は、オブジェクト名の文字ベクトル。オブジェクトを探す場所(「詳細」を参照)。
探しているオブジェクトのモードまたはタイプ: 'Details' セクションを参照。
環境を囲むフレームを検索するか？
<code>mget</code>では、アイテムが見つからない場合に使用される値の<code>list</code>です: 必要であれば、リストに強制されます。<br><code>dynGet</code>では、任意の<span style="font-family：color：#666666;"><b>R</b></span>オブジェクト、例えば<code>stop()</code>への呼び出し。
検索する最小フレーム番号を指定する整数。
数値引数または文字引数（注参照）。
欠損値を削除すべきかどうかを示す論理。
正式な引数。
数値。  入力は必要に応じて再利用される。
数値ベクトル。
数値ベクトル。
数値ベクトル.
数値ベクトル。
おそらくモード<code>complex</code>のオブジェクト。
モード<code>complex</code>のオブジェクト、またはメソッドが定義されているクラスの1つ。
他のメソッドに渡される、あるいは他のメソッドから渡される引数。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
オブジェクトの希望するモードまたは'ストレージモード'(タイプ)を示す文字列。
任意の<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
オブジェクトの希望するモードまたは'ストレージモード'(タイプ)を示す文字列。
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したオブジェクト。
論理ベクトル（おそらくリサイクルされる）。  名前は省略されるべきか？
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したlength-oneオブジェクト。
他のメソッドの引数。
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したオブジェクト。
論理ベクトル（おそらくリサイクルされる）。  名前は省略されるべきか？
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したlength-oneオブジェクト。
他のメソッドの引数。
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したオブジェクト。
論理ベクトル（おそらくリサイクルされる）。  名前は省略されるべきか？
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したlength-oneオブジェクト。
他のメソッドの引数。
任意の<span style="font-family：color：<span style="font: Courier New; color: #666666;"><b>R</b></span> オブジェクト。
属性の適切な名前の<code>リスト</code>、または<code>NULL</code>。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
<code>x</code> と同じ長さまでの文字ベクトル、または<code>NULL</code>。
date-timeクラスの1つから出力または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
<span style="font-family：クーリエ・ニュー、クーリエ; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
<code>x</code> と同じ長さまでの文字ベクトル、または<code>NULL</code>。
date-timeクラスの1つから出力または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
文字列または名前空間環境。
論理。
環境。
名前空間環境。
文字ベクトル。
オプションの文字ベクトル。
名前空間環境。
ロードするパッケージ/名前空間を指定する文字列。
<code>generics</code>と並列なパッケージ名のベクトル。
ライブラリを指定する文字ベクトル
論理。
文字。
文字。
環境。
3列の文字行列。
文字。
任意のオブジェクト
文字引数。
メソッド・テーブル名。
symbol: 名前空間の名前。
特に<code>vars</code>がない場合に便利です。
文字列または名前空間環境。
論理。
環境。
名前空間環境。
文字ベクトル。
オプションの文字ベクトル。
名前空間環境。
ロードするパッケージ/名前空間を指定する文字列。
<code>generics</code>と並列なパッケージ名のベクトル。
ライブラリを指定する文字ベクトル
論理。
文字。
文字。
環境。
3列の文字行列。
文字。
任意のオブジェクト
文字引数。
メソッド・テーブル名。
symbol: 名前空間の名前。
特に<code>vars</code>がない場合に便利です。
文字列または名前空間環境。
論理。
環境。
名前空間環境。
文字ベクトル。
オプションの文字ベクトル。
名前空間環境。
ロードするパッケージ/名前空間を指定する文字列。
<code>generics</code>と並列なパッケージ名のベクトル。
ライブラリを指定する文字ベクトル
論理。
文字。
文字。
環境。
3列の文字行列。
文字。
任意のオブジェクト
文字引数。
メソッド・テーブル名。
symbol: 名前空間の名前。
特に<code>vars</code>がない場合に便利です。
文字列または名前空間環境。
論理。
環境。
名前空間環境。
文字ベクトル。
オプションの文字ベクトル。
名前空間環境。
ロードするパッケージ/名前空間を指定する文字列。
<code>generics</code>と並列なパッケージ名のベクトル。
ライブラリを指定する文字ベクトル
論理。
文字。
文字。
環境。
3列の文字行列。
文字。
任意のオブジェクト
文字引数。
メソッド・テーブル名。
symbol: 名前空間の名前。
特に<code>vars</code>がない場合に便利です。
文字列または名前空間環境。
論理。
環境。
名前空間環境。
文字ベクトル。
オプションの文字ベクトル。
名前空間環境。
ロードするパッケージ/名前空間を指定する文字列。
<code>generics</code>と並列なパッケージ名のベクトル。
ライブラリを指定する文字ベクトル
論理。
文字。
文字。
環境。
3列の文字行列。
文字。
任意のオブジェクト
文字引数。
メソッド・テーブル名。
symbol: 名前空間の名前。
特に<code>vars</code>がない場合に便利です。
文字ベクトル、または文字ベクトルに強制されるベクトル。  係数を指定するとエラーになります。
文字列: <code>c("bytes", "chars", "width")</code>のいずれかに部分的にマッチする。  詳細」を参照。
論理: 無効なマルチバイト文字列や<code>"bytes"</code>エンコード文字列に対しては、(エラーを投げるのではなく) <code>NA</code> を返すべきか。
論理: <code>x</code> が <code>NA</code> の場合、<code>NA</code> を返すべきか？  falseの場合、<code>nchar()</code>は<code>2</code>を返します。これは、文字列が出力に書き出されるときに使用される印刷文字数であり、<code>nzchar()</code>は<code>TRUE</code>です。  <code>nchar()</code> のデフォルトである <code>NA</code> は、 <code>type</code> が <code>"width"</code> でない限り、 <code>keepNA = TRUE</code> を使用することを意味します。
ベクトル、配列、データフレーム、または <code>NULL</code>.
vector, array, data frame, または <code>NULL</code>.
適切なアリティの関数（<code>Reduce</code>ではバイナリ、<code>Filter</code>, <code>Find</code>と<code>Position</code>ではユナリ、<code>Map</code>では<i>k</i>-ary、これが<i>k</i>引数で呼び出される場合）。  <code>Negate</code>のための任意の述語関数。
ベクトル。
<span style="font-family：font-family: Courier New, Courier; color：<code>x</code>の要素と同じ種類の<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
左から右(デフォルト)に進むか、右から左に進むかを示す論理。
連続する reducecombination を累積するかどうかを示す論理。  デフォルトでは、finalcombinationのみが使用されます。
一致しない」（述語を満たす要素がない）場合に返される値。
ベクトル。
<code>function</code>、<code>formula</code>、または<code>NULL</code>（デフォルト）。
関数に関連付ける環境
任意の<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
もし <code>TRUE</code> ならば、環境はハッシュテーブルを使う。
作成された環境のエンクロージャとして使用される環境。
環境
ハッシュ環境の初期サイズを指定する整数。  <code>size</code> が <code>NA</code> またはゼロの場合、内部デフォルト値が使用されます。  <code>hash</code> が <code>FALSE</code> の場合、この引数は無視される。
<code>NA</code>でない長さ1の論理ベクトル。1より大きい長さの条件は、現在、警告とともに受け入れられるが、最初の要素だけが使用される。  環境変数<span class="env">_R_CHECK_LENGTH_1_CONDITION_</span> がtrueに設定されると、代わりにエラーが通知されます。  その他の型は、可能であれば論理型に強制され、クラスは無視される。
変数の構文名。
ベクトル（リストと式を含む）、ペアリスト、<code>NULL</code>に評価される式。  因子値は文字ベクトルに強制される。  <span style="font-family：のように、<span style="font-family: Courier New, Courier; color：<span style="font-family: Courier New; color: #666666;"><b>R</b></span>4.0.0から、これは長いベクトルになります。
形式的な意味での<em>式</em>。  これは単純な式か、いわゆる<em>複合式</em>で、通常は<code>{ expr1 ; expr2 }<//code> のような形式です。
関数を指定する文字列（組み込み演算子ではない）。  <code>UseMethod</code>では必須。
<code>UseMethod</code>: ディスパッチされるメソッドを決定するクラスのオブジェクト。  デフォルトは関数の最初の引数です。
次のメソッドに渡される更なる引数。
1つ以上の文字ベクトル。
変換の'ドメイン'。
非負の整数。
<code>n = 1</code>に対して英語で使われるメッセージ。
<code>n = 0, 2, 3, ...</code> の場合に英語で使われるメッセージ。
ドメイン用に翻訳されたメッセージカタログを見つけるディレクトリ。
オブジェクト。
任意の<span style="font-family：font-family: Courier New, Courier; color：#オブジェクト、通常は<code>文字列</code>のベクトルです。
<code>print()</code>に渡されるオプションの<code>logical</code>は、<code>print.default()</code>で使用され、文字列を右寄せにするかどうかを示します。
クラス<code>"noquote"</code>のオブジェクト。
<code>print</code>のような次のメソッドに渡されるさらなるオプション。
汎用<code>c</code>関数との互換性のため。
<a href="https://CRAN.R-project.org/package=Matrix"><span class="pkg">行列</span></a>のようなパッケージは、より多くの<code>norm()</code>メソッドを定義していることに注意してください。
文字列。計算される matrixnorm の <em>type</em> を指定します。

は<b>o</b>ne ノルム(最大絶対列和)を指定する；
は<b>i</b>nfinity ノルム(最大絶対行和)を指定する；
は <b>F</b>robenius ノルム (<code>x</code> をベクトルとして扱った場合のユークリッドノルム) を指定します；
<code>x<//code>のすべての要素の<b>m</b>最大モジュラスを指定する; そして
<code>x</code> の最大の特異値 (<code>svd</code>) である "spectral" または 2-norm を指定します。
デフォルトは <code>"O"</code> である。  <code>type[1]</code>の最初の文字だけが使用される。
ファイルパスの文字ベクトル。
Windowsで使用されるセパレータ - それ以外の場所では無視される。  <code>c("/", "\")</code> のいずれかでなければならない。
論理: <code>TRUE</code>の場合、結果を決定できない場合はエラーとなり、<code>NA</code>の場合は警告となる。
vector, array, data frame, または <code>NULL</code>.
vector, array, data frame, または <code>NULL</code>.
logical: true の場合、閉じた接続と標準の接続を含むすべての接続が表示されます。  false の場合、ユーザが作成したオープンな接続のみが表示されます。
integer: <code>showConnections</code> で指定されたテーブルの行番号。
コネクション。
Double 値は integer に強制されます。1 以外の長さの引数を指定するとエラーになります。
強制またはテストされるオブジェクト。
他のメソッドに渡される、あるいは他のメソッドから渡されるさらなる引数。
<code>package_version</code>の場合は、<code>R.version</code>で得られるRversionオブジェクト。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理。
変換またはシフトされるオブジェクト。
論理：1文字の文字列に変換するか、複数の個々の文字に変換するか。
シフトするビット数。  正の数は右にシフトし、負の数は左にシフトします：許容される値は <code>-8 ... 8</code> です。
部分的に一致する結果の型。
変換またはシフトされるオブジェクト。
論理: 変換対象は1文字の文字列か、複数の文字か。
シフトするビット数。  正の数は右にシフトし、負の数は左にシフトします：許容される値は <code>-8 ... 8</code> です。
結果の型、部分一致。
文字ベクトル、または文字ベクトルに強制されるベクトル。  係数を与えるとエラーになります。
文字列：<code>c("bytes", "chars", "width")</code>のいずれかに部分一致。  詳細」を参照。
論理: 無効なマルチバイト文字列や<code>"bytes"</code>エンコード文字列に対しては、(エラーを投げるのではなく) <code>NA</code> を返すべきか。
論理: <code>x</code> が <code>NA</code> の場合、<code>NA</code> を返すべきか？  falseの場合、<code>nchar()</code>は<code>2</code>を返します。これは、文字列が出力に書き出されるときに使用される印刷文字数であり、<code>nzchar()</code>は<code>TRUE</code>です。  <code>nchar()</code>のデフォルトである<code>NA</code>は、<code>type</code>が<code>"width"</code>でない限り、<code>keepNA = TRUE</code>を使用することを意味する。
デフォルトは<em>current</em>環境です。  互換性のために<code>name</code>と呼ばれていますが、実際にはこの引数はどのような形式でも環境を指定することができます。
<code>name</code>の代替引数で、検索リスト内の位置として環境を指定します。  たいていはバックコンパチビリティのためです。
<code>name</code> に代わる引数で、環境を指定します。  ほとんどの場合、下位互換性のために存在します。
論理値。  <code>TRUE</code> の場合、すべてのオブジェクト名が返されます。  <code>FALSE</code>の場合、<span class="samp">.</span>で始まる名前は省略されます。
オプションの正規表現。  <code>パターン</code>にマッチする名前のみが返される。  <code>glob2rx</code>はワイルドカードパターンを正規表現に変換するために使われる。
結果の<code>character</code>をアルファベット順にソートするかどうかを示す論理。  これは<code>ls()</code>の一部であり、ほとんどの時間がかかることに注意。
a <span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
クラスを指定する文字ベクトル。  <code>value</code> には <code>NULL</code> を指定することもできます。
戻り値に影響を与える論理: '詳細'を参照。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
クラスを指定する文字ベクトル。  <code>value</code> には <code>NULL</code> を指定することもできます。
戻り値に影響を与える論理: '詳細'を参照。
logical: defunct: 無視され、偽の値に対しては警告が表示される。
使用するタイムゾーンデータベース: デフォルトでは、見つかるまで未知の場所を試します。
実行する式。
もし TRUE なら、<code>expr</code> を追加して、前に設定された式の後に実行する（<code>after</code> が FALSE なら前に実行する）。
もし <code>add</code> が TRUE で <code>after</code> が FALSE なら、<code>expr</code> は既に登録されている式の上に追加されます。その結果、最後に登録されたものから順に登録されるため、リソースを逆順に解放したり閉じたりするのに便利です。
文字列。  詳細'を参照のこと。
文字列。  接続のオープン方法の説明(最初にオープンする場合)。  指定可能な値については'モード'のセクションを参照のこと。
論理値。  ブロック」のセクションを参照。
想定するエンコーディングの名前。  エンコーディング」のセクションを参照。
論理値。  trueを指定すると、'raw'インターフェイスが使用され、 通常のファイルではない引数、例えばキャラクタデバイスに適している。  これは、テキストモードでの読み込みのためにオープンする際の 圧縮ファイルのチェックを抑制し、'ファイル'がシーク可能でない可能性があることを 保証する。
<code>c("default", "internal", "winet", "libcurl")</code>に部分的にマッチする文字列。
HTTPrequests で使用する HTTP ヘッダの名前付き文字ベクトル。  非 HTTP URL では無視されます。  <code>HTTPUserAgent</code> オプション (<code>options</code> を参照) から得られる <code>User-Agent</code> ヘッダは、自動的に最初のヘッダとして使われます。
0-9 の整数。  書き込み時に適用する圧縮量を、なしから最大まで指定します。  <code>xzfile</code>の場合は負の値も指定できます: '圧縮'のセクションを参照してください。
数値: この接続で使用するタイムアウト(秒単位)。  OSによっては、非常に大きな値をゼロとして扱うことがあるので注意してください: しかし、POSIX標準では31日までの値をサポートしています。
オプションの文字ベクトル。現在TCPソケットでサポートされているのは<code>"no-delay"</code>のみである。
zip ファイル内のファイル名。
文字列。  ポートのホスト名。
整数。  TCP ポート番号。
論理。  ソケットをクライアントにするかサーバーにするか。
接続をリッスンするサーバソケット。
コネクション。
文字列。  現在は無視される。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
他のメソッドに渡される、または他のメソッドから渡される引数。
文字列。  接続の説明: '詳細'を参照。
文字列。  接続のオープン方法(最初にオープンする場合)。  指定できる値についてはセクション 'モード' を参照。
論理値。  ブロック」のセクションを参照。
想定するエンコーディングの名前。  エンコーディング」のセクションを参照。
論理値。  trueを指定すると、'raw'インターフェイスが使用され、 通常のファイルではない引数、例えばキャラクタデバイスに適している。  これは、テキストモードでの読み込みのためにオープンする際の 圧縮ファイルのチェックを抑制し、'ファイル'がシーク可能でない可能性があることを 保証する。
<code>c("default", "internal", "winet", "libcurl")</code>に部分的にマッチする文字列。
HTTPrequests で使用する HTTP ヘッダの名前付き文字ベクトル。  非 HTTP URL では無視されます。  <code>HTTPUserAgent</code> オプション (<code>options</code> を参照) から得られる <code>User-Agent</code> ヘッダは、自動的に最初のヘッダとして使われます。
0-9 の整数。  書き込み時に適用する圧縮の量を、なしから最大まで指定します。  <code>xzfile</code>の場合は負の値も指定できます: '圧縮'のセクションを参照してください。
数値: この接続で使用するタイムアウト(秒単位)。  OSによっては、非常に大きな値をゼロとして扱うことがあるので注意してください: しかし、POSIX標準では31日までの値をサポートしています。
オプションの文字ベクトル。現在TCPソケットでサポートされているのは<code>"no-delay"</code>のみである。
zip ファイル内のファイル名。
文字列。  ポートのホスト名。
整数。  TCP ポート番号。
論理。  ソケットをクライアントにするかサーバーにするか。
接続をリッスンするサーバソケット。
コネクション。
文字列。  現在は無視される。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
他のメソッドに渡される、または他のメソッドから渡される引数。
 ファイル名。
 ファイルの文字エンコーディング。
 <code>parse</code>の<code>encoding</code>引数を参照のこと。
 ソース行の文字ベクトル。  その他の<span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトは文字に強制されます。
 ファイルのコピーに使用するタイムスタンプ。
 この <code>srcfilecopy</code> はファイルシステムファイルから来たものですか？
 <code>srcfile</code> オブジェクト。
 行番号。
 詳細'を参照。
 適切なクラスのオブジェクト。
 <code>srcref</code> のテキストを得るために <code>srcfile</code> を読むかどうか。
 文字範囲の終端を示すオプションの 2 番目の <code>srcref</code> オブジェクト。
 これらは無視される。
 ファイル名。
 ファイルの文字エンコーディング。
 <code>parse</code> の<code>encoding</code>引数を参照のこと。
 ソース行の文字ベクトル。  その他の<span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトは文字に強制されます。
 ファイルのコピーに使用するタイムスタンプ。
 この <code>srcfilecopy<//code> はファイルシステムファイルから来たものですか？
 <code>srcfile</code> オブジェクト。
 行番号。
 詳細'を参照。
 適切なクラスのオブジェクト。
 <code>srcref</code> のテキストを得るために <code>srcfile</code> を読むかどうか。
 文字範囲の終端を示すオプションの 2 番目の <code>srcref</code> オブジェクト。
 これらは無視される。
 ファイル名。
 ファイルの文字エンコーディング。
 <code>parse</code> の<code>encoding</code>引数を参照のこと。
 ソース行の文字ベクトル。  その他の<span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトは文字に強制されます。
 ファイルのコピーに使用するタイムスタンプ。
 この <code>srcfilecopy<//code> はファイルシステムファイルから来たものですか？
 <code>srcfile</code> オブジェクト。
 行番号。
 詳細'を参照。
 適切なクラスのオブジェクト。
 <code>srcref</code> のテキストを得るために <code>srcfile</code> を読むかどうか。
 文字範囲の終端を示すオプションの 2 番目の <code>srcref</code> オブジェクト。
 これらは無視されます。
オブジェクト。
メソッドに渡される追加引数。
論理: 欠落値を削除するか。
日付オブジェクト
日付オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.Date</code>で変換されます)。
数値ベクトル(日単位) <em>または</em>クラス<code>"difftime"</code>のオブジェクトで、最も近い整数日に丸められます。
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
date-time または date オブジェクト。
主に<code>"POSIXlt"</code>オブジェクトで変換に使用されるオプションのタイムゾーン指定。
文字列。  変換結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数。
データのベクトルで、通常は少数の値を取ります。
(文字列として)<code>x</code>が取ったかもしれないユニークな値のオプションのベクトル。  デフォルトは、<code>as.character(x)</code>が取った値のユニークな集合で、<em><code>x<//code>の昇順にソートされています。  この集合は、<code>sort(unique(x))</code>より小さく指定できることに注意。
<em>either</em>レベルのラベルのオプションの文字ベクトル(<code>exclude</code>内のものを取り除いた後、<code>levels</code>と同じ順序で)、<em>または</em>長さ 1の文字列。 <code>labels</code>内の重複した値は、<code>x</code>の異なる値を同じ因子レベルにマップするために使用することができます。
レベルの集合を形成するときに除外される値のベクトル。  これは、<code>x</code>と同じレベルを持つ因子であってもよいし、<code>文字</code>でなければならない。
論理フラグで、レベルが(与えられた順序で)順序付けされたとみなされるべきかどうかを決定する。
詳細'を参照のこと。
(<code>ordered(.)</code>内): <code>ordered</code>自身を除いた上記のいずれか。
もし<code>any(is.na(x))</code>が使われるなら、<code>na<//code>レベルを追加する。
<code>package_version</code> の場合は、代わりに <code>R.version</code> によって得られる Rversion オブジェクトを指定します。
無効な数値バージョンはエラーになるか(デフォルト)、ならないかを示す論理です。
データのベクトル。
(文字列として)<code>x</code>が取ったかもしれないユニークな値のオプションのベクトル。  デフォルトは、<code>as.character(x)</code>が取った値のユニークな集合で、<em><code>x</code></em>の昇順にソートされています。  この集合は、<code>sort(unique(x))</code>より小さく指定できることに注意。
<em>either</em>レベルのラベルのオプションの文字ベクトル(<code>exclude</code>内のものを取り除いた後、<code>levels</code>と同じ順序で)、<em>または</em>長さ 1の文字列。 <code>labels</code>内の重複した値は、<code>x</code>の異なる値を同じ因子レベルにマップするために使用することができます。
レベルのセットを形成するときに除外される値のベクトル。  これは、<code>x</code>と同じレベルセットを持つ因子であってもよいし、<code>文字</code>であるべきである。
論理フラグで、レベルが(与えられた順序で)順序付けされたとみなされるべきかどうかを決定する。
詳細'を参照のこと。
(<code>ordered(.)</code>内): <code>ordered</code>自身を除いた上記のいずれか。
もし<code>any(is.na(x))</code>が使われるなら、<code>na<//code>レベルを追加する。
date-timeクラスの1つから、出力または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
<code>name = value</code>を使えば、どのようなオプションでも定義することができます：color：#666666;"><b>R</b></span>で使用されます。

オプションは、名前付きリストである単一の無名引数を与えて渡すこともできる。
オプション名を保持する文字列。
指定したオプションがオプションリストに設定されていない場合は、この値が返されます。  こ れに よ っ て、 オプシ ョ ン を取得 し て設定 さ れてい る か ど う か を調べ、 設定 さ れていない と き は別途設定す る こ と が容易にな り ます。
数値・複素数・文字・論理ベクトルのシーケンスで、すべて同じ長さのもの、またはクラス化された<span style="font-family：color: "#666666;"><span style="font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
<code>method</code>s <code>"shell"</code> および <code>"quick"</code> のアトミックベクタです。  <code>x</code>がアトミックでない<span style="font-family：Courier New, Courier; color：<code>order(x,...)</code> が動作する場合、デフォルトの<code>"auto"</code>メソッドと<code>"radix"</code>メソッドが動作します。
部分ソート用のインデックスのベクトル(非<code>NULL</code>値は実装されていません)。
を論理的に指定します。  ソート順は増加か減少か？<code>"radix"</code>メソッドでは、<code>...</code>の引数の数に等しい長さのベクトルとすることができます。他のメソッドでは、長さは1でなければならない。
もし<code>TRUE</code>ならば、データ中の欠損値は最後に置かれます; もし<code>FALSE</code>ならば、それらは最初に置かれます; もし<code>NA</code>ならば、それらは取り除かれます('Note'を参照して下さい)。
使用されるメソッド: 部分一致が許される。  メソッド <code>"shell"</code>, <code>"quick"</code>, <code>"radix"</code> の詳細については、 <code>sort</code> のヘルプを参照してください。
データのベクトルで、通常は少数の異なる値をとります。
<code>x</code>が取り得るユニークな値(文字列)のオプションのベクトル。  デフォルトは、<code>as.character(x)</code>が取った値のユニークな集合で、<em><code>x</code></em>の昇順にソートされています。  この集合は、<code>sort(unique(x))</code>より小さく指定できることに注意。
<em>either</em>レベルのラベルのオプションの文字ベクトル(<code>exclude</code>内のものを取り除いた後、<code>levels</code>と同じ順序で)、<em>または</em>長さ 1の文字列。 <code>labels</code>内の重複した値は、<code>x</code>の異なる値を同じ因子レベルにマップするために使用することができます。
レベルの集合を形成するときに除外される値のベクトル。  これは、<code>x</code>と同じレベルセットを持つ因子であってもよいし、<code>文字</code>であるべきである。
論理フラグで、レベルが(与えられた順序で)並べ替えられたとみなされるべきかどうかを決定する。
詳細'を参照のこと。
(<code>ordered(.)</code>内): <code>ordered</code>自身を除いた上記のいずれか。
もし<code>any(is.na(x))</code>が使われるなら、<code>na<//code>レベルを追加する。
関数<code>FUN</code>の第1引数と第2引数。
<em>経由</em><code>match.fun<//code>で見つかる外積で使用する関数(特別な場合<code>"*"</code>を除く)。
<code>FUN</code>に渡されるオプション引数。
<code>package_version</code>の場合は、<code>R.version</code>で得られるRversionオブジェクト。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理値。
文字列: フック名
文字列: パッケージ/名前空間名
文字列: パッケージのイベント。  省略可能。
関数または関数のリスト、<code>action = "replace"</code>の場合は<code>NULL</code>。
実行するアクション。  省略可能。
文字列または名前空間環境。
論理。
環境。
名前空間環境。
文字ベクトル。
オプションの文字ベクトル。
名前空間環境。
ロードするパッケージ/名前空間を指定する文字列。
<code>generics</code>と並列なパッケージ名のベクトル。
ライブラリを指定する文字ベクトル
論理。
文字。
文字。
環境。
3列の文字行列。
文字。
任意のオブジェクト
文字引数。
メソッド・テーブル名。
symbol: 名前空間の名前。
特に<code>vars</code>がない場合に便利です。
文字ベクトル: パッケージ名。
<span style="font-family：color：#または<code>NULL</code>です。  デフォルト値の<code>NULL</code>は、ロードされた名前空間をチェックし、次に<code>.libPaths()</code>で現在知られているすべてのライブラリをチェックします。
を論理的にチェックします。  パッケージが見つからない場合、警告やエラーは表示されないのですか？
論理的。  <code>TRUE</code>の場合、特にパッケージが複数回見つかった場合に追加の診断が表示されます。
呼び出し式。
文字に強制できる0個以上のオブジェクト(セパレータなしで一緒に貼り付けられる)、または(<code>message</code>の場合のみ)単一の条件オブジェクト。
<code>gettext</code> を参照。  <code>NA</code> の場合、メッセージは翻訳されません。
logical:文字列として与えられたメッセージは改行されるべきか？
評価する式を指定します。
文字。どのクラスのメッセージが抑制されるべきかを示す。
変換またはシフトされるオブジェクト。
論理：変換対象は1文字列か複数文字か。
シフトするビット数。  正の数は右にシフトし、負の数は左にシフトします：許容される値は <code>-8 ... 8</code> です。
部分的にマッチした結果の型。
オブジェクト。
強制またはテストされるオブジェクト。
全ての値をコピーするか、(デフォルトでは)名前がドットで始まらないものだけをコピーするかを示す論理。
結果のリストの<code>names</code>をソートするかどうかを示す論理。  これは多少コストがかかるが、環境の比較には有用であることに注意。
デフォルトは、<code>function</code>、<code>formula</code>、または<code>NULL</code>である。
関数に関連付ける環境
任意の<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
もし <code>TRUE</code> ならば、環境はハッシュテーブルを使う。
作成された環境のエンクロージャとして使用される環境。
環境
ハッシュ環境の初期サイズを指定する整数。  <code>size</code> が <code>NA</code> またはゼロの場合、内部デフォルト値が使用されます。  <code>hash</code> が <code>FALSE</code> の場合、この引数は無視される。
デフォルトは、<code>function</code>、<code>formula</code>、または<code>NULL</code>である。
関数に関連付ける環境
任意の<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
もし <code>TRUE</code> ならば、環境はハッシュテーブルを使う。
作成された環境のエンクロージャとして使用される環境。
環境
ハッシュ環境の初期サイズを指定する整数。  <code>size</code> が <code>NA</code> またはゼロの場合、内部デフォルト値が使用されます。  <code>hash</code> が <code>FALSE</code> の場合、この引数は無視される。
非負の場合はフレーム番号、負の場合は遡るフレーム数。
遡る世代数。  (「詳細」セクションを参照)。
<code>file</code> が <code>""</code> で <code>text</code> がないか <code>NULL</code> ならコンソールからの入力となる。
integer (またはcoerced to integer)。  パースする式の最大数。  <code>n</code> が <code>NULL</code> または負もしくは<code>NA</code> の場合、入力は完全に解析される。
文字ベクトル。  解析するテキスト。  要素はファイルの行のように扱われます。  その他の<span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトは、可能であれば文字に強制されます。
<code>NULL</code>は<span style="font-family：color：<code>getOption("prompt")</code>.
論理値; <code>TRUE</code>の場合、参照情報を保持する。
<code>NULL</code>、文字ベクトル、または<code>srcfile</code>オブジェクト。  詳細」セクションを参照してください。
入力文字列のエンコーディングを指定します。  この値が<code>"latin1"</code>または<code>"UTF-8"</code>の場合、文字列がLatin-1またはUTF-8であることを示すために使用されます。  後者を行うには、接続の<code>con</code>または<em>via</em><code>options(encoding=)</code>でエンコーディングを指定します: <code>file</code>の例を参照してください。引数<code>encoding = "latin1"</code> と <code>encoding="UTF-8"</code>は、MBCSロケールで実行すると警告とともに無視されます。
長さ<code>1</code>の<code>文字</code>ベクトル、すなわち "文字列"。
文字列または名前空間環境。
論理的な環境。
環境。
名前空間環境。
文字ベクトル。
オプションの文字ベクトル。
名前空間環境。
ロードするパッケージ/名前空間を指定する文字列。
<code>generics</code>と並列なパッケージ名のベクトル。
ライブラリを指定する文字ベクトル
論理。
文字。
文字。
環境。
3列の文字行列。
文字。
任意のオブジェクト
文字引数。
メソッド・テーブル名。
symbol: 名前空間の名前。
特に<code>vars</code>がない場合に便利です。
1つ以上の<span style="font-family：courier new, Courier; color：文字ベクトルに変換される<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>オブジェクト。
条件を区切る文字列。  <code>NA_character_</code>ではありません。
結果を区切るオプションの文字列。  Not<code>NA_character_</code>.
<code>sep</code>-phase (<code>collapse</code>-phase では、<code>""</code> に変わる、つまり、<code>collapse</code> が <code>NULL</code> でない場合) の後、長さゼロの引数が長さゼロの<code>character(0)</code>につながるかどうかを示す <code>logical</code>.
一つ以上の<span style="font-family：クーリエ・ニュー、クーリエ; color：文字ベクトルに変換される<span style="font: Courier New, Courier; color: #666666;"><b>R</b></span>オブジェクト。
条件を区切る文字列。  <code>NA_character_</code>ではありません。
結果を区切るオプションの文字列。  Not<code>NA_character_</code>.
<code>sep</code>-phase (<code>collapse</code>-phase では、<code>""</code> に変わる、つまり、<code>collapse</code> が <code>NULL</code> でない場合) の後に、長さゼロの<code>character(0)</code>を導くかどうかを示す<code>logical</code>。
1つ以上のパス名を含む文字ベクトル。
文字ベクトル: パッケージ名。
<span style="font-family：font-family: Courier New, Courier; color：#または<code>NULL</code>です。  <code>NULL</code>のデフォルト値は、ロードされた名前空間をチェックし、<code>.libPaths()</code>で現在知られているすべてのライブラリをチェックすることに対応します。
を論理的にチェックします。  パッケージが見つからない場合、警告やエラーは表示されないのですか？
論理的。  <code>TRUE</code>の場合、特にパッケージが複数回見つかった場合に追加の診断が表示されます。
呼び出し式。
文字列。  詳細」を参照。
文字列。  接続のオープン方法の説明(最初にオープンする場合)。  指定できる値については「モード」のセクションを参照のこと。
論理値。  ブロック」のセクションを参照。
想定するエンコーディングの名前。  エンコーディング」のセクションを参照。
論理値。  trueを指定すると、'raw'インターフェイスが使用され、 通常のファイルではない引数、例えばキャラクタデバイスなどに適している。  これは、テキストモードでの読み込みのためにオープンする際の 圧縮ファイルのチェックを抑制し、'ファイル'がシーク可能でない可能性があることを 保証する。
<code>c("default", "internal", "winet", "libcurl")</code>に部分的にマッチする文字列。
HTTPrequests で使用する HTTP ヘッダの名前付き文字ベクトル。  非 HTTP URL では無視されます。  <code>HTTPUserAgent</code> オプション (<code>options</code> を参照) から得られる <code>User-Agent</code> ヘッダは、自動的に最初のヘッダとして使われます。
0-9 の整数。  書き込み時に適用する圧縮の量を、なしから最大まで指定します。  <code>xzfile</code>の場合は負の値も指定できます: '圧縮'のセクションを参照してください。
数値: この接続で使用するタイムアウト(秒単位)。  OSによっては、非常に大きな値をゼロとして扱うことがあるので注意してください: しかし、POSIX標準では31日までの値をサポートしています。
オプションの文字ベクトル。現在TCPソケットでサポートされているのは<code>"no-delay"</code>のみである。
zip ファイル内のファイル名。
文字列。  ポートのホスト名。
整数。  TCP ポート番号。
論理。  ソケットをクライアントにするかサーバーにするか。
接続をリッスンするサーバソケット。
コネクション。
文字列。  現在は無視される。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
他のメソッドに渡される、または他のメソッドから渡される引数。
プロット内の点の座標。あるいは、単一のプロット構造、関数、<em>任意の<span style="font-family：color：<code>plot</code>メソッド</em>を持つ<empan style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトを提供することもできます。
<code>x</code>が適切な構造体であれば、<em>オプション</em>で、プロット内の点のy座標を指定します。
メソッドに渡される引数、例えばグラフパラメータ（<code>par</code>を参照）：

どのようなプロットを描くか。  可能なタイプは

<code>"p"</code>は<b>p</b>ポイント、
<code>"l"</code> for <b>l</b>ines、
<code>"b"</code>は<b>b</b>の両方、
<code>"c"</code>は<code>"b"</code>のライン部分のみを表す、
<code>"o"</code>は'<b>o</b>verplotted'の両方を表す、
<code>"h"</code>は'<b>h</b>istogram'のような（または'高密度'の）縦線、
<code>"s"</code>は階段の<b>s</b>段を表します、
<code>"S"</code> for other <b>s</b>teps, see 'Details' below、
<code>"n"</code> はプロットしない。
例えば、<code>type = "punkte"</code>はScompatibilityの<code>type = "p"</code>と同じです。  <code>plot.factor</code>のように、これを受け付けないメソッドもあることに注意してください。
プロット全体のタイトル: <code>title</code> を参照してください。
プロットのサブタイトル: <code>title</code> を参照。
x軸のタイトル: <code>title</code> を見よ。
y軸のタイトル: <code>title</code> を見よ。
<i>y/x</i>アスペクト比: <code>plot.window<//code>を参照。
マッチする値: <code>as.character</code>によって文字ベクトルに変換されます。  長いベクトルがサポートされています。
マッチする値：文字ベクトルに変換されます。  長いベクトルはサポートされていません。
マッチしない位置または多重部分的にマッチする位置で返される値。  これは<code>integer</code>に強制されることに注意。
<code>table</code>内の要素は複数回使用されるべきか？
数値引数または文字引数（注参照）。
欠損値を削除すべきかどうかを示す論理。
数値引数または文字引数（注参照）。
欠損値を削除すべきかどうかを示す論理。
数値引数または文字引数（注参照）。
欠損値を削除すべきかどうかを示す論理。
数値引数または文字引数（注参照）。
欠損値を削除すべきかどうかを示す論理。
多項式係数を増加順に並べたベクトル。
<code>1</code>から<code>length(search())</code>の間の整数。
適切なアリティの関数(<code>Reduce</code>ではバイナリ、<code>Filter</code>, <code>Find</code>と<code>Position</code>ではユナリ、<code>Map</code>では<i>k</i>-ary(これが<i>k</i>引数で呼ばれる場合)。  <code>Negate</code>のための任意の述語関数。
ベクトル。
<span style="font-family：font-family: Courier New, Courier; color：<code>x</code>の要素と同じ種類の<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
左から右(デフォルト)に進むか、右から左に進むかを示す論理。
連続する reducecombination を累積するかどうかを示す論理。  デフォルトでは、finalcombinationのみが使用されます。
一致しない」（述語を満たす要素がない）場合に返される値。
ベクトル。
<code>as.numeric</code>によってnumericに強制可能なオブジェクト。
インターバルの<em>希望数</em>を与える整数。  整数でない値は切り捨てられる。
区間数の<em>最小値</em>を与える非負整数。  <code>min.n == 0</code> の場合、<code>pretty(.)</code>は単一の値を返す。
正数, <code>range(x)</code> が非常に小さい場合(通常は0)にデフォルトのスケールを縮小する係数(1より小さい)。
区間単位は、<code>b</code>の{1,2,5,10}倍、10のべき乗として決定されます。  より大きな<code>high.u.bias</code>値はより大きな単位を好む。
非負の数値乗数で、2より5を優先する。  デフォルトと'最適':<code>u5.bias = .5 + 1.5*high.u.bias</code>.
0,1,2}のいずれかの整数コード。0でない場合、<em>epsilon補正</em>が境界で行われ、結果の境界は<code>range(x)</code>の外になります; <em>small</em>の場合、補正は<code>eps.correct &gt;= 2</code>の場合のみ行われます。
メソッドのさらなる引数。
<code>as.numeric</code>によってnumericに強制可能なオブジェクト。
インターバルの<em>必要数</em>を与える整数。  非整数の値は切り捨てられます。
区間数の<em>最小値</em>を与える非負整数。  <code>min.n == 0</code> の場合、<code>pretty(.)</code>は単一の値を返す。
正数, <code>range(x)</code> が非常に小さい場合(通常は0)にデフォルトのスケールを縮小する係数(1より小さい)。
区間単位は、<code>b</code>の{1,2,5,10}倍、10のべき乗として決定されます。  より大きな<code>high.u.bias</code>値はより大きな単位を好む。
非負の数値乗数で、2より5を優先する。  デフォルトと'最適':<code>u5.bias = .5 + 1.5*high.u.bias</code>.
0,1,2}のいずれかの整数コード。0でない場合、<em>epsilon補正</em>が境界で行われ、結果の境界は<code>range(x)</code>の外になります; <em>small</em>の場合、補正は<code>eps.correct &gt;= 2</code>の場合のみ行われます。
メソッドのさらなる引数
アトミックな数値または文字オブジェクトで、<code>prettyNum()</code>の場合のみ<code>complex</code>となる可能性があります。  どのようなクラスでも警告とともに破棄される。
小数点以下の桁数(<code>format = "f"</code>) または<em>有効桁数(<code>format = "g"</code>, <code>= "e"</code> or <code>= "fg"</code>).

デフォルト：整数の場合は2、実数の場合は4。  0未満の場合、Cのデフォルトである6桁が使われる。  50以上指定した場合、<code>format = "f"</code>で通常324に制限されない限り、警告とともに50が使用される。(使用するOSやコンパイラにもよりますが、15～21桁以下が正確である必要はありません。  この制限は、基礎となるCランタイムのセグメンテーション・フォールトに対する予防措置に過ぎない)。
<code>digits</code> と <code>width</code> の両方が指定されていない場合、 <code>width</code> のデフォルトは 1 で、そうでなければ <code>digits + 1</code> となります。  <code>width = 0</code> は<code>width = digits</code> を使用し、<code>width &lt; 0</code> は、このフィールドの数値を左詰めにすることを意味する (<code>flag = "-"</code> と等価)。  文字データの場合、これは文字数で解釈される(バイト数でも表示幅でもない)。
<code>"d"</code> (整数の場合)、<code>"f"</code>、<code>"e"</code>、<code>"E"</code>、<code>"g"</code>、<code>"G"</code> (整数の場合)、<code>"fg"</code> (整数の場合)、<code>"s"</code> (文字列の場合) に等しい。  デフォルトは、整数の場合は <code>"d"</code>、実数の場合は <code>"g"</code>。

<code>"f"</code>は通常の<code>xxx.xxx</code>の書式で数値を与える; <code>"e"</code>と<code>"E"</code>は<code>n.ddde+nn</code>または<code>n.dddE+nn</code> (scientific format); <code>"g"</code> and <code>"G"</code> put<code>x[i]</code> into scientific format only if it saves space to do so<em></em> drop trailing zeros and decimal point - unless <code>flag</code>contains <code>"#"</code> which keeps trailing zeros for the <code>"g", "G"</code>formats.

<code>"fg"</code>(我々のハイブリッドフォーマット)は、<code>"f"</code>と同じ固定フォーマットを使用しますが、<code>digits</code>を<em>有効数字</em>の最小数として使用します。  これは、<code>signif</code>とは異なり、<code>digits</code>よりも有効桁数の多い大きな数値を表示することに注意してください。  <code>flag</code> が<code>"#"</code> を含まない限り、このフォーマットでは末尾のゼロは<em>取り除かれる</em>。
<code>formatC</code>の場合は、Kernighan and Ritchie (1988, page 243)またはC+99標準のような書式修飾子を与える文字列。

先頭のゼロをパッドする；
左詰めを行う、
すべての場合において符号を保証する、すなわち、正の数の場合は<code>"+"</code>となる、
最初の文字が符号でない場合、スペース文字 <code>" "</code> が代わりに使われる。
は、特に<code>format</code>に依存して、"別の出力形式 "を指定します。
プラットフォームとロケールの組み合わせによっては、10進数変換のために「千のグループ化」を有効にする、
また、'<span class="file">glibc</span>' のバージョンによっては、整数変換でロケールの代替出力桁があれば、それを使用することができます。
これらのフラグは、任意の順番で複数指定することができる。  その他の文字は、<code>文字</code>フォーマットには影響しないが、<span style="font-family：color：#666666;"><b>R</b></span> 3.4.0.
<code>"double"</code> (または<code>"real"</code>), <code>"integer"</code>または<code>"character"</code>：<code>x</code>の保存モードから決定されます。
もし空でなければ、<code>big.interval</code>の小数点<em>before</em>(したがって<code>big</code>)の間のマークとして使用されます。
上記の<code>big.mark<//code>を参照; デフォルトは3.
文字; もし空でなければ、<code>small.interval</code> 小数点の<em>後</em> (従って、<code>small</code>) 小数点間のマークとして使用されます。
上記の<code>small.mark<//code>を参照してください。
小数点を示すために使われる文字。
<code>x</code> が <code>character</code> の場合、<code>x</code> で小数点として使われていることが知られている文字。
マーク(<code>big.mark</code> または <code>small.mark</code>)が追加された場合に、文字列の幅を可能な限り維持するかどうかを指定する文字列。  デフォルトの<code>"common"</code>は、<code>format</code>のような動作に対応し、<code>"individual"</code>は、<code>formatC()</code>でのデフォルトです。値は省略可能である。
論理値、文字列、または<code>NULL</code>で、<em>ゼロ</em>が特別にフォーマットされるべきかどうかを指定します。  疎な'オブジェクトを印刷するのに便利です。
論理; <code>zero.print</code>が文字列の場合、<code>x</code>内の正確なゼロのエントリが単に<code>zero.print</code>で置き換えられるべきかを示します。  そうでなければ、それぞれの文字列の幅に応じて、(フォーマットされた)ゼロは<code>zero.print<//code>によって<em>部分的に</em>置き換えられ、<code>""</code>で右詰めにされます。  その場合(偽の<code>replace[.zero]</code>)、<code>zero.print</code>文字列が適合しない場合、警告が出されます(<code>warn.non.fitting</code>が真の場合)。

これは<code>.format.zeros(*, replace=replace.zero)</code> を3回呼び出す<code>prettyNum()</code>によって動作します。
論理; これが真で、<code>replace[.zero]</code>が偽で、<code>zero.print</code>文字列が収まらない場合、<code>警告</code>が通知されます。
論理的で、小数点以下の<code>"0"</code>が削除されるべきかどうかを示します。また、指数フォーマットでは<code>"e+00"</code>も削除されます。  これは単に<code>prettyNum()</code>に渡されます。
オプションの論理で、<code>x</code> が<code>"character"</code>の場合に使用され、それが<code>complex</code>ベクトルに由来するかどうかを示します。  デフォルト(<code>NA</code>)では、<code>x</code>は'complexのように見える'ようにチェックされます。
<code>format</code> に渡される引数。
<code>x</code>と同じ長さの数値ベクトルで、典型的には、文字ベクトル<code>x</code>がプレフォーマットとなる数値です。
メソッドを選択するために使われるオブジェクト。
他のメソッドに渡される、または他のメソッドから渡される引数。
文字列を引用符で囲むかどうかを示す論理値。
<code>0</code>の場合、余分な "Levels "行は表示されない。  デフォルトの<code>NULL</code>は、<code>max.levels</code>を選択し、レベルが幅<code>width</code>の1行に印刷されるようにします。
<code>max.levels</code>がNULLの場合のみ使用されます。
<em>有効</em>桁数の最小値、<code>print.default<//code>を参照。
<code>print.default</code>を参照してください。
0(<code>0</code>)をどのように印刷するかを指定する文字; 疎な表の場合、<code>"."</code>を使用すると、<a href="https://CRAN.R-project.org/package=Matrix"><span class="pkg">行列</span></a>で疎な行列を印刷するのと同様に、より読みやすい結果が得られます。
文字列を右寄せにするかどうかを示す論理値。
<code>format</code>に渡される、文字列を左寄せにするか右寄せにするかを指定する文字。
例えば、<code>options(keep.source = TRUE)</code>が使用されている場合、内部的に保存されたソースを印刷に使用すべきかどうかを示す論理。
オブジェクト
<span style="font-family：font-family: Courier New, Courier; color：#通常はデータフレームですが、行列の場合もあります。
長さ<code>nrow(data)</code>の因子または因子のリスト。
(通常はデータフレームの)サブセット<code>data</code>に適用される関数。
<code>FUN</code> へのさらなる引数。
論理: <code>tapply</code> を参照。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式。
戻り値または終了前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
追加の引数。
文字列。  詳細'を参照。
文字列。  接続のオープン方法の説明 (最初にオープンする場合)。  指定できる値については「モード」のセクションを参照のこと。
論理値。  ブロック」のセクションを参照。
想定するエンコーディングの名前。  エンコーディング」のセクションを参照。
論理値。  trueを指定すると、'raw'インターフェイスが使用され、 通常のファイルではない引数、例えばキャラクタデバイスなどに適している。  これは、テキストモードでの読み込みのためにオープンする際の 圧縮ファイルのチェックを抑制し、'ファイル'がシーク可能でない可能性があることを 保証する。
<code>c("default", "internal", "winet", "libcurl")</code>に部分的にマッチする文字列。
HTTPrequests で使用する HTTP ヘッダの名前付き文字ベクトル。  非 HTTP URL では無視されます。  <code>HTTPUserAgent</code> オプション (<code>options</code> を参照) から得られる <code>User-Agent</code> ヘッダは、自動的に最初のヘッダとして使われます。
0-9 の整数。  書き込み時に適用する圧縮の量を、なしから最大まで指定します。  <code>xzfile</code>の場合は負の値も指定できます: '圧縮'のセクションを参照してください。
数値: この接続で使用するタイムアウト(秒単位)。  OSによっては、非常に大きな値をゼロとして扱うことがあるので注意してください: しかし、POSIX標準では31日までの値をサポートしています。
オプションの文字ベクトル。現在TCPソケットでサポートされているのは<code>"no-delay"</code>のみである。
zip ファイル内のファイル名。
文字列。  ポートのホスト名。
整数。  TCP ポート番号。
論理。  ソケットをクライアントにするかサーバーにするか。
接続をリッスンするサーバソケット。
コネクション。
文字列。  現在は無視される。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
他のメソッドに渡される、または他のメソッドから渡される引数。
クラス <code>data.frame</code> のオブジェクト。
<code>print</code>メソッドのオプション引数。
使用される最小有効桁数: <code>print.default</code> を参照。
エントリを引用符で囲んで印刷するかどうかを指定します。
文字列を右揃えにするかどうかを指定します。  デフォルトは右寄せである。
論理 (または文字ベクトル) で、行名を出力するかどうか (または何を出力するか) を指定します。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
要約または印刷される <code>Date</code> オブジェクト。
計算の有効桁数。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>, <code>getOption("max.print")</code>が使用されます。
他のメソッドから、または他のメソッドに渡される更なる引数。
印刷されるオブジェクト。
<code>digits</code>にNULLでない値を指定すると、値として表示される有効数字の最小桁数を指定します。  デフォルトの<code>NULL</code>は、<code>getOption("digits")</code>を使用します。  (複素数の解釈については、<code>signif</code>を参照してください。)非整数の値は切り捨てられ、1以上22以下の値のみが受け付けられます。
文字列(<code>character</code>s)を引用符で囲んで表示するかどうかを示す論理値。
<code>NA</code>を示す文字列、または<code>NULL</code>（'詳細'を参照）。
非負の整数 <i>≤ 1024</i> または <code>NULL</code> (1 を意味する) で、出力されるベクトル、行列、配列の隣接する列の間隔を示す。
論理値で、文字列を右揃えにするかどうかを指定します。  デフォルトは左揃え。
<code>max</code>にNULLでない値を指定すると、印刷されるエントリのおおよその最大数を指定します。  デフォルトの<code>NULL</code>は、<code>getOption("max.print")</code>を使用します。
は、ベクトルや行列などの印刷に使用される行の最大列数を制御します。  デフォルトの<code>NULL</code>は、<code>getOption("width")</code>を使用します。
logicalは、言語オブジェクトをデパースするのではなく、ソース参照とコピーのどちらを使用するかを示します。
他のメソッドとの間で渡される追加の引数。  この関数では無視されます。
date-timeまたはdateオブジェクト。
主に<code>"POSIXlt"</code>オブジェクトに使用されます。
文字列。  変換結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数、または他のメソッドから渡される引数。
メソッドを選択するためのオブジェクト。
他のメソッドに渡される、または他のメソッドから渡される引数。
文字列を引用符で囲むかどうかを示す論理値。
<code>0</code>の場合、余分な "Levels "行は表示されない。  デフォルトの<code>NULL</code>は、<code>max.levels</code>を選択し、レベルが幅<code>width</code>の1行に印刷されるようにします。
<code>max.levels</code>がNULLの場合のみ使用されます。
<em>有効</em>桁数の最小値、<code>print.default<//code>を参照。
<code>print.default</code>を参照してください。
0(<code>0</code>)をどのように印刷するかを指定する文字; 疎な表の場合、<code>"."</code>を使用すると、<a href="https://CRAN.R-project.org/package=Matrix"><span class="pkg">行列</span></a>で疎な行列を印刷するのと同様に、より読みやすい結果が得られます。
文字列を右寄せにするかどうかを示す論理値。
<code>format</code>に渡される、文字列を左寄せにするか右寄せにするかを指定する文字。
<code>options(keep.source=TRUE)</code>が使用されている場合など、内部的に保存されているソースを印刷に使用すべきかどうかを示す論理。
文字列または<code>DLLInfo</code>オブジェクト.文字列は、対象となるDLLのファイル名を指定し、ファイル名の拡張子なしで与えられます(例、ファイル '<span class="file">MyPackage/libs/MyPackage.so</span>' は、<span class="samp">MyPackage</span> として指定されます。

<code>DLLInfo</code>オブジェクトは、<code>dyn.load</code>と<code>library.dynam</code>の呼び出しで直接得ることができ、また、DLLがロードされた後に、<code>getLoadedDLLs</code>を使用して見つけることができます。

<code>DLLInfo</code>のアプローチは、同じ名前を持つが、異なるディレクトリのファイルに対応する2つのDLLに関連するあいまいさを回避する。
論理値。  これが<code>TRUE</code>の場合、返されるリストの要素は、ルーチンの名前を使って命名される。  <code>FALSE</code>の場合、これらの名前は計算されず、リストに代入されません。  その結果、呼び出しはより速くなるはずである。  名前情報は、リスト内の<code>NativeSymbolInfo</code>オブジェクトでも利用可能です。
スペクトル分解を計算する数値行列または複素行列。  論理行列は数値に強制されます。
<code>TRUE</code> の場合, 行列は対称（複素数の場合はエルミート）であると仮定され, 下三角形（対角線を含む）のみが使用されます.  <code>symmetric</code> が指定されない場合、<code>isSymmetric(x)</code> が使用されます。
<code>TRUE</code> が指定された場合、固有値のみが計算されて返され、そうでない場合は固有値と固有ベクトルの両方が返されます。
論理値。無効で無視されます。
メソッドの選択に使用されるオブジェクト。
他のメソッドに渡される、または他のメソッドから渡されるさらなる引数。
論理。文字列を引用符で囲んで出力するかどうかを指定します。
<code>0</code>の場合、余分な "Levels "行は表示されない。  デフォルトの<code>NULL</code>は、<code>max.levels</code>を選択し、レベルが幅<code>width</code>の1行に印刷されるようにします。
<code>max.levels</code>がNULLの場合のみ使用されます。
<em>有効</em>桁数の最小値、<code>print.default<//code>を参照。
<code>print.default</code>を参照してください。
0(<code>0</code>)をどのように印刷するかを指定する文字; 疎な表の場合、<code>"."</code>を使用すると、<a href="https://CRAN.R-project.org/package=Matrix"><span class="pkg">行列</span></a>で疎な行列を印刷するのと同様に、より読みやすい結果が得られます。
文字列を右寄せにするかどうかを示す論理値。
<code>format</code>に渡される、文字列を左寄せにするか右寄せにするかを指定する文字。
例えば、<code>options(keep.source = TRUE)</code>が使用されている場合、内部的に保存されたソースを印刷に使用すべきかどうかを示す論理。
メソッドを選択するために使用されるオブジェクト。
他のメソッドに渡される、または他のメソッドから渡されるさらなる引数。
文字列を引用符で囲んで表示するかどうかを示す論理値。
<code>0</code>の場合、余分な "Levels "行は表示されない。  デフォルトの<code>NULL</code>は、<code>max.levels</code>を選択し、レベルが幅<code>width</code>の1行に印刷されるようにします。
<code>max.levels</code>がNULLの場合のみ使用されます。
<em>有効</em>桁数の最小値、<code>print.default<//code>を参照。
<code>print.default</code>を参照してください。
0(<code>0</code>)をどのように印刷するかを指定する文字; 疎な表の場合、<code>"."</code>を使用すると、<a href="https://CRAN.R-project.org/package=Matrix"><span class="pkg">行列</span></a>で疎な行列を印刷するのと同様に、より読みやすい結果が得られます。
文字列を右寄せにするかどうかを示す論理値。
<code>format</code>に渡される、文字列を左寄せにするか右寄せにするかを指定する文字。
例えば、<code>options(keep.source = TRUE)</code>が使用されている場合、内部的に保存されたソースを印刷に使用すべきかどうかを示す論理。
<code>"hexmode"</code>クラスから継承したメソッド用のオブジェクト。
<code>NULL</code>または、使用する最小フィールド幅を指定する正の整数。
大文字を使うか小文字を使うかを示す論理値（デフォルト）。
他のメソッドに渡される、または他のメソッドから渡されるさらなる引数。
パッケージ名。<code>character.only</code>が<code>FALSE</code>（デフォルト）か<code>TRUE</code>かによって、名前か文字列、または文字列として与えられる。
ロードされた名前空間をアタッチする検索リストの位置。  <code>search()</code>で指定された現在の検索リスト上の位置の名前でもよい。
<span style="font-family：font-family: Courier New, Courier; color：#または <code>NULL</code>.  デフォルト値の<code>NULL</code>は、現在<code>.libPaths()</code>で知られている全てのライブラリに対応します。
<code>package</code> または <code>help</code> が文字列であると仮定できるかどうかを示す論理。
を論理的に指定する。  これが<code>TRUE</code>の場合、<code>FALSE</code>または<code>TRUE</code>が成功を示すために返される。
を論理的に返します。  <code>TRUE</code>の場合、新しいパッケージのアタッチによる<code>衝突</code>に関する警告が表示される。  衝突とは、関数をマスクする関数、または非関数をマスクする非関数のことです。デフォルトは、<code>conflicts.policy</code>オプションで<code>FALSE</code>と指定されない限り、<code>TRUE</code>である。
論理的である。  <code>TRUE</code>の場合、追加の診断が表示される。
論理。  <code>TRUE</code> の場合、パッケージのアタッチを確認するメッセージは表示されず、パッケージのアタッチに失敗してもエラーや警告は表示されません。
パッケージ名を示す文字列。
ストリクト・コンフリクト・チェックが有効な場合に、エラーを通知することなく検索パス上のオブジェクトをマスクできるオブジェクト名の文字ベクトル。
アタッチされたフレームに除外または含めるオブジェクト名の文字ベクトル。<code>library</code>または<code>require</code>の呼び出しでは、これらの引数のうち1つのみを使用することができます。
<code>DESCRIPTION</code> ファイルの <code>Depends</code> 節にリストされた必須パッケージを自動的にアタッチするかどうかを指定する論理。
メソッドを選択するために使われるオブジェクト。
他のメソッドに渡される、または他のメソッドから渡される更なる引数。
文字列を引用符で囲むかどうかを示す論理値。
<code>0</code>の場合、余分な "Levels "行は表示されない。  デフォルトの<code>NULL</code>は、<code>max.levels</code>を選択し、レベルが幅<code>width</code>の1行に印刷されるようにします。
<code>max.levels</code>がNULLの場合のみ使用されます。
<em>有効</em>桁数の最小値、<code>print.default<//code>を参照。
<code>print.default</code>を参照してください。
0(<code>0</code>)をどのように印刷するかを指定する文字; 疎な表の場合、<code>"."</code>を使用すると、<a href="https://CRAN.R-project.org/package=Matrix"><span class="pkg">行列</span></a>で疎な行列を印刷するのと同様に、より読みやすい結果が得られます。
文字列を右寄せにするかどうかを示す論理値。
<code>format</code>に渡される、文字列を左寄せにするか右寄せにするかを指定する文字。
<code>options(keep.source=TRUE)</code>が使用されている場合など、内部的に保存されているソースを印刷に使用すべきかどうかを示す論理。
文字列または<code>DLLInfo</code>オブジェクト.文字列は、対象となるDLLのファイル名を指定し、ファイル名の拡張子なしで与えられます(例、ファイル '<span class="file">MyPackage/libs/MyPackage.so</span>' は、<span class="samp">MyPackage</span> として指定されます。

<code>DLLInfo</code>オブジェクトは、<code>dyn.load</code>と<code>library.dynam</code>の呼び出しで直接得ることができ、また、DLLがロードされた後に、<code>getLoadedDLLs</code>を使用して見つけることができます。

<code>DLLInfo</code>のアプローチは、同じ名前を持つが、異なるディレクトリのファイルに対応する2つのDLLに関連するあいまいさを回避する。
論理値。  これが<code>TRUE</code>の場合、返されるリストの要素は、ルーチンの名前を使って命名される。  <code>FALSE</code>の場合、これらの名前は計算されず、リストに代入されません。  その結果、呼び出しはより速くなるはずである。  名前情報は、リスト内の<code>NativeSymbolInfo</code>オブジェクトでも利用可能です。
リスト内の<span style="font-family：Courier New, Courier; color：font: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト、通常は<code>文字列</code>のベクトル。
<code>print()</code>に渡されるオプションの<code>logical</code>は、<code>print.default()</code>で使用され、文字列を右寄せにするかどうかを示します。
クラス<code>"noquote"</code>のオブジェクト。
<code>print</code>のような次のメソッドに渡されるさらなるオプション。
汎用<code>c</code>関数との互換性のため。
<code>package_version</code>の場合は、<code>R.version</code>で得られるRversionオブジェクト。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理。
<code>"octmode"</code>クラスを継承するメソッド用のオブジェクト。
<code>NULL</code>または、使用される最小フィールド幅を指定する正の整数。
他のメソッドに渡される引数、または他のメソッドから渡される引数。
パッケージ名。<code>character.only</code>が<code>FALSE</code>（デフォルト）か<code>TRUE</code>かによって、名前か文字列、または文字列として与えられる。
ロードされた名前空間をアタッチする検索リストの位置。  <code>search()</code>で指定された現在の検索リスト上の位置の名前でもよい。
<span style="font-family：font-family: Courier New, Courier; color：#または <code>NULL</code>.  デフォルト値の<code>NULL</code>は、現在<code>.libPaths()</code>が知っている全てのライブラリに対応します。
<code>package</code> または <code>help</code> が文字列であると仮定できるかどうかを示す論理。
を論理的に指定する。  これが<code>TRUE</code>の場合、<code>FALSE</code>または<code>TRUE</code>が成功を示すために返される。
を論理的に返します。  <code>TRUE</code>の場合、新しいパッケージのアタッチによる<code>衝突</code>に関する警告が表示される。  衝突とは、関数をマスクする関数、または非関数をマスクする非関数のことです。デフォルトは、<code>conflicts.policy</code>オプションで<code>FALSE</code>と指定されない限り、<code>TRUE</code>である。
論理的である。  <code>TRUE</code>の場合、追加の診断が表示される。
論理。  <code>TRUE</code> の場合、パッケージのアタッチを確認するメッセージは表示されず、パッケージのアタッチに失敗してもエラーや警告は表示されません。
パッケージ名を示す文字列。
ストリクト・コンフリクト・チェックが有効な場合に、エラーを通知することなく検索パス上のオブジェクトをマスクすることができるオブジェクト名の文字ベクトル。
アタッチされたフレームに除外または含めるオブジェクト名の文字ベクトル。<code>library</code>または<code>require</code>の呼び出しでは、これらの引数のうち1つのみを使用することができます。
<code>DESCRIPTION</code> ファイルの <code>Depends</code> 節にリストされた必須パッケージを自動的にアタッチするかどうかを指定する論理。
date-timeクラスの1つから出力または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
date-timeクラスの1つから、印刷または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
条件オブジェクト。
呼び出し式
条件オブジェクト
評価される式
リターンまたは終了する前に評価される式
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
詳細は以下を参照。
<code>rle()</code>の場合はベクトル(アトミック、リストではない); <code>inverse.rle()</code>の場合はクラス<code>"rle"</code>のオブジェクト。
ここでは無視される。
<code>print.default</code>を参照。
各印刷行の先頭に付加される文字列。
メソッドを選択するためのオブジェクト。
他のメソッドに渡される、または他のメソッドから渡されるさらなる引数。
論理。文字列を引用符で囲んで印刷するかどうかを示す。
<code>0</code>の場合、余分な "Levels "行は印刷されない。  デフォルトの<code>NULL</code>は、<code>max.levels</code>を選択し、レベルが幅<code>width</code>の1行に印刷されるようにします。
<code>max.levels</code>がNULLの場合のみ使用されます。
<em>有効</em>桁数の最小値、<code>print.default<//code>を参照。
<code>print.default</code>を参照してください。
0(<code>0</code>)をどのように印刷するかを指定する文字; 疎な表の場合、<code>"."</code>を使用すると、<a href="https://CRAN.R-project.org/package=Matrix"><span class="pkg">行列</span></a>で疎な行列を印刷するのと同様に、より読みやすい結果が得られます。
文字列を右寄せにするかどうかを示す論理値。
<code>format</code>に渡される、文字列を左寄せにするか右寄せにするかを指定する文字。
例えば、<code>options(keep.source = TRUE)</code>が使用されている場合、内部的に保存されたソースを印刷に使用すべきかどうかを示す論理。
 ファイル名。
 ファイルの文字エンコーディング。
 <code>parse</code> の<code>encoding</code>引数を参照のこと。
 ソース行の文字ベクトル。  その他の<span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトは文字に強制されます。
 ファイルのコピーに使用するタイムスタンプ。
 この <code>srcfilecopy<//code> はファイルシステムファイルから来たものですか？
 <code>srcfile</code> オブジェクト。
 行番号。
 詳細'を参照。
 適切なクラスのオブジェクト。
 <code>srcref</code> のテキストを得るために <code>srcfile</code> を読むかどうか。
 文字範囲の終端を示すオプションの 2 番目の <code>srcref</code> オブジェクト。
 これらは無視されます。
 ファイル名。
 ファイルの文字エンコーディング。
 <code>parse</code> の<code>encoding</code>引数を参照のこと。
 ソース行の文字ベクトル。  その他の<span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトは文字に強制されます。
 ファイルのコピーに使用するタイムスタンプ。
 この <code>srcfilecopy<//code> はファイルシステムファイルから来たものですか？
 <code>srcfile</code> オブジェクト。
 行番号。
 詳細'を参照。
 適切なクラスのオブジェクト。
 <code>srcref</code> のテキストを得るために <code>srcfile</code> を読むかどうか。
 文字範囲の終端を示すオプションの 2 番目の <code>srcref</code> オブジェクト。
 メソッドへの追加引数。
(文字列を含む) 要素として解釈可能な1つ以上のオブジェクト、またはそのように解釈可能な要素を持つリスト(またはデータフレーム)。  (<code>as.table</code>では、特定のメソッドに渡される引数; <code>as.data.frame</code>では、未使用)
<code>...</code>に含まれる全ての因子を除去する水準。  itが<code>NA</code>を含まず、<code>useNA</code>が指定されていない場合、<code>useNA = "ifany"</code>を意味する。  非要素引数に対する解釈は'Details'を参照のこと。
<code>NA</code> の値をテーブルに含めるかどうか。  省略可能。
結果の次元に与える名前 (<em>dimnames names</em>) を指定します。
デフォルトの<code>dnn</code>がどのように構成されるかを制御します。  詳細'を参照してください。
任意の<span style="font-family：courier new, Courier; color：</span>オブジェクト、または<code>as.data.frame</code>メソッド用のクラス<code>"table"</code>を継承したオブジェクトです。<code>as.data.frame.table(x,*)</code>は、<code>array</code>を "reshaping "するために、テーブルでない<code>x</code>に対して明示的に呼び出されることに注意して下さい。
データフレームの行名を指定する文字ベクトル。
テーブルエントリの列に使用される名前、通常はカウント。
論理: 分類因子は因子(デフォルト)として返すべきか、文字ベクトルとして返すべきか。
<code>provideDimnames</code> に渡されます。
(<code>warnings()</code>の)<code>cat</code>に渡される引数。
<code>warnings()</code>が返す<code>"warnings"</code>オブジェクト。
<code>"warnings"</code>または<code>"summary.warnings"</code>オブジェクト。
もし<code>missing</code>でなければ、<code>x</code>と同じ<code>長さの<code>文字</code>ベクトル。  デフォルトは <code>paste0(seq_len(n), ": ")</code> for<i>n &gt;= 2</i> where <code>n &lt;- length(x)</code>.
文字列<code>cat()</code>は、メッセージが表示される前に表示されます。
要約が必要なオブジェクト。
<code>summary()</code>の<em>default</em>メソッドの結果。
<code>factor</code>sに対して、いくつのレベルを表示すべきかを示す整数。
<code>signif()</code>（<code>summary.default</code>の場合）または<code>format()</code>（<code>summary.data.frame</code>の場合）で数値をフォーマットするために使用される整数。  <code>summary.default</code>では、もし指定されなければ(すなわち、<code>missing(.)</code>)、<code>signif()</code>はもう呼び出されません(<span style="font-family：Courier New, Courier; color：<span style="font: Courier New; color: #666666;"><b>R</b></span> &gt;= 3.4.0 では、デフォルトは <code>print</code> と <code>format</code> メソッドで round のみとなりました)。
<code>quantile(*, type=quantile.type)</code>でデフォルトのメソッドに使用される整数コード。
生成される要約に影響を与える追加引数。
メソッドを選択するために使用されるオブジェクト。
他のメソッドに渡される、または他のメソッドから渡される追加引数。
論理。文字列を引用符で囲んで表示するかどうかを指定する。
<code>0</code>の場合、余分な "Levels "行は表示されない。  デフォルトの<code>NULL</code>は、<code>max.levels</code>を選択し、レベルが幅<code>width</code>の1行に印刷されるようにします。
<code>max.levels</code>がNULLの場合のみ使用されます。
<em>有効</em>桁数の最小値、<code>print.default<//code>を参照。
<code>print.default</code>を参照してください。
0(<code>0</code>)をどのように印刷するかを指定する文字; 疎な表の場合、<code>"."</code>を使用すると、<a href="https://CRAN.R-project.org/package=Matrix"><span class="pkg">行列</span></a>で疎な行列を印刷するのと同様に、より読みやすい結果が得られます。
文字列を右寄せにするかどうかを示す論理値。
<code>format</code>に渡される、文字列を左寄せにするか右寄せにするかを指定する文字。
<code>options(keep.source=TRUE)</code>が使用されている場合など、内部的に保存されているソースを印刷に使用するかどうかを示す論理。
(<code>warnings()</code>に対して) <code>cat</code>に渡される引数。
<code>warnings()</code>が返す<code>"warnings"</code>オブジェクト。
<code>"warnings"</code>または<code>"summary.warnings"</code>オブジェクト。
もし<code>missing</code>でなければ、<code>x</code>と同じ<code>長さの<code>文字</code>ベクトル。  デフォルトは <code>paste0(seq_len(n), ": ")</code> for<i>n &gt;= 2</i> where <code>n &lt;- length(x)</code>.
文字列<code>cat()</code>は、メッセージが印刷される前に出力されます。
数値または文字行列。
(オプション) 行名または列名をそれぞれ指定する文字ベクトル。  デフォルトでは、これらは<code>dimnames(x)</code>から取られます。
論理; <code>TRUE</code> かつ <code>x</code> が mode<code>"character"</code> の場合、<em>quotes</em> (<span class="samp">"</span>) が使用されます。
 <code>TRUE</code> かつ <code>x</code> が mode<code>"character"</code> の場合、出力列は <em>right</em>-justified となります。
<code>NA</code> がどのように出力されるか。  これがnullでない場合、その値は<code>NA</code>を表すために使われます。
<code>print</code> メソッドの引数。
数値または複素数または論理ベクトル。
論理ベクトル。  欠損値は削除されるべきか？
 テーブル
例えば、行列の場合、 <code>1</code> は行を、 <code>2</code> は列を、 <code>c(1, 2)</code> は行と列を表します。
 テーブル
例えば、行列の場合、 <code>1</code> は行を、 <code>2</code> は列を、 <code>c(1, 2)</code> は行と列を示します。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト（行列、配列、データ・フレームなど）。
<code>dimnames(x)</code> に指定できる値: 'Value' セクションを参照してください。
構築された dimnames の <code>base</code> 記号と数字を区切るための文字列。
文字ベクトルの空でない<code>list</code>。  listコンポーネントは、空のdmnamesコンポーネントの置換を構築するために順番に使用されます（必要に応じて再利用されます）。  例題も参照のこと。
<code>make.unique</code>の意味で、構成されるdimnamesが各次元内で一意であることを示す論理的なもの。
非負の数値ベクトル。
数値ベクトル。
整数ベクトル。
文字ベクトル。
接続。
論理。  trueの場合、押し戻された各文字列に改行が追加される。
部分的にマッチした文字列。  詳細を参照。
文字ベクトル。
接続。
論理。  trueの場合、押し戻された各文字列に改行が追加されます。
部分的にマッチした文字列。  詳細を参照。
<code>"no"</code>、<code>"yes"</code>、<code>"ask"</code>、<code>"default"</code>のいずれか。
オペレーティングシステムに返される (数値の) エラーステータス。  通常、<code>0</code>は正常終了を示します。
<code>.Last()</code> を実行すべきか？
QR分解が計算される数値行列または複素行列。  論理行列は数値に強制されます。
<code>x</code> の列における線形従属性を検出するための許容誤差。<code>LAPACK</code>が偽で、<code>x</code>が実数の場合のみ使用されます。
<code>qr</code> によって計算されるタイプの QR 分解。
方程式の右辺のベクトルまたは行列。
QR分解または(<code>qr.solve</code>のみ)矩形行列。
実効ランク。
論理的.  実数 <code>x</code> の場合、真ならば LAPACK を使用し、そうでなければ LINPACK (デフォルト) を使用します。
他のメソッドに渡される、あるいは他のメソッドから渡される更なる引数
QR 分解を行う数値行列または複素行列。  論理行列は数値に強制されます。
<code>x</code> の列における線形従属性を検出するための許容誤差。<code>LAPACK</code>が偽で、<code>x</code>が実数の場合のみ使用されます。
<code>qr</code> によって計算されるタイプの QR 分解。
方程式の右辺のベクトルまたは行列。
QR分解または(<code>qr.solve</code>のみ)矩形行列。
実効ランク。
論理的.  実数 <code>x</code> の場合、真ならば LAPACK を使用し、そうでなければ LINPACK (デフォルト) を使用します。
他のメソッドに渡される、あるいは他のメソッドから渡される更なる引数
QR 分解を行う数値行列または複素行列。  論理行列は数値に強制されます。
<code>x</code> の列における線形従属性を検出するための許容誤差。<code>LAPACK</code>が偽で、<code>x</code>が実数の場合のみ使用されます。
<code>qr</code> によって計算されるタイプの QR 分解。
方程式の右辺のベクトルまたは行列。
QR分解または(<code>qr.solve</code>のみ)矩形行列。
実効ランク。
論理的.  実数 <code>x</code> の場合、真ならば LAPACK を使用し、そうでなければ LINPACK (デフォルト) を使用します。
他のメソッドに渡される、あるいは他のメソッドから渡される更なる引数
QR 分解を行う数値行列または複素行列。  論理行列は数値に強制されます。
<code>x</code> の列における線形従属性を検出するための許容誤差。<code>LAPACK</code>が偽で、<code>x</code>が実数の場合のみ使用されます。
<code>qr</code> によって計算されるタイプの QR 分解。
方程式の右辺のベクトルまたは行列。
QR分解または(<code>qr.solve</code>のみ)矩形行列。
実効ランク。
論理的.  実数 <code>x</code> の場合、真ならば LAPACK を使用し、そうでなければ LINPACK (デフォルト) を使用します。
他のメソッドに渡される、または他のメソッドから渡されるその他の引数
QR分解を表すオブジェクト。  これは通常、<code>qr</code>または<code>lsfit</code>を以前に呼び出した際に得られたものです。
長さ1の論理式。 <i>bold{Q}</i> または <i>bold{X}</i> 行列の任意の直交補完を行うか、<i>bold{R}</i> 行列のゼロ値行を正方形の上三角形の下に結合して補完するかを示す。
<code>1:nrow(qr$qr)</code> の範囲の整数。  再構成された<i>bold{X}</i>に含まれる列数。  <code>complete</code>が<code>FALSE</code>の場合のデフォルトは、qrオブジェクトが構築された元の<i>bold{X}</i>の最初の<code>min(ncol(X), nrow(X))</code>列である。  <code>complete</code>が<code>TRUE</code>の場合のデフォルトは、最初の<code>ncol(X)</code>列に元の<i>bold{X}</i>を持ち、残りの列に任意の直交補完（複素数の場合はユニタリ補完）を持つ正方行列です。
ベクトル (行列ではない) の対角値を返します.  返される<i>bold{Q}</i>の各列は、対応する対角値を乗算される。  デフォルトは全て <code>1</code> です。
QR分解が計算される数値行列または複素行列。  論理行列は数値に強制されます。
<code>x</code> の列における線形従属性を検出するための許容誤差。<code>LAPACK</code>が偽で、<code>x</code>が実数の場合のみ使用されます。
<code>qr</code> によって計算されるタイプの QR 分解。
方程式の右辺のベクトルまたは行列。
QR分解または(<code>qr.solve</code>のみ)矩形行列。
実効ランク。
論理的.  実数 <code>x</code> の場合、真ならば LAPACK を使用し、そうでなければ LINPACK (デフォルト) を使用します。
他のメソッドに渡される、あるいは他のメソッドから渡される更なる引数
QR 分解を行う数値行列または複素行列。  論理行列は数値に強制されます。
<code>x</code> の列における線形従属性を検出するための許容誤差。<code>LAPACK</code>が偽で、<code>x</code>が実数の場合のみ使用されます。
<code>qr</code> によって計算されるタイプの QR 分解。
方程式の右辺のベクトルまたは行列。
QR分解または(<code>qr.solve</code>のみ)矩形行列。
実効ランク。
論理的.  実数 <code>x</code> の場合、真ならば LAPACK を使用し、そうでなければ LINPACK (デフォルト) を使用します。
他のメソッドに渡される、または他のメソッドから渡されるその他の引数
QR分解を表すオブジェクト。  これは通常、<code>qr</code>または<code>lsfit</code>を以前に呼び出した際に得られたものです。
長さ1の論理式。 <i>bold{Q}</i> または <i>bold{X}</i> 行列の任意の直交補完を行うか、<i>bold{R}</i> 行列のゼロ値行を正方形の上三角形の下に結合して補完するかを示す。
<code>1:nrow(qr$qr)</code> の範囲の整数。  再構成された<i>bold{X}</i>に含まれる列数。  <code>complete</code>が<code>FALSE</code>の場合のデフォルトは、qrオブジェクトが構築された元の<i>bold{X}</i>の最初の<code>min(ncol(X), nrow(X))</code>列である。  <code>complete</code>が<code>TRUE</code>の場合のデフォルトは、最初の<code>ncol(X)</code>列に元の<i>bold{X}</i>を持ち、残りの列に任意の直交補完（複素数の場合はユニタリ補完）を持つ正方行列です。
ベクトル(行列ではない)の対角値.  返される<i>bold{Q}</i>の各列は、対応する対角値を乗算される。  デフォルトは全て <code>1</code> です。
QR分解が計算される数値行列または複素行列。  論理行列は数値に強制されます。
<code>x</code> の列における線形従属性を検出するための許容誤差。<code>LAPACK</code>が偽で、<code>x</code>が実数の場合のみ使用されます。
<code>qr</code> によって計算されるタイプの QR 分解。
方程式の右辺のベクトルまたは行列。
QR分解または(<code>qr.solve</code>のみ)矩形行列。
実効ランク。
論理的.  実数 <code>x</code> の場合、真ならば LAPACK を使用し、そうでなければ LINPACK (デフォルト) を使用します。
他のメソッドに渡される、あるいは他のメソッドから渡される更なる引数
QR 分解を行う数値行列または複素行列。  論理行列は数値に強制されます。
<code>x</code> の列における線形従属性を検出するための許容誤差。<code>LAPACK</code>が偽で、<code>x</code>が実数の場合のみ使用されます。
<code>qr</code> によって計算されるタイプの QR 分解。
方程式の右辺のベクトルまたは行列。
QR分解または(<code>qr.solve</code>のみ)矩形行列。
実効ランク。
論理的.  実数 <code>x</code> の場合、真ならば LAPACK を使用し、そうでなければ LINPACK (デフォルト) を使用します。
他のメソッドに渡される、または他のメソッドから渡されるその他の引数
QR分解を表すオブジェクト。  これは通常、<code>qr</code>または<code>lsfit</code>を以前に呼び出した際に得られたものです。
長さ1の論理式。 <i>bold{Q}</i> または <i>bold{X}</i> 行列の任意の直交補完を行うか、<i>bold{R}</i> 行列のゼロ値行を正方形の上三角形の下に結合して補完するかを示す。
<code>1:nrow(qr$qr)</code> の範囲の整数。  再構成された<i>bold{X}</i>に含まれる列数。  <code>complete</code>が<code>FALSE</code>の場合のデフォルトは、qrオブジェクトが構築された元の<i>bold{X}</i>の最初の<code>min(ncol(X), nrow(X))</code>列である。  <code>complete</code>が<code>TRUE</code>の場合のデフォルトは、最初の<code>ncol(X)</code>列に元の<i>bold{X}</i>を持ち、残りの列に任意の直交補完（複素数の場合はユニタリ補完）を持つ正方行列です。
ベクトル(行列ではない)の対角値.  返される<i>bold{Q}</i>の各列は、対応する対角値を乗算される。  デフォルトは全て <code>1</code> です。
クラス <code>"POSIXt"</code> または <code>"Date"</code> を継承したオブジェクト。
論理ベクトル（おそらくリサイクルされる）。  名前は省略されるべきか？
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したlength-oneオブジェクト。
他のメソッドの引数。
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したオブジェクト。
論理ベクトル（おそらくリサイクルされる）。  名前は省略されるべきか？
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したlength-oneオブジェクト。
他のメソッドの引数。
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したオブジェクト。
論理ベクトル（おそらくリサイクルされる）。  名前は省略されるべきか？
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したlength-oneオブジェクト。
他のメソッドの引数。
<code>"no"</code>、<code>"yes"</code>、<code>"ask"</code>、<code>"default"</code>のいずれか。
オペレーティングシステムに返される (数値の) エラーステータス。  通常、<code>0</code>は正常終了を示します。
<code>.Last()</code>は実行されるべきか？
構文的に有効な<span style="font-family："><span style="font-family: Courier New, Courier; color：<span style="font: Courier New, Courier; color: #666666;"><b>R</b></span> 式が実行されます。
<code>call</code>、すなわち<span style="font-family：(font-family: "クーリエ・ニュー, クーリエ; color：つまり、<span style="font: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトの <code>class</code> (および <code>mode</code>) <code>"call"</code>.
環境またはリスト・オブジェクト。  デフォルトは現在の評価環境です。
<code>package_version</code> の場合は、代わりに <code>R.version</code> によって得られる Rversion オブジェクト。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理です。
また、<code>"home"</code>は、<span style="font-family：color：</b></b></span>ホームディレクトリを与える<code>"home"</code>の他に、<code>"bin"</code>, <code>"doc"</code>,<code>"etc"</code>, <code>"include"</code>,<code>"modules"</code>と<code>"share"</code>は、<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> インストールへのパスを与えます。
<code>numeric</code> または文字オブジェクト。
論理的で、<code>NA</code>が省略されるべきかどうかを示す。
論理的な、すべての非限定要素が省略されるべきかどうかを示す。
<code>numeric</code> または文字オブジェクト。
論理的で、<code>NA</code>が省略されるべきかどうかを示す。
すべての非限定要素が省略されるべきかどうかを示す論理。
数値、複素数、文字、または論理ベクトル。
もし<code>TRUE</code>なら、データの欠損値は最後に置かれ、もし<code>FALSE</code>なら、それらは最初に置かれ、もし<code>NA</code>なら、それらは除去され、もし<code>"keep"</code>なら、それらは順位<code>NA</code>と共に保持される。
同順位がどのように扱われるかを指定する文字列。
<code>list</code> または <code>expression</code>, すなわち、"リストのような"。
<code>function</code> は、<code>...</code> を介して、さらに引数を渡す。
<code>class</code> 名の文字ベクトル、または<code>"ANY"</code>で任意のクラスにマッチ。
<code>"ANY"</code>は任意のクラスにマッチする。
与えられた3つの可能性に部分的にマッチする文字列:「詳細」を参照。
<code>f</code>の呼び出しに渡される追加引数。
希望する長さ。
強制されるオブジェクト。
文字または生のベクトル。  入力の場合、これは<span style="font-family：color."><span style="font-family: Courier New, Courier; color：入力の場合、これは<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>生のベクトル・オブジェクトであり、出力接続の場合は接続の名前である。
文字。  標準接続オープンモードのいずれか。
出力 raw 接続。
character または raw vector。  入力の場合は、<span style="font-family：font-family: Courier New, Courier; color：入力の場合、これは<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>生ベクトルオブジェクトであり、出力接続の場合は接続名です。
文字。  標準接続オープンモードのいずれか。
出力 raw 接続。
変換またはシフトされるオブジェクト。
論理：1 文字の文字列に変換するか、複数の個々の文字に変換するか。
シフトするビット数。  正の数は右にシフトし、負の数は左にシフトします。
部分的に一致する結果の型。
変換またはシフトされるオブジェクト。
論理: 変換対象は1文字の文字列か、複数の文字か。
シフトするビット数。  正の数は右にシフトし、負の数は左にシフトします：許容される値は <code>-8 ... 8</code> です。
部分的に一致する結果の型。
変換またはシフトされるオブジェクト。
論理: 変換対象は1文字の文字列か、複数の文字か。
シフトするビット数。  正の数は右にシフトし、負の数は左にシフトします：許容される値は <code>-8 ... 8</code> です。
結果の型。
(一般化された)ベクトルまたは行列。  これらは名前付き引数として与えられる。  その他の<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New; color: #666666;"><b>R</b></span> オブジェクトは適宜強制されるか、S4methodsが使われます。  (<code>cbind</code>の<code>"data.frame"</code>メソッドでは、これらは<code>stringsAsFactors</code>のような<code>data.frame</code>へのさらなる引数にすることができます)。
<br><code>deparse.level=0</code>はラベルを作成しません。<br><code>deparse.level=1または2</code>は引数名からラベルを作成します。
(データフレームメソッドのみ:) logical引数からユニークで有効な<code>row.names</code>を構築するかどうかを示します。
logicalは、<code>as.data.frame</code>に渡され、<code>...</code>引数が(<code>data.frame</code>でない)<code>文字</code>を含む場合にのみ効果を持ちます。
データフレームが因子を含む場合、デフォルトの<code>TRUE</code>は、<a href="https://bugs.R-project.org/show_bug.cgi?id=17562">PR#17562</a> および 'Data frame methods' を参照して、因子の<code>NA</code>レベルを確実に保持します。  <span style="font-family：color：<span style="font: Courier New; color: #666666;"><b>R</b></span> 3.6.x までのバージョンでは、<code>factor.exclude = NA</code> は暗黙的にハードコードされています (<span style="font-family：courier new, Courier; color：<span style="font: Courier New; color: #666666;"><b>R</b></span> &lt;= 3.6.0) またはデフォルト (<span style="font-family：)、またはデフォルト(<span style="font-family: Courier New, Courier; color：<span style="font: Courier New, Courier; color: #666666;"><b>R</b></span> = 3.6.x, x &gt;= 1）。
(一般化された)ベクトルまたは行列。  これらは名前付き引数として与えられる。  その他の<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New; color: #666666;"><b>R</b></span> オブジェクトは適宜強制されるか、S4methodsが使われます。  (<code>cbind</code>の<code>"data.frame"</code>メソッドでは、これらは<code>stringsAsFactors</code>のような<code>data.frame</code>へのさらなる引数とすることができます)。
<br><code>deparse.level=0</code>はラベルを作成しません。デフォルトの<br><code>deparse.level=1または2</code>は引数名からラベルを作成します。
(データフレームメソッドのみ:) logical引数からユニークで有効な<code>row.names</code>を構築するかどうかを示します。
logicalは、<code>as.data.frame</code>に渡され、<code>...</code>引数が(<code>data.frame</code>でない)<code>文字</code>を含む場合にのみ効果を持ちます。
データフレームが因子を含む場合、デフォルトの<code>TRUE</code>は、<a href="https://bugs.R-project.org/show_bug.cgi?id=17562">PR#17562</a> および 'Data frame methods' を参照して、因子の<code>NA</code>レベルを確実に保持します。  <span style="font-family：color：<span style="font: Courier New; color: #666666;"><b>R</b></span> 3.6.x までのバージョンでは、<code>factor.exclude = NA</code> は暗黙的にハードコードされています (<span style="font-family：courier new, Courier; color：<span style="font: Courier New; color: #666666;"><b>R</b></span> &lt;= 3.6.0) またはデフォルト (<span style="font-family：)、またはデフォルト(<span style="font-family: Courier New, Courier; color：font: Courier New, Courier; color: #666666;"><b>R</b></span> = 3.6.x, x &gt;= 1)。
行列、<code>qr</code>の結果、または<code>"lm"</code>を継承するクラスからのフィット。
論理的なもの。  結果は正確か？
文字列で、条件数を計算する行列のノルムを指定します。  <code>rcond</code> の場合、デフォルトは <code>"O"</code> で、これは <b>O</b>ne- または 1-ノルムを意味します。  (現在のところ唯一の)他の可能な値は、無限大ノルムを意味する<code>"I"</code>である。
<code>"qr"</code> は主にバックコンパチビリティのためのデフォルトです。
論理的。  true の場合, 使用される行列は <code>z</code> の低三角部分のみとなります.
論理的である。  もし true で <code>z</code> が複素数でなければ、LINPACK ルーチン <code>dtrco()</code> が呼び出されます。
<code>norm</code>が<code>"2"</code>でない場合は、特に<code>LINPACK</code>が呼び出されます。
数値。  入力は必要に応じて再利用される。
数値ベクトル.
数値ベクトル.
数値ベクトル.
数値ベクトル。
おそらくモード<code>complex</code>のオブジェクト。
モード<code>complex</code>のオブジェクト、またはメソッドが定義されているクラスの1つ。
他のメソッドに渡される、あるいは他のメソッドから渡される引数。
<code>""</code>はコンソールへの出力を示す。  <code>read.dcf</code>では、圧縮ファイル（<code>gzfile</code>を参照）を指定することができます。
DCFファイルから読み込むフィールド。  デフォルトは全フィールドを読み込む。
<code>all</code>が偽の場合（デフォルト）、最後に出現したフィールドのみが使用される。
または <code>NULL</code>（デフォルト）はそのようなフィールドがないことを示す。  可能であれば文字に強制する。  空白をそのままにしないフィールドに対しては、<code>read.dcf</code>は先頭と末尾の空白を除去し、<code>write.dcf</code>は<code>strwrap</code>を用いて折り返す。
は、書き込まれるオブジェクト、典型的にはデータ・フレームである。  そうでない場合は、<code>x</code>をデータフレームに強制しようとします。
論理的である。  もし <code>TRUE</code> なら、出力はファイルに追加される。  もし <code>FALSE</code> なら、その名前の既存のファイルは破棄される。
<code>writeLines()</code>に渡される論理値：「を参照。
出力エントリの継続行のインデントを指定する正の整数。
出力の折り返し行の対象となる列を指定する正の整数。
接続オブジェクト、またはファイル名や生のベクトルを指定する文字列。
読み込むベクトルのモードを指定するオブジェクトか、モードを記述する長さ1の文字ベクトル： <code>"numeric"</code>、 <code>"double"</code>、 <code>"integer"</code>、 <code>"int"</code>、 <code>"logical"</code>、 <code>"complex"</code>、 <code>"character"</code>、 <code>"raw"</code>のいずれか。
数値。  読み込むレコードの（最大）数。  <code>n</code>項目のためにストレージが予約されているので、ここでは過大な見積もりを使うことができるが、あまり大きくはならない。
整数。  バイトストリームの要素あたりのバイト数。  デフォルトの<code>NA_integer_</code>は、自然なサイズを使用します。サイズ変更は、生のベクトルや複雑なベクトルではサポートされていません。
論理値。  ファイル上の量を符号付き整数とみなすか符号なし整数とみなすかを決定するとき、サイズ1と2の整数のみに使用される。
ファイルのターゲットシステムのエンディアン性（<code>"big"</code> または <code>"little"</code>）。  <code>"swap"</code>を使うと、強制的にエンディアンを入れ替えます。
<span style="font-family：font-family: Courier New, Courier; color：<b>R</b></span> オブジェクトを接続に書き込みます。
<code>writeLines</code> を参照。
接続オブジェクト、ファイル名の文字列、または生のベクトル。
(終端していない)文字列の長さを文字単位で読み書きする整数ベクトル。  要素は&gt;= 0でなければならず、<code>NA</code>であってはならない。
論理的でなければならない：<code>readChar</code> の場合、<code>nchars</code> はマルチバイトロケールでは文字数ではなくバイト数とみなすべきか？  <code>writeChar</code> については <code>writeLines</code> を参照。
少なくとも <code>nchars</code> と同じ長さの、接続に書き込む文字ベクトル。
'end of string': 文字列。  各文字列の後に書かれる終端文字で、ASCIIの<code>nul</code>が続きます; 終端文字が全くない場合は<code>NULL</code>を使います。
ユーザーに入力を促す際に表示される文字列。通常はスペース <code>" "</code> で終わるはずです。
接続オブジェクトまたは文字列。
整数。  読み込む(最大)行数。  負の値は、接続の入力の終わりまで読むべきであることを示す。
論理値。  <code>n &gt; 0</code> 行が読み込まれる前に接続の終端に到達してもよいか。  もしそうでなければ、エラーが発生する。
論理的。  テキストファイルに最後のEOLがない場合や、ファイル中にnullが埋め込まれている場合に警告を出す。
入力文字列に想定されるエンコーディング。  これは、文字列がLatin-1またはUTF-8であることを示すために使用されます。  入力文字列を再エンコードするために使用されるわけではありません。後者を行うには、接続の <code>con</code> の一部としてエンコーディングを指定するか、 <code>options(encoding=)</code> でエンコーディングを指定します: 例を参照してください。
論理：nulsはスキップされるべきか？
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトをシリアライズします。
接続または<span style="font-family：のあるファイル名です：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトが保存または読み込まれるファイル名。
論理的です。  <code>TRUE</code>または<code>NA</code>の場合、ASCII表現が書き込まれ、そうでない場合(デフォルト)はバイナリが使用されます。
使用するワークスペース・フォーマットのバージョン。  <code>NULL</code>は現在のデフォルトバージョン(3)を指定します。他にサポートされている値は <span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 1.4.0 から <span style="font-family：を<span style="font-family::Courier New, Courier; color：#666666;"><b>R</b></span> 3.5.0.
名前付きファイルへの保存が <code>"gzip"</code> 圧縮を使うかどうかを指定する論理か、 <code>"gzip"</code>, <code>"bzip2"</code>, <code>"xz"</code> のどれかを使うかを指定する論理。  <code>file</code> が接続の場合は無視される。
参照オブジェクトを扱うためのフック関数。
ファイルへのパスを示す長さ1文字のベクトル。  サポートされている場合はチルダ展開が行われる。
渡されるすべての引数。
適切なアリティの関数（<code>Reduce</code>ではバイナリ、<code>Filter</code>, <code>Find</code>と<code>Position</code>ではユナリ、<code>Map</code>では<i>k</i>-ary（これが<i>k</i>個の引数で呼ばれる場合）。  <code>Negate</code>のための任意の述語関数。
ベクトル。
<span style="font-family：font-family: Courier New, Courier; color：<code>x</code>の要素と同じ種類の<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
左から右(デフォルト)に進むか、右から左に進むかを示す論理。
連続する reducecombination を累積するかどうかを示す論理。  デフォルトでは、finalcombinationのみが使用されます。
一致しない」（述語を満たす要素がない）場合に返される値。
vectors。
ファイナライズするオブジェクト。  環境または外部ポインタでなければならない。
ファイナライズ時に呼び出す関数。最終化するオブジェクトを引数として渡さなければならない。
logical: <span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> セッション?
与えられた文字ベクトルでマッチする正規表現(<code>fixed = TRUE</code>の場合は文字列)を含む文字列。  可能であれば、<code>as.character</code>によって文字列に強制されます。  長さが2以上の文字ベクトルが与えられた場合、警告とともに最初の要素が使用されます。  <code>regexpr</code>、<code>gregexpr</code>、<code>regexec</code>を除き、欠落値も許される。
マッチを求める文字ベクトル、または、<code>as.character</code>によって文字ベクトルに強制できるオブジェクト。  長いベクトルもサポートされています。
<code>FALSE</code> の場合、パターンマッチは <em>casesensitive</em> となり、 <code>TRUE</code> の場合、大文字小文字は無視されます。
を使用します。  Perl 互換の正規表現を使うべきか？
もし<code>FALSE</code>ならば、<code>grep</code>によって決定されたマッチの(<code>integer</code>)インデックスを含むベクトルが返され、もし<code>TRUE</code>ならば、マッチした要素そのものを含むベクトルが返されます。
を論理的に返します。  もし<code>TRUE</code>ならば、<code>pattern</code>はそのままマッチする文字列となる。  競合するすべての引数を上書きする。
論理的な引数。  <code>TRUE</code>の場合、マッチングは文字単位ではなくバイト単位で行われる。  詳細'を参照のこと。
論理的なマッチングを行う。  <code>TRUE</code> の場合、<em>マッチしない要素のインデックスまたは値を返す。
<code>sub</code> および <code>gsub</code> でマッチしたパターンの置換。  可能であれば文字に強制される。  <code>fixed=FALSE</code>の場合、<code>"◆1"</code>から<code>"◆9"</code>まで、<code>pattern</code>の括弧で囲まれた部分式への後方参照<code>"◆1"</code>を含むことができます。  <code>perl=TRUE</code>の場合のみ、<code>"˶"</code>または<code>"˶L"</code>で大文字または小文字に変換し、<code>"˶"</code>で大文字小文字の変換を終了します。  長さが2以上の文字ベクトルが供給された場合、最初の要素は警告とともに使用される。  <code>NA</code> の場合、マッチに対応する結果の全ての要素は <code>NA</code> に設定される。
与えられた文字ベクトルでマッチする正規表現(<code>fixed = TRUE</code>の場合は文字列)を含む文字列。  可能であれば、<code>as.character</code>によって文字列に強制されます。  長さが2以上の文字ベクトルが与えられた場合、警告とともに最初の要素が使用されます。  <code>regexpr</code>、<code>gregexpr</code>、<code>regexec</code>を除き、欠落値も許される。
マッチを求める文字ベクトル、または、<code>as.character</code>によって文字ベクトルに強制できるオブジェクト。  長いベクトルもサポートされています。
<code>FALSE</code> の場合、パターンマッチは <em>casesensitive</em> となり、 <code>TRUE</code> の場合、大文字小文字は無視されます。
を使用します。  Perl 互換の正規表現を使うべきか？
もし<code>FALSE</code>ならば、<code>grep</code>によって決定されたマッチの(<code>integer</code>)インデックスを含むベクトルが返され、もし<code>TRUE</code>ならば、マッチした要素そのものを含むベクトルが返されます。
を論理的に返します。  もし<code>TRUE</code>ならば、<code>pattern</code>はそのままマッチする文字列となる。  競合するすべての引数を上書きする。
論理的な引数。  <code>TRUE</code>の場合、マッチングは文字単位ではなくバイト単位で行われる。  詳細'を参照のこと。
論理的なマッチングを行う。  <code>TRUE</code> の場合、マッチしない要素のインデックスまたは値を返す。
<code>sub</code> および <code>gsub</code> でマッチしたパターンの置換。  可能であれば文字に強制される。  <code>fixed=FALSE</code>の場合、<code>"◆1"</code>から<code>"◆9"</code>まで、<code>pattern</code>の括弧で囲まれた部分式への後方参照<code>"◆1"</code>を含むことができます。  <code>perl=TRUE</code>の場合のみ、<code>"˶"</code>または<code>"˶L"</code>で大文字または小文字に変換し、<code>"˶"</code>で大文字小文字の変換を終了します。  長さが2以上の文字ベクトルが供給された場合、最初の要素は警告とともに使用される。  <code>NA</code> の場合、マッチに対応する結果の全ての要素は <code>NA</code> に設定される。
文字列または名前空間環境。
論理的な
環境。
名前空間環境。
文字ベクトル。
オプションの文字ベクトル。
名前空間環境。
ロードするパッケージ/名前空間を指定する文字列。
<code>generics</code>と並列なパッケージ名のベクトル。
ライブラリを指定する文字ベクトル
論理。
文字。
文字。
環境。
3列の文字行列。
文字。
任意のオブジェクト
文字引数。
メソッド・テーブル名。
symbol: 名前空間の名前。
特に<code>vars</code>がない場合に便利です。
文字列または名前空間環境。
論理。
環境。
名前空間環境。
文字ベクトル。
オプションの文字ベクトル。
名前空間環境。
ロードするパッケージ/名前空間を指定する文字列。
<code>generics</code>と並列なパッケージ名のベクトル。
ライブラリを指定する文字ベクトル
論理。
文字。
文字。
環境。
3列の文字行列。
文字。
任意のオブジェクト
文字引数。
メソッド・テーブル名。
symbol: 名前空間の名前。
特に<code>vars</code>がない場合に便利です。
文字ベクトル
マッチデータを持つオブジェクト
論理: <code>TRUE</code>の場合、マッチした部分文字列を抽出または置換します。
マッチした部分文字列またはマッチしなかった部分文字列の適切な置換値を持つオブジェクト（<code>Details</code>を参照）。
文字ベクトル
マッチデータを持つオブジェクト
論理: <code>TRUE</code>の場合、一致しない部分文字列を抽出または置換します。
一致または非一致の部分文字列に対する適切な置換値を持つオブジェクト (<code>Details</code> を参照)。
削除するオブジェクトを、名前 (引用符で囲まれていないもの) または文字列 (引用符で囲まれているもの) で指定します。
削除するオブジェクトを指定する文字ベクトル。
削除する場所。  デフォルトでは、現在の環境を使用します。  他の可能性については 'details' を参照のこと。
使用する <code>environment</code> を指定します。  詳細'を参照。
環境を囲むフレームを検査するか。
トップレベルタスクが正常に完了するたびに呼び出される関数。  これは、<code>data</code>が指定されているかどうかによって、それぞれ5つまたは4つの引数で呼び出される。戻り値は、アクティブなコールバックのリストにコールバックを保持するか、破棄するかを示す論理値でなければならない。
指定された場合、これはコールバック関数<code>f</code>の呼び出しの5番目の引数となる。
整数のインデックスは1ベースで、つまり最初の要素は1です。現在登録されているハンドラの名前は、<code>getTaskCallbackNames</code>で利用可能で、<code>addTaskCallback</code>の呼び出しでも返されます。
character: 使用する名前。
(<code>list</code>を含む任意のモードの)ベクトル、または係数、または(<code>rep</code>のみ)<code>POSIXct</code>または<code>POSIXlt</code>または<code>Date</code>オブジェクト、またはそのようなオブジェクトを含むS4オブジェクト。
他のメソッドに渡す引数、または他のメソッドから渡される引数：

もし長さが <code>length(x)</code> ならば各要素の(非負の)繰り返し回数を、もし長さが 1 ならばベクトル全体の繰り返し回数を指定する整数値ベクトル。  <code>double</code>ベクトルが受け入れられ、他の入力は整数またはdoubleベクトルに強制されます。
非負整数。  出力ベクトルの希望する長さ。  他の入力は doublevector に強制され、最初の要素が取り出される。  <code>NA</code> または無効な場合は無視される。
非負整数。  <code>x</code> の各要素は <code>each</code> 回繰り返される。  他の入力は整数またはダブルベクタに強制され、最初の要素が取り出される。  <code>NA</code> または無効な場合は<code>1</code>として扱われます。
上記の <code>...</code> を参照。
(<code>list</code>を含む任意のモードの)ベクトル、因子、または(<code>rep</code>の場合のみ)<code>POSIXct</code>または<code>POSIXlt</code>または<code>Date</code>オブジェクト、またはそのようなオブジェクトを含むS4オブジェクト。
他のメソッドに渡す引数、または他のメソッドから渡される引数：

もし長さが <code>length(x)</code> ならば各要素の(非負の)繰り返し回数を、もし長さが 1 ならばベクトル全体の繰り返し回数を指定する整数値ベクトル。  <code>double</code>ベクトルが受け入れられ、他の入力は整数またはdoubleベクトルに強制されます。
非負整数。  出力ベクトルの希望する長さ。  他の入力は doublevector に強制され、最初の要素が取り出される。  <code>NA</code> または無効な場合は無視される。
非負整数。  <code>x</code> の各要素は <code>each</code> 回繰り返される。  他の入力は整数またはダブルベクタに強制され、最初の要素が取り出される。  <code>NA</code> または無効な場合は<code>1</code>として扱われます。
上記の <code>...</code> を参照。
(<code>list</code>を含む任意のモードの)ベクトル、因子、または(<code>rep</code>の場合のみ)<code>POSIXct</code>または<code>POSIXlt</code>または<code>Date</code>オブジェクト、またはそのようなオブジェクトを含むS4オブジェクト。
他のメソッドに渡す引数、または他のメソッドから渡される引数：

もし長さが <code>length(x)</code> ならば各要素の(非負の)繰り返し回数を、もし長さが 1 ならばベクトル全体の繰り返し回数を指定する整数値ベクトル。  <code>double</code>ベクトルが受け入れられ、他の入力は整数またはdoubleベクトルに強制されます。
非負整数。  出力ベクトルの希望する長さ。  他の入力は doublevector に強制され、最初の要素が取り出される。  <code>NA</code> または無効な場合は無視される。
非負整数。  <code>x</code> の各要素は <code>each</code> 回繰り返される。  他の入力は整数またはダブルベクタに強制され、最初の要素が取り出される。  <code>NA</code> または無効な場合は<code>1</code>として扱われます。
上記の <code>...</code> を参照。
date-time または date オブジェクト。
主に<code>"POSIXlt"</code>オブジェクトのために、変換に使用されるオプションのタイムゾーン指定。
文字列。  変換結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数、または他のメソッドから渡される引数。
(<code>list</code>を含む任意のモードの)ベクトル、係数、または(<code>rep</code>のみ)<code>POSIXct</code>または<code>POSIXlt</code>または<code>Date</code>オブジェクト、またはそのようなオブジェクトを含むS4オブジェクト。
他のメソッドに渡す引数、または他のメソッドから渡される引数：

もし長さが <code>length(x)</code> ならば各要素の(非負の)繰り返し回数を、もし長さが 1 ならばベクトル全体の繰り返し回数を指定する整数値ベクトル。  <code>double</code>ベクトルが受け入れられ、他の入力は整数またはdoubleベクトルに強制されます。
非負整数。  出力ベクトルの希望する長さ。  他の入力は doublevector に強制され、最初の要素が取り出される。  <code>NA</code> または無効な場合は無視される。
非負整数。  <code>x</code> の各要素は <code>each</code> 回繰り返される。  他の入力は整数またはダブルベクタに強制され、最初の要素が取り出される。  <code>NA</code> または無効な場合は<code>1</code>として扱われます。
上記の <code>...</code> を参照。
(<code>list</code>を含む任意のモードの)ベクトル、因子、または(<code>rep</code>の場合のみ)<code>POSIXct</code>または<code>POSIXlt</code>または<code>Date</code>オブジェクト、またはそのようなオブジェクトを含むS4オブジェクト。
他のメソッドに渡す引数、または他のメソッドから渡される引数：

もし長さが <code>length(x)</code> ならば各要素の(非負の)繰り返し回数を、もし長さが 1 ならばベクトル全体の繰り返し回数を指定する整数値ベクトル。  <code>double</code>ベクトルが受け入れられ、他の入力は整数またはdoubleベクトルに強制されます。
非負整数。  出力ベクトルの希望する長さ。  他の入力は doublevector に強制され、最初の要素が取り出される。  <code>NA</code> または無効な場合は無視される。
非負整数。  <code>x</code> の各要素は <code>each</code> 回繰り返される。  他の入力は整数またはダブルベクタに強制され、最初の要素が取られる。  <code>NA</code> または無効な場合は<code>1</code>として扱われます。
上記の <code>...</code> を参照のこと。
<code>package_version</code>の場合は、<code>R.version</code>で得られるRversionオブジェクト。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理。
(<code>list</code>を含む任意のモードの)ベクトル、係数、または(<code>rep</code>のための)<code>POSIXct</code>または<code>POSIXlt</code>または<code>Date</code>オブジェクト、またはそのようなオブジェクトを含むS4オブジェクト。
他のメソッドに渡す引数、または他のメソッドから渡される引数：

もし長さが <code>length(x)</code> ならば各要素の(非負の)繰り返し回数を、もし長さが 1 ならばベクトル全体の繰り返し回数を指定する整数値ベクトル。  <code>double</code>ベクトルが受け入れられ、他の入力は整数またはdoubleベクトルに強制されます。
非負整数。  出力ベクトルの希望する長さ。  他の入力は doublevector に強制され、最初の要素が取り出される。  <code>NA</code> または無効な場合は無視される。
非負整数。  <code>x</code> の各要素は <code>each</code> 回繰り返される。  他の入力は整数またはダブルベクタに強制され、最初の要素が取られる。  <code>NA</code> または無効な場合は<code>1</code>として扱われます。
上記の <code>...</code> を参照。
(<code>list</code>を含む任意のモードの)ベクトル、因子、または(<code>rep</code>の場合のみ)<code>POSIXct</code>または<code>POSIXlt</code>または<code>Date</code>オブジェクト、またはそのようなオブジェクトを含むS4オブジェクト。
他のメソッドに渡す引数、または他のメソッドから渡される引数：

もし長さが <code>length(x)</code> ならば各要素の(非負の)繰り返し回数を、もし長さが 1 ならばベクトル全体の繰り返し回数を指定する整数値ベクトル。  <code>double</code>ベクトルが受け入れられ、他の入力は整数またはdoubleベクトルに強制されます。
非負整数。  出力ベクトルの希望する長さ。  他の入力は doublevector に強制され、最初の要素が取り出される。  <code>NA</code> または無効な場合は無視される。
非負整数。  <code>x</code> の各要素は <code>each</code> 回繰り返される。  他の入力は整数またはダブルベクタに強制され、最初の要素が取り出される。  <code>NA</code> または無効な場合は<code>1</code>として扱われます。
上記の <code>...</code> を参照。
<code>NA</code>でない長さ1の論理ベクトル。1より大きい長さの条件は、現在、警告とともに受け付けられますが、最初の要素だけが使用されます。  環境変数<span class="env">_R_CHECK_LENGTH_1_CONDITION_</span> がtrueに設定されると、代わりにエラーが通知されます。  その他の型は、可能であれば論理型に強制され、クラスは無視される。
変数の構文名。
ベクトル（リストと式を含む）、ペアリスト、<code>NULL</code>に評価される式。  因子値は文字ベクトルに強制される。  <span style="font-family：のように、<span style="font-family: Courier New, Courier; color：<span style="font-family: Courier New; color: #666666;"><b>R</b></span>4.0.0から、これは長いベクトルになります。
形式的な意味での<em>式</em>。  これは単純な式か、いわゆる<em>複合式</em>のどちらかで、通常は <code>{ expr1 ; expr2 }<//code> の形式です。
ベクトル
インデックスベクトル
置換値
ベクトル（アトミックまたはリスト）または<code>式</code>オブジェクト。  その他のオブジェクト(クラス化されたオブジェクトを含む)は<code>base::as.list<//code>によって強制されます。
<code>X</code>の各要素に適用される関数は'詳細'を参照して下さい。  <code>+</code>、<code>%*%</code>のような関数の場合、関数名はバッククォートか引用符で囲む必要があります。
<code>FUN</code>のオプション引数。
論理文字列または文字列; 可能であれば、結果はベクトル、行列、または高次元配列に簡略化されるべきか?  <code>simplify = "array"</code> の場合、結果は<code>FUN(X[[i]])</code>の結果より1つ高い "rank"(<i>=</i><code>length(dim(.))</code>)の<code>array</code>になる可能性があります。
論理; <code>TRUE</code> かつ <code>X</code> が文字の場合、<code>X</code> が既に名前を持っていない限り、<code>X</code> を結果の <code>names</code> として使用します。  この引数は<code>...</code>に続くので、その名前を省略することはできません。
(一般化された)ベクトル; FUNからの戻り値のテンプレート。  詳細'を参照のこと。
整数： 複製数。
繰り返し評価する式（言語オブジェクト、通常は呼び出し）。
通常は<code>lapply()</code>から返される。
もしtrueなら、<code>simplify2array()</code>は適切な場合("高位")配列を生成し、一方<code>higher = FALSE</code>は行列(またはベクトル)だけを返す。この2つのケースはそれぞれ<code>sapply(*, simplify = "array")</code>または<code>simplify = TRUE</code>に対応する。
パッケージ名は、<code>character.only</code>が<code>FALSE</code>（デフォルト）か<code>TRUE</code>かによって、名前か文字列、または文字列で与えられます。
ロードされた名前空間をアタッチする検索リストの位置。  <code>search()</code>で指定された現在の検索リスト上の位置の名前でもよい。
<span style="font-family：font-family: Courier New, Courier; color：#または <code>NULL</code>.  デフォルト値の<code>NULL</code>は、現在<code>.libPaths()</code>が知っている全てのライブラリに対応します。
<code>package</code> または <code>help</code> が文字列であると仮定できるかどうかを示す論理。
を論理的に指定する。  これが<code>TRUE</code>の場合、<code>FALSE</code>または<code>TRUE</code>が成功を示すために返される。
を論理的に返します。  <code>TRUE</code>の場合、新しいパッケージのアタッチによる<code>衝突</code>に関する警告が表示される。  衝突とは、関数をマスクする関数、または非関数をマスクする非関数のことです。デフォルトは、<code>conflicts.policy</code>オプションで<code>FALSE</code>と指定されない限り、<code>TRUE</code>である。
論理的である。  <code>TRUE</code>の場合、追加の診断が表示される。
論理。  <code>TRUE</code> の場合、パッケージのアタッチを確認するメッセージは表示されず、パッケージのアタッチに失敗してもエラーや警告は表示されません。
パッケージ名を示す文字列。
ストリクト・コンフリクト・チェックが有効になっている場合に、 エラーを通知することなく検索パス上のオブジェクトをマスクすることができる オブジェクト名の文字ベクトル。
アタッチされたフレームに除外または含めるオブジェクト名の文字ベクトル。<code>library</code>または<code>require</code>の呼び出しでは、これらの引数のうち1つのみを使用することができます。
<code>DESCRIPTION</code> ファイルの <code>Depends</code> 節にリストされた必須パッケージを自動的にアタッチするかどうかを指定する論理。
文字列または名前空間オブジェクト。
アタッチする位置を指定する整数。
<code>NULL</code> または、パッケージ内のオブジェクト <code>.Depends</code> に記録される依存関係の文字ベクトル。
ロードするパッケージ/名前空間を指定する文字列。
ライブラリ検索パスを指定する文字ベクトル。
パッケージインストール時以外は無視されます。
パッケージのインストール中以外は無視されます。
trueを指定すると、コードを読み込んだ直後に停止します。
<code>NULL</code> またはバージョン指定 (<code>op</code> と <code>version</code> を含むリスト)。
logical: 進捗メッセージやエラーメッセージを抑制するか。
文字列または'名前', <code>as.symbol</code>を参照。
文字ベクトル; <code>library</code> を参照。
<code>loadNamespace</code> に渡される引数。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式。
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
追加の引数。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式。
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
詳細は後述する。
関数や環境、<code>NULL</code>ではなく、R オブジェクト。
<code>tracemem</code> または <code>retracemem</code> が返す値。
空または 1 つ以上の name または name=expression 項。
式
式。
トレースまたはアントレースされる関数の名前、場合によっては<code>quote()</code>d。  <code>untrace</code>や、複数の引数を持つ<code>trace</code>では、引用符で複数の名前を指定することができ、それぞれに同じアクションが適用されます。  名前空間内のS3メソッドのような "隠された "関数では、<code>where = *</code>を指定する必要があります。
には、関数か評価されない式を指定します。  関数が呼び出されるか、式が評価されるかは、呼び出しの最初か、引数<code>at</code>で指定された呼び出しのステップの前になります。
<code>function</code> または評価されない式のいずれか。  詳細セクションを参照してください。
オプションの数値ベクトルまたはリスト。  詳細セクションを参照して下さい。
<code>TRUE</code> (デフォルト) の場合、トレース式が評価される前に説明行が表示されます。
 この引数が与えられた場合、関数<code>what</code>のメソッドのシグネチャでなければなりません。  この場合、メソッドがトレースされ、関数自体はトレースされません。
 関数内のループをトレースするような複雑なトレースでは、関数本体を編集して、必要な呼び出しを挿入する必要があります。  その場合、<code>edit</code>引数に<code>TRUE</code>か、使用したいエディタ名を指定します。  そうすると、<code>trace()</code>は<code>edit</code>を呼び出し、あなたが編集した後のバージョンの関数を使用します。  詳細については、詳細セクションを参照してください。
デフォルトでは、<code>trace</code>の呼び出しのトップレベル環境です。

この引数の重要な使用法は、"隠された "または別のパッケージから呼び出されたパッケージの関数をトレースすることです。名前空間機構は呼び出される関数をインポートします(ベースパッケージの関数は例外です)。  呼び出される関数は、<em>トップ・レベルから見たオブジェクトとは<em>異なります（一般的に、インポートされたパッケージはアタッチされていないかもしれません）。  これを行う方法は、引数<code>where</code>を名前空間(またはその名前空間)内の関数に設定することです。  トレースの計算は、その関数の環境(対応するパッケージの名前空間になる)を探し始めます。(そう、微妙ですが、ここでのセマンティクスは、<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>におけるハウネスペースの動作の中心です)。
論理; サポート関数 <code>tracingState</code> の呼び出しは、トレーシングがグローバルにオンになっていれば <code>TRUE</code>、そうでなければ <code>FALSE</code> を返します。  これらの値のどちらか一方の引数が状態を設定します。  トレース状態が <code>FALSE</code> の場合、トレースアクションは実際に発生しません (例えば、デバッグ中にトレースを停止するためにデバッグ関数によって使用されます)。
<code>expr</code>は、トレースアクション（<code>browser()</code>への呼び出しなど）であり、<code>msg</code>は、トレースアクションが発生する場所を特定する文字列です。
<code>returnValue</code>が戻り値を見つけない場合(例えば、エラーや再起動、呼び出し元関数からの戻りを評価した結果、関数が終了した場合)、代わりに<code>default</code>を返します。
反転が定義されているベクトルまたは他のオブジェクト。
ベクトルまたは反転が定義されている他のオブジェクト。
<code>rle()</code>ではベクトル(アトミック、リストではない); <code>inverse.rle()</code>では<code>"rle"</code>クラスのオブジェクト。
ここでは無視される。
<code>print.default</code>を参照。
印字される各行の前に付加される文字列。
削除するオブジェクトの名前（引用符で囲まれていないもの）または文字列（引用符で囲まれているもの）。
削除するオブジェクトを指定する文字ベクトル。
削除する場所。  デフォルトでは、現在の環境を使用する。  他の可能性については 'details' を参照のこと。
使用する <code>environment</code> を指定します。  詳細'を参照。
環境を囲むフレームを検査するか。
文字または <code>NULL</code> を指定する。  <code>kind</code> が文字列の場合、<span style="font-family：font-family: Courier New, Courier; color：</b>R</b></span>のRNGを希望する種類に設定します。  <code>"default"</code> を使って<span style="font-family：font-family: Courier New, Courier; color：#666666;"><b>R</b></span>のデフォルトに戻ります。  <code>NULL</code>の解釈については'詳細'を参照のこと。
文字列または<code>NULL</code>。  文字列の場合は、Normalの生成方法を設定する。  <code>"default"</code> を使って <span style="font-family：Courier New, Courier; color：font-family: Courier New, Courier; "color: #666666;"><b>R</b></span> デフォルトに戻ります。  <code>NULL</code>は変更しない。
文字列または<code>NULL</code>。  文字列の場合、(例えば<code>sample</code>で使われる)離散一様生成の方法を設定する。  <code>"default"</code> を使って、<span style="font-family：courier new, Courier; color：font-family: Courier New, Courier; "color: #666666;"><b>R</b></span> デフォルトに戻ります。  <code>NULL</code>は何も変更しません。
整数として解釈される単一の値、または <code>NULL</code>(「詳細」を参照)。
バージョン番号を含む文字列、例えば <code>"1.6.2"</code>。  現在の<span style="font-family：font-family: Courier New, Courier; color：<code>vstr</code> が現在のバージョンより大きい場合、<span style="font-family: Courier New; color: #666666;"><b>R</b></span> バージョンが使われる。
上記の<code>kind</code>に対応する<code>0:k</code>の整数コード。
の整数。  いくつ必要か(これは<code>rng.kind<//code>に依存する)については詳細を参照のこと。
文字または <code>NULL</code>.  <code>kind</code> が文字列の場合、<span style="font-family：font-family: Courier New, Courier; color：</b>R</b></span>のRNGを希望する種類に設定します。  <code>"default"</code> を使って<span style="font-family：font-family: Courier New, Courier; color：#666666;"><b>R</b></span>のデフォルトに戻ります。  <code>NULL</code>の解釈については'詳細'を参照のこと。
文字列または<code>NULL</code>。  文字列の場合、Normalの生成方法を設定する。  <code>"default"</code> を使うと、<span style="font-family：Courier New, Courier; color：font-family: Courier New, Courier; "color: #666666;"><b>R</b></span> デフォルトに戻ります。  <code>NULL</code>は変更しない。
文字列または<code>NULL</code>。  文字列の場合、(例えば<code>sample</code>で使われる)離散一様生成の方法を設定する。  <code>"default"</code> を使って、<span style="font-family：courier new, Courier; color：font-family: Courier New, Courier; "color: #666666;"><b>R</b></span> デフォルトに戻ります。  <code>NULL</code>は何も変更しません。
整数として解釈される単一の値、または <code>NULL</code>(「詳細」を参照)。
バージョン番号を含む文字列、例えば <code>"1.6.2"</code>。  現在の<span style="font-family：font-family: Courier New, Courier; color：<code>vstr</code> が現在のバージョンより大きい場合、<span style="font-family: Courier New; color: #666666;"><b>R</b></span> バージョンが使われる。
上記の<code>kind</code>に対応する<code>0:k</code>の整数コード。
の整数。  いくつ必要か(<code>rng.kind<//code>に依存する)については詳細を参照。
数値ベクトル。  または、<code>round</code> と <code>signif</code> の場合は、複素数ベクトル。
小数点以下の桁数(<code>round</code>)または有効桁数(<code>signif</code>)を示す整数。
メソッドに渡す引数。
<code>"POSIXt"</code> または <code>"Date"</code> を継承したオブジェクト。
記載されている単位のいずれか。  省略可能。
特に <code>round</code> の <code>digits</code> がそうです。
<code>"POSIXt"</code> または <code>"Date"</code> を継承したオブジェクト。
記載されている単位の一つ。  省略可能。
他のメソッドに渡す引数、または他のメソッドから渡される引数で、特に <code>round</code> の場合は <code>digits</code> となります。
行列のようなオブジェクト、つまり 2 次元の<code>dim</code>を持つもの。
行列の次元、すなわち、長さ 2 の整数値の数値ベクトル (非負のエントリを持つ)。
数値としてではなく、行ラベル（必要ならば作成される）の係数として値を返すべきかどうかを示す論理値。
<code>"data.frame"</code>クラスのオブジェクト、またはメソッドが定義された他のクラス。
<code>logical</code>、すなわち、<code>FALSE, NA, TRUE</code>のうちの1つで、指定された行名、すなわち、<code>value</code>が無効な場合、例えば、重複していたり、<code>NA</code>であった場合に何が起こるかを示します。  デフォルト(バックコンパチブル)の<code>FALSE</code>はエラーを知らせ、<code>NA</code>は "自動 "行名となり、<code>TRUE</code>はvalidnamesを構築するために<code>make.names(value, unique=TRUE)</code>を呼び出します。
整数ベクトルでない限り、文字に強制されるオブジェクトです。  <code>NULL</code>も許されます: '詳細'を参照してください。
クラス <code>"data.frame"</code> のオブジェクト、またはメソッドが定義された他のクラス。
<code>logical</code>、すなわち、<code>FALSE, NA, TRUE</code>のうちの1つで、指定された行名、すなわち、<code>value</code>が無効な場合、例えば、重複していたり、<code>NA</code>であった場合に何が起こるかを示します。  デフォルト(バックコンパチブル)の<code>FALSE</code>はエラーを知らせ、<code>NA</code>は "自動 "行名となり、<code>TRUE</code>はvalidnamesを構築するために<code>make.names(value, unique=TRUE)</code>を呼び出します。
整数ベクトルでない限り、文字に強制されるオブジェクトです。  <code>NULL</code>も許されます: '詳細'を参照してください。
クラス <code>"data.frame"</code> のオブジェクト、またはメソッドが定義された他のクラス。
<code>logical</code>、すなわち、<code>FALSE, NA, TRUE</code>のうちの1つで、指定された行名、すなわち、<code>value</code>が無効な場合、例えば、重複していたり、<code>NA</code>であった場合に何が起こるかを示します。  デフォルト(バックコンパチブル)の<code>FALSE</code>はエラーを知らせ、<code>NA</code>は "自動 "行名となり、<code>TRUE</code>はvalidnamesを構築するために<code>make.names(value, unique=TRUE)</code>を呼び出します。
整数ベクトルでない限り、文字に強制されるオブジェクトです。  <code>NULL</code>も許されます: '詳細'を参照してください。
クラス <code>"data.frame"</code> のオブジェクト、またはメソッドが定義された他のクラス。
<code>logical</code>、すなわち、<code>FALSE, NA, TRUE</code>のうちの1つで、指定された行名、すなわち、<code>value</code>が無効な場合、例えば、重複していたり、<code>NA</code>であった場合に何が起こるかを示します。  デフォルト(バックコンパチブル)の<code>FALSE</code>はエラーを知らせ、<code>NA</code>は "自動 "行名となり、<code>TRUE</code>はvalidnamesを構築するために<code>make.names(value, unique=TRUE)</code>を呼び出します。
整数ベクトルでない限り、文字に強制されるオブジェクトです。  <code>NULL</code>も許されます: '詳細'を参照してください。
クラス <code>"data.frame"</code> のオブジェクト、またはメソッドが定義された他のクラス。
<code>logical</code>、すなわち、<code>FALSE, NA, TRUE</code>のうちの1つで、指定された行名、すなわち、<code>value</code>が無効な場合、例えば、重複していたり、<code>NA</code>であった場合に何が起こるかを示します。  デフォルト(バックコンパチブル)の<code>FALSE</code>はエラーを知らせ、<code>NA</code>は "自動 "行名となり、<code>TRUE</code>はvalidnamesを構築するために<code>make.names(value, unique=TRUE)</code>を呼び出します。
整数ベクトルでない限り、文字に強制されるオブジェクトです。  <code>NULL</code>も許されます: '詳細'を参照してください。
クラス <code>"data.frame"</code> のオブジェクト、またはメソッドが定義された他のクラス。
<code>logical</code>、すなわち、<code>FALSE, NA, TRUE</code>のうちの1つで、指定された行名、すなわち<code>value</code>が無効な場合、例えば重複していたり、<code>NA</code>であった場合にどうすべきかを示します。  デフォルト(バックコンパチブル)の<code>FALSE</code>はエラーを知らせ、<code>NA</code>は "自動 "行名となり、<code>TRUE</code>はvalidnamesを構築するために<code>make.names(value, unique=TRUE)</code>を呼び出します。
整数ベクトルでない限り、文字に強制されるオブジェクトです。  <code>x</code>の行数と同じ長さで、重複や欠落のないものでなければなりません。<code>NULL</code>も許されます: '詳細'を参照してください。
数値、複素数、整数、論理値を含む2次元以上の配列、または数値データフレーム。  <code>.colSums()</code>などの場合は、数値、整数、または論理行列（または長さ<code>m * n</code>のベクトル）。
論理行列。  欠損値（<code>NaN</code>を含む）は計算から省略されるべきか？
整数：どの次元を'行'または'列'とみなして合計するか。  <code>row*</code>の場合は、次元<code>dims+1, ...</code>上の和または平均となり、<code>col*</code>の場合は、次元<code>1:dims</code>上の和となります。
<code>.colSums()</code>などの行列の次元<code>x</code>。
行列のような<span style="font-family：Courier New, Courier; color：</span>オブジェクトで、<code>colnames</code>のために少なくとも2つの次元を持つ。
論理的でなければなりません。<code>FALSE</code>で名前が<code>NULL</code>の場合、名前が作成されます。
作成された名前。
<code>dimnames(x)</code>の構成要素に有効な値。  行列や配列の場合、これは<code>NULL</code>か、適切な次元に等しい長さの0でない文字ベクトルです。
行列のような<span style="font-family：font-family: Courier New, Courier; color：<code>colnames</code>のために少なくとも2つの次元を持つ、<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
論理的でなければなりません。<code>FALSE</code>で名前が<code>NULL</code>の場合、名前が作成されます。
作成された名前。
<code>dimnames(x)</code>の構成要素に有効な値。  行列や配列の場合、これは<code>NULL</code>か、適切な次元に等しい長さの0でない文字ベクトルです。
数値データの行列、データフレーム、またはベクトル。  欠損値は許される。  数値ベクトルは列ベクトルとして扱われます。
<code>x</code>の1行に1つの要素を持つ、グループ化を示すベクトルまたは因子。  欠落値はothergroupとして扱われ、警告が出される。
もし<code>TRUE</code>ならば、結果は<code>sort(unique(group))</code>の順になり、もし<code>FALSE</code>ならば、グループが発生した順になります。
論理 (<code>TRUE</code> または <code>FALSE</code>).  <code>NA</code>(<code>NaN</code>を含む)の値は破棄されるべきか？
メソッドに渡される、あるいはメソッドから渡される他の引数
数値データの行列、データフレーム、またはベクトル。  欠損値は許されます。  数値ベクトルは列ベクトルとして扱われます。
<code>x</code>の1行に1つの要素を持つ、グループ化を与えるベクトルまたは係数。  欠落値はothergroupとして扱われ、警告が出される。
もし<code>TRUE</code>ならば、結果は<code>sort(unique(group))</code>の順になり、もし<code>FALSE</code>ならば、グループが発生した順になります。
論理 (<code>TRUE</code> または <code>FALSE</code>).  <code>NA</code>(<code>NaN</code>を含む)の値は破棄されるべきか？
メソッドに渡される、あるいはメソッドから渡される他の引数
数値データの行列、データフレーム、またはベクトル。  欠損値は許されます。  数値ベクトルは列ベクトルとして扱われます。
<code>x</code>の1行に1つの要素を持つ、グループ化を与えるベクトルまたは係数。  欠落値はothergroupとして扱われ、警告が出される。
もし<code>TRUE</code>ならば、結果は<code>sort(unique(group))</code>の順になり、もし<code>FALSE</code>ならば、グループが発生した順になります。
論理 (<code>TRUE</code> または <code>FALSE</code>).  <code>NA</code>(<code>NaN</code>を含む)の値は破棄されるべきか？
メソッドに渡される、あるいはメソッドから渡される他の引数
数値、複素数、整数、論理値を含む2次元以上の配列、または数値データフレーム。  <code>.colSums()</code>などの場合は、数値、整数または論理行列（または長さ<code>m * n</code>のベクトル）。
論理行列。  欠損値（<code>NaN</code>を含む）は計算から省略されるべきか？
整数：どの次元を'行'または'列'とみなして合計するか。  <code>row*</code>の場合は、次元<code>dims+1, ...</code>上の和または平均となり、<code>col*</code>の場合は、次元<code>1:dims</code>上の和となります。
<code>.colSums()</code>などの行列の次元 <code>x</code>.
選択する1つ以上の要素からなるベクトルか、正の整数。  詳細'を参照。
正の数、選択する項目の数。  詳細'を参照。
非負の整数で、選択する項目の数を指定する。
サンプリングは置換ありにするか？
サンプリングされるベクトルの要素を得るための確率重みのベクトル。
<code>logical</code> アルゴリズムのハッシュ版を使用するかどうかを示す。  <code>replace = FALSE</code>, <code>prob = NULL</code>, <code>size &lt;= n/2</code> の場合のみ使用可能で、<code>useHash=FALSE</code>は<code>n</code>に比例してメモリを消費するため、大きな<code>n</code>に対して使用されるべきである。
選択する1つ以上の要素からなるベクトルか、正の整数。  詳細'を参照のこと。
正の数、選択する項目の数。  詳細'を参照のこと。
非負の整数で、選択する項目の数を指定する。
サンプリングは置換ありにするか？
サンプリングされるベクトルの要素を得るための確率重みのベクトル。
<code>logical</code> アルゴリズムのハッシュ版を使用するかどうかを示す。  <code>replace = FALSE</code>, <code>prob = NULL</code>, <code>size &lt;= n/2</code> の場合のみ使用可能で、<code>useHash=FALSE</code>は<code>n</code>に比例してメモリを消費するため、大きな<code>n</code>に対して使用されるべきである。
ベクトル (アトミックまたはリスト) または <code>expression</code> オブジェクト。  その他のオブジェクト(クラス化されたオブジェクトを含む)は<code>base::as.list</code>によって強制されます。
<code>X</code>の各要素に適用される関数は'詳細'を参照して下さい。  <code>+</code>、<code>%*%</code>のような関数の場合、関数名はバッククォートか引用符で囲む必要があります。
<code>FUN</code>のオプション引数。
論理文字列または文字列; 可能であれば、結果はベクトル、行列、または高次元配列に簡略化されるべきか?  <code>simplify = "array"</code> の場合、結果は<code>FUN(X[[i]])</code>の結果より1つ高い "rank"(<i>=</i><code>length(dim(.))</code>)の<code>array</code>になる可能性があります。
論理; <code>TRUE</code> かつ <code>X</code> が文字の場合、<code>X</code> が既に名前を持っていない限り、<code>X</code> を結果の <code>names</code> として使用します。  この引数は<code>...</code>に続くので、その名前を省略することはできません。
(一般化された)ベクトル; FUNからの戻り値のテンプレート。  詳細'を参照のこと。
整数： 複製数。
繰り返し評価する式（言語オブジェクト、通常は呼び出し）。
通常は<code>lapply()</code>から返される。
この2つのケースは、それぞれ<code>sapply(*, simplify = "array")</code> または<code>simplify = TRUE</code> に対応します。
保存するオブジェクトの名前(シンボルまたは文字列)。
保存するオブジェクトの名前を含む文字ベクトル。
(書き込み可能なバイナリモードの)接続、またはデータが保存されるファイル名(チルダ展開が行われた場合)。  <code>save.image</code>または<code>version = 1</code>のファイル名でなければなりません。
もし<code>TRUE</code>なら、データのASCII表現が書き込まれる。  <code>ascii</code> のデフォルト値は <code>FALSE</code> で、バイナリファイルが書き込まれる。  <code>NA</code>と<code>version &gt;= 2</code>の場合、2倍/複素数を2進数の分数として書き込む異なるASCII表現が使用されます。
使用するワークスペース・フォーマットのバージョンを指定します。  <code>NULL</code>は現在のデフォルト・フォーマット(3)を指定します。  バージョン1は、<span style="font-family：から<span style="font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 0.99.0から<span style="font-family：</b></span>から<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 1.3.1 および <span style="font-family：color：#バージョン 3 は <span style="font-family：color:#66666;"><b>R</b></span> 1.4.0 から 3.5.0 までをサポートしています：#666666;"><b>R</b></span> 3.5.0.
保存するオブジェクトを検索するための環境。
名前付きファイルへの保存が圧縮を使用するかどうかを指定する論理または文字列。  <code>TRUE</code>は<code>gzip</code>圧縮に対応し、文字列 <code>"gzip"</code>、<code>"bzip2"</code> または <code>"xz"</code>は圧縮のタイプを指定する。  <code>file</code> が接続の場合、およびワークスペース・フォーマット・バージョン 1 の場合は無視されます。
integer: 使用する圧縮レベル。  デフォルトは、<code>gzip</code>圧縮の場合は<code>6</code>、 <code>bzip2</code>または<code>xz</code>圧縮の場合は<code>9</code>である。  可能な値とその利点については <code>file</code> のヘルプを参照してください。
論理的: 保存前に約束されたオブジェクトは強制されるべきか?
論理: 保存を開始する前 (特にファイル/接続を開く前) にオブジェクトの存在をチェックすべきか?  バージョン1の保存には適用されません。
論理的。  <code>TRUE</code> の場合、保存されたワークスペースを作成するために一時ファイルが使用されます。  保存が成功した場合、一時ファイルは<code>file</code>にリネームされます。  これは、保存に失敗した場合、既存のワークスペース<code>file</code>を保存しますが、保存中に余分なディスク領域を使用することになります。
保存するオブジェクトの名前（シンボルまたは文字列）。
保存するオブジェクトの名前を含む文字ベクトル。
(書き込み可能なバイナリモードの)接続、またはデータが保存されるファイル名(チルダ展開が行われる場合)。  <code>save.image</code>または<code>version = 1</code>のファイル名でなければなりません。
もし<code>TRUE</code>なら、データのASCII表現が書き込まれる。  <code>ascii</code> のデフォルト値は <code>FALSE</code> で、バイナリファイルが書き込まれる。  <code>NA</code>と<code>version &gt;= 2</code>の場合、2倍/複素数を2進数の分数として書き込む異なるASCII表現が使用されます。
使用するワークスペース・フォーマットのバージョンを指定します。  <code>NULL</code>は現在のデフォルト・フォーマット(3)を指定します。  バージョン1は、<span style="font-family：から<span style="font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 0.99.0から<span style="font-family：</b></span>から<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 1.3.1 および <span style="font-family：color：#バージョン 3 は <span style="font-family：color:#66666;"><b>R</b></span> 1.4.0 から 3.5.0 までをサポートしています：#666666;"><b>R</b></span> 3.5.0.
保存するオブジェクトを検索するための環境。
名前付きファイルへの保存が圧縮を使用するかどうかを指定する論理または文字列。  <code>TRUE</code>は<code>gzip</code>圧縮に対応し、文字列 <code>"gzip"</code>、<code>"bzip2"</code> または <code>"xz"</code>は圧縮のタイプを指定する。  <code>file</code> が接続の場合、およびワークスペース・フォーマット・バージョン 1 の場合は無視されます。
integer: 使用する圧縮レベル。  デフォルトは、<code>gzip</code>圧縮の場合は<code>6</code>、 <code>bzip2</code>または<code>xz</code>圧縮の場合は<code>9</code>である。  可能な値とその利点については <code>file</code> のヘルプを参照してください。
論理的: 保存前に約束されたオブジェクトは強制されるべきか?
論理: 保存を開始する前 (特にファイル/接続を開く前) にオブジェクトの存在をチェックすべきか?  バージョン1の保存には適用されません。
論理的。  <code>TRUE</code> の場合、保存されたワークスペースを作成するために一時ファイルが使用されます。  保存が成功した場合、一時ファイルは<code>file</code>にリネームされます。  これは、保存に失敗した場合、既存のワークスペース<code>file</code>を保存しますが、保存中に余分なディスク領域を使用することになります。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトをシリアライズします。
接続または<span style="font-family：のあるファイル名です：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトが保存または読み込まれるファイル名。
論理的です。  <code>TRUE</code>または<code>NA</code>の場合、ASCII表現が書き込まれ、そうでない場合(デフォルト)はバイナリが使用されます。
使用するワークスペース・フォーマットのバージョン。  <code>NULL</code>は現在のデフォルトバージョン(3)を指定します。他にサポートされている値は <span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 1.4.0 から <span style="font-family：を<span style="font-family::Courier New, Courier; color：#666666;"><b>R</b></span> 3.5.0.
名前付きファイルへの保存が <code>"gzip"</code> 圧縮を使うかどうかを指定する論理か、 <code>"gzip"</code>, <code>"bzip2"</code>, <code>"xz"</code> のどれかを使うかを指定する論理。  <code>file</code> が接続の場合は無視される。
参照オブジェクトを扱うためのフック関数。
数値行列（オブジェクトのようなもの）。
ここで'numeric-alike'は、<code>is.numeric(.)</code>が真でない場合、<code>as.numeric(.)</code>が正常に適用されることを意味する。
論理値か、<code>x</code>の列数に等しい長さの数値類似ベクトル。
数値行列（オブジェクトのようなもの）。
ここで'numeric-alike'とは、<code>is.numeric(.)</code>が真でない場合、<code>as.numeric(.)</code>が正常に適用されることを意味する。
論理値か、<code>x</code>の列数に等しい長さの数値類似ベクトル。
データ値を読み込むファイル名。  指定されたファイルが<code>""</code>の場合、入力はキーボードから（または、入力がリダイレクトされた場合、<code>stdin()</code>が読み取るもの、または<span style="font-family：color: "#666666;"><span style="font-family: Courier New, Courier; color：#(この場合、入力は空行かEOFsignal、Unixでは<span class="samp">Ctrl-D</span>、Windowsでは<span class="samp">Ctrl-Z</span>で終了させることができる)。

そうでない場合、ファイル名は<em>相対的</em>に解釈され、<em>絶対的</em>パスを指定しない限り、現在の作業ディレクトリ(<code>getwd()</code>で指定される)から解釈される：を実行する場合、<span style="font-family: Courier New, Courier; color：スクリプトから<span style="font-family: Courier New; color: #666666;"><b>R</b></span>を実行する場合、<code>file = "stdin"</code>はプロセスの<code>stdin</code>ファイル・ストリームを参照するために使うことができます。

これは圧縮ファイルでもよい（<code>file</code>参照）。

また、<code>file</code>は<code>connection</code>とすることもでき、必要であれば開かれ、必要であれば関数呼び出しの最後に閉じられる。  接続がどのようなモードで開かれようとも、LF、CRLF、CRのいずれかが行のEOLマーカーとして受け入れられ、<code>sep = " \n"</code> にマッチする。

<code>file</code>は完全なURLにすることもできます。  (サポートされているURLスキームについては、<code>url</code>のヘルプの「URL」セクションを参照してください)。

現在のエンコーディングではないデータファイル（例えば、UTF-8ロケールのLatin-1ファイルやその逆）を読み込むには、<code>encoding</code>引数（または<code>scan</code>の<code>fileEncoding</code>引数）を設定した<code>file</code>接続を使用します。
<code>what</code> の型は、読み込むデータの型を示します。  (ここで'type'は<code>typeof</code>の意味で使われる。) サポートされる型は、<code>logical</code>, <code>integer</code>、 <code>numeric</code>、 <code>complex</code>、 <code>character</code>、 <code>raw</code>、<code>list</code>である。  <code>what</code>がリストである場合、データファイルの行はそれぞれ<code>length(what)</code>項目('fields')を含むレコードであると仮定され、リストの構成要素は、リストされた最初の6つの(原子)型のいずれか、または<code>NULL</code>の要素を持つべきである。
もし<code>what</code>がリストであれば、読み込まれるレコードの最大数。  もし省略されるか、正の値でないか、整数値として無効な値(そして<code>nlines</code>が正の値に設定されていない)であれば、<code>scan</code>は<code>file</code>の最後まで読み込む。
integer: 読み込むデータの最大数。  無効な値は無視される。
デフォルトでは、scanは'white-space'区切りの入力フィールドを読み込むことを期待する。  あるいは、<code>sep</code>でフィールドを区切る文字を指定することもできる。  引用符で囲まれていない限り、フィールドは常に行末マーカーで区切られる。

指定された場合、これは空の文字列(デフォルト)か、<code>NULL</code>か、1バイト文字だけを含む文字列でなければなりません。
は、単一の文字列または<code>NULL</code>としての引用文字の集合です。  マルチバイトのロケールでは、引用文字はASCII（シングルバイト）でなければならない。
小数点文字。  これは1バイト文字を含む文字列でなければならない。  (<code>NULL</code>とゼロ長の文字ベクトルも受け付けられ、デフォルトとされる)。
データ値を読み始める前にスキップする入力ファイルの行数。
正の場合は、読み込むデータの最大行数。
文字ベクトル。  このベクトルの要素は欠損(<code>NA</code>)値として解釈される。  論理フィールド、整数フィールド、数値フィールド、複合フィールドでは、空白フィールドも欠損値とみなされる。  そのため、<code>na.strings</code>の値は、事前に空白を除去する必要があるかもしれません。
論理: <code>TRUE</code>の場合、<code>scan</code>は要求されたフィールドの最後を読んだ後、行末にフラッシュします。
logical: <code>TRUE</code>の場合、<code>scan</code>は、<code>what</code>の値より少ないフィールドを持つ行に暗黙的に空のフィールドを追加します。
<code>what</code> 引数の項目に対応する論理値のベクトル。  これは、<code>sep</code>が指定された場合にのみ使用され、<code>character</code>フィールドから先頭と末尾の'空白'を取り除くことができます（<code>numeric</code>フィールドは常に取り除かれます）。  注意：引用符で囲まれた文字列内の空白は除去されない。

もし<code>strip.white</code>が長さ1であれば、全てのフィールドに適用され、そうでなければ、もし<code>strip.white[i]</code>が<code>TRUE</code>であり、かつ<code>i</code>番目のフィールドがモード文字であれば(<code>what[i]</code>がモード文字であるため)、フィールド<code>i</code>の先頭と末尾の引用符で囲まれていない空白が取り除かれます。
論理: もし <code>FALSE</code> (デフォルト) ならば、scan() は何番目の項目が読み込まれたかを表示する。
論理: <code>TRUE</code> の場合、<code>skip</code> と <code>nlines</code> をカウントする場合を除いて、入力の空行は無視される。
論理的。  <code>what</code> がリストの場合のみ使用される。  <code>FALSE</code>の場合、すべてのレコードは1行に表示されなければならない（ただし、複数のレコードを1行に表示することはできる）。  <code>fill = TRUE</code>を使うと、レコードは行末で終了することに注意。
character: 1文字または空文字列を含む長さ1の文字ベクトル。  <code>""</code> を使用すると、コメントの解釈を完全にオフにすることができる（デフォルト）。
を論理的に使用します。  <span class="samp">n</span>のようなCスタイルのエスケープは処理すべきか（デフォルト）、そのまま読むべきか。   引用符で囲まれていない場合、これらは区切り文字として解釈される可能性があることに注意してください（コメント文字としては解釈されません）。

解釈されるエスケープは、制御文字<span class="samp">a, ˶b, ˶f, ˶n, ˶r, ˶t, ˶v</span> と、<span class="samp">040</span> や <span class="samp">0x2A</span> のような8進数および16進数表現です。  その他のエスケープされた文字は、バックスラッシュを含めてそれ自身として扱われます。Unicodeのエスケープ（<span class="samp">u</span>または<span class="samp">U</span>で始まるもの：引用符を参照）は決して処理されないことに注意してください。
文字列: 空でない場合、文字データを再エンコードできるように、ファイル（接続でもキーボードでもない）で使用されるエンコーディングを宣言します。  <code>file</code>のヘルプの'Encoding'セクション、および'R DataImport/Export Manual'を参照のこと。
入力文字列に仮定されるエンコーディング。  この値が<code>"latin1"</code>または<code>"UTF-8"</code>の場合、文字列がLatin-1またはUTF-8であることを示すために使用されます。
文字列: <code>file</code> が供給されず、これが供給された場合、データはテキスト接続経由で <code>text</code> の値から読み込まれます。
論理: 文字フィールドを読み込む際に NULL をスキップするか?
接続を使用します。
数値。  ファイル位置（<code>origin</code>で指定されたオリジンからの相対位置）、または<code>NA</code>。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
文字列。  <code>"start"</code>, <code>"current"</code>,<code>"end"</code>のいずれか: '詳細'を参照。
他のメソッドに渡される引数、または他のメソッドから渡される引数。
接続。
数値。  ファイル位置 (<code>origin</code> で指定されたオリジンからの相対位置) または <code>NA</code>.
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
文字列。  <code>"start"</code>, <code>"current"</code>,<code>"end"</code>のいずれか: '詳細'を参照。
他のメソッドに渡される、または他のメソッドから渡される引数。
メソッドに渡される、またはメソッドから渡される引数。
これらのシーケンスの開始値と(最大)終了値。  <code>from</code> が無名引数として与えられない限り、長さは <code>1</code> です。
number: シーケンスの増分。
シーケンスの希望する長さ。  <code>seq</code>と<code>seq.int</code>の場合、端数がある場合は切り上げられます。
この引数の長さから長さを取ります。
メソッドに渡される、またはメソッドから渡される引数。
配列の開始値と(最大)終了値。  <code>from</code>だけが無名の引数として与えられない限り、長さは<code>1</code>です。
number: シーケンスの増分。
シーケンスの希望する長さ。  <code>seq</code>と<code>seq.int</code>の場合、端数がある場合は切り上げられます。
この引数の長さから長さを取ります。
メソッドに渡される、またはメソッドから渡される引数。
配列の開始値と(最大)終了値。  <code>from</code>だけが無名の引数として与えられない限り、長さは<code>1</code>です。
number: シーケンスの増分。
シーケンスの希望する長さ。  <code>seq</code>と<code>seq.int</code>の場合、端数がある場合は切り上げられます。
この引数の長さから長さを取る。
開始日。  必須
終了日。  オプション。
シーケンスの増分。  任意。  詳細'を参照。
整数、省略可能。  シーケンスの希望する長さ。
この引数の長さから長さを取る。
他のメソッドに渡される、あるいは他のメソッドから渡される引数。
メソッドに渡される、あるいはメソッドから渡される引数。
これらのシーケンスの開始値と（最大）終了値。  <code>from</code>だけが無名の引数として供給されない限り、長さは<code>1</code>です。
number: シーケンスの増分。
シーケンスの希望する長さ。  <code>seq</code>と<code>seq.int</code>の場合、端数がある場合は切り上げられます。
この引数の長さから長さを取ります。
メソッドに渡される、またはメソッドから渡される引数。
配列の開始値と(最大)終了値。  <code>from</code>だけが無名の引数として与えられない限り、長さは<code>1</code>です。
number: シーケンスの増分。
シーケンスの希望する長さ。  <code>seq</code>と<code>seq.int</code>の場合、端数がある場合は切り上げられます。
この引数の長さから長さを取る。
開始日。  必須。
終了日。  オプション。
シーケンスの増分。  オプション。  詳細'を参照。
整数、省略可能。  シーケンスの希望する長さ。
この引数の長さから長さを取る。
他のメソッドに渡される、あるいは他のメソッドから渡される引数。
各要素がシーケンスの長さを指定する非負整数ベクトルに強制されます。
各要素がシーケンスの最初の要素を指定する整数ベクトルに強制されます。
各要素がシーケンスの要素間のステップサイズを指定する整数ベクトルに強制されます。
メソッドに渡される追加引数。
各要素がシーケンスの長さを指定する非負整数ベクトルに強制されます。
各要素がシーケンスの最初の要素を指定する整数ベクトルに強制されます。
各要素がシーケンスの要素間のステップサイズを指定する整数ベクトルに強制されます。
メソッドに渡される追加引数。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトをシリアライズします。
開いている接続、(<code>serialize</code>の場合)<code>NULL</code>、または(<code>unserialize</code>の場合)生のベクトル(「詳細」を参照)。
論理。  <code>TRUE</code> または <code>NA</code> ならば ASCII 表現を、そうでなければ (デフォルト) バイナリ表現を書き込みます。
論理: バイナリ表現が使用される場合、ビッグエンディアンのもの(XDR)が使用されるべきか?
使用するワークスペース形式のバージョン。  <code>NULL</code>は現在のデフォルト・バージョン(3)を指定する。他にサポートされている値は、<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 1.4.0 から <span style="font-family：を<span style="font-family::Courier New, Courier; color：#666666;"><b>R</b></span> 3.5.0.
参照オブジェクトを扱うためのフック関数です。
文字列。  詳細'を参照。
文字列。  接続のオープン方法の説明(最初にオープンする場合)。  指定できる値についてはセクション「モード」を参照。
論理値。  ブロック」のセクションを参照。
想定するエンコーディングの名前。  エンコーディング」のセクションを参照。
論理値。  trueを指定すると、'raw'インターフェイスが使用され、 通常のファイルではない引数、例えばキャラクタデバイスなどに適している。  これは、テキストモードでの読み込みのためにオープンする際の 圧縮ファイルのチェックを抑制し、'ファイル'がシーク可能でない可能性があることを 保証する。
<code>c("default", "internal", "winet", "libcurl")</code>に部分的にマッチする文字列。
HTTPrequests で使用する HTTP ヘッダの名前付き文字ベクトル。  非 HTTP URL では無視されます。  <code>HTTPUserAgent</code> オプション (<code>options</code> を参照) から得られる <code>User-Agent</code> ヘッダは、自動的に最初のヘッダとして使われます。
0-9 の整数。  書き込み時に適用する圧縮の量を、なしから最大まで指定します。  <code>xzfile</code>の場合は負の値も指定できます: '圧縮'のセクションを参照してください。
数値: この接続で使用するタイムアウト(秒単位)。  OSによっては、非常に大きな値をゼロとして扱うことがあるので注意してください: しかし、POSIX標準では31日までの値をサポートしています。
オプションの文字ベクトル。現在TCPソケットでサポートされているのは<code>"no-delay"</code>のみである。
zip ファイル内のファイル名。
文字列。  ポートのホスト名。
整数。  TCP ポート番号。
論理。  ソケットをクライアントにするかサーバーにするか。
接続をリッスンするサーバソケット。
コネクション。
文字列。  現在は無視される。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
他のメソッドに渡される、または他のメソッドから渡される引数。
character または <code>NULL</code>.  <code>kind</code>が文字列の場合、<span style="font-family：font-family: Courier New, Courier; color：</b>R</b></span>のRNGを希望する種類に設定します。  <code>"default"</code> を使って<span style="font-family：font-family: Courier New, Courier; color：#666666;"><b>R</b></span>のデフォルトに戻ります。  <code>NULL</code>の解釈については'詳細'を参照のこと。
文字列または<code>NULL</code>。  文字列の場合、Normalの生成方法を設定する。  <code>"default"</code> を使うと、<span style="font-family：Courier New, Courier; color：font-family: Courier New, Courier; "color: #666666;"><b>R</b></span> デフォルトに戻ります。  <code>NULL</code>は変更しない。
文字列または<code>NULL</code>。  文字列の場合、(例えば<code>sample</code>で使われる)離散一様生成の方法を設定する。  <code>"default"</code> を使って、<span style="font-family：courier new, Courier; color：font-family: Courier New, Courier; "color: #666666;"><b>R</b></span> デフォルトに戻ります。  <code>NULL</code>は何も変更しません。
整数として解釈される単一の値、または <code>NULL</code>(「詳細」を参照)。
バージョン番号を含む文字列、例えば <code>"1.6.2"</code>。  現在の<span style="font-family：font-family: Courier New, Courier; color：<code>vstr</code> が現在のバージョンより大きい場合、<span style="font-family: Courier New; color: #666666;"><b>R</b></span> バージョンが使われる。
上記の<code>kind</code>に対応する<code>0:k</code>の整数コード。
の整数。  いくつ必要か(これは<code>rng.kind<//code>に依存する)については詳細を参照のこと。
ベクトル (同じモード) は、重複する値のないアイテムのシーケンス (概念的に) を含みます。
ベクトル(同じモード)は、(概念的に)アイテムのシーケンスを含み、重複した値を持ちません。
文字列: フック名
文字列: パッケージ/名前空間名
文字列: パッケージのイベント。  省略可能。
関数または関数のリスト、<code>action = "replace"</code>の場合は<code>NULL</code>。
実行するアクション。  省略可能。
文字列または名前空間環境。
論理。
環境。
名前空間環境。
文字ベクトル。
オプションの文字ベクトル。
名前空間環境。
ロードするパッケージ/名前空間を指定する文字列。
<code>generics</code>と並列なパッケージ名のベクトル。
ライブラリを指定する文字ベクトル
論理。
文字。
文字。
環境。
3列の文字行列。
文字。
任意のオブジェクト
文字引数。
メソッド・テーブル名。
symbol: 名前空間の名前。
特に<code>vars</code>がない場合に便利です。
double (長さ1)。  総 CPU 時間または経過 CPU 時間の制限をそれぞれ秒単位で設定する。
論理値。  <code>TRUE</code> の場合、制限は現在の計算の残りの部分にのみ適用される。
double (長さ1)。  総 CPU 時間または経過した CPU 時間の制限をそれぞれ秒単位で設定する。
論理的である。  <code>TRUE</code>の場合、制限は現在の計算の残りの部分のみに適用される。
文字列: チルダ展開が行われます。
logical: true の場合、閉じた接続と標準の接続を含むすべての接続が表示されます。  false の場合、ユーザが作成したオープンな接続のみが表示されます。
整数：<code>showConnections</code>で指定されたテーブルの行番号。
コネクション。
文字ベクトル。
文字: シェルのクォートタイプ。  部分一致がサポートされています。  <code>"cmd"</code>と<code>"cmd2"</code>はWindowsのシェルを指します。<code>"cmd"</code>はWindowsのデフォルトです。
数値ベクトル
条件オブジェクト
呼び出し式
条件オブジェクト
評価される式
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
追加の引数。
数値ベクトル。  または、<code>round</code> と <code>signif</code> の場合は、複素数ベクトル。
小数点以下の桁数(<code>round</code>)または有効桁数(<code>signif</code>)を示す整数。
メソッドに渡す引数。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式。
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
追加の引数。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式。
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
追加の引数。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式。
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
追加の引数。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式。
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
詳細は後述する。
ベクトル (アトミックまたはリスト) または <code>expression</code> オブジェクト。  その他のオブジェクト(クラス化されたオブジェクトを含む)は<code>base::as.list<//code>によって強制されます。
<code>X</code>の各要素に適用される関数は'詳細'を参照して下さい。  <code>+</code>、<code>%*%</code>のような関数の場合、関数名はバッククォートか引用符で囲む必要があります。
<code>FUN</code>のオプション引数。
論理文字列または文字列; 可能であれば、結果はベクトル、行列、または高次元配列に簡略化されるべきか?  <code>simplify = "array"</code> の場合、結果は<code>FUN(X[[i]])</code>の結果より1つ高い "rank"(<i>=</i><code>length(dim(.))</code>)の<code>array</code>になる可能性があります。
論理; <code>TRUE</code> かつ <code>X</code> が文字の場合、<code>X</code> が既に名前を持っていない限り、<code>X</code> を結果の <code>names</code> として使用します。  この引数は<code>...</code>に続くので、その名前を省略することはできません。
(一般化された)ベクトル; FUNからの戻り値のテンプレート。  詳細'を参照のこと。
整数： 複製数。
繰り返し評価する式（言語オブジェクト、通常は呼び出し）。
通常は<code>lapply()</code>から返される。
この2つのケースはそれぞれ、<code>sapply(*, simplify = "array")</code> または<code>simplify = TRUE</code> に対応する。
数値または複素数ベクトル。
double値はintegerに強制されます:1以外の長さの引数を与えるとエラーになります。
強制またはテストされるオブジェクト。
他のメソッドに渡される、または他のメソッドから渡されるさらなる引数。
数値または複素数ベクトル
書き込み可能な接続、または書き込み先のファイルを指定する文字列、または<code>NULL</code>でシンクを停止します。
を論理的に指定する。  <code>TRUE</code>の場合、出力は<code>file</code>に追加され、そうでなければ<code>file</code>の内容を上書きする。
文字列。  出力ストリームかメッセージストリームのどちらか。  名前は部分的にマッチするので省略可能。
論理: <code>TRUE</code>の場合、Unixプログラム<code>tee</code>のように、出力はニュースリンクと現在の出力ストリームに送られます。
書き込み可能なコネクションか、書き込むファイルを指定する文字列、または <code>NULL</code> でシンクを停止する。
を論理的に指定する。  もし<code>TRUE</code>なら、出力は<code>file</code>に追加され、そうでなければ<code>file</code>の内容を上書きする。
文字列。  出力ストリームかメッセージストリームのどちらか。  名前は部分的にマッチするので省略可能。
論理: <code>TRUE</code>の場合、Unixプログラム<code>tee</code>のように、出力はニュースリンクと現在の出力ストリームに送られます。
数値または複素数ベクトル。
配列。  <code>x</code>にdimension属性がない場合は、1次元配列とみなされます。
スライスする次元数を与える整数ベクトル。
文字列。  詳細'を参照。
文字列。  接続のオープン方法の説明(最初にオープンする場合)。  指定できる値についてはセクション 'モード' を参照。
論理値。  ブロック」のセクションを参照。
想定するエンコーディングの名前。  エンコーディング」のセクションを参照。
論理値。  trueを指定すると、'raw'インターフェイスが使用され、 通常のファイルではない引数、例えばキャラクタデバイスに適している。  これは、テキストモードでの読み込みのためにオープンする際の 圧縮ファイルのチェックを抑制し、'ファイル'がシーク可能でない可能性があることを 保証する。
<code>c("default", "internal", "winet", "libcurl")</code>に部分的にマッチする文字列。
HTTPrequests で使用する HTTP ヘッダの名前付き文字ベクトル。  非 HTTP URL では無視されます。  <code>HTTPUserAgent</code> オプション (<code>options</code> を参照) から得られる <code>User-Agent</code> ヘッダは、自動的に最初のヘッダとして使われます。
0-9 の整数。  書き込み時に適用する圧縮の量を、なしから最大まで指定します。  <code>xzfile</code>の場合は負の値も指定できます: '圧縮'のセクションを参照してください。
数値: この接続で使用するタイムアウト(秒単位)。  OSによっては、非常に大きな値をゼロとして扱うことがあるので注意してください: しかし、POSIX標準では31日までの値をサポートしています。
オプションの文字ベクトル。現在TCPソケットでサポートされているのは<code>"no-delay"</code>のみである。
zip ファイル内のファイル名。
文字列。  ポートのホスト名。
整数。  TCP ポート番号。
論理。  ソケットをクライアントにするかサーバーにするか。
接続をリッスンするサーバソケット。
コネクション。
文字列。  現在は無視される。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
他のメソッドに渡される、または他のメソッドから渡される引数。
文字列。  接続の説明: '詳細'を参照。
文字列。  接続のオープン方法(最初にオープンする場合)。  指定できる値についてはセクション 'モード' を参照。
論理値。  ブロック」のセクションを参照。
想定するエンコーディングの名前。  エンコーディング」のセクションを参照。
論理値。  trueを指定すると、'raw'インターフェイスが使用され、 通常のファイルではない引数、例えばキャラクタデバイスに適している。  これは、テキストモードでの読み込みのためにオープンする際の 圧縮ファイルのチェックを抑制し、'ファイル'がシーク可能でない可能性があることを 保証する。
<code>c("default", "internal", "winet", "libcurl")</code>に部分的にマッチする文字列。
HTTPrequests で使用する HTTP ヘッダの名前付き文字ベクトル。  非 HTTP URL では無視されます。  <code>HTTPUserAgent</code> オプション (<code>options</code> を参照) から得られる <code>User-Agent</code> ヘッダは、自動的に最初のヘッダとして使われます。
0-9 の整数。  書き込み時に適用する圧縮の量を、なしから最大まで指定します。  <code>xzfile</code>の場合は負の値も指定できます: '圧縮'のセクションを参照してください。
数値: この接続で使用するタイムアウト(秒単位)。  OSによっては、非常に大きな値をゼロとして扱うことがあるので注意してください: しかし、POSIX標準では31日までの値をサポートしています。
オプションの文字ベクトル。現在TCPソケットでサポートされているのは<code>"no-delay"</code>のみである。
zip ファイル内のファイル名。
文字列。  ポートのホスト名。
整数。  TCP ポート番号。
論理。  ソケットをクライアントにするかサーバーにするか。
接続をリッスンするサーバソケット。
コネクション。
文字列。  現在は無視される。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
他のメソッドに渡される、または他のメソッドから渡される引数。
開いているソケット接続とサーバーソケットのリスト。
論理的。  <code>TRUE</code>の場合、対応するソケットが書き込み可能になるのを待つ。
数値または <code>NULL</code>.<code>NULL</code> は無期限に待つことを意味する。
文字列。  詳細」を参照。
文字列。  接続のオープン方法(最初にオープンする場合)。  指定できる値については「モード」のセクションを参照のこと。
論理値。  ブロック」のセクションを参照。
想定するエンコーディングの名前。  エンコーディング」のセクションを参照。
論理値。  trueを指定すると、'raw'インターフェイスが使用され、 通常のファイルではない引数、例えばキャラクタデバイスなどに適している。  これは、テキストモードでの読み込みのためにオープンする際の 圧縮ファイルのチェックを抑制し、'ファイル'がシーク可能でない可能性があることを 保証する。
<code>c("default", "internal", "winet", "libcurl")</code>に部分的にマッチする文字列。
HTTPrequests で使用する HTTP ヘッダの名前付き文字ベクトル。  非 HTTP URL では無視されます。  <code>HTTPUserAgent</code> オプション (<code>options</code> を参照) から得られる <code>User-Agent</code> ヘッダは、自動的に最初のヘッダとして使われます。
0-9 の整数。  書き込み時に適用する圧縮の量を、なしから最大まで指定します。  <code>xzfile</code>の場合は負の値も指定できます: '圧縮'のセクションを参照してください。
数値: この接続で使用するタイムアウト(秒単位)。  OSによっては、非常に大きな値をゼロとして扱うことがあるので注意してください: しかし、POSIX標準では31日までの値をサポートしています。
オプションの文字ベクトル。現在TCPソケットでサポートされているのは<code>"no-delay"</code>のみである。
zip ファイル内のファイル名。
文字列。  ポートのホスト名。
整数。  TCP ポート番号。
論理。  ソケットをクライアントにするかサーバーにするか。
接続をリッスンするサーバソケット。
コネクション。
文字列。  現在は無視される。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
他のメソッドに渡される、または他のメソッドから渡される引数。
連立一次方程式の係数を含む正方数値または複素行列。  論理行列は数値に強制されます。
連立一次方程式の右辺を示す数値または複素数のベクトルまたは行列.  もし見つからない場合、<code>b</code>は豆単位行列とみなされ、<code>solve</code>は<code>a</code>の逆行列を返します。
<code>a</code> の列の線形従属性を検出するための許容誤差。  デフォルトは<code>.Machine$double.eps</code>です。現在、複素行列 <code>a</code> では使用されていません。
論理的です。  無効でエラー。
他のメソッドに渡される、または他のメソッドから渡されるさらなる引数
連立一次方程式の係数を含む正方数値行列または複素行列。  論理行列は数値に強制されます。
連立一次方程式の右辺を示す数値または複素数のベクトルまたは行列。  もし見つからない場合、<code>b</code>は豆単位行列とみなされ、<code>solve</code>は<code>a</code>の逆行列を返します。
<code>a</code> の列の線形従属性を検出するための許容誤差。  デフォルトは<code>.Machine$double.eps</code>です。現在、複素行列 <code>a</code> では使用されていません。
論理的です。  無効でエラー。
他のメソッドに渡される、または他のメソッドから渡される更なる引数
QR分解が計算される数値行列または複素行列。  論理行列は数値に強制されます。
<code>x</code> の列における線形従属性を検出するための許容誤差。<code>LAPACK</code>が偽で、<code>x</code>が実数の場合のみ使用されます。
<code>qr</code> によって計算されるタイプの QR 分解。
方程式の右辺のベクトルまたは行列。
QR分解または(<code>qr.solve</code>のみ)矩形行列。
実効ランク。
論理的.  実数 <code>x</code> の場合、真ならば LAPACK を使用し、そうでなければ LINPACK (デフォルト) を使用します。
他のメソッドに渡される、または他のメソッドから渡される更なる引数
<code>sort</code> の場合は <span style="font-family：color：<b>R</b></span> オブジェクトのクラス、または数値、複素数、文字、論理ベクトルを指定します。  <code>sort.int</code>の場合は、数値、複素数、文字、論理ベクトル、または因数。
論理。  <code>"radix"</code>メソッドでは、これは<code>...</code>の引数の数と同じ長さのベクトルである。他のメソッドでは、長さは1でなければならない。部分ソートでは使用できません。
<code>sort.int</code>に渡す引数。
もし<code>TRUE</code>ならば、データの欠損値は最後に置かれ、もし<code>FALSE</code>ならば、それらは最初に置かれ、もし<code>NA</code>ならば、それらは取り除かれます。
<code>NULL</code> または部分ソート用のインデックスのベクトル。
使用されるアルゴリズムを指定する文字列。  部分ソートでは利用できない。  省略可能。
並べ替えインデックスベクトルも返すべきかを示す論理。どの<code>na.last</code>モードとデータ型でも<code>method == "radix"</code>でサポートされ、他のメソッドでは<code>na.last = NA</code>（デフォルト）と非要素を完全にソートする場合にサポートされます。
<code>sort</code> では、<span style="font-family：font-family: Courier New, Courier; color：クラスまたは数値、複素数、文字、論理ベクトルを持つ<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。  <code>sort.int</code>の場合は、数値、複素数、文字、論理ベクトル、または因数。
論理。  <code>"radix"</code>メソッドでは、これは<code>...</code>の引数の数と同じ長さのベクトルである。他のメソッドでは、長さは1でなければならない。部分ソートでは使用できません。
<code>sort.int</code>に渡す引数。
もし<code>TRUE</code>ならば、データの欠損値は最後に置かれ、もし<code>FALSE</code>ならば、それらは最初に置かれ、もし<code>NA</code>ならば、それらは取り除かれます。
<code>NULL</code> または部分ソート用のインデックスのベクトル。
使用されるアルゴリズムを指定する文字列。  部分ソートでは利用できない。  省略可能。
並べ替えインデックスベクトルも返すべきかを示す論理。どの<code>na.last</code>モードとデータ型でも<code>method == "radix"</code>でサポートされ、他のメソッドでは<code>na.last = NA</code>（デフォルト）と非要素を完全にソートする場合にサポートされます。
<code>sort</code> では、<span style="font-family：font-family: Courier New, Courier; color：クラスまたは数値、複素数、文字、論理ベクトルを持つ<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。  <code>sort.int</code>の場合は、数値、複素数、文字、論理ベクトル、または因数。
論理。  <code>"radix"</code>メソッドでは、これは<code>...</code>の引数の数と同じ長さのベクトルである。他のメソッドでは、長さは1でなければならない。部分ソートでは使用できません。
<code>sort.int</code>に渡す引数。
もし<code>TRUE</code>ならば、データの欠損値は最後に置かれ、もし<code>FALSE</code>ならば、それらは最初に置かれ、もし<code>NA</code>ならば、それらは取り除かれます。
<code>NULL</code> または部分ソート用のインデックスのベクトル。
使用されるアルゴリズムを指定する文字列。  部分ソートでは利用できない。  省略可能。
並べ替えインデックスベクトルも返すべきかを示す論理。<code>na.last</code>モードとデータ型では<code>method == "radix"</code>、<code>na.last = NA</code>（デフォルト）と非要素を完全にソートする場合は他のメソッドでサポートされます。
数値ベクトル、複素数ベクトル、文字ベクトル、論理ベクトル、すべて同じ長さのベクトル、またはクラス化された<span style="font-family：font-family: Courier New, Courier; color：#"><b>R</b></span>オブジェクト。
<code>method</code>s <code>"shell"</code> および <code>"quick"</code> のアトミックベクタです。  <code>x</code>がアトミックでない<span style="font-family：Courier New, Courier; color：<code>order(x,...)</code> が動作する場合、デフォルトの<code>"auto"</code>メソッドと<code>"radix"</code>メソッドが動作します。
部分ソート用のインデックスのベクトル(非<code>NULL</code>値は実装されていません)。
を論理的に指定します。  ソート順は増加か減少か？<code>"radix"</code>メソッドでは、これは<code>...</code>の引数の数に等しい長さのベクトルとなります。他のメソッドでは、長さは1でなければならない。
もし<code>TRUE</code>ならば、データ中の欠損値は最後に置かれます; もし<code>FALSE</code>ならば、それらは最初に置かれます; もし<code>NA</code>ならば、それらは取り除かれます('Note'を参照して下さい)。
使用されるメソッド: 部分一致が許されます。  <code>"shell"</code>, <code>"quick"</code>, <code>"radix"</code>メソッドの詳細については、<code>sort</code>のヘルプを参照してください。
<code>sort</code> については、<span style="font-family：color：<span style="font-family: Courier New; color: #666666;"><b>R</b></span> オブジェクトのクラス、または数値、複素数、文字、論理ベクトルを指定します。  <code>sort.int</code>の場合は、数値、複素数、文字、論理ベクトル、または因数。
論理。  <code>"radix"</code>メソッドでは、これは<code>...</code>の引数の数と同じ長さのベクトルである。他のメソッドでは、長さは1でなければならない。部分ソートでは使用できません。
<code>sort.int</code>に渡す引数。
もし<code>TRUE</code>ならば、データの欠損値は最後に置かれ、もし<code>FALSE</code>ならば、それらは最初に置かれ、もし<code>NA</code>ならば、それらは取り除かれます。
<code>NULL</code> または部分ソート用のインデックスのベクトル。
使用されるアルゴリズムを指定する文字列。  部分ソートでは利用できない。  省略可能。
並べ替えインデックスベクトルも返すべきかを示す論理。<code>na.last</code>モードとデータ型では、<code>method == "radix"</code>でサポートされ、他のメソッドでは、<code>na.last = NA</code>（デフォルト）と非要素を完全にソートする場合にサポートされます。
接続、または読み込むファイル名やURLのパス名を指定する文字列。  <code>""</code>は、<code>stdin()</code>接続を示します。
<code>TRUE</code>、<code>FALSE</code>、または環境を表し、解析された式がどこで評価されるかを決定する。  <code>FALSE</code> (デフォルト) は、ユーザのワークスペース (グローバル環境) に対応し、<code>TRUE</code> は、<code>source</code> が呼び出された環境に対応します。
論理; もし <code>TRUE</code> ならば、各式は評価の前に、パース後に表示される。
logical; if <code>TRUE</code>, <code>eval(i)</code>の結果が各式<code>i</code>に対して出力される; デフォルトは<code>echo</code>の値である。
<code>source()</code>と<code>withAutoprint(*, evaluated=TRUE)</code>の場合: <code>file</code>、<code>expression</code>、<code>call</code>、<code>call</code>の<code>list</code>を指定する代わりに、評価されない "expression "を<em>指定する。

<code>withAutoprint()</code> (デフォルトは <code>evaluated=FALSE</code>):1 つ以上の評価されない "expression".
<code>exprs</code>が<code>source(exprs= *)</code>に渡され、したがって評価されなければならないことを示す論理、すなわち、正式な<code>式</code>、<code>call</code>または<code>呼び出しのリスト</code>。
(<code>echo=TRUE</code>のとき)各式の前に改行(つまり空行)を表示するかどうかを示す論理。
<code>TRUE</code>の場合、<b>echo = TRUE</code>だけでなく、<b>each</b>式の追加情報を含む、入力の解析と評価の間により多くの診断が表示されます。
character; は、<code>echo = TRUE</code> の場合に使用されるプロンプトを表示します。
integer; <code>echo</code>が<code>TRUE</code>の場合のみ使用され、1つの式の最大出力文字数を与える。
ソース参照がない場合にのみ使用される <code>deparse()</code> に渡される整数。
<code>character</code>ベクトル、<code>deparse()</code>に<code>control</code>として渡されます、<code>.deparseOpts</code>も参照してください。  <span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New Courier; color: #666666;"><b>R</b></span> version &lt;= 3.3.xでは、これは<code>"showAttributes"</code>にハードコードされています。
論理; <code>TRUE</code>で<code>file</code>がパス名の場合、<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 作業ディレクトリは、評価のために<code>file</code>を含むディレクトリに一時的に変更されます。
文字ベクトル。  <code>file</code>が文字列の場合に仮定されるエンコーディング: <code>file</code>を参照。  エンコーディングが推測される場合、<code>"unknown"</code>となる。
文字; <code>echo = TRUE</code>の場合、コメント行で使用するプロンプトを指定します。
整数: <code>echo = TRUE</code>の場合、ファイル先頭のコメント行を何行スキップするか。
論理: 式をエコーするとき、可能であればソースの書式を保持するか。
(<code>withAutoprint()</code>の場合:) <code>source(.)</code>に渡す(ファイルに関係のない)引数。
グループに分けられる値を含むベクトルまたはデータフレーム。
<code>as.factor(f)</code>がグループ化を定義するという意味での'factor'、またはそれらの相互作用がグループ化に使用される場合のそのような因子のリスト。もし<code>x</code>がデータフレームであれば、<code>f</code>は、変数<code>g</code>で分割するための<code> ~ g</code>の形の式、またはより一般的には<code> ~ g1 + ... + gk</code>の形の式になります。<code> + gk</code> という形で、変数<code>g1</code>, ..., <code>gk</code>の相互作用によって分割されます。
(<code>f</code>が<code>factor</code>またはリストの場合)発生しないレベルを削除するかどうかを示す論理。
<code>x</code> の分割と互換性のあるベクトルまたはデータフレームのリスト。長さが一致しない場合はリサイクルが適用される。
<code>f</code> が <code>list</code> の場合に <code>interaction</code> に渡される文字列。
<code>f</code>がリストの場合、<code>interaction</code>に渡される。
さらにメソッドに渡される可能性のある引数。
グループに分けられる値を含むベクトルまたはデータフレーム。
<code>as.factor(f)</code>がグループ化を定義するという意味での'factor'、または、それらのinteractionがグループ化に使用されるような因子のリスト。もし<code>x</code>がデータフレームであれば、<code>f</code>は、変数<code>g</code>で分割するための<code> ~ g</code>の形の式、またはより一般的には<code> ~ g1 + ... + gk</code>の形の式になります。<code> + gk</code> という形で、変数<code>g1</code>, ..., <code>gk</code>の相互作用によって分割されます。
(<code>f</code>が<code>factor</code>またはリストの場合)発生しないレベルを削除するかどうかを示す論理。
<code>x</code> の分割と互換性のあるベクトルまたはデータフレームのリスト。長さが一致しない場合はリサイクルが適用される。
<code>f</code> が <code>list</code> の場合に <code>interaction</code> に渡される文字列。
<code>f</code>がリストの場合、<code>interaction</code>に渡される。
さらにメソッドに渡される可能性のある引数。
要約または印刷される <code>Date</code> オブジェクト。
計算の有効桁数。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>, <code>getOption("max.print")</code>が使用されます。
他のメソッドから、または他のメソッドに渡される更なる引数。
グループに分けられる値を含むベクトルまたはデータフレーム。
<code>as.factor(f)</code>がグループ化を定義するという意味での'factor'、またはそれらの相互作用がグループ化に使用される場合のそのような因子のリスト。もし<code>x</code>がデータフレームであれば、<code>f</code>は、変数<code>g</code>で分割するための<code> ~ g</code>の形の式、またはより一般的には<code> ~ g1 + ... + gk</code>の形の式になります。<code> + gk</code> という形で、変数<code>g1</code>, ..., <code>gk</code>の相互作用によって分割されます。
(<code>f</code>が<code>factor</code>またはリストの場合)発生しないレベルを削除するかどうかを示す論理。
<code>x</code> の分割と互換性のあるベクトルまたはデータフレームのリスト。長さが一致しない場合はリサイクルが適用される。
<code>f</code> が <code>list</code> の場合に <code>interaction</code> に渡される文字列。
<code>f</code>がリストの場合、<code>interaction</code>に渡される。
さらにメソッドに渡される可能性のある引数。
date-timeクラスの1つから出力または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
グループに分けられる値を含むベクトルまたはデータ・フレーム。
<code>as.factor(f)</code>がグループ化を定義するという意味での'factor'、またはそのような因子のリストで、それらの相互作用がグループ化に使用されます。もし<code>x</code>がデータフレームであれば、<code>f</code>は、変数<code>g</code>で分割するための<code> ~ g</code>の形の式、またはより一般的には<code> ~ g1 + ... + gk</code>の形の式になります。<code> + gk</code> という形で、変数<code>g1</code>, ..., <code>gk</code>の相互作用によって分割されます。
(<code>f</code>が<code>factor</code>またはリストの場合)発生しないレベルを削除するかどうかを示す論理。
<code>x</code> の分割と互換性のあるベクトルまたはデータフレームのリスト。長さが一致しない場合はリサイクルが適用される。
<code>f</code> が <code>list</code> の場合に <code>interaction</code> に渡される文字列。
<code>f</code>がリストの場合、<code>interaction</code>に渡される。
さらにメソッドに渡される可能性のある引数。
グループに分けられる値を含むベクトルまたはデータフレーム。
<code>as.factor(f)</code>がグループ化を定義するという意味での'factor'、または、それらのinteractionがグループ化に使用されるような因子のリスト。もし<code>x</code>がデータフレームであれば、<code>f</code>は、変数<code>g</code>で分割するための<code> ~ g</code>の形の式、またはより一般的には<code> ~ g1 + ... + gk</code>の形の式になります。<code> + gk</code> という形で、変数<code>g1</code>, ..., <code>gk</code>の相互作用によって分割されます。
(<code>f</code>が<code>factor</code>またはリストの場合)発生しないレベルを削除するかどうかを示す論理。
<code>x</code> の分割と互換性のあるベクトルまたはデータフレームのリスト。長さが一致しない場合はリサイクルが適用される。
<code>f</code> が <code>list</code> の場合に <code>interaction</code> に渡される文字列。
<code>f</code>がリストの場合、<code>interaction</code>に渡される。
さらにメソッドに渡される可能性のある引数。
グループに分けられる値を含むベクトルまたはデータフレーム。
<code>as.factor(f)</code>がグループ化を定義するという意味での'factor'、または、それらのinteractionがグループ化に使用されるような因子のリスト。もし<code>x</code>がデータフレームであれば、<code>f</code>は、変数<code>g</code>で分割するための<code> ~ g</code>の形の式、またはより一般的には<code> ~ g1 + ... + gk</code>の形の式になります。<code> + gk</code> という形で、変数<code>g1</code>, ..., <code>gk</code>の相互作用によって分割されます。
(<code>f</code>が<code>factor</code>またはリストの場合)発生しないレベルを削除するかどうかを示す論理。
<code>x</code> の分割と互換性のあるベクトルまたはデータフレームのリスト。長さが一致しない場合はリサイクルが適用される。
<code>f</code> が <code>list</code> の場合に <code>interaction</code> に渡される文字列。
<code>f</code>がリストの場合、<code>interaction</code>に渡される。
さらにメソッドに渡される可能性のある引数。
8192バイトまでのフォーマット文字列の文字ベクトル。
<code>fmt</code>に渡される値。  論理ベクトル、整数ベクトル、実数ベクトル、文字ベクトルのみがサポートされますが、多少の強制は行われます。最大100まで。
<code>gettext</code> を参照のこと。
数値または <code>complex</code> ベクタまたは配列。
<span style="font-family：font-family: Courier New, Courier; color：文字ベクトルに強制する<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>オブジェクト。
詳細'を参照。
 ファイル名。
 ファイルの文字エンコーディング。
 <code>parse</code>の<code>encoding</code>引数を参照のこと。
 ソース行の文字ベクトル。  その他の<span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトは文字に強制されます。
 ファイルのコピーに使用するタイムスタンプ。
 この <code>srcfilecopy<//code> はファイルシステムファイルから来たものですか？
 <code>srcfile</code> オブジェクト。
 行番号。
 詳細'を参照。
 適切なクラスのオブジェクト。
 <code>srcref</code> のテキストを得るために <code>srcfile</code> を読むかどうか。
 文字範囲の終端を示すオプションの 2 番目の <code>srcref</code> オブジェクト。
 これらは無視される。
 ファイル名。
 ファイルの文字エンコーディング。
 <code>parse</code> の<code>encoding</code>引数を参照のこと。
 ソース行の文字ベクトル。  その他の<span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトは文字に強制されます。
 ファイルのコピーに使用するタイムスタンプ。
 この <code>srcfilecopy<//code> はファイルシステムファイルから来たものですか？
 <code>srcfile</code> オブジェクト。
 行番号。
 詳細'を参照。
 適切なクラスのオブジェクト。
 <code>srcref</code> のテキストを得るために <code>srcfile</code> を読むかどうか。
 文字範囲の終端を示すオプションの 2 番目の <code>srcref</code> オブジェクト。
 これらは無視される。
 ファイル名。
 ファイルの文字エンコーディング。
 <code>parse</code> の<code>encoding</code>引数を参照のこと。
 ソース行の文字ベクトル。  その他の<span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトは文字に強制されます。
 ファイルのコピーに使用するタイムスタンプ。
 この <code>srcfilecopy<//code> はファイルシステムファイルから来たものですか？
 <code>srcfile</code> オブジェクト。
 行番号。
 詳細'を参照。
 適切なクラスのオブジェクト。
 <code>srcref</code> のテキストを得るために <code>srcfile</code> を読むかどうか。
 文字範囲の終端を示すオプションの 2 番目の <code>srcref</code> オブジェクト。
 これらは無視される。
 ファイル名。
 ファイルの文字エンコーディング。
 <code>parse</code> の<code>encoding</code>引数を参照のこと。
 ソース行の文字ベクトル。  その他の<span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトは文字に強制されます。
 ファイルのコピーに使用するタイムスタンプ。
 この <code>srcfilecopy<//code> はファイルシステムファイルから来たものですか？
 <code>srcfile</code> オブジェクト。
 行番号。
 詳細'を参照。
 適切なクラスのオブジェクト。
 <code>srcref</code> のテキストを得るために <code>srcfile</code> を読むかどうか。
 文字範囲の終端を示すオプションの 2 番目の <code>srcref</code> オブジェクト。
 これらは無視されます。
ジェネリックの名前。
ジェネリック関数の定義。新しいジェネリックを定義するときには決して渡されません。
start "が考慮される<code>文字列のベクトル。
<code>文字</code>ベクトル(多くの場合長さは1)。
logical:trueの場合、閉じた接続と標準の接続を含むすべての接続が表示されます。  false の場合、ユーザが作成したオープンな接続のみが表示されます。
integer: <code>showConnections</code> で指定されたテーブルの行番号。
コネクション。
論理: true の場合、閉じた接続と標準の接続を含むすべての接続が表示されます。  falseの場合、ユーザが作成したオープン接続のみが表示されます。
integer: <code>showConnections</code> で指定したテーブルの行番号。
コネクション。
論理: true の場合、閉じた接続と標準の接続を含むすべての接続が表示されます。  falseの場合、ユーザが作成したオープン接続のみが表示されます。
integer: <code>showConnections</code> で指定したテーブルの行番号。
コネクション。
文字に強制できる0個以上のオブジェクト(セパレータなしで一緒に貼り付けられる)、または単一の条件オブジェクト。
論理的な、呼び出しがエラーメッセージの一部になるかどうかを示す。
<code>gettext</code> を参照のこと。  <code>NA</code>の場合、メッセージは翻訳されない。
<span style="font-family：color：#(すべての論理ベクトル) <code>TRUE</code>に評価されなければなりません。  <em>either</em> <code>...</code> <em>or</em><code>exprs</code> を使用してください。

例えば、<code>if(.)</code>の中や<span style="font-family：color：#666666;"><b>R</b></span>内の算術計算などです。

<code>...</code> に名前が指定された場合、デフォルトのエラーメッセージの代わりに使用される。
<code>exprs</code>または<code>...</code>に代わるもの: '式のような'オブジェクト、典型的には<code>式</code>ですが、<code>コール</code>、<code>名</code>、または<code>TRUE</code>のような原子定数でもかまいません。
(<code>exprs</code>が使用されている場合のみ:) 式が評価されるべき<code>環境</code>を示します; デフォルトでは、<code>stopifnot()</code>が呼び出された環境です。
<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
オブジェクトの希望するモードまたは'保存モード'(タイプ)を示す文字列。
任意の<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
オブジェクトの希望するモードまたは'ストレージモード'(タイプ)を指定する文字列。
もし<code>file</code>が<code>""</code>で、<code>text</code>が無いか<code>NULL</code>なら、コンソールから入力されます。
integer (またはcoerced to integer)。  パースする式の最大数。  <code>n</code> が <code>NULL</code> または負もしくは<code>NA</code> の場合、入力は完全に解析される。
文字ベクトル。  解析するテキスト。  要素はファイルの行のように扱われます。  その他の<span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトは、可能であれば文字に強制されます。
<code>NULL</code>は<span style="font-family：color：<code>getOption("prompt")</code>.
論理値; <code>TRUE</code>の場合、参照情報を保持する。
<code>NULL</code>、文字ベクトル、または<code>srcfile</code>オブジェクト。  詳細」セクションを参照してください。
入力文字列のエンコーディングを指定します。  この値が<code>"latin1"</code>または<code>"UTF-8"</code>の場合、文字列がLatin-1またはUTF-8であることを示すために使用されます。  後者を行うには、接続の<code>con</code>または<em>via</em><code>options(encoding=)</code>でエンコーディングを指定します: <code>file</code>の例を参照してください。引数<code>encoding = "latin1"</code> と <code>encoding="UTF-8"</code>は、MBCSロケールで実行すると警告とともに無視されます。
長さ<code>1</code>の<code>character</code>ベクトル、すなわち "文字列"。
もし<code>file</code>が<code>""</code>で、<code>text</code>がないか、<code>NULL</code>ならば、コンソールから入力される。
integer (またはcoerced to integer)。  パースする式の最大数。  <code>n</code> が <code>NULL</code> または負もしくは<code>NA</code> の場合、入力は完全に解析される。
文字ベクトル。  解析するテキスト。  要素はファイルの行のように扱われます。  その他の<span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトは、可能であれば文字に強制されます。
<code>NULL</code>は<span style="font-family：color：<code>getOption("prompt")</code>.
論理値; <code>TRUE</code>の場合、参照情報を保持する。
<code>NULL</code>、文字ベクトル、または<code>srcfile</code>オブジェクト。  詳細」セクションを参照してください。
入力文字列のエンコーディングを指定します。  この値が<code>"latin1"</code>または<code>"UTF-8"</code>の場合、文字列がLatin-1またはUTF-8であることを示すために使用されます。  後者を行うには、接続の<code>con</code>または<em>via</em><code>options(encoding=)</code>でエンコーディングを指定します: <code>file</code>の例を参照してください。引数<code>encoding = "latin1"</code> と <code>encoding="UTF-8"</code>は、MBCSロケールで実行すると警告とともに無視されます。
長さ<code>1</code>の<code>character</code>ベクトル、すなわち "文字列"。
変換されるオブジェクト：<code>strptime</code>の文字ベクトル、<code>strftime</code>の<code>"POSIXlt"</code>に変換できるオブジェクト。
変換に使用するタイムゾーンを指定する文字列。  システム固有(<code>as.POSIXlt<//code>を参照)ですが、<code>""</code>は現在のタイムゾーンで、<code>"GMT"</code>はUTCです。
文字列。  <code>format</code>メソッドのデフォルトは、<code>"%Y-%m-%d %H:%M:%S"</code> であり、それ以外の場合は<code>"%Y-%m-%d"</code>となります。  もし<code>options("digits.secs")</code>が設定されていれば、指定された桁数までの秒数が表示される。
他のメソッドから、あるいは他のメソッドに渡す引数。
を論理的に指定します。  タイムゾーンの省略形を出力に付加するか。  これは時刻を表示する際に使われ、<code>"%Z"</code>を使うよりも信頼性が高い。
変換されるオブジェクト：<code>strptime</code>では文字ベクトル、<code>strftime</code>では<code>"POSIXlt"</code>に変換できるオブジェクト。
変換に使用するタイムゾーンを指定する文字列。  システム固有(<code>as.POSIXlt<//code>を参照)ですが、<code>""</code>は現在のタイムゾーンで、<code>"GMT"</code>はUTCです。
文字列。  <code>format</code>メソッドのデフォルトは、<code>"%Y-%m-%d %H:%M:%S"</code> であり、それ以外の場合は<code>"%Y-%m-%d"</code>となります。  もし<code>options("digits.secs")</code>が設定されていれば、指定された桁数までの秒数が表示される。
他のメソッドから、あるいは他のメソッドに渡す引数。
を論理的に指定します。  タイムゾーンの省略形を出力に付加するか。  これは時刻を出力する際に使われ、<code>"%Z"</code>を使うよりも信頼性が高い。
文字ベクトル、または<code>as.character</code>を使用して文字ベクトルに強制できるオブジェクト。
<code>x</code>の各要素を繰り返す(非負の)回数を与える整数ベクトル。
文字ベクトル。その各要素は分割される。  因子を含む他の入力はエラーとなる。
分割に使用する正規表現 (<code>fixed = TRUE</code> でない限り) を含む文字ベクトル (またはそのように強制できるオブジェクト)。  空のマッチが発生した場合、特に<code>split</code>の長さが0の場合、<code>x</code>は1文字に分割されます。<code>split</code>の長さが1より大きい場合、<code>x</code>に沿って再循環されます。
論理的に分割されます。  <code>TRUE</code> なら <code>split</code> に正確にマッチし、そうでなければ正規表現を使う。  <code>perl</code> より優先される。
を優先する。  Perl 互換の正規表現を使うべきか。
論理的な正規表現を使うか。  <code>TRUE</code>の場合、マッチングは文字単位ではなくバイト単位で行われ、エンコーディングがマークされた入力は変換されない。  <code>"bytes"</code>としてマークされた入力が見つかった場合、これは(警告とともに)強制されます(<code>Encoding</code>を参照)。
文字ベクトル、または<code>as.character</code>によって強制されるもの。
2から36までの整数、またはゼロ(デフォルト)。
文字ベクトル、または<code>as.character</code>によって文字ベクトルに強制できるオブジェクト。
正の整数値: <code>x</code>の長さにリサイクルされます。
様々な属性を持つオブジェクト。
<code>tag = value</code>形式で指定される属性。
文字ベクトル、または<code>as.character</code>で文字ベクトルに変換できるオブジェクト。
出力の折り返し行の対象となる列を与える正の整数。
段落の最初の行のインデントを指定する非負の整数。
段落内の後続行のインデントを指定する非負の整数。
<code>initial</code> が使われる最初の行を除く各行のプレフィックスとして使われる文字列。
論理。  <code>TRUE</code>の場合、結果は行テキストの1文字ベクトルであり、そうでない場合、<code>x</code>と同じ長さのリストであり、その要素は、<code>x</code>の対応する要素から得られる行テキストの文字ベクトルである(従って、前者の場合の結果は、後者のそれをリスト解除することによって得られる)。
与えられた文字ベクトルでマッチする正規表現(<code>fixed = TRUE</code>の場合は文字列)を含む文字列。  可能であれば、<code>as.character</code>によって文字列に強制されます。  長さが2以上の文字ベクトルが与えられた場合、警告とともに最初の要素が使用されます。  <code>regexpr</code>、<code>gregexpr</code>、<code>regexec</code>を除き、欠落値も許される。
マッチを求める文字ベクトル、または、<code>as.character</code>によって文字ベクトルに強制できるオブジェクト。  長いベクトルもサポートされています。
<code>FALSE</code> の場合、パターンマッチは <em>casesensitive</em> となり、 <code>TRUE</code> の場合、大文字小文字は無視されます。
を使用します。  Perl 互換の正規表現を使うべきか？
もし<code>FALSE</code>ならば、<code>grep</code>によって決定されたマッチの(<code>integer</code>)インデックスを含むベクトルが返され、もし<code>TRUE</code>ならば、マッチした要素そのものを含むベクトルが返されます。
を論理的に返します。  もし<code>TRUE</code>ならば、<code>pattern</code>はそのままマッチする文字列となる。  競合するすべての引数を上書きする。
論理的な引数。  <code>TRUE</code>の場合、マッチングは文字単位ではなくバイト単位で行われる。  詳細'を参照のこと。
論理的なマッチングを行う。  <code>TRUE</code> の場合、マッチしない要素のインデックスまたは値を返す。
<code>sub</code> および <code>gsub</code> でマッチしたパターンの置換。  可能であれば文字に強制される。  <code>fixed=FALSE</code>の場合、<code>"◆1"</code>から<code>"◆9"</code>まで、<code>pattern</code>の括弧で囲まれた部分式への後方参照<code>"◆1"</code>を含むことができます。  <code>perl=TRUE</code>の場合のみ、<code>"˶"</code>または<code>"˶L"</code>で大文字または小文字に変換し、<code>"˶"</code>で大文字小文字の変換を終了します。  長さが2以上の文字ベクトルが供給された場合、最初の要素は警告とともに使用される。  <code>NA</code> の場合、マッチに対応する結果のすべての要素は <code>NA</code> に設定されます。
サブセットされるオブジェクト。
保持する要素または行を示す論理式。
データフレームから選択する列を示す式。
<code>[</code>インデックス演算子に渡されます。
他のメソッドに渡される、または他のメソッドから渡される引数。
サブセットされるオブジェクト。
保持する要素または行を示す論理式。
データフレームから選択する列を示す式。
<code>[</code>インデックス演算子に渡されます。
他のメソッドに渡される、または他のメソッドから渡される引数。
サブセットされるオブジェクト。
保持する要素または行を示す論理式。
データフレームから選択する列を示す式。
<code>[</code>インデックス演算子に渡されます。
他のメソッドに渡される、または他のメソッドから渡される引数。
サブセットされるオブジェクト。
保持する要素または行を示す論理式。
データフレームから選択する列を示す式。
<code>[</code>インデックス演算子に渡されます。
他のメソッドに渡される、または他のメソッドから渡される引数。
構文的に有効な<span style="font-family："><span style="font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 式。
<code>call</code>、すなわち<span style="font-family：(font-family: "クーリエ・ニュー, クーリエ; color：つまり、<span style="font: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトの <code>class</code> (および <code>mode</code>) <code>"call"</code>.
環境またはリスト・オブジェクト。  デフォルトは現在の評価環境です。
文字ベクトル。
整数。  置換される最初の要素。
整数。  置換される最後の要素。
文字ベクトル。
文字ベクトル。
整数。  置換される最初の要素。
整数。  置換される最後の要素。
文字ベクトル。
文字ベクトル。
整数。  置換される最初の要素。
整数。  置換される最後の要素。
文字ベクトル。
文字ベクトル。
整数。  置換される最初の要素。
整数。  置換される最後の要素。
文字ベクトル。
数値または複素数または論理ベクトル。
論理。  欠損値（<code>NaN</code>を含む）は削除すべきか？
要約が必要なオブジェクト。
<code>summary()</code>の<em>default</em>メソッドの結果。
<code>factor</code>に対して、いくつのレベルを表示すべきかを示す整数。
<code>signif()</code>（<code>summary.default</code>の場合）または<code>format()</code>（<code>summary.data.frame</code>の場合）で数値をフォーマットするために使用される整数。  <code>summary.default</code>では、もし指定されなければ(すなわち、<code>missing(.)</code>)、<code>signif()</code>はもう呼び出されません(<span style="font-family：Courier New, Courier; color：<span style="font: Courier New; color: #666666;"><b>R</b></span> &gt;= 3.4.0 では、デフォルトは <code>print</code> と <code>format</code> メソッドで round のみとなりました)。
<code>quantile(*, type=quantile.type)</code>でデフォルトのメソッドに使用される整数コード。
生成される要約に影響を与える追加引数。
文字列。  接続の説明: '詳細'を参照。
文字列。  接続のオープン方法(最初にオープンする場合)。  指定できる値についてはセクション 'モード' を参照のこと。
論理値。  ブロック」のセクションを参照。
想定するエンコーディングの名前。  エンコーディング」のセクションを参照。
論理値。  trueを指定すると、'raw'インターフェイスが使用され、 通常のファイルではない引数、例えばキャラクタデバイスに適している。  これは、テキストモードでの読み込みのためにオープンする際の 圧縮ファイルのチェックを抑制し、'ファイル'がシーク可能でない可能性があることを 保証する。
<code>c("default", "internal", "winet", "libcurl")</code>に部分的にマッチする文字列。
HTTPrequests で使用する HTTP ヘッダの名前付き文字ベクトル。  非 HTTP URL では無視されます。  <code>HTTPUserAgent</code> オプション (<code>options</code> を参照) から得られる <code>User-Agent</code> ヘッダは、自動的に最初のヘッダとして使われます。
0-9 の整数。  書き込み時に適用する圧縮の量を、なしから最大まで指定します。  <code>xzfile</code>の場合は負の値も指定できます: '圧縮'のセクションを参照してください。
数値: この接続で使用するタイムアウト(秒単位)。  OSによっては、非常に大きな値をゼロとして扱うことがあるので注意してください: しかし、POSIX標準では31日までの値をサポートしています。
オプションの文字ベクトル。現在TCPソケットでサポートされているのは<code>"no-delay"</code>のみである。
zip ファイル内のファイル名。
文字列。  ポートのホスト名。
整数。  TCP ポート番号。
論理。  ソケットをクライアントにするかサーバーにするか。
接続をリッスンするサーバソケット。
コネクション。
文字列。  現在は無視される。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
他のメソッドに渡される、または他のメソッドから渡される引数。
要約が必要なオブジェクト。
<code>summary()</code>の<em>default</em>メソッドの結果。
<code>factor</code>に対して、いくつのレベルを表示すべきかを示す整数。
<code>signif()</code>（<code>summary.default</code>の場合）または<code>format()</code>（<code>summary.data.frame</code>の場合）で数値をフォーマットするために使用される整数。  <code>summary.default</code>では、もし指定されなければ(すなわち、<code>missing(.)</code>)、<code>signif()</code>はもう呼び出されません(<span style="font-family：Courier New, Courier; color：<span style="font: Courier New; color: #666666;"><b>R</b></span> &gt;= 3.4.0 では、デフォルトは <code>print</code> と <code>format</code> メソッドで round のみとなりました)。
<code>quantile(*, type=quantile.type)</code>でデフォルトのメソッドに使用される整数コード。
生成される要約に影響を与える追加引数。
オブジェクト。
メソッドに渡される追加引数。
論理: 欠落値は削除されるべきか?
要約または印刷される <code>Date</code> オブジェクト。
計算の有効桁数。
数値または<code>NULL</code>で、表示されるエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>, <code>getOption("max.print")</code>が使用されます。
他のメソッドから、または他のメソッドに渡される更なる引数。
要約または印刷される <code>Date</code> オブジェクト。
計算の有効桁数。
数値または<code>NULL</code>で、表示するエントリの最大数を指定する。  デフォルトでは、<code>NULL</code>, <code>getOption("max.print")</code>が使用されます。
他のメソッドから、または他のメソッドに渡される更なる引数。
要約が必要なオブジェクト。
<code>summary()</code>の<em>default</em>メソッドの結果。
<code>factor</code>に対して、いくつのレベルを表示すべきかを示す整数。
<code>signif()</code>（<code>summary.default</code>の場合）または<code>format()</code>（<code>summary.data.frame</code>の場合）で数値をフォーマットするために使用される整数。  <code>summary.default</code>では、もし指定されなければ(すなわち、<code>missing(.)</code>)、<code>signif()</code>はもう呼び出されません(<span style="font-family：Courier New, Courier; color：<span style="font: Courier New; color: #666666;"><b>R</b></span> &gt;= 3.4.0 では、デフォルトは <code>print</code> と <code>format</code> メソッドで round のみとなりました)。
<code>quantile(*, type=quantile.type)</code>でデフォルトのメソッドに使用される整数コード。
生成される要約に影響を与える追加引数。
date-time または date オブジェクト。
主に<code>"POSIXlt"</code>オブジェクトで、変換に使われるオプションのタイムゾーン指定。
文字列。  結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数、または他のメソッドから渡される引数。
要約が必要なオブジェクト。
<code>summary()</code>の<em>default</em>メソッドの結果。
<code>factor</code>に対して、いくつのレベルを表示すべきかを示す整数。
<code>signif()</code>（<code>summary.default</code>の場合）または<code>format()</code>（<code>summary.data.frame</code>の場合）で数値をフォーマットするために使用される整数。  <code>summary.default</code>では、もし指定されなければ(すなわち、<code>missing(.)</code>)、<code>signif()</code>はもう呼び出されません(<span style="font-family：Courier New, Courier; color：<span style="font: Courier New; color: #666666;"><b>R</b></span> &gt;= 3.4.0 では、デフォルトは <code>print</code> と <code>format</code> メソッドで round のみとなりました)。
<code>quantile(*, type=quantile.type)</code>でデフォルトのメソッドに使用される整数コード。
生成される要約に影響を与える追加引数。
データのベクトルで、通常は少数個の値を取る。
(文字列として)<code>x</code>が取り得る一意な値のオプションのベクトル。  デフォルトは、<code>as.character(x)</code>が取った値のユニークな集合で、<em><code>x</code></em>の昇順にソートされています。  この集合は、<code>sort(unique(x))</code>より小さく指定できることに注意。
<em>either</em>レベルのラベルのオプションの文字ベクトル(<code>exclude</code>内のものを取り除いた後、<code>levels</code>と同じ順序で)、<em>または</em>長さ 1の文字列。 <code>labels</code>内の重複した値は、<code>x</code>の異なる値を同じ因子レベルにマップするために使用することができます。
レベルの集合を形成するときに除外される値のベクトル。  これは、<code>x</code>と同じレベルを持つ因子であってもよいし、<code>文字</code>でなければならない。
論理フラグで、レベルが(与えられた順序で)順序付けされたとみなされるべきかどうかを決定する。
詳細'を参照のこと。
(<code>ordered(.)</code>内): <code>ordered</code>自身を除いた上記のいずれか。
もし<code>any(is.na(x))</code>が使用されるなら、<code>na<//code>レベルを追加する。
要約が必要なオブジェクト。
<code>summary()</code>の<em>default</em>メソッドの結果。
<code>factor</code>に対して、いくつのレベルを表示すべきかを示す整数。
<code>signif()</code>（<code>summary.default</code>の場合）または<code>format()</code>（<code>summary.data.frame</code>の場合）で数値をフォーマットするために使用される整数。  <code>summary.default</code>では、もし指定されなければ(すなわち、<code>missing(.)</code>)、<code>signif()</code>はもう呼び出されません(<span style="font-family：Courier New, Courier; color：<span style="font: Courier New; color: #666666;"><b>R</b></span> &gt;= 3.4.0 では、デフォルトは <code>print</code> と <code>format</code> メソッドで round のみと変更されています)。
<code>quantile(*, type=quantile.type)</code>でデフォルトのメソッドに使用される整数コード。
生成される要約に影響を与える追加引数。
<code>package_version</code>の場合は、<code>R.version</code>で得られるRversionオブジェクト。
無効な数値バージョンはエラーになるか(デフォルト)、ならないかを示す論理です。
データのベクトル。
(文字列として)<code>x</code>が取ったかもしれないユニークな値のオプションのベクトル。  デフォルトは、<code>as.character(x)</code>が取った値のユニークな集合で、<em><code>x</code></em>の昇順にソートされています。  この集合は、<code>sort(unique(x))</code>より小さく指定できることに注意。
<em>either</em>レベルのラベルのオプションの文字ベクトル(<code>exclude</code>内のものを取り除いた後、<code>levels</code>と同じ順序で)、<em>または</em>長さ 1の文字列。 <code>labels</code>内の重複した値は、<code>x</code>の異なる値を同じ因子レベルにマップするために使用することができます。
レベルの集合を形成するときに除外される値のベクトル。  これは、<code>x</code>と同じレベルセットを持つ因子であってもよいし、<code>文字</code>であるべきである。
論理フラグで、レベルが(与えられた順序で)並べ替えられたとみなされるべきかどうかを決定する。
詳細'を参照のこと。
(<code>ordered(.)</code>内): <code>ordered</code>自身を除いた上記のいずれか。
もし<code>any(is.na(x))</code>が使われるなら、<code>na<//code>レベルを追加する。
date-timeクラスの1つから、出力または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
date-timeクラスの1つから、印刷または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
date-timeクラスの1つから、印刷または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければならない。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>で変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
date-timeクラスの1つから、印刷または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
 ファイル名。
 ファイルの文字エンコーディング。
 <code>parse</code>の<code>encoding</code>引数を参照のこと。
 ソース行の文字ベクトル。  その他の<span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトは文字に強制されます。
 ファイルのコピーに使用するタイムスタンプ。
 この <code>srcfilecopy<//code> はファイルシステムファイルから来たものですか？
 <code>srcfile</code> オブジェクト。
 行番号。
 詳細'を参照。
 適切なクラスのオブジェクト。
 <code>srcref</code> のテキストを得るために <code>srcfile</code> を読むかどうか。
 文字範囲の終端を示すオプションの 2 番目の <code>srcref</code> オブジェクト。
 これらは無視される。
 ファイル名。
 ファイルの文字エンコーディング。
 <code>parse</code> の<code>encoding</code>引数を参照のこと。
 ソース行の文字ベクトル。  その他の<span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトは文字に強制されます。
 ファイルのコピーに使用するタイムスタンプ。
 この <code>srcfilecopy<//code> はファイルシステムファイルから来たものですか？
 <code>srcfile</code> オブジェクト。
 行番号。
 詳細'を参照。
 適切なクラスのオブジェクト。
 <code>srcref</code> のテキストを得るために <code>srcfile</code> を読むかどうか。
 文字範囲の終端を示すオプションの 2 番目の <code>srcref</code> オブジェクト。
 メソッドへの追加引数。
(文字列を含む) 要素として解釈可能な1つ以上のオブジェクト、またはそのように解釈可能な要素を持つリスト(またはデータフレーム)。  (<code>as.table</code>では、特定のメソッドに渡される引数; <code>as.data.frame</code>では、未使用)
<code>...</code>内の全ての因子に対して削除する水準を指定する。  itが<code>NA</code>を含まず、<code>useNA</code>が指定されていない場合、<code>useNA = "ifany"</code>を意味する。  非要素引数に対する解釈は'Details'を参照のこと。
<code>NA</code> の値をテーブルに含めるかどうか。  省略可能。
結果の次元に与える名前 (<em>dimnames names</em>) を指定します。
デフォルトの<code>dnn</code>がどのように構成されるかを制御します。  詳細'を参照してください。
任意の<span style="font-family：courier new, Courier; color：</span>オブジェクト、または<code>as.data.frame</code>メソッド用のクラス<code>"table"</code>を継承したオブジェクトです。<code>as.data.frame.table(x,*)</code>は、<code>array</code>を "reshaping "するために、テーブルでない<code>x</code>に対して明示的に呼び出されることに注意して下さい。
データフレームの行名を指定する文字ベクトル。
テーブルエントリの列に使用される名前、通常はカウント。
論理: 分類因子は因子(デフォルト)として返すべきか、文字ベクトルとして返すべきか。
<code>provideDimnames</code> に渡されます。
(<code>warnings()</code>の)<code>cat</code>に渡される引数。
<code>warnings()</code>が返す<code>"warnings"</code>オブジェクト。
<code>"warnings"</code>または<code>"summary.warnings"</code>オブジェクト。
もし<code>missing</code>でなければ、<code>x</code>と同じ<code>長さの<code>文字</code>ベクトル。  デフォルトは <code>paste0(seq_len(n), ": ")</code> for<i>n &gt;= 2</i> where <code>n &lt;- length(x)</code>.
文字列<code>cat()</code>は、メッセージがプリントされる前に出力されます。
文字に強制することができる0個以上のオブジェクト(そして、それらはセパレータなしで一緒に貼り付けられます)、または(<code>message</code>のためだけの)単一の条件オブジェクト。
<code>gettext</code> を参照。  <code>NA</code> の場合、メッセージは翻訳されません。
logical:文字列として与えられたメッセージは改行されるべきか？
評価する式を指定します。
文字で、どのクラスのメッセージが抑制されるべきかを示します。
文字に強制できる0個以上のオブジェクト(セパレータなしで一緒に貼り付けられる)、または(<code>message</code>の場合のみ)単一の条件オブジェクト。
<code>gettext</code> を参照。  <code>NA</code> の場合、メッセージは翻訳されません。
logical:文字列として与えられたメッセージは改行されるべきか？
評価する式を指定します。
文字で、どのクラスのメッセージが抑制されるべきかを示します。
characterに強制できる0個以上のオブジェクト（区切り文字なしで一緒に貼り付けられる）、または単一の条件オブジェクト。
論理。その呼び出しが警告メッセージの一部になるかどうかを示す。
論理的に、<code>getOption("warn") &lt;= 0</code>であっても、呼び出しを直ちに出力すべきかどうかを示す。
論理的で、<code>options(warn = 1)</code>のとき、可能な限りメッセージを1行として出力すべきであることを示す。
評価する式。
<code>gettext</code> を参照のこと。  <code>NA</code> の場合、メッセージは翻訳されません。
文字で、どのクラスの警告を抑制すべきかを示す。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式。
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
追加の引数。
SVD 分解が計算される数値行列または複素行列。  論理行列は，強制的に数値に変換されます．
これは <code>0</code> から <code>n = nrow(x)</code> の間でなければなりません。
これは <code>0</code> から <code>p = ncol(x)</code> の間でなければなりません。
論理的でなければならない。  無効でエラー。
行列を含む配列。
<code>x</code> が名前付き dimnames を持つ場合、次元名を選択する文字ベクトルでもよい。
掃き出す要約統計量。
掃引を実行するために使用される関数。
を論理的に指定します。  <code>TRUE</code>（デフォルト）の場合、<code>STATS</code>の長さまたは次元が<code>x</code>の指定された次元と一致しない場合に警告する。  <code>FALSE</code>に設定すると、次元が一致することが<em>わかっている</em>場合に、わずかな速度向上が得られる。
<code>FUN</code> のオプション引数。
数値または文字列を評価する式。
選択肢のリスト。  もし<code>EXPR</code>が文字列の値を持つことを意図しているならば、おそらくは'default'値として使われる1つの選択肢を除いて、これらは命名されるでしょう。
非負の場合はフレーム番号、負の場合は遡るフレーム数。
遡る世代数。  (「詳細」セクションを参照)
負でない場合はフレーム番号、負の場合は遡るフレーム数。
遡る世代数。  (「詳細」セクションを参照)
単一のパス名を含む文字ベクトル。  Tildeexpansion(<code>path.expand</code>参照)が行われます。
ファイルまたはディレクトリのパスを含む文字ベクトル。  Tildeexpansion（<code>path.expand<//code>を参照）が実行されます。
logical; 失敗時の警告を表示するか。
論理的。last以外のパスの要素を作成すべきか。  trueの場合、Unixコマンド<code>mkdir -p</code>のようになる。
Unix-alike で使われるモード: <code>as.octmode</code> によって強制される。  <code>Sys.chmod</code>では、<code>paths</code>に沿ってリサイクルされる。
論理: モードが<code>umask</code>設定によって制限されるべきか。
非負ならフレーム番号、負なら遡るフレーム数。
遡る世代数。  (「詳細」セクションを参照)
非負の場合はフレーム番号、負の場合は遡るフレーム数。
遡る世代数。  (「詳細」セクションを参照)
非負の場合はフレーム番号、負の場合は遡るフレーム数。
遡る世代数。  (「詳細」セクションを参照)
文字ベクトル、または <code>NULL</code>.
文字列。
論理: 結果に名前を付けるか。  <code>NA</code> (デフォルト) の場合、単一要素の結果には名前が付けられないが、複数要素の結果には名前が付けられる。
文字列。  以下のカテゴリは常にサポートされるべきである：<code>"LC_ALL"</code>、<code>"LC_COLLATE"</code>、<code>"LC_CTYPE"</code>、<code>"LC_MONETARY"</code>、<code>"LC_NUMERIC"</code>、<code>"LC_TIME"</code>。  (Windowsではない)システムによっては、<code>"LC_MESSAGES"</code>、<code>"LC_PAPER"</code>、<code>"LC_MEASUREMENT"</code>もサポートする。
文字列。  使用中のシステムで有効なロケール名。  通常、<code>""</code>(デフォルト)はシステムのデフォルトロケールを使用する。
相対パスまたは絶対パスのパターンを表す文字ベクトル。  欠落した値は無視されます。
論理: まだ <code>/</code> で終わっていない pattern からディレクトリへのマッチには、スラッシュを付加する必要がありますか?  すべてのプラットフォームでサポートされるとは限りません。
オブジェクト

から要素を抽出する。
<code>"row.names"</code>属性を持つ、典型的にはデータフレーム。
通常はS3またはS4クラス。
パッケージの'<span class="file">DESCRIPTION</span>'ファイルへのフルパス。
lazyload データベースへのファイルパス。
<span style="font-family：font-family: Courier New, Courier; color：#または、<code>NULL</code>となります。  デフォルト値の<code>NULL</code>は、現在<code>.libPaths()</code>で知られているすべてのライブラリに対応します。
を論理的に指定します。  パッケージが見つからない場合、警告やエラーを出すべきではないか?
論理的です。  <code>Imports</code> フィールドを処理すべきか?
論理的: メッセージを表示すべきか。
<code>"packageDescription2"</code> クラスの '<span class="file">DESCRIPTION</span>' ファイル。
<code>"cpu-vendor-os"</code>形式のプラットフォーム文字列。
保存またはロードする画像ファイルの名前。
整数。  現在、<code>type = 0</code>は内部の<code>"row.names"</code>属性(<code>NULL</code>の可能性もある)を返し、<code>type = 2</code>は属性が意味する行数を返し、<code>type = 1</code>は'自動'行名を負符号で返す。
整数。  行数。
<code>"package:MASS"</code> のような文字列。
lazyloadデータベースのオブジェクト名。
論理: データベースの値が圧縮されているか。
ロードフック: <code>unserialize</code>を参照。
長さ1の整数ベクトル。
インデックス。
論理的な値です。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
クラスに入れるクラスレス・オブジェクト。
オプションのタイムゾーン。
デフォルト・クラスを<em>含む</em>クラスのオプションの文字ベクトル。
<code>difftime</code> を参照のこと。
ドット名でないバージョンに渡される引数。
整数。
<em>same</em> オブジェクトの文字ベクトル。
マスクされるパッケージを示す文字列。
<em>by</em><code>pkg</code>か、(<code>by = FALSE</code>)<code>pkg</code>からマスクされるかを示す論理値。
非負の場合はフレーム番号、負の場合は遡るフレーム数。
遡る世代数。  (「詳細」セクションを参照)。
非負の場合はフレーム番号、負の場合は遡るフレーム数。
遡る世代数。  (「詳細」セクションを参照)
非負の場合はフレーム番号、負の場合は遡るフレーム数。
遡る世代数。  (「詳細」セクションを参照)
非負の場合はフレーム番号、負の場合は遡るフレーム数。
遡る世代数。  (「詳細」セクションを参照)。
ファイルパスの文字ベクトル。  <code>path.expand</code>を参照。
オブジェクト

から要素を抽出する。
<code>"row.names"</code>属性を持つ、典型的にはデータフレーム。
通常はS3またはS4クラス。
パッケージの'<span class="file">DESCRIPTION</span>'ファイルへのフルパス。
lazyload データベースへのファイルパス。
<span style="font-family：font-family: Courier New, Courier; color：#または、<code>NULL</code>となります。  デフォルト値の<code>NULL</code>は、現在<code>.libPaths()</code>で知られているすべてのライブラリに対応します。
を論理的に指定します。  パッケージが見つからない場合、警告やエラーを出すべきではないか?
論理的です。  <code>Imports</code> フィールドを処理すべきか?
論理的: メッセージを表示すべきか。
<code>"packageDescription2"</code> クラスの '<span class="file">DESCRIPTION</span>' ファイル。
<code>"cpu-vendor-os"</code>形式のプラットフォーム文字列。
保存またはロードする画像ファイルの名前。
整数。  現在のところ、<code>type = 0</code>は内部の<code>"row.names"</code>属性(<code>NULL</code>の可能性もある)を返し、<code>type = 2</code>は属性が意味する行数を返し、<code>type = 1</code>は'自動'行名を負符号で返す。
整数。  行数。
<code>"package:MASS"</code> のような文字列。
lazyloadデータベースのオブジェクト名。
論理: データベースの値が圧縮されているか。
ロードフック: <code>unserialize</code>を参照。
長さ1の整数ベクトル。
インデックス。
論理的な値です。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
クラスに入れるクラスレス・オブジェクト。
オプションのタイムゾーン。
デフォルト・クラスを<em>含む</em>クラスのオプションの文字ベクトル。
<code>difftime</code> を参照のこと。
ドット名でないバージョンに渡される引数。
整数。
<em>same</em> オブジェクトの文字ベクトル。
マスクされるパッケージを示す文字列。
<em>by</em><code>pkg</code>か、(<code>by = FALSE</code>)<code>pkg</code>からマスクされるかを示す論理値。
文字列と同じ値を持つ名前付き引数。
文字ベクトル、または文字に保型可能なオブジェクト。
ファイルやディレクトリのパスを含む文字ベクトル。
<code>"POSIXct"</code>クラスの日付時刻、または、それに強制されるオブジェクト。  秒の端数は無視される。  <code>パスに沿って再利用される。
文字列。  以下のカテゴリは常にサポートされるべきである：<code>"LC_ALL"</code>、<code>"LC_COLLATE"</code>、<code>"LC_CTYPE"</code>、<code>"LC_MONETARY"</code>、<code>"LC_NUMERIC"</code>、<code>"LC_TIME"</code>。  (Windowsではない)システムによっては、<code>"LC_MESSAGES"</code>、<code>"LC_PAPER"</code>、<code>"LC_MEASUREMENT"</code>もサポートする。
文字列。  使用中のシステムで有効なロケール名。  通常は<code>""</code>（デフォルト）がシステムのデフォルトロケールを拾う。
実行を一時停止する時間間隔を秒単位で指定する。
読み込むファイルを指定する文字列。
<span style="font-family：から読み込むファイルの名前を示す文字列：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクトから読み込むファイルを指定する文字列。  デフォルト値の<code>NULL</code>は、ベース環境での評価に対応します。  通常、明示的な<code>envir</code>引数を与えるべきです。
もし <code>TRUE</code> なら、<span style="font-family：クーリエ・ニュー、クーリエ; color：もし<code>TRUE</code>なら、<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>の作業ディレクトリを<code>file<//code>を含むディレクトリに変更する。
を含むディレクトリに変更される。  もし<code>TRUE</code>なら、関数はコメントを含むソースを保持します。詳細は<code>options(keep.source = *)</code> を参照してください。
を参照してください。  <code>TRUE</code> かつ <code>keep.source</code> も <code>TRUE</code> の場合、関数は解析データをソースと共に保持します。
<span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 式の評価中にトップレベルとして使用する環境。  この引数はパッケージテストを実行するフレームワークで有用です。
非負の場合はフレーム番号、負の場合は遡るフレーム数。
遡る世代数。  (詳細」セクションを参照）。
logical: defunct: 無視され、偽の値には警告が表示される。
使用するタイムゾーンデータベース: デフォルトでは、既知の場所を見つかるまで試します。
単一のパス名を含む文字ベクトル。  Tildeexpansion(<code>path.expand<//code>を参照)が行われる。
ファイルまたはディレクトリのパスを含む文字ベクトル。  Tildeexpansion（<code>path.expand<//code>を参照）が実行される。
logical; 失敗時の警告を表示するか。
論理的。last以外のパスの要素を作成すべきか。  trueの場合、Unixコマンド<code>mkdir -p</code>のようになる。
Unix-alike で使われるモード: <code>as.octmode</code> によって強制されます。  <code>Sys.chmod</code>では、<code>paths</code>に沿ってリサイクルされる。
論理: モードが<code>umask</code>設定によって制限されるべきか。
文字列と同じ値を持つ名前付き引数。
文字ベクトル、または文字に保型されたオブジェクト。
実行可能なファイル名またはパスの文字ベクトル。
文字列として、呼び出されるシステムコマンド。
コマンドの出力を<span style="font-family：color：font-family: Courier New, Courier; "color: #666666;"><b>R</b></span> 文字ベクトル。
<span class="file">stdout</span>' と '<span class="file">stderr</span>' のどちらに書き込まれたメッセージを無視するかを示す論理 (<code>NA</code> ではない)。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> インタープリターがコマンドの終了を待つか、非同期に実行するかを指定します。  <code>intern = TRUE</code>の場合、これは無視されます（インタプリタは常に待ちます）。コマンドを非同期に実行する場合、Windowsの<code>Rgui</code>コンソールに出力は表示されません（代わりにドロップされます）。
文字ベクトルが供給された場合、これは1行に1文字ずつ一時ファイルにコピーされ、<code>command</code>の標準入力はそのファイルにリダイレクトされます。
これは、<code>command</code>を別プロセスで実行した場合の経過時間の制限です。  秒未満の端数は無視されます。
Windowsでは使用できるが、このプラットフォームでは無視される引数。
パッケージ内のサブディレクトリとファイルを指定する文字ベクトル。  デフォルトのnoneはパッケージのルートを返します。  ワイルドカードはサポートされていません。
複数のパッケージ名を指定するとエラーになります。
<span style="font-family：font-family: Courier New, Courier; color：#デフォルト値の<code>NULL</code>の意味については「詳細」を参照してください。
を参照してください。  <code>TRUE</code>の場合、一致するファイルがなければエラーとなる。
有効な<span style="font-family：color."><span style="font-family: Courier New, Courier;""color：有効な<span style="font-family: Courier New; color: #666666;"><b>R</b></span> 式。
Logical - タイミングの直前にガベージコレクションを実行するか。  デフォルトは <code>TRUE</code> です。
文字列として、呼び出されるシステム・コマンド。
<code>command</code> への引数の文字ベクトル。
<span class="file">stdout</span>'または'<span class="file">stderr</span>'への出力をどこに送るか。  取り得る値は <code>""</code>, <span style="font-family：クーリエ・ニュー、クーリエ; color：<span style="font: Courier New, Courier; color: #666666;"><b>R</b></span> コンソール (デフォルト)、<code>NULL</code> または <code>FALSE</code> (出力を破棄)、<code>TRUE</code> (出力を文字ベクタに取り込む)、またはファイル名を指定する文字列です。
入力は流用されるべきか？  <code>""</code> はデフォルトを意味し、代わりにファイル名を示す文字列を指定します。  <code>input</code> が与えられた場合は無視されます。
文字ベクトルが与えられた場合、これは1行に1文字ずつ一時ファイルにコピーされ、<code>command</code>の標準入力はそのファイルにリダイレクトされます。
環境変数を設定する名前=値文字列の文字ベクトル。
<span style="font-family：color：  <code>stdout = TRUE</code>または<code>stderr = TRUE</code>の場合、これは無視されます（インタプリタは常に待機します）。コマンドを非同期に実行する場合、Windowsの<code>Rgui</code>コンソールには出力が表示されません（代わりにドロップされます）。
これは、<code>command</code>を別プロセスで実行した場合の経過時間の制限です。   秒未満の端数は無視されます。
Windowsでは受け入れられるが、このプラットフォームでは無視される引数。
行列またはデータフレーム。
Double値はintegerに強制されます。1以外の長さの引数を与えるとエラーになります。
強制またはテストされるオブジェクト。
他のメソッドに渡される、あるいは他のメソッドから渡されるさらなる引数。
行列またはデータフレーム。
行列またはデータフレーム。
因子（文字列を含む）として解釈できる1つ以上のオブジェクト、またはそのように解釈できる要素を持つリスト（またはデータフレーム）。  (<code>as.table</code>の場合は、特定のメソッドに渡される引数; <code>as.data.frame</code>の場合は、未使用)
<code>...</code>内の全ての因子に対して削除する水準を指定する。  <code>NA</code>を含まず、<code>useNA</code>が指定されていない場合、<code>useNA = "ifany"</code>を意味する。  非要素引数に対する解釈は'Details'を参照のこと。
<code>NA</code> の値をテーブルに含めるかどうか。  省略可能。
結果の次元に与える名前 (<em>dimnames names</em>) を指定します。
デフォルトの<code>dnn</code>がどのように構成されるかを制御します。  詳細'を参照してください。
任意の<span style="font-family：courier new, Courier; color：</span>オブジェクト、または<code>as.data.frame</code>メソッド用のクラス<code>"table"</code>を継承したオブジェクトです。<code>as.data.frame.table(x,*)</code>は、<code>array</code>を "reshaping "するために、テーブルでない<code>x</code>に対して明示的に呼び出されることに注意して下さい。
データフレームの行名を指定する文字ベクトル。
テーブルエントリの列に使用される名前、通常はカウント。
論理: 分類因子は因子(デフォルト)として返すべきか、文字ベクトルとして返すべきか。
<code>provideDimnames</code> に渡されます。
(正の整数の)数値ベクトル、または因子。長いベクトルもサポートされます。
使用するビンの数。
数値ベクトルまたは複素数ベクトル。
数値ベクトルまたは複素数ベクトル
数値ベクトルまたは複素ベクトル。
<span style="font-family：font-family: Courier New, Courier; color：<code>split</code> メソッドが存在する <span style="font-family: Courier New; color: #666666;"><b>R</b></span> オブジェクト。  典型的にはベクトル的で、<code>[</code>でサブセットすることができます。
1つ以上の<code>factor</code>の<code>list</code>は、それぞれ<code>X</code>と同じ長さです。  要素は<code>as.factor</code>によってfactorに強制されます。
<code>+</code>、<code>%*%</code>などの関数の場合、関数名はバッククォートか引用符で囲む必要があります。  <code>FUN</code>が<code>NULL</code>の場合、tapplyは、通常<code>tapply</code>が生成する多方向配列の添字に使用できるベクトルを返す。
<code>FUN</code> のオプション引数: Noteセクション。
(配列への単純化の場合のみ)配列が<code>array(default, dim = ..)</code>として初期化される値。  <span style="font-family：courier new, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 3.4.0以前では、これは<code>array()</code>のデフォルト<code>NA</code>にハードコードされていました。  もし<code>NA</code> (デフォルト)であれば、例えば<code>NA_real_</code>のような欠損値が選択されます(<code>"raw"</code>の場合は<code>as.raw(0)</code>)。  数値の場合は、<code>FUN(integer(0))</code>に、例えば、<code>FUN = sum</code>の場合は<code>0</code>または<code>0L</code>に設定される。
論理; もし <code>FALSE</code> なら、<code>tapply</code> は常にモード <code>"list"</code>の配列を返します; 言い換えれば、<code>dim</code>属性を持つ<code>list</code>です。  もし <code>TRUE</code> (デフォルト) なら、もし <code>FUN</code> が常にスカラを返すなら、 <code>tapply</code> はスカラのモードを持つ配列を返す。
これは、各要素が、コールバック関数である<code>"f"</code>という要素と、コールバックが呼び出されたときにコールバックに供給される5番目の引数である<code>"data"</code>というオプション要素を持つリストであるコールバックのリストであることができます。通常、この引数は指定されず、マネージャが作成された後にコールバックを登録するために<code>add</code>を使用します。
<code>evaluate</code>関数が内部タスクコールバックメカニズムに既に登録されているかどうかを示す論理値。これは通常<code>FALSE</code>であり、<code>add</code>関数によって初めてコールバックが追加されたとき、<code>evaluate</code>関数は自動的に登録される。この引数に<code>TRUE</code>を指定し、手動で<code>addTaskCallback</code>を呼び出すことによって、関数が登録されるタイミングを制御することができる。
もし<code>TRUE</code>であれば、このディスパッチ・マネージャが実行する特定のアクティビティに関する情報がコンソールに出力されます。これはコールバックやハンドラ自体のデバッグに便利です。
数値または複素行列（またはベクトル）：<code>y = NULL</code> は <code>x</code> と同じ行列とみなされます。  ベクトルは、文脈に応じて、1列または1行の行列に昇格します。
名前の最初の部分を与える空でない文字ベクトル。
ディレクトリ名を与える空でない文字ベクトル
ファイル拡張子を指定する空でない文字ベクトル
<code>tmpdir()</code>がチェックされ、有効でなくなった場合に再作成されるべきかどうかを示す<code>logical</code>。
名前の最初の部分を与える空でない文字ベクトル。
ディレクトリ名を指定する空でない文字ベクトル
ファイル拡張子を指定する空でない文字ベクトル
<code>tmpdir()</code>がチェックされ、有効でなくなった場合に再作成されるべきかどうかを示す<code>logical</code>。
文字。  接続の説明。入力の場合、これは<span style="font-family：(フォント名: Courier New, Courier; color：#出力接続の場合は、<span style="font-family：font-family: Courier New, Courier; color：<span style="font: Courier New, Courier; "color: #666666;"><b>R</b></span>文字ベクトルオブジェクトの名前。
文字列。  入力接続の場合は<code>"r"</code>（または同等に<code>""</code>）、出力接続の場合は<code>"w"</code>または<code>"a"</code>のいずれか。
論理的。  出力接続にのみ使用される。  <code>TRUE</code> の場合、出力は呼び出し環境の変数に代入される。  それ以外の場合は、グローバル環境が使用される。
接続名を指定する <code> 文字列。
文字列、部分一致。  入力接続にのみ使用される。  <code>object</code>で指定された文字列は、現在のロケールに変換されるか、バイト単位で使用されるか、UTF-8に変換されます。
出力テキスト接続。
文字。  入力の場合、これは<span style="font-family：font-family: Courier New, Courier; color：入力の場合、これは<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>文字ベクトル・オブジェクトであり、出力接続の場合は<span style="font-family：font-family: Courier New, Courier; color：<span style="font: Courier New, Courier; "color: #666666;"><b>R</b></span>文字ベクトルオブジェクトの名前。
文字列。  入力接続の場合は<code>"r"</code>（または同等に<code>""</code>）、出力接続の場合は<code>"w"</code>または<code>"a"</code>のいずれか。
論理的。  出力接続にのみ使用される。  <code>TRUE</code> の場合、出力は呼び出し環境の変数に代入される。  それ以外の場合は、グローバル環境が使用される。
接続名を指定する <code> 文字列。
文字列、部分一致。  入力接続にのみ使用される。  <code>object</code>で指定された文字列は、現在のロケールに変換されるか、バイト単位で使用されるか、UTF-8に変換されます。
出力テキスト接続。
文字ベクトル、または<code>as.character</code>によって文字に強制できるオブジェクト。
翻訳される文字を指定する文字列。  長さが2以上の文字ベクトルが与えられた場合、警告とともに最初の要素が使用されます。
翻訳を指定する文字列。長さが2以上の文字ベクトルが与えられた場合、警告とともに最初の要素が使用される。
論理: 大文字または小文字に変換しますか?
環境。
他の条件が満たされる前にこの環境がマッチした場合、この環境を返します。  デフォルトのオプション<span class="samp">topLevelEnvironment</span>は、<code>sys.source</code>によって設定され、特定の環境をトップレベル環境として扱います。引数に<code>NULL</code>または<code>emptyenv()</code>を指定すると、決してマッチしません。
変換されるオブジェクト。
最大フィールド幅の提案。  <code>NULL</code>または<code>0</code>の値は、最大値がないことを示します。
メソッドに渡される、またはメソッドから渡されるオプション引数。
変換されるオブジェクト。
最大フィールド幅の提案。  <code>NULL</code>または<code>0</code>の値は、最大値がないことを示します。
メソッドに渡される、またはメソッドから渡されるオプションの引数。
文字ベクトル、または<code>as.character</code>によってcharacterに強制できるオブジェクト。
翻訳される文字を指定する文字列。  長さが2以上の文字ベクトルが与えられた場合、警告とともに最初の要素が使用されます。
翻訳を指定する文字列。長さが2以上の文字ベクトルが与えられた場合、警告とともに最初の要素が使用される。
論理: 大文字か小文字に変換しますか?
トレースまたはアントレースされる関数の名前、場合によっては<code>quote()</code>d。  <code>untrace</code>や、複数の引数を持つ<code>trace</code>では、引用符で複数の名前を指定することができ、それぞれに同じアクションが適用されます。  名前空間内のS3メソッドのような "隠された "関数では、<code>where = *</code>を指定する必要があります。
には、関数か評価されない式を指定します。  関数が呼び出されるか、式が評価されるかは、呼び出しの最初か、引数<code>at</code>で指定された呼び出しのステップの前になります。
<code>function</code> または評価されない式のいずれか。  詳細セクションを参照してください。
オプションの数値ベクトルまたはリスト。  詳細セクションを参照して下さい。
<code>TRUE</code> (デフォルト) の場合、トレース式が評価される前に説明行が表示されます。
 この引数が与えられた場合、関数<code>what</code>のメソッドのシグネチャでなければなりません。  この場合、メソッドがトレースされ、関数自体はトレースされません。
 関数内のループをトレースするような複雑なトレースでは、関数本体を編集して、必要な呼び出しを挿入する必要があります。  その場合、<code>edit</code>引数に<code>TRUE</code>か、使用したいエディタ名を指定します。  そうすると、<code>trace()</code>は<code>edit</code>を呼び出し、あなたが編集した後のバージョンの関数を使用します。  詳細については、詳細セクションを参照してください。
デフォルトでは、<code>trace</code>の呼び出しのトップレベル環境です。

この引数の重要な使用法は、"隠された "または別のパッケージから呼び出されたパッケージの関数をトレースすることです。名前空間機構は呼び出される関数をインポートします(ベースパッケージの関数は例外です)。  呼び出される関数は、<em>トップ・レベルから見たオブジェクトとは<em>異なります（一般的に、インポートされたパッケージはアタッチされていないかもしれません）。  これを行う方法は、引数<code>where</code>を名前空間(またはその名前空間)内の関数に設定することです。  トレースの計算は、その関数の環境(対応するパッケージの名前空間になる)を探し始めます。(そう、微妙ですが、ここでのセマンティクスは、<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> でのハウネスペースの動作の中心です)。
論理; サポート関数 <code>tracingState</code> への呼び出しは、トレーシングがグローバルにオンになっていれば <code>TRUE</code>、そうでなければ <code>FALSE</code> を返します。  これらの値のどちらか一方の引数が状態を設定します。  トレース状態が <code>FALSE</code> の場合、トレースアクションは実際に発生しません (例えば、デバッグ中にトレースを停止するためにデバッグ関数によって使用されます)。
<code>expr</code>は、トレースアクション（<code>browser()</code>への呼び出しなど）であり、<code>msg</code>は、トレースアクションが発生する場所を特定する文字列です。
<code>returnValue</code>が戻り値を見つけられない場合(例えば、エラーや再起動、呼び出し元関数からの戻りを評価した結果、関数が終了した場合)、代わりに<code>default</code>を返します。
<code>NULL</code>（デフォルト、<code>.Traceback</code>を意味する）、または現在のスタックでスキップする呼び出しの整数カウント、または呼び出しのリストまたはペアリストを返します。  詳細を参照のこと。
数値で、<em>呼び出しごとに</em>表示される行の最大数を指定します。  デフォルトは無制限である。  <code>x</code> が <code>NULL</code>の場合、<code>list</code>の場合、または<code>pairlist</code>の場合のみ適用されます。
関数や環境や <code>NULL</code> ではなく、R オブジェクト。
<code>tracemem</code> または <code>retracemem</code> によって返される値。
<code>quote()</code>dは、トレースまたはアントレースされる関数の名前。  <code>untrace</code>の場合、または、複数の引数を持つ<code>trace</code>の場合、引用符で複数の名前を指定することができ、それぞれに同じアクションが適用されます。  名前空間内のS3メソッドのような "隠された "関数では、<code>where = *</code>を指定する必要があります。
には、関数か評価されない式を指定します。  関数が呼び出されるか、式が評価されるかは、呼び出しの最初か、引数<code>at</code>で指定された呼び出しのステップの前になります。
<code>function</code> または評価されない式のいずれか。  詳細セクションを参照してください。
オプションの数値ベクトルまたはリスト。  詳細セクションを参照して下さい。
<code>TRUE</code> (デフォルト) の場合、トレース式が評価される前に説明行が表示されます。
 この引数が与えられた場合、関数<code>what</code>のメソッドのシグネチャでなければなりません。  この場合、メソッドがトレースされ、関数自体はトレースされません。
 関数内のループをトレースするような複雑なトレースでは、関数本体を編集して、必要な呼び出しを挿入する必要があります。  その場合、<code>edit</code>引数に<code>TRUE</code>か、使用したいエディタ名を指定します。  そうすると、<code>trace()</code>は<code>edit</code>を呼び出し、あなたが編集した後のバージョンの関数を使用します。  詳細については、詳細セクションを参照してください。
デフォルトでは、<code>trace</code>の呼び出しのトップレベル環境です。

この引数の重要な使用法は、"隠された "または別のパッケージから呼び出されたパッケージの関数をトレースすることです。名前空間機構は呼び出される関数をインポートします(ベースパッケージの関数は例外です)。  呼び出される関数は、<em>トップ・レベルから見たオブジェクトとは<em>異なります（一般的に、インポートされたパッケージはアタッチされていないかもしれません）。  これを行う方法は、引数<code>where</code>を名前空間(またはその名前空間)内の関数に設定することです。  トレースの計算は、その関数の環境(対応するパッケージの名前空間になる)を探し始めます。(そう、微妙ですが、ここでのセマンティクスは、<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>におけるハウネスペースの動作の中心です)。
論理; サポート関数 <code>tracingState</code> の呼び出しは、トレーシングがグローバルにオンになっていれば <code>TRUE</code>を、そうでなければ <code>FALSE</code>を返します。  これらの値のどちらか一方の引数が状態を設定します。  トレース状態が <code>FALSE</code> の場合、トレースアクションは実際に発生しません (例えば、デバッグ中にトレースを停止するためにデバッグ関数によって使用されます)。
<code>expr</code>は、トレースアクション（<code>browser()</code>への呼び出しなど）であり、<code>msg</code>は、トレースアクションが発生する場所を特定する文字列です。
<code>returnValue</code>が戻り値を見つけない場合（例えば、エラー、再起動、または呼び出し元関数からの戻りを評価した結果、関数が終了した場合）、代わりに<code>default</code>を返します。
変換されるオブジェクト
<code>tag=value</code> 形式のさらなる引数
変換されるオブジェクト
<code>tag=value</code> 形式のさらなる引数
変換されるオブジェクト
<code>tag=value</code> 形式のさらなる引数
非負の数値ベクトル。
数値ベクトル。
整数ベクトル。
文字ベクトル
先頭と末尾の両方の空白を除去するか(デフォルト)、 先頭のみ(<code>"left"</code>)か末尾のみ(<code>"right"</code>)かを指定する文字列。  省略可能。
空白文字 "にマッチする正規表現を指定する文字列。
数値ベクトル。  または、<code>round</code> と <code>signif</code> の場合は、複素数ベクトル。
小数点以下の桁数(<code>round</code>)または有効桁数(<code>signif</code>)を示す整数。
メソッドに渡す引数。
<code>"POSIXt"</code> または <code>"Date"</code> を継承したオブジェクト。
記載されている単位のいずれか。  省略可能。
特に <code>round</code> の <code>digits</code> がそうです。
<code>"POSIXt"</code> または <code>"Date"</code> を継承したオブジェクト。
記載されている単位の一つ。  省略可能。
特に<code>round</code>では<code>digits</code>となります。
接続。
数値。  ファイル位置（<code>origin</code>で指定された起点からの相対位置）、または <code>NA</code>.
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
文字列。  <code>"start"</code>, <code>"current"</code>,<code>"end"</code>のいずれか: '詳細'を参照。
他のメソッドに渡される引数、または他のメソッドから渡される引数。
接続。
数値。  ファイル位置 (<code>origin</code> で指定されたオリジンからの相対位置) または <code>NA</code>.
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
文字列。  <code>"start"</code>, <code>"current"</code>,<code>"end"</code>のいずれか: '詳細'を参照。
他のメソッドに渡される、または他のメソッドから渡される引数。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 式を試す。
logical: エラーメッセージの報告を抑制するか。
(<code>cat(*, file = outFile)</code>で)表示するファイル名を指定する文字列。デフォルトでは、<code>silent</code>がfalseの場合のみ使用されます。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式。
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
追加の引数。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式。
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
詳細は以下を参照。
詳細は以下を参照のこと：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
a <span style="font-family：オブジェクト：<span style="font: Courier New, Courier; "color: #666666;"><b>R</b></span> オブジェクト。
クラスを指定する文字ベクトル。  <code>value</code> には <code>NULL</code> を指定することもできます。
戻り値に影響を与える論理: '詳細'を参照。
解釈される <span style="font-family：font-family: Courier New, Courier; color：font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 関数。
ブラウザ入力時に取得できるテキスト文字列。
ブラウザが入力されたときに取得できる条件。
オプションのメソッド・シグネチャ。指定された場合、メソッドはジェネリックではなくデバッグされます。
サポート関数<code>debuggingState</code>の呼び出しは、デバッグがグローバルにオンになっていれば<code>TRUE</code>を返し、そうでなければ<code>FALSE</code>を返します。  これらの値のどちらか一方の引数は、状態を設定します。  デバッグ状態が<code>FALSE</code>の場合、デバッグ動作は何も起こりません（しかし、関数内の明示的な<code>ブラウザ</code>呼び出しは動作し続けます）。
(同じモードの)ベクタは、重複する値のない(概念的な)アイテムのシーケンスを含みます。
ベクトル、データフレーム、配列、<code>NULL</code>。
<code>FALSE</code>は特別な値で、全ての値が比較可能であることを意味し、デフォルト以外のメソッドで受け入れられる唯一の値かもしれません。  内部的には<code>x</code>と同じ型に強制されます。
つまり、同じ要素の最後(または右端)が保持されます。  これは<code>names</code>または<code>dimnames</code>に対してのみ重要である。
<code>duplicated</code>を参照。
特定のメソッドの引数。
固定される配列のマージン: 1つの整数。
ベクトル、データフレーム、配列、または <code>NULL</code>。
<code>FALSE</code>は特別な値で、全ての値が比較可能であることを意味し、デフォルト以外のメソッドで受け入れられる唯一の値かもしれません。  内部的には<code>x</code>と同じ型に強制されます。
つまり、同じ要素の最後(または右端)が保持されます。  これは<code>names</code>または<code>dimnames</code>に対してのみ重要です。
<code>duplicated</code>を参照。
特定のメソッドの引数。
固定される配列のマージン: 1つの整数。
ベクトル、データフレーム、配列、または <code>NULL</code>。
<code>FALSE</code>は特別な値で、全ての値が比較可能であることを意味し、デフォルト以外のメソッドで受け入れられる唯一の値かもしれません。  内部的には<code>x</code>と同じ型に強制されます。
つまり、同じ要素の最後の(または右端の)ものが保持されます。  これは<code>names</code>または<code>dimnames</code>に対してのみ重要です。
<code>duplicated</code>を参照。
特定のメソッドの引数。
固定される配列のマージン: 1つの整数。
ベクトル、データフレーム、配列、または <code>NULL</code>。
<code>FALSE</code>は特別な値で、全ての値が比較可能であることを意味し、デフォルト以外のメソッドで受け入れられる唯一の値かもしれません。  内部的には<code>x</code>と同じ型に強制されます。
つまり、同じ要素の最後(または右端)が保持されます。  これは<code>names</code>または<code>dimnames</code>に対してのみ重要である。
<code>duplicated</code>を参照。
特定のメソッドの引数。
固定される配列のマージン: 1つの整数。
ベクトル、データフレーム、配列、または <code>NULL</code>。
<code>FALSE</code>は特別な値で、全ての値が比較可能であることを意味し、デフォルト以外のメソッドで受け入れられる唯一の値かもしれません。  内部的には<code>x</code>と同じ型に強制されます。
つまり、同じ要素の最後(または右端)が保持されます。  これは<code>names</code>または<code>dimnames</code>に対してのみ重要である。
<code>duplicated</code>を参照。
特定のメソッドの引数。
固定される配列のマージン: 1つの整数。
<code>package_version</code>の場合は、代わりに<code>R.version</code>で得られるRversionオブジェクト。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理。
date-timeクラスの1つから出力または要約されるオブジェクト。
<code>format.POSIXct</code>に渡されます。
数値または<code>NULL</code>で、表示するエントリの最大数を指定します。  デフォルトでは、<code>NULL</code>の場合、<code>getOption("max.print")</code>が使用される。
計算の有効桁数: 最も重要でない時間単位を正確に表すのに十分な桁数でなければなりません。
他のメソッドから、または他のメソッドに渡される引数。
日時オブジェクト
日時オブジェクトまたは文字ベクトル。  (文字ベクトルは<code>as.POSIXct</code>によって変換されます)。
数値ベクトル(秒単位)
<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>のいずれか。
(<code>warnings()</code>の)<code>cat</code>に渡される引数。
<code>warnings()</code>が返す<code>"warnings"</code>オブジェクト。
<code>"warnings"</code>または<code>"summary.warnings"</code>オブジェクト。
もし<code>missing</code>でなければ、<code>x</code>と同じ<code>長さの<code>文字</code>ベクトル。  デフォルトは <code>paste0(seq_len(n), ": ")</code> for<i>n &gt;= 2</i> where <code>n &lt;- length(x)</code>.
文字列<code>cat()</code>は、メッセージが表示される前に表示されます。
date-timeまたはdateオブジェクト。
主に<code>"POSIXlt"</code>オブジェクトで変換に使われるオプションのタイムゾーン指定。
文字列。  変換結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数、または他のメソッドから渡される引数。
date-time または date オブジェクト。
主に<code>"POSIXlt"</code>オブジェクトに使用されます。
文字列。  変換結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数、または他のメソッドから渡される引数。
date-time または date オブジェクト。
主に<code>"POSIXlt"</code>オブジェクトに使用されます。
文字列。  変換結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数、または他のメソッドから渡される引数。
date-time または date オブジェクト。
主に<code>"POSIXlt"</code>オブジェクトに使用されます。
文字列。  変換結果の単位。  省略可能。
文字列。  <code>units</code>と同じですが、省略はできません。
時間間隔を指定する文字列または数値。
<code>tim</code> の書式を指定する文字: <code>strptime</code> を参照。  デフォルトはロケール固有の時間フォーマットである。
クラス<code>"difftime"</code>を継承したオブジェクト。
他のメソッドに渡す引数、または他のメソッドから渡される引数。
(引数)
削除するファイル名やディレクトリ名を含む文字ベクトル。
論理的なもの。  ディレクトリを再帰的に削除するか？
論理的。  可能であれば）パーミッションを変更して、ファイルやディレクトリを削除できるようにするか。
論理的。ワイルドカード（以下の「詳細」を参照）やチルダ（<code>path.expand</code>を参照）を展開すべきか？
<span style="font-family：courier new, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト、通常はリストかベクトルです。
論理的です。  <code>x</code>のリスト構成要素にリスト解除を適用すべきか?
論理的。  名前を保存すべきか？
文字列または名前空間オブジェクト。
アタッチする位置を指定する整数。
<code>NULL</code> またはパッケージ内のオブジェクト <code>.Depends</code> に記録される依存関係の文字ベクトル。
ロードするパッケージ/名前空間を指定する文字列。
ライブラリ検索パスを指定する文字ベクトル。
パッケージインストール時以外は無視されます。
パッケージのインストール中以外は無視されます。
trueを指定すると、コードを読み込んだ直後に停止します。
<code>NULL</code> またはバージョン指定 (<code>op</code> と <code>version</code> を含むリスト)。
logical: 進捗メッセージやエラーメッセージを抑制するか。
文字列または'名前', <code>as.symbol</code>を参照。
文字ベクトル; <code>library</code> を参照。
<code>loadNamespace</code> に渡す引数。
環境。
バインディングをロックするかどうかを指定する論理。
名前オブジェクトまたは文字列。
引数を0個または1個取る関数。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
logical; true の場合、<code>data.frame</code> からも <code>dimnames</code> (名前とローネーム) が削除されます。
<span style="font-family：Courier New, Courier; color：</b>R</b></span>オブジェクトをシリアライズします。
(<code>serialize</code>の場合)<code>NULL</code>または(<code>unserialize</code>の場合)生のベクトル(「詳細」を参照)。
論理。  <code>TRUE</code> または <code>NA</code> ならば ASCII 表現を、そうでなければ (デフォルト) バイナリ表現を書き込みます。
論理: バイナリ表現が使用される場合、ビッグエンディアンのもの(XDR)が使用されるべきか?
使用するワークスペース形式のバージョン。  <code>NULL</code>は現在のデフォルト・バージョン(3)を指定する。他にサポートされている値は、<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 1.4.0 から <span style="font-family：を<span style="font-family::Courier New, Courier; color：#666666;"><b>R</b></span> 3.5.0.
参照オブジェクトを扱うためのフック関数。
グループに分けられる値を含むベクトルまたはデータフレーム。
<code>as.factor(f)</code>がグループ化を定義するという意味での'factor'、またはそのような因子のリストで、それらの相互作用がグループ化に使われます。もし<code>x</code>がデータフレームであれば、<code>f</code>は、変数<code>g</code>で分割するための<code> ~ g</code>の形の式、またはより一般的には<code> ~ g1 + ... + gk</code>の形の式になります。<code> + gk</code> という形で、変数<code>g1</code>, ..., <code>gk</code>の相互作用によって分割されます。
(<code>f</code>が<code>factor</code>またはリストの場合)発生しないレベルを削除するかどうかを示す論理。
<code>x</code> の分割と互換性のあるベクトルまたはデータフレームのリスト。長さが一致しない場合はリサイクルが適用される。
<code>f</code> が <code>list</code> の場合に <code>interaction</code> に渡される文字列。
<code>f</code>がリストの場合、<code>interaction</code>に渡される。
さらにメソッドに渡される可能性のある引数。
<code>quote()</code>dは、トレースまたはアントレースされる関数の名前です。  <code>untrace</code>や、複数の引数を持つ<code>trace</code>では、引用符で囲まれた形式で複数の名前を指定することができ、それぞれに同じアクションが適用されます。  名前空間内のS3メソッドのような "隠された "関数では、<code>where = *</code>を指定する必要があります。
には、関数か評価されない式を指定します。  関数が呼び出されるか、式が評価されるかは、呼び出しの最初か、引数<code>at</code>で指定された呼び出しのステップの前になります。
<code>function</code> または評価されない式のいずれか。  詳細セクションを参照してください。
オプションの数値ベクトルまたはリスト。  詳細セクションを参照して下さい。
<code>TRUE</code> (デフォルト) の場合、トレース式が評価される前に説明行が表示されます。
 この引数が与えられた場合、関数<code>what</code>のメソッドのシグネチャでなければなりません。  この場合、メソッドがトレースされ、関数自体はトレースされません。
 関数内のループをトレースするような複雑なトレースでは、関数本体を編集して、必要な呼び出しを挿入する必要があります。  その場合、<code>edit</code>引数に<code>TRUE</code>か、使用したいエディタ名を指定します。  そうすると、<code>trace()</code>は<code>edit</code>を呼び出し、あなたが編集した後のバージョンの関数を使用します。  詳細については、詳細セクションを参照してください。
デフォルトでは、<code>trace</code>の呼び出しのトップレベル環境です。

この引数の重要な使用法は、"隠された "または別のパッケージから呼び出されたパッケージの関数をトレースすることです。名前空間機構は呼び出される関数をインポートします(ベースパッケージの関数は例外です)。  呼び出される関数は、<em>トップ・レベルから見たオブジェクトとは<em>異なります（一般的に、インポートされたパッケージはアタッチされていないかもしれません）。  これを行う方法は、引数<code>where</code>を名前空間(またはその名前空間)内の関数に設定することです。  トレースの計算は、その関数の環境(対応するパッケージの名前空間になる)を探し始めます。(そう、微妙ですが、ここでのセマンティクスは、<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> でのハウネスペースの動作の中心です)。
論理; サポート関数 <code>tracingState</code> への呼び出しは、トレーシングがグローバルにオンになっていれば <code>TRUE</code>を、そうでなければ <code>FALSE</code>を返します。  これらの値のどちらか一方の引数が状態を設定します。  トレース状態が <code>FALSE</code> の場合、トレースアクションは実際に発生しません (例えば、デバッグ中にトレースを停止するためにデバッグ関数によって使用されます)。
<code>expr</code>は、トレースアクション（<code>browser()</code>への呼び出しなど）であり、<code>msg</code>は、トレースアクションが発生する場所を特定する文字列です。
<code>returnValue</code>が戻り値を見つけられない場合（例えば、エラー、再起動、呼び出し元関数からの戻りを評価した結果、関数が終了した場合）、代わりに<code>default</code>を返します。
関数でも環境でも<code>NULL</code>でもないRオブジェクト。
<code>tracemem</code> または <code>retracemem</code> によって返される値。
文字列。  詳細'を参照。
文字列。  接続のオープン方法(最初にオープンする場合)。  指定可能な値についてはセクション 'モード' を参照のこと。
論理値。  ブロック」のセクションを参照。
想定するエンコーディングの名前。  エンコーディング」のセクションを参照。
論理値。  trueを指定すると、'raw'インターフェイスが使用され、 通常のファイルではない引数、例えばキャラクタデバイスなどに適している。  これは、テキストモードでの読み込みのためにオープンする際の 圧縮ファイルのチェックを抑制し、'ファイル'がシーク可能でない可能性があることを 保証する。
<code>c("default", "internal", "winet", "libcurl")</code>に部分的にマッチする文字列。
HTTPrequests で使用する HTTP ヘッダの名前付き文字ベクトル。  非 HTTP URL では無視されます。  <code>HTTPUserAgent</code> オプション (<code>options</code> を参照) から得られる <code>User-Agent</code> ヘッダは、自動的に最初のヘッダとして使われます。
0-9 の整数。  書き込み時に適用する圧縮の量を、なしから最大まで指定します。  <code>xzfile</code>の場合は負の値も指定できます: '圧縮'のセクションを参照してください。
数値: この接続で使用するタイムアウト(秒単位)。  OSによっては、非常に大きな値をゼロとして扱うことがあるので注意してください: しかし、POSIX標準では31日までの値をサポートしています。
オプションの文字ベクトル。現在TCPソケットでサポートされているのは<code>"no-delay"</code>のみである。
zip ファイル内のファイル名。
文字列。  ポートのホスト名。
整数。  TCP ポート番号。
論理。  ソケットをクライアントにするかサーバーにするか。
接続をリッスンするサーバソケット。
コネクション。
文字列。  現在は無視される。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
他のメソッドに渡される、または他のメソッドから渡される引数。
行列またはその他の<span style="font-family：font-family: Courier New, Courier; color：<code>length(dim(x)) == 2</code>を持つ<span style="font: Courier New; color: #666666;"><b>R</b></span>オブジェクト。互換性のため、上記を満たさない場合、<code>as.matrix(x)</code>が最初に呼ばれます。
論理的です。  対角線を含めるべきか？
文字列。  接続の説明: '詳細'を参照。
文字列。  接続の開き方(最初に開く場合)。  指定できる値については「モード」のセクションを参照のこと。
論理値。  ブロック」のセクションを参照。
想定するエンコーディングの名前。  エンコーディング」のセクションを参照。
論理値。  trueを指定すると、'raw'インターフェイスが使用され、 通常のファイルではない引数、例えばキャラクタデバイスに適している。  これは、テキストモードでの読み込みのためにオープンする際の 圧縮ファイルのチェックを抑制し、'ファイル'がシーク可能でない可能性があることを 保証する。
<code>c("default", "internal", "winet", "libcurl")</code>に部分的にマッチする文字列。
HTTPrequests で使用する HTTP ヘッダの名前付き文字ベクトル。  非 HTTP URL では無視されます。  <code>HTTPUserAgent</code> オプション (<code>options</code> を参照) から得られる <code>User-Agent</code> ヘッダは、自動的に最初のヘッダとして使われます。
0-9 の整数。  書き込み時に適用する圧縮の量を、なしから最大まで指定します。  <code>xzfile</code>の場合は負の値も指定できます: '圧縮'のセクションを参照してください。
数値: この接続で使用するタイムアウト(秒単位)。  OSによっては、非常に大きな値をゼロとして扱うことがあるので注意してください: しかし、POSIX標準では31日までの値をサポートしています。
オプションの文字ベクトル。現在TCPソケットでサポートされているのは<code>"no-delay"</code>のみである。
zip ファイル内のファイル名。
文字列。  ポートのホスト名。
整数。  TCP ポート番号。
論理。  ソケットをクライアントにするかサーバーにするか。
接続をリッスンするサーバソケット。
コネクション。
文字列。  現在は無視される。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
他のメソッドに渡される、または他のメソッドから渡される引数。
関数を指定する文字列（組み込み演算子ではない）。  <code>UseMethod</code>では必須。
<code>UseMethod</code>: ディスパッチされるメソッドを決定するクラスを持つオブジェクト。  デフォルトは関数の最初の引数です。
次のメソッドに渡される更なる引数。
変換されるオブジェクト。
論理: 変換は、1文字の文字列に変換するのか、複数の個々の文字に変換するのか。
論理：サロゲート・ペアの解釈を試みるべきか？  (「詳細」を参照。)<code>multiple = FALSE</code>の場合のみサポートされる。
文字ベクトル。
文字ベクトル。
ベクトル (アトミックまたはリスト) または <code>expression</code> オブジェクト。  その他のオブジェクト(クラス化されたオブジェクトを含む)は<code>base::as.list</code>によって強制されます。
<code>X</code>の各要素に適用される関数は'詳細'を参照して下さい。  <code>+</code>、<code>%*%</code>のような関数の場合、関数名はバッククォートか引用符で囲む必要があります。
<code>FUN</code>のオプション引数。
論理文字列または文字列; 可能であれば、結果はベクトル、行列、または高次元配列に簡略化されるべきか?  <code>simplify = "array"</code> の場合、結果は<code>FUN(X[[i]])</code>の結果より1つ高い "rank"(<i>=</i><code>length(dim(.))</code>)の<code>array</code>になる可能性があります。
論理; <code>TRUE</code> かつ <code>X</code> が文字の場合、<code>X</code> が既に名前を持っていない限り、<code>X</code> を結果の <code>names</code> として使用します。  この引数は <code>...</code> に続くので、その名前は省略できません。
(一般化された)ベクトル; FUNからの戻り値のテンプレート。  詳細'を参照のこと。
整数： 複製数。
繰り返し評価する式（言語オブジェクト、通常は呼び出し）。
通常は<code>lapply()</code>から返される。
この2つのケースは、それぞれ<code>sapply(*, simplify = "array")</code> または<code>simplify = TRUE</code> に対応します。
アトミックモードを指定する文字列、<code>"list"</code>、<code>"expression"</code>、または(<code>vector</code>を除く)<code>"any"</code>。  現在のところ、<code>is.vector()</code>は<code>mode</code>に対して任意の型(<code>typeof</code>を参照)を許し、modeが<code>"any"</code>でないとき、<code>is.vector(x, mode)</code>は<code>typeof(x) == mode</code>とほぼ同じです。
は、希望する長さを指定する非負の整数です。  長いベクトル、すなわち<code>length &gt; .Machine$integer.max</code>の場合、<code>"double"</code>型でなければなりません。  1以外の長さの引数を与えるとエラーになります。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>オブジェクトです。
適用する関数は<code>match.fun</code>で見つかります。
ベクトル化されるべき引数の文字ベクトル。  デフォルトは<code>FUN</code>の全引数。
論理または文字列; 結果をベクトル、行列または高次元配列に縮小しようとする; <code>sapply</code>の<code>simplify</code>引数を参照のこと。
最初の...引数がnamesの場合はnamesを使用し、文字ベクトルの場合はその文字ベクトルをnamesとして使用する。
文字に強制できる0個以上のオブジェクト（区切り文字なしで一緒に貼り付けられる）、または単一の条件オブジェクト。
論理。呼び出しが警告メッセージの一部になるかどうかを示す。
論理的に、<code>getOption("warn") &lt;= 0</code>であっても、呼び出しを直ちに出力すべきかどうかを示す。
論理的で、<code>options(warn = 1)</code>のとき、可能な限りメッセージを1行として出力すべきであることを示す。
評価する式。
<code>gettext</code> を参照のこと。  <code>NA</code> の場合、メッセージは翻訳されません。
文字で、どのクラスの警告を抑制すべきかを示す。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式。
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
詳細は後述する。
(<code>warnings()</code>の)<code>cat</code>に渡される引数。
<code>warnings()</code>が返す<code>"warnings"</code>オブジェクト。
<code>"warnings"</code>または<code>"summary.warnings"</code>オブジェクト。
もし<code>missing</code>でなければ、<code>x</code>と同じ<code>長さの<code>文字</code>ベクトル。  デフォルトは <code>paste0(seq_len(n), ": ")</code> for<i>n &gt;= 2</i> where <code>n &lt;- length(x)</code>.
文字列<code>cat()</code>は、メッセージが表示される前に出力されます。
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したオブジェクト。
論理ベクトル(おそらくリサイクルされる)。  名前は省略されるべきか？
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したlength-oneオブジェクト。
他のメソッドの引数。
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したオブジェクト。
論理ベクトル（おそらくリサイクルされる）。  名前は省略されるべきか？
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したlength-oneオブジェクト。
他のメソッドの引数。
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したオブジェクト。
論理ベクトル（おそらくリサイクルされる）。  名前は省略されるべきか？
クラス<code>"POSIXt"</code>または<code>"Date"</code>を継承したlength-oneオブジェクト。
他のメソッドの引数。
<code>logical</code> ベクタまたは配列。  <code>NA</code>は省略可能（<code>FALSE</code>のように扱われる）。
論理; <code>x</code>が配列の場合、<b>arr</b>ay <b>ind</b>ices を返すべきか？
<code>which(x)</code>から得られるような整数値のインデックス・ベクトル。
<code>dim(.)</code> 整数ベクトル
<code>useNames</code>がtrueの場合、<code>arrayInd()</code>（したがって、<code>which(*, arr.ind=TRUE)</code>）のためのdimnamesの構築に使用されます。<code>names(.dimnames)</code>が空でない場合、列名として使用されます。  <code>.dimnames[[1]]</code>は行名として使用されます。
論理値は、<code>arrayInd()</code>の値が(nullでない)dimnamesを持つべきかどうかを示します。
数値(論理、整数、ダブル)ベクトルまたは<span style="font-family：(論理、整数、double)ベクトル、または<span style="font-family: Courier New, Courier; color：<code>double</code> への内部強制が動作する <span style="font: Courier New; color: #666666;"><b>R</b></span> オブジェクトの <code>min</code> または <code>max</code> が検索されます。
数値（論理、整数、または double）ベクトル、または <span style="font-family：font-family: Courier New, Courier; color：<code>double</code> への内部強制が機能する <span style="font-family: Courier New; color: #666666;"><b>R</b></span> オブジェクトの <code>min</code> または <code>max</code> が検索されます。
<code>NA</code>でない長さ1の論理ベクトル。1より大きい長さの条件は、現在、警告付きで受け付けられますが、最初の要素だけが使用されます。  環境変数<span class="env">_R_CHECK_LENGTH_1_CONDITION_</span> がtrueに設定されると、代わりにエラーが通知されます。  その他の型は、可能であれば論理型に強制され、クラスは無視される。
変数の構文名。
ベクトル（リストと式を含む）、ペアリスト、<code>NULL</code>に評価される式。  因子値は文字ベクトルに強制される。  <span style="font-family：のように、<span style="font-family: Courier New, Courier; color：<span style="font-family: Courier New; color: #666666;"><b>R</b></span>4.0.0から、これは長いベクトルになります。
形式的な意味での<em>式</em>。  これは単純な式か、いわゆる<em>複合式</em>で、通常は<code>{ expr1 ; expr2 }<//code> のような形式です。
環境構築に使用するデータ。デフォルトの<code>with</code>メソッドでは、これは環境、リスト、データフレーム、または<code>sys.call</code>のような整数です。<code>within</code>では、リストかデータフレームになります。
特に<code>within()</code>では、多くの場合、"複合 "式、すなわち、次のような形式です。

<code>within()</code>の<code>list</code>メソッドで、<code>data</code>の<code>attributes</code>を保持し、<code>names</code>を同じ順序にするかどうかを指定する<code>logical</code>を指定します。  <code>keepAttrs=FALSE</code>の方が効率的です。
(将来の)メソッドに渡す引数。
環境構築に使用するデータ。デフォルトの<code>with</code>メソッドでは、これは環境、リスト、データフレーム、または<code>sys.call</code>のような整数です。<code>within</code>では、リストかデータフレームになります。
特に<code>within()</code>では、多くの場合、"複合 "式、すなわち、次のような形式です。

<code>within()</code>の<code>list</code>メソッドで、<code>data</code>の<code>attributes</code>を保持し、<code>names</code>を同じ順序にするかどうかを指定する<code>logical</code>を指定します。  <code>keepAttrs=FALSE</code>の方が効率的です。
(将来の)メソッドに渡す引数。
接続、または読み込むファイルやURLのパス名を指定する文字列。  <code>""</code>は、<code>stdin()</code>接続を示します。
<code>TRUE</code>、<code>FALSE</code>、または環境を表し、解析された式がどこで評価されるかを決定する。  <code>FALSE</code> (デフォルト) は、ユーザのワークスペース (グローバル環境) に対応し、<code>TRUE</code> は、<code>source</code> が呼び出された環境に対応します。
論理; もし <code>TRUE</code> ならば、各式はパースされた後、評価の前に表示される。
logical; if <code>TRUE</code>, <code>eval(i)</code> の結果が各式 <code>i</code> に対して出力される; デフォルトは <code>echo</code> の値である。
<code>source()</code>と<code>withAutoprint(*, evaluated=TRUE)</code>の場合: <code>file</code>、<code>expression</code>、<code>call</code>、<code>call</code>の<code>list</code>を指定する代わりに、評価されない "expression "を<em>指定する。

<code>withAutoprint()</code> (デフォルトは <code>evaluated=FALSE</code>):1 つ以上の評価されない "expression".
<code>exprs</code>が<code>source(exprs= *)</code>に渡され、したがって評価されなければならないことを示す論理、すなわち、正式な<code>式</code>、<code>call</code>または<code>呼び出しのリスト</code>。
(<code>echo=TRUE</code>のとき) 各式の前に改行(つまり空行)を表示するかどうかを示す論理。
<code>TRUE</code>の場合、<b>echo = TRUE</code>だけでなく、<b>each</b>式の追加情報を含む、入力の解析と評価の間により多くの診断が表示されます。
character; は、<code>echo = TRUE</code> の場合に使用されるプロンプトを表示します。
integer; <code>echo</code>が<code>TRUE</code>の場合のみ使用され、1つの式の最大出力文字数を与える。
ソース参照がない場合にのみ使用される <code>deparse()</code> に渡される整数。
<code>character</code>ベクトル、<code>deparse()</code>に<code>control</code>として渡されます、<code>.deparseOpts</code>も参照してください。  <span style="font-family：Courier New, Courier; color：<span style="font-family: Courier New Courier; color: #666666;"><b>R</b></span> version &lt;= 3.3.xでは、これは<code>"showAttributes"</code>にハードコードされています。
論理; <code>TRUE</code>で<code>file</code>がパス名の場合、<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> 作業ディレクトリは、評価のために<code>file</code>を含むディレクトリに一時的に変更されます。
文字ベクトル。  <code>file</code>が文字列の場合に仮定されるエンコーディング: <code>file</code>を参照。  エンコーディングが推測される場合、<code>"unknown"</code>となる。
文字; <code>echo = TRUE</code>の場合、コメント行で使用するプロンプトを指定します。
整数: <code>echo = TRUE</code>の場合、ファイル先頭のコメント行を何行スキップするか。
論理: 式をエコーするとき、可能であればソースの書式を保持するか。
(<code>withAutoprint()</code>の場合:) <code>source(.)</code>に渡す(ファイルに関連しない)引数。
条件オブジェクト。
呼び出し式。
条件オブジェクト
評価される式
リターンまたは終了する前に評価される式
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
追加の引数。
環境構築に使用するデータ。デフォルトの <code>with</code> メソッドでは、これは環境、リスト、データフレーム、または <code>sys.call</code> のような整数です。<code>within</code>では、リストかデータフレームになります。
特に<code>within()</code>では、多くの場合、"複合 "式、すなわち、次のような形式です。

<code>within()</code>の<code>list</code>メソッドで、<code>data</code>の<code>attributes</code>を保持し、<code>names</code>を同じ順序にするかどうかを指定する<code>logical</code>を指定します。  <code>keepAttrs=FALSE</code>の方が効率的です。
(将来の)メソッドに渡す引数。
環境構築に使用するデータ。デフォルトの<code>with</code>メソッドでは、これは環境、リスト、データフレーム、または<code>sys.call</code>のような整数です。<code>within</code>では、リストかデータフレームになります。
特に<code>within()</code>では、多くの場合、"複合 "式、すなわち、次のような形式です。

<code>within()</code>の<code>list</code>メソッドで、<code>data</code>の<code>attributes</code>を保持し、<code>names</code>を同じ順序にするかどうかを指定する<code>logical</code>を指定します。  <code>keepAttrs=FALSE</code>の方が効率的です。
(将来の)メソッドに渡す引数。
環境構築に使用するデータ。デフォルトの<code>with</code>メソッドでは、これは環境、リスト、データフレーム、または<code>sys.call</code>のような整数です。<code>within</code>では、リストかデータフレームになります。
特に<code>within()</code>では、多くの場合、"複合 "式、すなわち、次のような形式です。

<code>within()</code>の<code>list</code>メソッドで、<code>data</code>の<code>attributes</code>を保持し、<code>names</code>を同じ順序にするかどうかを指定する<code>logical</code>を指定します。  <code>keepAttrs=FALSE</code>の方が効率的です。
(将来の)メソッドに渡す引数。
条件オブジェクト。
呼び出し式。
条件オブジェクト。
評価される式。
リターンまたは終了する前に評価される式。
関数
文字列
文字列
リスタートを指定する文字列
restartオブジェクト。
オブジェクトを指定します。
条件クラスの名前を指定する文字列。
追加の引数。
評価される式。
書き出されるデータ。通常はアトミック・ベクトル。
<code>connection</code>、または書き出すファイルを指定する文字列。  <code>""</code>の場合、標準出力コネクションに出力する。

<code>.Platform$OS.type != "windows"</code>, <code>"|cmd"</code> の場合、出力は '<span class="file">cmd</span>' で指定されたコマンドにパイプされる。
データを書き込む列数。
もし <code>TRUE</code> なら、データ <code>x</code> は接続に追加されます。
列を区切るための文字列。  <code>sep = "\t"</code> を使用すると、タブ区切りの出力が得られます; デフォルトは <code>" "</code> です。
<code>""</code> はコンソールへの出力を示します。  <code>read.dcf</code>の場合、圧縮ファイル名を指定することができます（<code>gzfile</code>を参照）。
DCFファイルから読み込むフィールド。  デフォルトは全フィールドを読み込む。
<code>all</code>が偽の場合（デフォルト）、最後に出現したフィールドのみが使用される。
または <code>NULL</code>（デフォルト）はそのようなフィールドがないことを示す。  可能であれば文字に強制する。  空白をそのままにしないフィールドに対しては、<code>read.dcf</code>は先頭と末尾の空白を除去し、<code>write.dcf</code>は<code>strwrap</code>を用いて折り返す。
は、書き込まれるオブジェクト、典型的にはデータ・フレームである。  そうでない場合は、<code>x</code>をデータフレームに強制しようとします。
論理的である。  もし <code>TRUE</code> なら、出力はファイルに追加される。  もし <code>FALSE</code> なら、その名前の既存のファイルは破棄される。
<code>writeLines()</code>に渡される論理値：「を参照。
出力エントリの継続行のインデントを指定する正の整数。
出力の折り返し行の対象となる列を指定する正の整数。
接続オブジェクト、またはファイル名や生のベクトルを指定する文字列。
読み込むベクトルのモードを指定するオブジェクトか、モードを記述する長さ1の文字ベクトル： <code>"numeric"</code>、 <code>"double"</code>、 <code>"integer"</code>、 <code>"int"</code>、 <code>"logical"</code>、 <code>"complex"</code>、 <code>"character"</code>、 <code>"raw"</code>のいずれか。
数値。  読み込むレコードの（最大）数。  <code>n</code>項目のためのストレージが予約されているので、ここでは過大な見積もりを使うことができるが、あまり大きくはならない。
整数。  バイトストリームの要素あたりのバイト数。  デフォルトの<code>NA_integer_</code>は、自然なサイズを使用します。サイズ変更は、生のベクトルや複雑なベクトルではサポートされていません。
論理値。  ファイル上の量を符号付き整数とみなすか符号なし整数とみなすかを決定するとき、サイズ1と2の整数のみに使用される。
ファイルのターゲットシステムのエンディアン性（<code>"big"</code> または <code>"little"</code>）。  <code>"swap"</code>を使うと、強制的にエンディアンを入れ替えます。
<span style="font-family：font-family: Courier New, Courier; color：<b>R</b></span> オブジェクトを接続に書き込みます。
<code>writeLines</code> を参照。
接続オブジェクト、ファイル名の文字列、または生のベクトル。
(終端していない)文字列の長さを文字単位で読み書きする整数ベクトル。  要素は&gt;= 0でなければならず、<code>NA</code>であってはならない。
論理的でなければならない：<code>readChar</code> の場合、<code>nchars</code> はマルチバイトロケールでは文字数ではなくバイト数とみなすべきか？  <code>writeChar</code> については <code>writeLines</code> を参照。
少なくとも <code>nchars</code> と同じ長さの、接続に書き込む文字ベクトル。
'end of string': 文字列。  各文字列の後に、ASCIIの<code>nul</code>が続く終端文字。終端文字が全くない場合は<code>NULL</code>を使用する。
文字ベクトル
接続オブジェクトまたは文字列。
文字列。  テキストの各行の後に接続に書き込まれる文字列。
論理的な文字列。  詳細'を参照。
<code>raw</code>、<code>logical</code> または 'number-like' vector (すなわち、<code>double</code> (class <code>numeric</code>)、<code>integer</code> および <code>complex</code>の型)、またはメソッドが書かれたオブジェクト。
<code>data.frame</code>クラスのオブジェクト。
新旧の行の名前。
<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
<span style="font-family：オブジェクト：<span style="font: Courier New, Courier;"><b>R</b></span> オブジェクト。
an <span style="font-family：オブジェクト：<span style="font: Courier New, Courier;"><b>R</b></span> オブジェクト。
an <span style="font-family：オブジェクト：<span style="font: Courier New, Courier;"><b>R</b></span> オブジェクト。
an <span style="font-family：オブジェクト：<span style="font: Courier New, Courier;"><b>R</b></span> オブジェクト。
an <span style="font-family：オブジェクト：<span style="font: Courier New, Courier;"><b>R</b></span> オブジェクト。
an <span style="font-family：オブジェクト：<span style="font-family: Courier New, Courier;"><b>R</b></span> オブジェクト。
<code>package_version</code>の場合は、<code>R.version</code>で得られるRversionオブジェクト。
無効な数値バージョンはエラー(デフォルト)になるかどうかを示す論理。
<span style="font-family：font-family: Courier New, Courier; color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span> オブジェクト。
<span style="font-family：オブジェクト：<span style="font: Courier New, Courier; "color: #666666;"><b>R</b></span> オブジェクト。
文字列。  詳細」を参照。
文字列。  接続の開き方(最初に開く場合)。  指定できる値については「モード」のセクションを参照。
論理値。  ブロック」のセクションを参照。
想定するエンコーディングの名前。  エンコーディング」のセクションを参照。
論理値。  trueを指定すると、'raw'インターフェイスが使用され、 通常のファイルではない引数、例えばキャラクタデバイスなどに適している。  これは、テキストモードでの読み込みのためにオープンする際の 圧縮ファイルのチェックを抑制し、'ファイル'がシーク可能でない可能性があることを 保証する。
<code>c("default", "internal", "winet", "libcurl")</code>に部分的にマッチする文字列。
HTTPrequests で使用する HTTP ヘッダの名前付き文字ベクトル。  非 HTTP URL では無視されます。  <code>HTTPUserAgent</code> オプション (<code>options</code> を参照) から得られる <code>User-Agent</code> ヘッダは、自動的に最初のヘッダとして使われます。
0-9 の整数。  書き込み時に適用する圧縮の量を、なしから最大まで指定します。  <code>xzfile</code>の場合は負の値も指定できます: '圧縮'のセクションを参照してください。
数値: この接続で使用するタイムアウト(秒単位)。  OSによっては、非常に大きな値をゼロとして扱うことがあるので注意してください: しかし、POSIX標準では31日までの値をサポートしています。
オプションの文字ベクトル。現在TCPソケットでサポートされているのは<code>"no-delay"</code>のみである。
zip ファイル内のファイル名。
文字列。  ポートのホスト名。
整数。  TCP ポート番号。
論理。  ソケットをクライアントにするかサーバーにするか。
接続をリッスンするサーバソケット。
コネクション。
文字列。  現在は無視される。
文字列。  空または<code>"read"</code>または<code>"write"</code>、部分一致可。
他のメソッドに渡される、または他のメソッドから渡される引数。
数値または複素数ベクトル、または <span style="font-family：font-family: Courier New, Courier; color：<code>round</code> メソッドと、<code>log10()</code>を含む基本的な算術メソッドを持つ、<span style="font-family: Courier New; color: #666666;"><b>R</b></span> 数値に似たオブジェクト。
使用する精度を示す整数。
切片と傾き、単一の値。
<em>untransform</em>するかどうかを尋ねる論理。  詳細'を参照。
水平線のy値。
垂直線のx値(複数可)
切片と傾きを与える長さ2のベクトル.
<code>coef</code> メソッドを持つオブジェクト。  詳細'を参照。
<code>col</code>、<code>lty</code>、<code>lwd</code> (おそらくベクトルとして: '詳細'を参照)、<code>xpd</code> などの図形パラメータ、および、線の特性<code>lend</code>、<code>ljoin</code>、<code>lmitre</code>。
描画する点の座標<b>from</b>。
描画する点の座標 <b>to</b>.  少なくとも1つは
矢の頭の辺の長さ（インチ）。
矢の軸から矢の頭の端までの角度。
描画する矢の<em>種類</em>を決定する整数コード。
<code>col</code>内の<code>NA</code>値は、矢印を省略する。
<code>xpd</code> や線特性 <code>lend</code>、<code>ljoin</code>、<code>lmitre</code> のようなグラフィカル・パラメータ: <code>par</code> を参照。
行列形式の二次元分割表。
正と負のピアソン残差の描画に使用される色をそれぞれ与える長さ2の文字ベクトル.
各長方形の間に残された (平均的な長方形の幅と高さに対する) 空間の量。
プロット全体のタイトル。
x軸のラベル。  デフォルトは、<code>x</code>の行次元の名前（もしあれば）です。
y軸のラベル。  デフォルトは、<code>x</code>の列寸法の名前（もしあれば）です。
軸がプロットのどの側に描画されるかを指定する整数。  軸は以下のように配置される：1=下、2=左、3=上、4=右。
目盛りが引かれる点を指定する。  非限定値(infinite, <code>NaN</code> or <code>NA</code>)は省略される。  デフォルトでは(<code>NULL</code>の場合)、目盛りの位置が計算されます。
これは、目盛りに(数値)注釈が付けられるかどうかを指定する論理値か、目盛りに配置されるラベルの文字または式ベクトルである。  (他のオブジェクトは、<code>as.graphicsAnnot</code>によって強制されます。)これが論理的でない場合、<code>at</code>も同じ長さで供給されるべきです。  <code>labels</code>が強制された後に長さが0である場合、<code>TRUE</code>を供給するのと同じ効果があります。
目盛りと軸線を描画するかどうかを指定する論理値。
<code>NA</code>でなければ、軸線が引かれる余白の行数。
もし<code>NA</code>でなければ、これは<code>line</code>の値を上書きする。
標準のプロットマージンではなく、プロットマージンの外側に軸を描画するかどうかを示す論理値。
テキストのフォント。  デフォルトは<code>par("font")</code>です。
軸線と目盛りの線の種類。
軸線と目盛りの線幅。  ゼロまたは負の値は、線または目盛りを抑制する。
軸線と目盛りの色。  <code>col = NULL</code> は、<code>par("fg")</code>を使用することを意味し、おそらくインラインで指定される。<code>col.ticks = NULL</code> は、<code>col</code>が解決した色を使用することを意味する。
調整(<code>par("adj")</code>を参照)は、全てのラベルの<em>平行</em>('horizontal')読み方向に対して行われます。  これが有限の値でない場合、デフォルトが使用される(軸に平行な文字列は中央揃え、そうでない場合は軸に最も近い端の揃え)。
各目盛ラベルの<em>読み取り方向に対して垂直</em>に調整する。  軸に平行なラベルの場合、<code>padj = 0</code>は右または上揃え、<code>padj = 1</code>は左または下揃えを意味する。  これは、各文字列の値を与えるベクトルとすることができ、必要に応じて再利用される。

<code>padj</code>が有限の値（デフォルト）でない場合、<code>par("las")</code>の値が調整を決定する。  軸に垂直にプロットされた文字列の場合、デフォルトは文字列の中央に配置されます。
デフォルトの<code>NA</code>は、軸に対して<em>平行</em>に描画された目盛りラベルの場合は<code>1</code>に対応し、それ以外の場合は<code>0.25</code>に対応します。

<code>gap.axis<//code>は、通常、<code>at = ..</code>ティックマークの位置が明示的に指定される場合に関連する。
他のグラフィカルパラメータもこの関数の引数として渡されるかもしれない。特に、軸の注釈のための<code>cex.axis</code>, <code>col.axis</code>と<code>font.axis</code>がある。ティックラベル、<code>mgp</code>と<code>xaxp</code>または<code>yaxp</code>による位置決め、<code>tck</code>または<code>tcl</code>によるティックマークの長さと方向、<code>las</code>による垂直/水平ラベルの方向、または<code>col</code>の代わりに<code>fg</code>、そして<code>xpd</code>によるクリッピング。  これらについては <code>par</code> を参照してください。

パラメータ <code>xaxt</code> (辺1と3) と <code>yaxt</code> (辺2と4) は、軸が全くプロットされないかどうかを制御する。

<code>lab</code>は、引数<code>labels</code>が与えられない限り、部分的にマッチすることに注意してください。  (デフォルトの軸は既に<code>plot.window</code>によって設定されているので、<code>lab</code>は<code>axis</code>によって作用されません)。
軸が描画されるべき範囲を示すオブジェクト
目盛りマークが描画される点。
軸がプロットのどの側に描画されるかを指定する整数。  軸は以下のように配置される：1=下、2=左、3=上、4=右。
これは、目盛りに(数値)注釈を付けるかどうかを指定する論理値か、目盛りに付けるラベルの文字または式ベクトルである。文字または式ベクトルとして指定される場合、<code>at</code>が与えられ、それらは同じ長さでなければなりません。
メソッドに渡される引数、そしておそらくは<code>axis</code>に渡される引数。
date-time または date オブジェクト。
<code>axis</code> を参照。
<code>strptime</code> を参照。
目盛りに注釈を付けるかどうかを指定する論理値か、目盛りに配置される文字列のベクトル。
他のメソッドから、または他のメソッドに渡されるさらなる引数。
date-timeまたはdateオブジェクト。
<code>axis</code> を参照。
<code>strptime</code> を参照。
目盛りに注釈を付けるかどうかを指定する論理値か、目盛りに配置される文字列のベクトル。
他のメソッドから、または他のメソッドに渡されるさらなる引数。
1:4の整数、<code>axis</code>と同様。
長さ3の数値ベクトル、デフォルトは<code>side</code>引数に応じて<code>par("xaxp")</code>または<code>par("yaxp")</code> (<code>side</code>が1または3の場合は<code>par("xaxp")</code>、sideが2または4の場合は<code>par("yaxp")</code>)。
<code>par("usr")</code> (<code>par("usr")[1:2]</code> または<code>par("usr")[3:4]</code> for <code>side</code> in (1,3)または(2,4)それぞれ)。
デフォルトは、<code>side</code>に応じて、<code>par("xlog")</code>または<code>par("ylog")</code>となります。
(<code>log</code>がtrueの場合のみ使用): 刻み間隔のおおよその(下限)数; デフォルトは<code>par("lab")[j]</code>で、<code>j</code>は<code>side</code>に応じて1または2です。  以前の<span style="font-family：color：<span style="font-family: Courier New, Courier; color: #666666;"><b>R</b></span>バージョン(2.14.xより)と同じ動作をさせたい場合は、これを<code>Inf</code>に設定します。
プロットを構成するバーを記述する値のベクトルまたは行列。  <code>height</code>がベクトルの場合、プロットは、ベクトルの値で与えられた高さを持つ矩形の棒の列から構成されます。  <code>height</code> がマトリックスで <code>beside</code> が <code>FALSE</code> の場合、プロットの各バーは <code>height</code> のカラムに対応し、カラムの値はバーを構成する積み重ねられたサブバーの高さを表します。  <code>height</code> が行列で <code>beside</code> が<code>TRUE</code> の場合、各列の値は積み重ねられるのではなく、並置されます。
オプションの小節の幅のベクトル。描画されるバーの長さに再循環される。  <code>xlim</code> が指定されない限り、単一の値を指定しても効果はありません。
各バーの前に残された (平均バー幅に対する) スペースの量。  1つの数値、またはバーごとに1つの数値を指定することができる。  <code>height</code> が行列で、<code>beside</code> が <code>TRUE</code> である場合、<code>space</code> は2つの数値で指定することができます。  明示的に与えられない場合, <code>height</code> が行列で <code>beside</code> が <code>TRUE</code> なら <code>c(0,1)</code>, それ以外なら 0.2 がデフォルトとなります.
各棒または棒のグループの下にプロットされる名前のベクトル。  この引数が省略された場合、ベクトルであれば<code>height</code>の<code>names</code>属性から、行列であれば列名から取られます。
プロットの凡例を構成するために使用されるテキストのベクトル、または凡例が含まれるべきかどうかを示す論理。  その場合、与えられた凡例ラベルは<code>height</code>の行に対応する必要があります; <code>legend.text</code>がtrueの場合、<code>height</code>の行名がnullでなければラベルとして使用されます。
論理値。  <code>FALSE</code>の場合、<code>height</code>の列は積み重ねられたバーとして描かれ、<code>TRUE</code>の場合、列は並置されたバーとして描かれます。
論理値。  <code>FALSE</code>の場合、バーは最初のバーが左になるように垂直に描かれます。  <code>TRUE</code>の場合、バーは水平に描かれ、最初のバーが下になります。
デフォルト値の <code>NULL</code> は、陰影線が描画されないことを意味します。<code>density</code>の正の値以外でも、陰線は描画されません。
バーまたはバーの構成要素の陰影線の傾き。
デフォルトでは、<code>height</code>がベクトルの場合は灰色、<code>height</code>が行列の場合はガンマ補正された灰色パレットが使用されます。
<code>border = NA</code> を使用すると、枠線が省略されます。  濃淡線がある場合、<code>border = TRUE</code>は、濃淡線と同じ色を境界線に使用することを意味します。
プロット全体のタイトルとサブタイトル。
x軸のラベル。
y軸のラベル。
x軸のリミット。
y軸のリミット。
論理的。棒が領域外に出ることを許可するか？
<code>plot.default</code>を参照のこと。
を参照のこと。  <code>TRUE</code>の場合、垂直軸（<code>horiz</code>が真の場合は水平軸）が描画される。
論理軸を描画する。  <code>TRUE</code>の場合、そして<code>names.arg</code> (上記参照)がある場合、別の軸が描画され(<code>lty = 0</code>)、ラベルが付けられる。
数値軸ラベルの展開係数 (<code>par('cex')</code> を参照)。
軸名（棒ラベル）の拡張係数。
論理的。  <code>TRUE</code>の場合、隣接する(積み重ねられない!)棒を分割する線が描画される。  <code>space = 0</code> のときのみ適用される (<code>beside = TRUE</code> のときは部分的に適用される)。
論理的である。  <code>FALSE</code> の場合、何も描画されない。
グラフィックパラメータ <code>lty</code> (<code>par('lty')</code> を参照) は、カテゴリ軸 (デフォルトは水平軸) の軸と目盛りに適用されます。  デフォルトでは、軸は抑制されていることに注意。
棒グラフがx軸に対してどれだけシフトされるべきかを示すベクトル。
既に存在するプロットに棒グラフを追加するかどうかを指定する論理。デフォルトは<code>FALSE</code>。
デフォルトの注釈(<code>main</code>, <code>sub</code>, <code>xlab</code>, <code>ylab</code>)をプロットに表示するかどうかを指定する論理。
<code>legend()</code>に渡す追加引数のリスト。  <code>legend.text</code>が与えられた場合のみ使用されます。
<code>y</code> 変数がカテゴリ変数 <code>x</code> に対してプロットされる数値データである数式。  数式は3つの形式のうちの1つを持つ：

(例を参照)。
式中の変数を取り出すデータフレーム（またはリスト）。
使用するオブザベーションのサブセットを指定するオプションのベクトル。
データに<code>NA</code>値が含まれる場合の処理を示す関数。  デフォルトは、与えられた変数の欠損値を無視する。
他のメソッドとの間で渡される引数。  デフォルトのメソッドでは、<code>plot.window()</code>、<code>title()</code>、<code>axis</code>に渡される引数(<code>axes</code>、<code>asp</code>、<code>main</code>など)やグラフパラメータ(<code>par</code>を参照)が含まれます。
プロットを構成するバーを記述する値のベクトルまたはマトリックス。  <code>height</code>がベクトルである場合、プロットは、ベクトルの値で与えられる高さを持つ矩形の棒の列から構成されます。  <code>height</code> がマトリックスで <code>beside</code> が <code>FALSE</code> ならば、プロットの各バーは <code>height</code> のカラムに対応し、カラムの値はバーを構成するスタックされたサブバーの高さを与えます。  <code>height</code> が行列で <code>beside</code> が<code>TRUE</code> の場合、各列の値は積み重ねられるのではなく、並置されます。
オプションの小節の幅のベクトル。描画されるバーの長さに再循環される。  <code>xlim</code> が指定されない限り、単一の値を指定しても効果はありません。
各バーの前に残された (平均バー幅に対する) スペースの量。  1つの数値、またはバーごとに1つの数値を指定することができる。  <code>height</code> が行列で、<code>beside</code> が <code>TRUE</code> である場合、<code>space</code> は2つの数値で指定することができます。  明示的に与えられない場合, <code>height</code> が行列で <code>beside</code> が <code>TRUE</code> なら <code>c(0,1)</code>, それ以外なら 0.2 がデフォルトとなります.
各棒または棒のグループの下にプロットされる名前のベクトル。  この引数が省略された場合、ベクトルであれば<code>height</code>の<code>names</code>属性から、行列であれば列名から取られます。
プロットの凡例を構成するために使用されるテキストのベクトル、または凡例が含まれるべきかどうかを示す論理。  その場合、与えられた凡例ラベルは<code>height</code>の行に対応する必要があります; <code>legend.text</code>がtrueの場合、<code>height</code>の行名がnullでなければラベルとして使用されます。
論理値。  <code>FALSE</code>の場合、<code>height</code>の列は積み重ねられたバーとして描かれ、<code>TRUE</code>の場合、列は並置されたバーとして描かれます。
論理値。  <code>FALSE</code>の場合、バーは最初のバーが左になるように垂直に描かれます。  <code>TRUE</code>の場合、バーは水平に描かれ、最初のバーが下になります。
デフォルト値の <code>NULL</code> は、陰影線が描画されないことを意味します。<code>density</code>の正の値以外でも、陰線は描画されません。
バーまたはバーの構成要素の陰影線の傾き。
デフォルトでは、<code>height</code>がベクトルの場合は灰色、<code>height</code>が行列の場合はガンマ補正された灰色パレットが使用されます。
<code>border = NA</code> を使用すると、枠線が省略されます。  濃淡線がある場合、<code>border = TRUE</code>は、濃淡線と同じ色を境界線に使用することを意味します。
プロット全体のタイトルとサブタイトル。
x軸のラベル。
y軸のラベル。
x軸のリミット。
y軸のリミット。
論理的。棒が領域外に出ることを許可するか？
<code>plot.default</code>を参照のこと。
を参照のこと。  <code>TRUE</code>の場合、垂直軸（<code>horiz</code>が真の場合は水平軸）が描画される。
論理軸を描画する。  <code>TRUE</code>の場合、そして<code>names.arg</code> (上記参照)がある場合、別の軸が描画され(<code>lty = 0</code>)、ラベルが付けられる。
数値軸ラベルの展開係数 (<code>par('cex')</code> を参照)。
軸名（棒ラベル）の拡張係数。
論理的。  <code>TRUE</code>の場合、隣接する(積み重ねられない!)棒を分割する線が描画される。  <code>space = 0</code> のときのみ適用される (<code>beside = TRUE</code> のときは部分的に適用される)。
論理的である。  <code>FALSE</code> の場合、何も描画されない。
グラフィックパラメータ <code>lty</code> (<code>par('lty')</code> を参照) は、カテゴリ軸 (デフォルトは水平軸) の軸と目盛りに適用されます。  デフォルトでは、軸は抑制されていることに注意。
棒グラフがx軸に対してどれだけシフトされるべきかを示すベクトル。
既に存在するプロットに棒グラフを追加するかどうかを指定する論理。デフォルトは<code>FALSE</code>。
デフォルトの注釈(<code>main</code>, <code>sub</code>, <code>xlab</code>, <code>ylab</code>)をプロットに表示するかどうかを指定する論理。
<code>legend()</code>に渡す追加引数のリスト。  <code>legend.text</code>が与えられた場合のみ使用されます。
<code>y</code> 変数がカテゴリ変数 <code>x</code> に対してプロットされる数値データである数式。  数式は3つの形式のうちの1つを持つ：

(例を参照)。
式中の変数を取り出すデータフレーム（またはリスト）。
使用するオブザベーションのサブセットを指定するオプションのベクトル。
データに<code>NA</code>値が含まれる場合の処理を示す関数。  デフォルトは、与えられた変数の欠損値を無視する。
他のメソッドとの間で渡される引数。  defaultメソッドでは、<code>plot.window()</code>、<code>title()</code>、<code>axis</code>に渡される引数(<code>axes</code>、<code>asp</code>、<code>main</code>など)やグラフィカルパラメータ(<code>par</code>を参照)が含まれます。
文字、<code>"plot"</code>, <code>"figure"</code>,<code>"inner"</code>および<code>"outer"</code>のいずれか。
ボックスの線種。
<code>bty</code>, <code>col</code>, <code>lwd</code> のようなグラフィカル・パラメータは、 <code>par</code> を参照。  <code>xpd</code>は、常にデバイス領域でクリッピングされるため、受け付けられないことに注意。
<code>y ~ grp</code>のような式、ここで<code>y</code>は、グループ化変数<code>grp</code>(通常は係数)に従ってグループに分割されるデータ値の数値ベクトルです。  <code>〜g1 + g2</code>は<code>g1:g2</code>と等価であることに注意してください。
<code>formula</code>の変数を取り出す data.frame（またはリスト）。
プロットに使用するオブザベーションのサブセットを指定するオプションのベクトル。
データに<code>NA</code>が含まれる場合の処理を示す関数。  デフォルトは、応答またはグループのどちらかの欠損値を無視する。
x軸とy軸の注釈は、<span style="font-family：color：<span style="font: Courier New, Courier; color: #666666;"><b>R</b></span> 3.6.0のanon-emptyデフォルトから。  <code>ann=FALSE</code>で抑制可能。
<code>xlab</code>と<code>ylab</code>によって）軸が注釈されるべきかどうかを示す<code>logical</code>。
<code>split.default</code>に渡される。
箱ひげ図を生成するデータを指定する。数値ベクトルか、そのようなベクトルを含む単一のリストである。<code>NA</code>はデータ内で許可されます。
<code>formula</code>メソッドでは、名前付き引数はデフォルトのメソッドに渡されます。

デフォルトのメソッドでは、unnamed引数は追加のデータベクタ（<code>x</code>がリストでない限り無視されます）であり、named引数は、引数<code>pars</code>で与えられるものに加えて<code>bxp</code>に渡される引数およびグラフィカルパラメータです（そして、<code>pars</code>内のものをオーバーライドします）。<code>bxp</code>は、渡されたグラフィカルパラメータを使用する場合と使用しない場合があることに注意して下さい。
これは、プロットのひげがボックスからどの程度広がるかを決定します。  <code>range</code>が正の場合、ウィスカはボックスから<code>range</code>の四分位数倍の範囲内にある最も極端なデータ点まで伸びます。値がゼロの場合、ひげはデータの極端に伸びます。
プロットを構成するボックスの相対的な幅を与えるベクトル.
もし<code>varwidth</code>が<code>TRUE</code>の場合、ボックスはグループ内のオブザベーション数の平方根に比例した幅で描画されます。
もし <code>notch</code> が <code>TRUE</code> なら、ボックスの各辺にノッチが描かれます。  2つのプロットのノッチが重ならないなら、これは2つの中央値が異なるという「強い証拠」である(Chambers <em>et al</em>, 1983, p. 62)。  使用される計算については<code>boxplot.stats</code>を参照。
<code>outline</code>がtrueでない場合、外れ値は描画されません（S+が線を使うのに対して、点として）。
文字ベクトルまたは式(seeplotmath)とすることができます。
すべてのボックスに適用されるスケールファクター。  グループ数が少ない場合、ボックスを狭くすることでプロットの見栄えを良くすることができます。
ステープル線幅の拡張、ボックス幅に比例。
外れ線の幅をボックス幅に比例して拡大する。
もし <code>TRUE</code> (デフォルト) なら箱ひげ図が作成される。  そうでない場合は、箱ひげ図に基づく要約が返されます。
箱ひげ図の輪郭の色を指定するオプションのベクトル。  <code>border</code>の長さがプロット数より小さい場合、<code>border</code>の値は再利用されます。
もし<code>col</code>がnullでなければ、箱ひげ図に色をつけるために使われる色が入っているものとみなされます。デフォルトでは背景色となる。
x 座標、y 座標、または両方の座標を対数スケールでプロットするかどうかを示す文字。
例えば、<code>boxwex</code>や<code>outpch</code>などです。これらは<code>bxp</code>に渡されます（<code>plot</code>がtrueの場合）。
箱ひげ図が水平であるべきかを示す論理値; デフォルト <code>FALSE</code> は垂直ボックスを意味する。
論理, もしtrueなら <em>add</em> boxplot to current plot.
特に <code>add = TRUE</code> の場合; デフォルトは <code>1:n</code> で、<code>n</code> はボックスの数です。
<code>y ~ grp</code>のような式では、<code>y</code>は、グループ化変数<code>grp</code>（通常は係数）に従ってグループに分割されるデータ値の数値ベクトルです。  <code>〜g1 + g2</code>は<code>g1:g2</code>と等価であることに注意してください。
<code>formula</code>の変数を取り出す data.frame（またはリスト）。
プロットに使用するオブザベーションのサブセットを指定するオプションのベクトル。
データに<code>NA</code>が含まれる場合の処理を示す関数。  デフォルトは、応答またはグループのどちらかの欠損値を無視する。
x軸とy軸の注釈は、<span style="font-family：color：<span style="font: Courier New, Courier; color: #666666;"><b>R</b></span> 3.6.0のanon-emptyデフォルトから。  <code>ann=FALSE</code>で抑制可能。
<code>xlab</code>と<code>ylab</code>によって）軸が注釈されるべきかどうかを示す<code>logical</code>。
<code>split.default</code>に渡される。
箱ひげ図を生成するデータを指定する。数値ベクトル、またはそのようなベクトルを含む単一のリスト。<code>NA</code>はデータ内で許可されます。
<code>formula</code>メソッドでは、名前付き引数はデフォルトのメソッドに渡されます。

デフォルトのメソッドでは、unnamed引数は追加のデータベクタ（<code>x</code>がリストでない限り無視されます）であり、named引数は、引数<code>pars</code>で与えられるものに加えて<code>bxp</code>に渡される引数およびグラフィカルパラメータです（そして、<code>pars</code>内のものをオーバーライドします）。<code>bxp</code>は、渡されたグラフィカルパラメータを使用する場合と使用しない場合があることに注意して下さい。
これは、プロットのひげがボックスからどの程度広がるかを決定します。  <code>range</code>が正の場合、ウィスカはボックスから<code>range</code>の四分位数倍の範囲内にある最も極端なデータ点まで伸びます。値がゼロの場合、ひげはデータの極端に伸びます。
プロットを構成するボックスの相対的な幅を与えるベクトル.
もし<code>varwidth</code>が<code>TRUE</code>の場合、ボックスはグループ内のオブザベーション数の平方根に比例した幅で描画されます。
もし <code>notch</code> が <code>TRUE</code> なら、ボックスの各辺にノッチが描かれます。  2つのプロットのノッチが重ならないなら、これは2つの中央値が異なるという「強い証拠」である(Chambers <em>et al</em>, 1983, p. 62)。  使用される計算については<code>boxplot.stats</code>を参照。
<code>outline</code>がtrueでない場合、外れ値は描画されません（S+が線を使うのに対して、点として）。
文字ベクトルまたは式(seeplotmath)とすることができます。
すべてのボックスに適用されるスケールファクター。  グループ数が少ない場合、ボックスを狭くすることでプロットの見栄えを良くすることができます。
ステープル線幅の拡張、ボックス幅に比例。
外れ線の幅をボックス幅に比例して拡大する。
もし <code>TRUE</code> (デフォルト) なら箱ひげ図が作成される。  そうでない場合は、箱ひげ図に基づく要約が返されます。
箱ひげ図の輪郭の色を指定するオプションのベクトル。  <code>border</code>の長さがプロット数より小さい場合、<code>border</code>の値は再利用されます。
もし<code>col</code>がnullでなければ、箱ひげ図に色をつけるために使われる色が入っているとみなされます。デフォルトでは背景色となる。
x 座標、y 座標、または両方の座標を対数スケールでプロットするかどうかを示す文字。
例えば、<code>boxwex</code>や<code>outpch</code>などです。これらは<code>bxp</code>に渡されます（<code>plot</code>がtrueの場合）。
箱ひげ図が水平であるべきかを示す論理値; デフォルト <code>FALSE</code> は垂直の箱を意味する。
論理, もしtrueなら <em>add</em> boxplot to current plot.
特に <code>add = TRUE</code> の場合; デフォルトは <code>1:n</code> で、<code>n</code> はボックスの数です。
数値行列。
列(デフォルト)か行(<code>use.cols = FALSE</code>)をプロットするかを示す論理。
<code>boxplot</code> へのさらなる引数。
プロットの作成に使用されるデータ要約を含むリスト。  これらは通常<code>boxplot</code>の呼び出しの結果ですが、どのような方法でも生成することができます。
もし<code>notch</code>が<code>TRUE</code>ならば、ノッチがボックスの両側に描かれる。  2つのプロットのノッチが重ならない場合、中央値は5%水準で有意に異なる。
プロットを構成するボックスの相対幅を与えるベクトル.
もし<code>varwidth</code>が<code>TRUE</code>ならば、ボックスはグループの観察数の平方根に比例した幅で描画されます。
もし <code>outline</code> が真でなければ, 外れ値は描画されません.
(0,1) の数値。<code>notch = TRUE</code>の場合, ノッチが使用するボックス幅の分数.
character または numeric (vector), ボックスの境界の色。  複数のボックスの場合はリサイクルされます。  <code>boxcol</code>, <code>medcol</code>, <code>whiskcol</code>, <code>staplecol</code>, および <code>outcol</code> オプションのデフォルトとして使用されます（下記参照）。
characterは、<code>plot.default</code>のように、任意の軸が対数スケールで描画されるべきかどうかを示す。
logicalは、'frame'(<code>box</code>)が描画されるべきかどうかを示します。デフォルトは、<code>axes = FALSE</code>が指定されない限り、<code>TRUE</code>です。
boxplots が水平であるべきかを示す論理値; デフォルト <code>FALSE</code> は、垂直ボックスを意味する。
デフォルトの注釈(タイトル、x軸とy軸のラベル)をプロットに表示するかどうかを示す論理値。
論理値、もしtrueなら<em>add</em> boxplot to current plot。
特に、<code>add = TRUE</code>の場合に、ボックスプロットが描画されるべき位置を示す数値ベクトル; デフォルトは<code>1:n</code>で、<code>n</code>はボックスの数です。
<code>TRUE</code> または <code>FALSE</code> に設定すると、各グループにX軸ラベルを印刷するかどうかのデフォルトを上書きすることができます。
グラフィカル・パラメータ(等)は、リスト(<code>pars</code>)または通常(<code>...</code>)のいずれかで、この関数の引数として渡すことができます。  (<code>...</code>内のものが<code>pars</code>内のものより優先されます)。

現在のところ、<code>yaxs<//code>と<code>ylim<//code>は'boxplotに沿って'、すなわち<code>xaxt</code>、<code>yaxt</code>、<code>las</code>、<code>cex.axis</code>、<code>gap.axis</code>、<code>col.axis</code>は、<code>axis</code>に渡され、<code>main</code>、<code>cex.main</code>、<code>col.main</code>、<code>sub</code>、<code>cex.sub</code>、<code>col.sub</code>、<code>xlab</code>、<code>ylab</code>、<code>cex.lab</code>、<code>col.lab</code>は、<code>title</code>に渡されます。

さらに、<code>axes</code>が使用可能で（<code>plot.window</code>を参照）、デフォルトは<code>TRUE</code>である。

以下の引数 (または <code>pars</code> コンポーネント) は、boxplot グラフィックスのさらなるカスタマイズを可能にします。  これらのデフォルトは、通常、指定された引数または<code>pars</code>コンポーネントまたは対応する<code>par</code>のいずれかから、接頭辞のないバージョン（例えば、<code>lty</code>から<code>boxlty</code>）から決定されます。

すべてのボックスに適用されるスケール係数。  グループ数が少ない場合、ボックスの幅を狭くすることでプロットの見栄えを改善することができます。  デフォルトは<code>at</code>に依存し、通常は<i>0.8</i>である。
ステープルと外れ線の幅の拡大は、ボックスの幅に比例します; どちらもデフォルトは0.5です。
ボックスの輪郭の種類、幅、色、塗りつぶし色 (現在のデフォルトは <code>col</code> で、将来のデフォルトは <code>par("bg")</code> になる予定です)。
中央線タイプ、線幅、ポイント文字、ポイントサイズ拡張、色、背景色。  デフォルトの<code>medpch = NA</code>はポイントを抑制し、<code>medlty = "blank"</code>は行を抑制します。<code>medlwd</code>はデフォルトの<code>lwd</code>の<i>3倍</i>に設定されることに注意してください。
ひげ線のタイプ (デフォルト:<code>"dashed"</code>)、幅、色。
ステープル (= ウィスカの終端) の線種、線幅、色。
outlier 線種、線幅、ポイント文字、ポイントサイズ拡張、色、背景色。  デフォルトの <code>outlty = "blank"</code> は線を抑制し、<code>outpch = NA</code> は点を抑制する。
オブジェクトを指定する場合、デフォルトのメソッドでは1つの数値変数(またはこれと共有可能なオブジェクト)を指定します。
従属変数と解釈される<code>"factor"</code>。
単一の従属変数<code>"factor"</code>と単一の数値説明変数を持つ<code>y ~ x</code>型の<code>"formula"</code>。
オプションのデータフレーム。
論理的。計算された条件密度はプロットされるべきか？
2つのラベル間の距離がこの閾値以下になった場合、それらは等距離にプロットされます。
従属変数の水準をどの順番でプロットするかを指定する文字または数値ベクトル.
<code>density</code>に渡される引数
<code>levels(y)</code>と同じ長さの塗りつぶし色のベクトル.
陰影ポリゴンの境界色。
注釈用文字列
デフォルトは<code>levels(y)</code>です。
デフォルトは<code>levels(y)</code>です。
プロットに使用する観測値のサブセットを指定するオプションのベクトル.
クリッピング矩形のユーザ座標
画面行列<em>または</em>の行数と列数を記述する2要素ベクトル。行列の場合、各行はNDC単位で画面の左、右、下、上（この順）の値を持つ画面を記述する。
分割する画面を示す番号。  デフォルトは現在の画面があればその画面、なければデバイスの全領域。
論理: 選択された画面をクリアするか。
描画(<code>screen</code>)、消去(<code>erase.screen</code>)、閉じる(<code>close.screen</code>)ためにどの画面を準備するかを示す数字。  (<code>close.screen</code>はスクリーン番号のベクトルを受け取ります)。
スクリーンに描画する準備の一部として、スクリーンをビアシースすべきかどうかを示す論理値。
全てのスクリーンを閉じるべきかどうかを示す論理値。
コンディショニングプロットの形式を記述する式。  <code>y ~ x | a</code>の形式の式は、<code>y</code>対<code>x</code>のプロットが変数<code>a</code>を条件として生成されるべきであることを示す。  <code>y ~ x| a * b</code>の形の式は、<code>y</code>対<code>x</code>のプロットが、2つの変数<code>a</code>と<code>b</code>を条件として生成されるべきであることを示します。

<code>x</code>または<code>y</code>が因子の場合、結果はほとんど<code>as.numeric()</code>が適用されたかのようになりますが、因子<code>a</code>または<code>b</code>の場合は、条件付け（および<code>show.given</code>がtrueの場合はそのグラフィックス）が適応されます。
式中の変数の値を含むデータフレーム。  デフォルトでは、<code>coplot</code>が呼び出された環境が使用されます。
<code>a</code>と<code>b</code>に対する条件付けがどのように行われるかを決定する値または2つの値のリスト。

<code>b</code>がない場合(つまり、<code>a</code>にのみ条件付けをする場合)、通常、これは、条件となる区間を与える各行が2つの列を持つ行列ですが、(条件となる変数が因子の場合)数値の単一のベクトルや因子レベルのセットであることもできます。この場合(<code>b</code>がない)、<code>co.intervales</code>の結果は<code>given.values</code>引数として直接使用することができます。
<code>function(x,y,col,pch,・・・)</code>は、ディスプレイの各パネルで実行されるアクションを与えます。  デフォルトは <code>points</code> です。
プロットのパネルは、<code>rows</code> x <code>columns</code>の配列で並べられます。  <code>rows</code>は配列の行数を表します。
パネルレイアウト配列の列数。
logical (2つの条件変数に対して長さ2の可能性あり): 対応する条件変数に対して条件付けプロットを表示するかどうか(デフォルトは<code>TRUE</code>)。
点のプロットに使用する色のベクトル.  短すぎる場合、値はリサイクルされます。
プロットする記号または文字のベクトル。  短すぎる場合、値はリサイクルされます。
<code>"num"</code>と<code>"fac"</code>を成分とする名前付きベクトル.
文字; x軸と最初の条件変数に使用するラベル。  ラベルが1つだけ与えられた場合、それがx軸に使用され、デフォルトのラベルが条件付け変数に使用される。
文字; y軸と2番目の条件付け変数に使用するラベル。
logical:trueの場合、パネル関数は、そのパネルに渡されたデータの添え字を与える追加（3番目）の引数<code>subscripts<//code>を与えられます。
xまたはyが因子である場合に軸（目盛り）ラベルを作成する関数。
これは、対応する条件変数が<code>factor</code>でない場合にのみ使用されます。
数値 &lt; 1; 条件変数の重なりの割合。  overlap &lt; 0の場合、データスライス間に<em>ギャップ</em>が生じる。
x軸の範囲。
y軸の範囲。
panel関数への追加引数。
数値ベクトル。
<code>z</code>の値が測定されるグリッド線の位置。  これらは昇順でなければならない。  デフォルトでは、0から1までの等間隔の値が使用される。  <code>x</code> が <code>list</code> の場合、その構成要素 <code>x$x</code> と <code>x$y</code> は、それぞれ <code>x</code> と <code>y</code> に使用される。リストに<code>z</code>という要素がある場合、これは<code>z</code>に使われます。
プロットされる値を含む行列 (<code>NA</code>s areallowed).  便宜上、<code>z</code>の代わりに<code>x</code>を使うこともできる。
<b>iff</b><code>levels<//code> が与えられない場合は、輪郭レベルの数を指定します。
等高線を描くレベルの数値ベクトル.
輪郭線のラベルを与えるベクトル.  もし<code>NULL</code>ならばレベルがラベルとして使用され、そうでなければ<code>as.character</code>によって強制されます。
<code>cex</code>で等高線のラベル付けを行う。  これは絶対サイズであり、<code>par("cex")</code>の倍数ではない。
の論理値です。  <code>TRUE</code>の場合、輪郭にラベルが付けられます。
ラベルの位置を指定する文字列。指定できる値は <code>"simple"</code>、<code>"edge"</code>、<code>"flattest"</code> (デフォルト) です。  詳細」セクションを参照。
もし <code>NULL</code> なら、現在のフォントファミリーとフォントフェイスが輪郭ラベルに使われます。  長さ 2 の文字ベクトルならば、Hershey ベクトルフォントが輪郭ラベルに使われます。ベクトルの最初の要素は書体を選択し、2 番目の要素はフォントインデックスを選択します (詳細は <code>text</code> を参照)。デフォルトは、テキストを高品質に回転させるグラフィックデバイスでは <code>NULL</code> で、それ以外では <code>c("sans serif", "plain")</code> です。
プロットの x-、y-、z-リミット。
軸とボックスのどちらを描画するかを指定する論理は、<code>plot.default</code>を参照してください。
描画する線の色。
描画する線の種類。
描画する線の幅。
論理的。<code>TRUE</code> なら、現在のプロットに追加する。
<code>plot.window</code>、<code>title</code>、<code>Axis</code>、<code>box</code>への追加引数、典型的には、<code>cex.axis</code>のようなグラフィカルパラメータ。
<code>z</code>の値が測定されるグリッド線の位置。  これらは昇順でなければならない。  デフォルトでは、0から1までの等間隔の値が使用される。  <code>x</code> が <code>list</code> の場合、その構成要素 <code>x$x</code> と <code>x$y</code> は、それぞれ <code>x</code> と <code>y</code> に使用される。リストに<code>z</code>という要素がある場合、これは<code>z</code>に使われます。
プロットされる値を含む行列 (<code>NA</code>s areallowed).  便宜上、<code>z</code>の代わりに<code>x</code>を使用することができることに注意。
<b>iff</b><code>levels<//code> が与えられない場合は、輪郭レベルの数を指定します。
等高線を描くレベルの数値ベクトル.
輪郭線のラベルを与えるベクトル.  もし<code>NULL</code>ならば、レベルがラベルとして使用され、そうでなければ<code>as.character</code>によって強制されます。
<code>cex</code>で等高線のラベル付けを行う。  これは絶対サイズであり、<code>par("cex")</code>の倍数ではない。
の論理値です。  <code>TRUE</code>の場合、輪郭にラベルが付けられます。
ラベルの位置を指定する文字列。指定できる値は <code>"simple"</code>、<code>"edge"</code>、<code>"flattest"</code> (デフォルト) です。  詳細」セクションを参照。
もし <code>NULL</code> なら、現在のフォントファミリーとフォントフェイスが輪郭ラベルに使われます。  長さ 2 の文字ベクトルならば、Hershey ベクトルフォントが輪郭ラベルに使われます。ベクトルの最初の要素は書体を選択し、2 番目の要素はフォントインデックスを選択します (詳細は <code>text</code> を参照)。デフォルトは、テキストを高品質に回転させるグラフィックデバイスでは <code>NULL</code> で、それ以外では <code>c("sans serif", "plain")</code> です。
プロットの x-、y-、z-リミット。
軸とボックスのどちらを描画するかを指定する論理は、<code>plot.default</code>を参照してください。
描画する線の色。
描画する線の種類。
描画する線の幅。
論理的。<code>TRUE</code> なら、現在のプロットに追加する。
<code>plot.window</code>、<code>title</code>、<code>Axis</code>、<code>box</code>への追加引数で、典型的には、<code>cex.axis</code>のようなグラフパラメータ。
コンディショニング・プロットのフォームを記述する式。  <code>y ~ x | a</code>の形式の式は、<code>y</code>対<code>x</code>のプロットが変数<code>a</code>を条件として生成されるべきであることを示します。  <code>y ~ x| a * b</code>の形式の式は、<code>y</code>対<code>x</code>のプロットが、2つの変数<code>a</code>と<code>b</code>を条件として生成されるべきであることを示します。

<code>x</code>または<code>y</code>が因子の場合、結果はほとんど<code>as.numeric()</code>が適用されたかのようになりますが、因子<code>a</code>または<code>b</code>の場合は、条件付け（および<code>show.given</code>がtrueの場合はそのグラフィックス）が適応されます。
式中の変数の値を含むデータフレーム。  デフォルトでは、<code>coplot</code>が呼び出された環境が使用されます。
<code>a</code>と<code>b</code>に対する条件付けがどのように行われるかを決定する値または2つの値のリスト。

<code>b</code>がない場合(すなわち、<code>a</code>にのみ条件付けをする場合)、通常、これは、条件となる区間を与える各行が2つの列を持つ行列ですが、(条件となる変数が因子の場合)数値の単一のベクトルまたは因子レベルの集合であることもできます。この場合(<code>b</code>がない)、<code>co.intervales</code>の結果は<code>given.values</code>引数として直接使用することができます。
<code>function(x,y,col,pch,・・・)</code>は、ディスプレイの各パネルで実行されるアクションを与えます。  デフォルトは <code>points</code> です。
プロットのパネルは、<code>rows</code> x <code>columns</code>の配列で並べられます。  <code>rows</code>は配列の行数を表します。
パネルレイアウト配列の列数。
logical (2つの条件変数に対して長さ2の可能性あり): 対応する条件変数に対して条件付けプロットを表示するかどうか(デフォルトは<code>TRUE</code>)。
点のプロットに使用する色のベクトル.  短すぎる場合、値はリサイクルされます。
プロットする記号または文字のベクトル。  短すぎる場合、値はリサイクルされます。
<code>"num"</code>と<code>"fac"</code>を成分とする名前付きベクトル.
文字; x軸と最初の条件変数に使用するラベル。  ラベルが1つだけ与えられた場合、それがx軸に使用され、デフォルトのラベルが条件付け変数に使用される。
文字; y軸と2番目の条件付け変数に使用するラベル。
logical:trueの場合、パネル関数は、そのパネルに渡されたデータの添え字を与える追加（3番目）の引数<code>subscripts<//code>を与えられます。
xまたはyが因子である場合に軸（目盛り）ラベルを作成する関数。
これは、対応する条件変数が<code>factor</code>でない場合にのみ使用されます。
数値 &lt; 1; 条件変数の重なりの割合。  overlap &lt; 0の場合、データスライス間に<em>ギャップ</em>が生じる。
x軸の範囲。
y軸の範囲。
panel関数への追加引数。
数値ベクトル。
<code>x</code>と同じ長さのオブジェクトを評価する<code>x</code>の関数として書かれた関数の名前、呼び出し、または式。
ベクトル化」数値<span style="font-family：font-family: Courier New, Courier; color：font-family: Courier New, Courier; color: #666666;"><b>R</b></span>関数。
<code>plot</code>との互換性のため、<code>from</code>のエイリアス。
関数がプロットされる範囲。
整数; 評価するx値の数。
論理; もし<code>TRUE</code>なら、既に存在するプロットに追加する。もし<code>NA</code>なら、x軸の限界とlog-scalingのデフォルトを前のプロットから取って、新しいプロットを開始する。  nographicsデバイスがオープンされている場合、<code>FALSE</code>として扱われます。
<code>NULL</code>または長さ2の数値ベクトル; もし<code>NULL</code>でなければ、<code>c(from, to)</code>のデフォルトを提供し、<code>add = TRUE</code>でなければ、プロットのx-limitsを選択します - <code>plot.window</code>を参照してください。
プロットタイプ: <code>plot.default</code> を参照。
x軸に使用される名前を与える文字列。
ラベルとグラフパラメータも引数として指定できる。  <code>log</code>のデフォルトの解釈については'詳細'を参照。

<code>plot</code>の<code>"function"</code>メソッドでは、<code>...</code>は、<code>expr</code>を除いて、<code>curve</code>の他のどの引数も含むことができます。
数値のベクトルまたは行列 (<code>NA</code>s areallowed).  もし<code>x</code>が行列であれば, 全体のプロットは各行の重ね合わせ点描図から構成されます.  <code>is.numeric(x)</code>を満たすが、<code>is.vector(x) || is.matrix(x)</code>を満たさない入力は、警告とともに<code>as.numeric</code>で強制されます。
ベクトルの場合、デフォルトは<code>names(x)</code>を使用し、行列の場合、行ラベルは<code>dimnames(x)[[1]]</code>を使用します。
<code>x</code> が行列の場合、<code>groups</code> は <code>x</code> の列をデフォルトとします。
これは通常、各グループの中央値や平均値などの要約である。
<code>ylab</code>と<code>labels</code>のインチ単位のオフセット; <span style="font-family：カラー：#66666;"><span style="font-family: Courier New, Courier; color：#666666;"><b>R</b></span> 4.0.0.
デフォルトの注釈(タイトル、x軸とy軸のラベル)をプロットに表示するかどうかを示す <code>logical</code> 値。
x 軸のスタイルを示す文字列; 抑制するには <code>"n"</code> を使用し、<code>par("xaxt")</code> も参照してください。
プロットの周囲にボックスを描くかどうかを示す論理。
<code>plot.default</code>を参照して下さい。
使用する文字サイズ。  <code>cex</code>を1より小さい値に設定すると、ラベルの重なりを避けるのに便利です。  他の多くのグラフィック関数とは異なり、これは<code>par("cex")</code>の倍数ではなく、actualsizeを設定します。
これは、<code>plot()</code>における<code>cex</code>のように動作します。
使用されるプロット文字またはシンボル。
グループ値に使用されるプロット文字またはシンボル。
<code>par(bg= *)</code> を使用して、プロット全体の背景色を設定します。
点とラベルに使用する色。
グループラベルと値に使用される単一色.
水平線に使用する色。
例えば、<code>plot.window</code>を参照してください。
<code>title</code>を参照してください。
<code>title</code>のような軸の注釈。
グラフィカルパラメータは引数として指定することもできます。
行列の場合、各行は、NDC単位で、画面の左、右、下、上 (この順) の値を持つ画面を記述します。
分割する画面を示す番号。  デフォルトは現在の画面があればその画面、なければデバイスの全領域。
論理: 選択された画面をクリアするか。
描画(<code>screen</code>)、消去(<code>erase.screen</code>)、閉じる(<code>close.screen</code>)ためにどの画面を準備するかを示す数字。  (<code>close.screen</code>はスクリーン番号のベクトルを受け取ります)。
スクリーンに描画する準備の一部として、スクリーンをビアシースすべきかどうかを示す論理値。
全てのスクリーンを閉じるべきかどうかを示す論理値。
<code>z</code>の値が測定されるグリッド線の位置。  これらは昇順でなければならない。  (この記述の残りの部分は、<code>.filled.contour</code>には適用されません。)デフォルトでは、0から1までの等間隔の値が使用されます。  <code>x</code> が <code>list</code> である場合、その構成要素 <code>x$x</code> と <code>x$y</code> は、それぞれ <code>x</code> と <code>y</code> に使用されます。  リストに component<code>z</code> がある場合、これは <code>z</code> に使われます。
プロットされる値を含む数値行列.  便宜上、<code>z</code>の代わりに<code>x</code>を使うことができることに注意してください。
x プロットの限界値.
y プロットの限界値.
z プロットの限界値.
<code>z</code> の範囲を分割するために使用されるレベルのセット。  <b>strictly</b> increase (and finite)でなければならない。  連続するレベル間の<code>z</code>値を持つ領域は同じ色で塗られます。
<code>levels</code> が指定されない場合、<code>z</code>, value の範囲は、およそこの数のレベルに分割されます。
プロットで色を割り当てるために使用されるカラーパレット関数.
この引数は、パレット関数の指定よりも優先されます。  この引数は、パレット関数の指定よりも優先されます。
メインプロットにタイトルを追加するステートメント。
メインプロットに軸(と<code></code>ボックス)を描画するステートメント。  これはデフォルトの軸を上書きします。
プロットキーにタイトルを追加するステートメント。
これは、デフォルトの軸を上書きします。
<i>y/x</i>アスペクト比は、<code>plot.window<//code>を参照してください。
x軸のスタイル。  デフォルトはinternallabelingである。
y軸のスタイル。  デフォルトはinternallabelingである。
使用するラベルのスタイル。  デフォルトは水平ラベル付け。
<code>plot.default</code>のように、軸とボックスが描画されるべきかどうかを示す論理。
現在は<code>title()</code>にのみ渡されます。
2×2×<i>k</i>の分割表を配列形式で、または<i>k</i>が1の場合は2×2の行列で指定します。
各2 x 2表の小さい対角線と大きい対角線に使用する色を指定する長さ2のベクトル.
オッズ比の信頼リングに使用される信頼水準。  1より小さい1つの非負の数値でなければならない; 0に設定された場合、信頼リングは抑制される。
<code>"margins"</code>、<code>"ind.max"</code>、<code>"all.max"</code>のいずれかと一致しなければならず、頭文字を省略することができる。<code>"margins"</code>に設定された場合、各2×2表は、オッズ比を保持しながら、<code>margin</code>で指定されたマージンと等しくなるように標準化される。  <code>"ind.max"</code>または<code>"all.max"</code>の場合、表は個別に、または同時に、セルの最大頻度が1になるように標準化される。
等化する余白の数値ベクトル。  <code>1</code>, <code>2</code>, <code>c(1,2)</code>(デフォルト)のいずれかでなければならず、これは各2×2表の行、列、または両方の余白を標準化することに対応します。
行と列のラベルに使われるスペースの量(四分円の最大半径に対する割合)。
4つ折りタイトルの文字列。
<code>c(nr,nc)</code>の形の数値ベクトル。2×2の表の表示が、<code>nr</code>×<code>nc</code>のレイアウトで、行で埋められて配置されるべきであることを示す。
<code>c(nr,nc)</code>の形の数値ベクトルで、2×2テーブルのディスプレイが<code>nr</code>×<code>nc</code>のレイアウトで、列によって満たされるように配置されるべきであることを示す。
座標の数値ベクトル。
変換する座標系を指定する文字列。
座標の数値ベクトル。
変換する座標系を指定する文字列。
x方向とy方向のグリッドのセル数。  <code>NULL</code>のとき、デフォルトでは、グリッドは対応する<em>default</em>軸の目盛りに揃う（つまり、<code>axTicks</code>で計算される目盛りに揃う）。  <code>NA</code> の場合、対応する方向にグリッド線は引かれません。
グリッド線の色。
グリッド線の線種。
グリッド線の線幅を与える非負の数値。
論理値で、<em>log</em>座標と軸の目盛りマークとの整列が有効な場合にのみ使用される。  この場合、<code>equilogs = FALSE</code>を設定すると、<em>non equidistant</em> tick alignedgrid linesが得られます。
ヒストグラムを作成したい値のベクトル。
のいずれか：

ヒストグラムのセル間のブレークポイントを与えるベクトル．
 ブレークポイントのベクトルを計算する関数．
 ヒストグラムのセル数を与える1つの数値．
 セル数を計算するアルゴリズムを指定する文字列（'詳細'を参照）．
 セル数を計算する関数．
ブレークポイントは<code>pretty</code>値に設定されるので、数値は<code>1e6</code>に制限されます（それ以上の場合は警告が表示されます）。  <code>breaks</code>が関数である場合、<code>x</code>ベクトルが唯一の引数として与えられます（そして、breaksの数は、利用可能なメモリの量によってのみ制限されます）。
論理; もし<code>TRUE</code>ならば、ヒストグラムのグラフィックは、頻度、結果の<code>counts</code>コンポーネントで表現されます; もし<code>FALSE</code>ならば、確率密度、コンポーネント<code>density</code>がプロットされます（ヒストグラムの総面積が1になるように）。  デフォルトは <em>if and only if</em> <code>breaks</code> areequidistant (and <code>probability</code> is not specified) <code>TRUE</code> です。
S との互換性のために、<code>!freq</code> に対する <em>alias</em> を指定します。
論理; <code>TRUE</code> ならば、<code>breaks</code> 値と等しい <code>x[i]</code> が最初の (<code>right = FALSE</code> ならば最後の) バーに含まれる。  <code>breaks</code>がベクトルでない限り、これは(警告とともに)無視されます。
論理; <code>TRUE</code>の場合、ヒストグラムのセルは右閉じ（左開き）区間となります。
デフォルト値の<code>NULL</code>は、陰影線が描画されないことを意味する。<code>density</code>の値が正でない場合も、シェーディング線の描画は抑制されます。
シェーディング線の傾きを指定します。
デフォルトの<code>NULL</code>は、塗りつぶしのないバーを生成します。
棒を囲む枠の色。  デフォルトは、標準の前景色を使用する。
例えば、デフォルトの<code>ylab</code>は、<code>freq</code>がtrueの場合、<code>"Frequency"</code>となる。
<code>xlim</code>はヒストグラムの定義(ブレーク)には<em>使用されず、プロット(<code>plot = TRUE</code>の場合)にのみ使用されることに注意してください。
を論理的に使用します。  <code>TRUE</code> (デフォルト) の場合、plotが描画されると軸が描画されます。
論理的。  <code>TRUE</code> (デフォルト)の場合、ヒストグラムがプロットされ、そうでない場合は、区切りとカウントのリストが返されます。  後者の場合、<code>plot = TRUE</code>の場合にのみ適用される(典型的にはグラフィカルな)引数が指定されると、警告が使用されます。
論理文字列または文字列。  <code>FALSE</code>でない場合は、さらに棒グラフの上にラベルを描画します; <code>plot.histogram</code>を参照してください.
数値（整数）。  S(-PLUS)との互換性のためにのみ,<code>nclass</code>はスカラまたは文字引数の<code>breaks</code>と等価です.
論理的です。  <code>plot = FALSE</code> かつ <code>warn.unused = TRUE</code> の場合、グラフィカルパラメータが <code>hist.default()</code> に渡されると警告が出されます。
<code>plot.histogram</code>に渡される引数およびグラフパラメータは、<code>title</code>と<code>axis</code>に渡されます（<code>plot = TRUE</code>の場合）。
ヒストグラムの対象となる値のベクトル．
のいずれか：

ヒストグラムのセル間のブレークポイントを与えるベクトル．
 ブレークポイントのベクトルを計算する関数．
 ヒストグラムのセル数を与える1つの数値．
 セル数を計算するアルゴリズムを指定する文字列（'詳細'を参照）．
 セル数を計算する関数．
ブレークポイントは<code>pretty</code>値に設定されるので、数値は<code>1e6</code>に制限されます（それ以上の場合は警告が表示されます）。  <code>breaks</code>が関数である場合、<code>x</code>ベクトルが唯一の引数として与えられます（そして、breaksの数は、利用可能なメモリの量によってのみ制限されます）。
論理; もし<code>TRUE</code>ならば、ヒストグラムのグラフィックは、頻度、結果の<code>counts</code>コンポーネントで表現されます; もし<code>FALSE</code>ならば、確率密度、コンポーネント<code>density</code>がプロットされます（ヒストグラムの総面積が1になるように）。  デフォルトは <em>if and only if</em> <code>breaks</code> areequidistant (and <code>probability</code> is not specified) <code>TRUE</code> です。
S との互換性のために、<code>!freq</code> に対する <em>alias</em> を指定します。
論理; <code>TRUE</code> ならば、<code>breaks</code> 値と等しい <code>x[i]</code> が最初の (<code>right = FALSE</code> ならば最後の) バーに含まれる。  <code>breaks</code>がベクトルでない限り、これは(警告とともに)無視されます。
論理; <code>TRUE</code>の場合、ヒストグラムのセルは右閉じ（左開き）区間となります。
デフォルト値の<code>NULL</code>は、陰影線が描画されないことを意味する。<code>density</code>の値が正でない場合も、シェーディング線の描画は抑制されます。
シェーディング線の傾きを指定します。
デフォルトの<code>NULL</code>は、塗りつぶしのないバーを生成します。
棒を囲む枠の色。  デフォルトは、標準の前景色を使用する。
例えば、デフォルトの<code>ylab</code>は、<code>freq</code>がtrueの場合、<code>"Frequency"</code>となる。
<code>xlim</code>はヒストグラムの定義(ブレーク)には<em>使用されず、プロット(<code>plot = TRUE</code>の場合)にのみ使用されることに注意してください。
を論理的に使用します。  <code>TRUE</code> (デフォルト) の場合、plotが描画されると軸が描画されます。
論理的。  <code>TRUE</code> (デフォルト)の場合、ヒストグラムがプロットされ、そうでない場合は、区切りとカウントのリストが返されます。  後者の場合、<code>plot = TRUE</code>の場合にのみ適用される（通常はグラフィカルな）引数が指定されると警告が用いられます。
論理文字列または文字列。  <code>FALSE</code>でない場合は、さらに棒グラフの上にラベルを描画します; <code>plot.histogram</code>を参照してください.
数値（整数）。  S(-PLUS)との互換性のためにのみ,<code>nclass</code>はスカラまたは文字引数の<code>breaks</code>と等価です.
論理的でなければならない。  <code>plot = FALSE</code> かつ <code>warn.unused = TRUE</code> の場合、グラフィカルパラメータが <code>hist.default()</code> に渡されると警告が出されます。
さらに引数とグラフパラメータが<code>plot.histogram</code>に渡され、<code>title</code>と<code>axis</code>に渡されます（<code>plot = TRUE</code>の場合）。
散布図における点の座標。  あるいは、座標を定義する任意のオブジェクト(プロット構造体、時系列など: <code>xy.coords</code>を参照)は、<code>x</code>として与えることができ、<code>y</code>は省略可能です。
ポイントのラベルを与えるオプションの文字ベクトル。  <code>as.character</code> を用いて強制され、必要に応じて <code>x</code> の長さまで再利用されます。  余分なラベルは警告とともに破棄される。
<code>pos</code> が<code>TRUE</code>の場合、テキストが各同定点から相対的にどこにプロットされたかを示す成分がその値に追加されます。
特定される点の最大数。
論理: <code>plot</code> が <code>TRUE</code> なら、ラベルは点の近くに印刷され、<code>FALSE</code> なら省略される。
論理: <code>TRUE</code> かつ <code>plot = TRUE</code> の場合、ラベルの左下隅は、点からの相対位置ではなく、クリックされた点にプロットされます。
(文字幅で)ラベルと識別された点を隔てる距離。  負の値が許される。  <code>atpen = TRUE</code>の場合は使用されません。
ポインタが点に'十分に近い'ための最大距離（インチ単位）。
<code>order</code> が<code>TRUE</code>の場合、ポインタの回転値に、点を特定した順序を示す成分が追加される。
<code>cex</code>、<code>col</code>、<code>font</code>などの<code>par</code>に渡される引数。
<code>z</code> の値が測定されるグリッド線の位置。  これらは有限で、欠落がなく、(厳密に)昇順でなければならない。  デフォルトでは、0から1までの等間隔の値が使用される。  <code>x</code> が <code>list</code> の場合、その構成要素 <code>x$x</code> と <code>x$y</code> は、それぞれ <code>x</code> と <code>y</code> に使用される。リストが<code>z</code>の要素を持つ場合、これは<code>z</code>に使用されます。
プロットされる値を含む数値または論理行列(<code>NA</code>が許される)。  便宜上、<code>z</code>の代わりに<code>x</code>を使用できることに注意して下さい。
色がプロットされるべき <code>z</code> の最小値と最大値で、デフォルトは<code>z</code>の有限値の範囲です。与えられた各色は, この範囲の等間隔の区間を着色するために使用されます.区間の<em>中点</em>は範囲をカバーするので, 範囲のすぐ外側の値がプロットされます.
プロットされる<code>x</code>と<code>y</code>の値の範囲は、デフォルトでは<code>x</code>と<code>y</code>の範囲になります。
<code>hcl.colors</code>、<code>gray.colors</code>または同様の関数によって生成されるような色のリスト。
論理; もし<code>TRUE</code>なら、現在のプロットに追加します(次の4つの引数は無視します)。  <code>image</code>は既存のグラフィックの上に'描画'するので、これはほとんど役に立ちません。
x軸とy軸のスタイル。  デフォルトの<code>"i"</code>は画像に適しています。  <code>par</code> を参照。
each x軸とy軸のラベルを指定する文字列。  デフォルトは、<code>x</code>または<code>y</code>の'呼び出し名'であり、指定されていない場合は<code>""<code>となる。
色のための有限の数値ブレークポイントのセット:色より1つ多いブレークポイントを持ち、増加順でなければならない。  ソートされていないベクトルは、警告とともにソートされます。
論理的。trueの場合、色区間の中点は等間隔になり、<code>zlim[1]</code>と<code>zlim[2]</code>が中点とみなされます。  デフォルトは、リミット間の長さが等しい色間隔となる。
論理; <code>TRUE</code>の場合、ポリゴンの代わりにビットマップラスターが使用されます。この場合、グリッドは規則的でなければならない。   これが指定されていない場合の動作については、「詳細」を参照のこと。
<code>plot</code>のグラフィカルパラメータは、プロットのアスペクト比<code>asp</code>と<code>axes</code>のように、この関数の引数として渡すこともできます(<code>plot.window</code>を参照)。
<code>z</code>の値が測定されるグリッド線の位置。  これらは有限で、欠落がなく、(厳密に)昇順でなければならない。  デフォルトでは、0から1までの等間隔の値が使用される。  <code>x</code> が <code>list</code> の場合、その構成要素 <code>x$x</code> と <code>x$y</code> は、それぞれ <code>x</code> と <code>y</code> に使用される。リストが<code>z</code>の要素を持つ場合、これは<code>z</code>に使用されます。
プロットされる値を含む数値または論理行列(<code>NA</code>が許される)。  便宜上、<code>z</code>の代わりに<code>x</code>を使用できることに注意して下さい。
色がプロットされるべき <code>z</code> の最小値と最大値で、デフォルトは<code>z</code>の有限値の範囲です。与えられた各色は, この範囲の等間隔の区間を着色するために使用されます.区間の<em>中点</em>は範囲をカバーするので, 範囲のすぐ外側の値がプロットされます.
プロットされる<code>x</code>と<code>y</code>の値の範囲は、デフォルトでは<code>x</code>と<code>y</code>の範囲になります。
<code>hcl.colors</code>、<code>gray.colors</code>または同様の関数によって生成されるような色のリスト。
論理; もし<code>TRUE</code>なら、現在のプロットに追加します(次の4つの引数は無視します)。  <code>image</code>は既存のグラフィックの上に'描画'するので、これはほとんど役に立ちません。
x軸とy軸のスタイル。  デフォルトの<code>"i"</code>は画像に適しています。  <code>par</code> を参照。
each x軸とy軸のラベルを指定する文字列。  デフォルトは <code>x</code> または <code>y</code> の '呼び出し名' で、指定されていない場合は <code>""</code> となる。
色のための有限の数値ブレークポイントのセット:色より1つ多いブレークポイントを持ち、increasing orderでなければならない。  ソートされていないベクトルは、警告とともにソートされます。
論理的。trueの場合、色区間の中点は等間隔になり、<code>zlim[1]</code>と<code>zlim[2]</code>が中点とみなされます。  デフォルトは、限界の間に等しい長さの色間隔を持つ。
論理; <code>TRUE</code>の場合、ポリゴンの代わりにビットマップラスターが使用されます。この場合、グリッドは規則的でなければならない。   これが指定されなかった場合の動作については、「詳細」を参照のこと。
<code>plot</code>のグラフィカルパラメータは、プロットのアスペクト比<code>asp</code>と<code>axes</code>のように、この関数の引数として渡すこともできます(<code>plot.window</code>を参照)。
出力デバイス上の次の<i>N</i>個の図形の位置を指定する行列オブジェクト。  行列の各値は<code>0</code>か正の整数でなければなりません。  <i>N</i> が行列の中で最大の正の整数である場合, 整数<i>{1, ..., N-1}</i> も行列の中で少なくとも1回は現れなければなりません.
デバイス上の列の幅を表す値のベクトル.  相対幅は数値で指定する。    絶対幅(センチメートル単位)は<code>lcm()</code>関数で指定します(examples参照)。
相対的な高さと絶対的な高さを指定できます。上記の <code>widths</code> を参照してください。
論理値または行列オブジェクト。  後者の場合、<code>mat</code>と同じ次元を持ち、行列の各値は<code>0</code>または<code>1</code>でなければなりません。
プロットする図形の数。
センチメートル数として解釈される寸法.
出力デバイス上の次の<i>N</i>個の図形の位置を指定する行列オブジェクト。  行列の各値は<code>0</code>か正の整数でなければならない。  <i>N</i> が行列の中で最大の正の整数である場合, 整数<i>{1, ..., N-1}</i> も行列の中で少なくとも1回は現れなければなりません.
デバイス上の列の幅を表す値のベクトル.  相対幅は数値で指定する。    絶対幅(センチメートル単位)は<code>lcm()</code>関数で指定します(examples参照)。
相対的な高さと絶対的な高さを指定できます。上記の <code>widths</code> を参照してください。
論理値または行列オブジェクト。  後者の場合、<code>mat</code>と同じ次元を持ち、行列の各値は<code>0</code>または<code>1</code>でなければなりません。
プロットする図形の数。
センチメートル数として解釈される寸法.
出力デバイス上の次の<i>N</i>個の図形の位置を指定する行列オブジェクト。  行列の各値は<code>0</code>か正の整数でなければならない。  <i>N</i> が行列の中で最大の正の整数である場合, 整数<i>{1, ..., N-1}</i> も行列の中で少なくとも1回は現れなければなりません.
デバイス上の列の幅を表す値のベクトル.  相対幅は数値で指定する。    絶対幅(センチメートル単位)は<code>lcm()</code>関数で指定します(examples参照)。
相対的な高さと絶対的な高さを指定できます。上記の <code>widths</code> を参照してください。
論理値または行列オブジェクト。  後者の場合、<code>mat</code>と同じ次元を持ち、行列の各値は<code>0</code>または<code>1</code>でなければなりません。
プロットする図形の数。
センチメートル数として解釈される寸法。
凡例を配置するために使用されるxとyの座標。キーワードまたは<code>xy.coords</code>が受け付ける任意の方法で指定することができる。
凡例に表示される長さ <i>≥ 1</i> の文字または式ベクトル。  それ以外のオブジェクトは<code>as.graphicsAnnot</code>によって強制されます。
この引数が指定された場合、指定された色で塗りつぶされた(または指定された色で陰影が付けられた)ボックスが凡例テキストの横に表示されます。
凡例に現れる点や線の色。
ボックスの枠色 (<code>fill</code> が指定されている場合にのみ使用される)。
凡例に現れる線の種類と幅。  線描画には、これら2つの<em>must</em>のどちらかが指定されなければならない。
凡例に現れるプロットシンボル、数値ベクトルまたは1文字文字列のベクトル（<code>points<//code>を参照）。<code>points</code>とは異なり、これはすべて1つの複数文字列として指定することができます。  <em>シンボル描画には必ず指定しなければなりません。
シェーディング線の角度。
数値で正の場合、陰影線の密度。<code>NULL</code>または負もしくは<code>NA</code>の場合、色塗りが仮定される。
凡例を囲むボックスのタイプ。  許容される値は <code>"o"</code> (デフォルト) と <code>"n"</code> です。
凡例ボックスの背景色。  (これは、<code>bty != "n"</code>の場合のみ使用されることに注意)。
凡例ボックスの線種、幅、色 (<code>bty = "o"</code> の場合)。
引数 <code>bg</code> に対応する <code>points</code> の背景色。
現在の<code>par("cex")</code>に対する<b>相対的</b>文字展開係数。  テキストに使用され、<code>pt.cex</code>のデフォルトを提供します。
点の拡大係数。
点の線幅のデフォルトは<code>par("lwd")</code>です。
凡例がlegendxの位置に対してどのように両端揃えされるか。  0は左寄せ、0.5は中央寄せ、1は右寄せを意味する。
凡例yの位置に対しては<code>xjust</code>と同じ。
水平方向(x)の文字間隔を指定する。
垂直方向 (y) の行間も同じ。
長さ1または2の数値; legendtextの文字列調整。  <code>ラベル</code>がplotmath式である場合のy調整に有用です。
x (<code>"user"</code>)座標における凡例テキストの幅。  (逆x軸の場合でも単一の正の数でなければなりません。) デフォルトは<code>strwidth(legend)</code>で計算された適切な値です。
凡例テキストに使用される色。
<code>text</code> を参照。
論理; もし<code>TRUE</code>ならば、点と線をマージするが、塗りつぶされたボックスはマージしない。  点と線がある場合のデフォルトは <code>TRUE</code> です。
logical; もし <code>TRUE</code> なら、<code>legend</code> がどのように魔法の計算を行うかを示す。
を論理的に表示します。  もし <code>FALSE</code> なら、何もプロットされないが、サイズは返される。
凡例項目を設定する列数(デフォルトは1、垂直凡例)。
論理; <code>TRUE</code>の場合、凡例を垂直方向ではなく水平方向に設定します (<code>horiz</code>を指定すると、<code>ncol</code>の指定を上書きします)。
凡例の上部に配置されるタイトルを与える文字列または長さ1つの式。  他のオブジェクトは<code>as.graphicsAnnot</code>によって強制されます。
キーワードによって凡例が配置されるとき、余白からの挿入距離をプロット領域の割合で指定します。
与えられた場合、凡例が描画されている間に使用されるグラフィカルパラメータ <code>xpd</code> の値。
<code>title</code> の色。
<code>title</code> の水平調整: <code>par("adj")</code> のヘルプを参照。
<code>lty</code> および/または <code>lwd</code> を説明するために引かれる線の長さ (文字幅の単位)。
結合する点の座標ベクトル.
実際には、<code>plot.default</code>にあるような<code>type</code>のいずれかです。
特に、線種、<code>lty</code>、線幅、<code>lwd</code>、色、<code>col</code>、<code>type = "b"</code>の場合は<code>pch</code>。  また、線の特性 <code>lend</code>、<code>ljoin</code>、<code>lmitre</code> もあります。
結合する点の座標ベクトル。
実際には、<code>plot.default</code>にあるような<code>type</code>のいずれかです。
特に、線種、<code>lty</code>、線幅、<code>lwd</code>、色、<code>col</code>、<code>type = "b"</code>の場合は<code>pch</code>。  また、線の特性 <code>lend</code>、<code>ljoin</code>、<code>lmitre</code> もあります。
位置を特定する点の最大数。  有効な値は 1 から始まる。
<code>"n"</code>、<code>"p"</code>、<code>"l"</code>、<code>"o"</code>のいずれか。<code>"p"</code> または <code>"o"</code> の場合、点はプロットされ、<code>"l"</code> または <code>"o"</code> の場合、点は線で結ばれます。
<code>type != "n"</code>の場合、位置をプロットするための追加のグラフィックパラメータ。
プロットするデータのベクトルまたは行列。  行数は一致していなければならない。  どちらかが欠落している場合、もう一方が<code>y</code>とされ、<code>1:n</code>の<code>x</code>ベクトルが使用される。  <span style="font-family：クーリエニュー、クーリエ; color：</span>4.0.0以降、<code>"Date"</code>のような<code>x</code>と<code>y</code>の<code>class(.)</code>は通常保存されます。
文字列(長さ1ベクトル)または1文字列のベクトルは、<code>y</code>の各列のプロットのタイプを示します。  <code>type</code>の最初の文字は最初のプロットを定義し、2番目の文字は2番目のプロットを定義するなど、<code>type</code>の文字は循環します; 例えば、<code>"pl"</code>は点と線を交互にプロットします。
最初の要素は最初の列、2番目の要素は2番目の列、といったように、すべての列で線が描かれない場合でも、線の種類、幅、終了スタイルを表すベクトル。線種は、すべてのプロットが描画されるまで循環的に使用される。
文字列、または1文字もしくは整数からなるベクトルで、文字をプロットします。  デフォルトは数字 (1 から 9, 0) で、次に小文字と大文字です。
色のベクトル。  色は循環的に使用される。
これは、<code>par("cex")</code>の倍数として動作します。  <code>NULL</code> は <code>1.0</code> と等価です。
<code>pch = 21:25</code>で与えられる、<code>points</code>と同様に、開いたプロットシンボルの背景（塗りつぶし）色のベクトル。  デフォルトの <code>NA</code> は、基礎となる関数<code>plot.xy</code>のものに対応します。
x軸とy軸のタイトル、<code>plot</code>と同様。
<code>plot</code>のように、x軸とy軸の範囲。
グラフィカル・パラメータ (<code>par</code> を参照) と <code>plot</code> の追加引数、典型的には <code>plot.default</code> も、この関数の引数として与えることができます。  従って、<code>par</code>で説明されている高レベルのグラフィクス制御引数や、<code>title</code>の引数もこの関数に与えることができます。
論理的である。  <code>TRUE</code>の場合、<code>points</code>と<code>lines</code>を使用して現在のプロットに追加される。
を使用する。  もし<code>TRUE</code>なら、何が行われたかを1行記述する。
プロットするデータのベクトルまたは行列。  行数は一致しなければならない。  どちらかが欠落している場合、もう一方は<code>y</code>として扱われ、<code>1:n</code>の<code>x</code>ベクトルが使用される。  <span style="font-family：クーリエニュー、クーリエ; color：</span>4.0.0以降、<code>"Date"</code>のような<code>x</code>と<code>y</code>の<code>class(.)</code>は通常保存されます。
文字列(長さ1ベクトル)または1文字列のベクトルは、<code>y</code>の各列のプロットのタイプを示します。  <code>type</code>の最初の文字は最初のプロットを定義し、2番目の文字は2番目のプロットを定義するなど、<code>type</code>の文字は循環します; 例えば、<code>"pl"</code>は点と線を交互にプロットします。
最初の要素は最初の列、2番目の要素は2番目の列、といったように、すべての列に線が描かれない場合でも、線の種類、幅、終了スタイルを表すベクトル。線種は、すべてのプロットが描画されるまで循環的に使用される。
文字列、または1文字もしくは整数からなるベクトルで、文字をプロットします。  デフォルトは数字 (1 から 9, 0) で、次に小文字と大文字です。
色のベクトル。  色は循環的に使用される。
これは、<code>par("cex")</code>の倍数として動作します。  <code>NULL</code> は <code>1.0</code> と等価です。
<code>pch = 21:25</code>で与えられる、<code>points</code>と同様に、開いたプロットシンボルの背景（塗りつぶし）色のベクトル。  デフォルトの <code>NA</code> は、基礎となる関数<code>plot.xy</code>のものに対応します。
x軸とy軸のタイトル、<code>plot</code>と同様。
<code>plot</code>のように、x軸とy軸の範囲。
グラフィカル・パラメータ (<code>par</code> を参照) と <code>plot</code> の追加引数、典型的には <code>plot.default</code> も、この関数の引数として与えることができます。  従って、<code>par</code>で説明されている高レベルのグラフィクス制御引数や、<code>title</code>の引数もこの関数に与えることができます。
論理的である。  <code>TRUE</code>の場合、<code>points</code>と<code>lines</code>を使用して現在のプロットに追加される。
を使用する。  もし<code>TRUE</code>なら、何が行われたかを1行記述する。
プロットするデータのベクトルまたは行列。  行数は一致しなければならない。  どちらかが欠けている場合、もう一方は<code>y</code>とされ、<code>1:n</code>の<code>x</code>ベクトルが使われる。  <span style="font-family：クーリエニュー、クーリエ; color：<span style="font-family: Courier New; color: #666666;"><b>R</b></span> 4.0.0以降、<code>"Date"</code>のような<code>x</code>と<code>y</code>の<code>class(.)</code>は通常保存されます。
文字列(長さ1ベクトル)または1文字列のベクトルは、<code>y</code>の各列のプロットのタイプを示します。  <code>type</code>の最初の文字は最初のプロットを定義し、2番目の文字は2番目のプロットを定義するなど、<code>type</code>の文字は循環します; 例えば、<code>"pl"</code>は点と線を交互にプロットします。
最初の要素は最初の列、2番目の要素は2番目の列、といったように、すべての列で線が描かれない場合でも、線の種類、幅、終了スタイルを表すベクトル。線種は、すべてのプロットが描画されるまで循環的に使用される。
文字列、または1文字もしくは整数からなるベクトルで、文字をプロットします。  デフォルトは数字 (1 から 9, 0) で、次に小文字と大文字です。
色のベクトル。  色は循環的に使用される。
これは、<code>par("cex")</code>の倍数として動作します。  <code>NULL</code> は <code>1.0</code> と等価です。
<code>pch = 21:25</code>で与えられる、<code>points</code>と同様に、開いたプロットシンボルの背景（塗りつぶし）色のベクトル。  デフォルトの <code>NA</code> は、基礎となる関数<code>plot.xy</code>のものに対応します。
x軸とy軸のタイトル、<code>plot</code>と同様。
<code>plot</code>のように、x軸とy軸の範囲。
グラフィカル・パラメータ (<code>par</code> を参照) と <code>plot</code> の追加引数、典型的には <code>plot.default</code> も、この関数の引数として与えることができます。  従って、<code>par</code>で説明されている高レベルのグラフィクス制御引数や、<code>title</code>の引数もこの関数に与えることができます。
論理的である。  <code>TRUE</code>の場合、<code>points</code>と<code>lines</code>を使用して現在のプロットに追加される。
を使用する。  もし<code>TRUE</code>なら、何が行われたかを1行記述する。
<code>dimnames(x)</code>属性で指定されたオプションのカテゴリラベルを持つ、配列形式の分割表。  この表は<code>table()</code>コマンドで作成するのが最適である。
モザイク・タイトルの文字列。
モザイクのサブタイトル（下部）の文字列。
デフォルトでは、<code>names(dimnames(X))</code>の1番目と2番目の要素(すなわち、<code>X</code>の1番目と2番目の変数名)。
ベクトルによる変数の並び順。整数<code>1:length(dim(x))</code>の並べ替えを含む（デフォルト）。
モザイクの各レベルのパーセンテージ間隔を決定するオフセットのベクトル (適切な値は0から20の間で、デフォルトは2次元テーブルの分割数の20倍、それ以外は10)。  最大50にリスケーリングされ、必要に応じて再利用される。
モザイクの各レベルの分割方向(<code>"v"</code>は垂直方向, <code>"h"</code>は水平方向)のベクトル.  デフォルトは、垂直方向の分割から始まる交互の方向で構成されます。
論理または(リサイクリング)色のベクトルで、<code>shade</code>が<code>FALSE</code>または<code>NULL</code>(デフォルト)の場合にのみ使用されます。  デフォルトでは、灰色のボックスが描画されます。  <code>color = TRUE</code>はガンマ補正されたグレーパレットを使用します。  <code>color = FALSE</code>は、陰影のない空のボックスを描画します。
または, 残差のカットポイントの絶対値を与える最大5つの正数からなる数値ベクトル.  デフォルトでは、<code>shade</code>は<code>FALSE</code>で、単純なモザイクが作成されます。  <code>shade = TRUE</code>を使用すると、絶対値が2と4でカットされます。
対数線形モデルでフィットされるマージナル合計を持つベクトルのリスト。  デフォルトでは、独立モデルがフィットされます。詳細については、<code>loglin</code>を参照してください。
<code>par("cex")</code>の倍数として、軸の注釈に使用される倍率。
数値; 軸ラベルのスタイル、<code>par</code>を参照。
セルの境界の色: <code>polygon</code> を参照.
表現される残差のタイプを示す文字列。  <code>"pearson"</code>（ピアソンの<i>カイ2乗</i>の成分を与える）, <code>"deviance"</code>（尤度比<i>カイ2乗</i>の成分を与える）, Freeman-Tukey残差のための<code>"FT"</code>のいずれかでなければならない.  この引数の値は省略可能である。
<code>y ~ x</code>のような数式。
<code>formula</code> の変数を取り出すデータフレーム（またはリスト）、または分割表。
メソッドに渡す引数、またはメソッドから渡される引数。
プロットに使用するデータフレーム内のオブザベーションのサブセットを指定するオプションのベクトル。
データがクロス集計される変数を含み、これらの変数が<code>NA</code>を含む場合に何が起こるかを示す関数。  デフォルトでは、変数に<code>NA</code>が含まれるケースは省略される。  集計は欠損値を含む全てのケースを省略するので、これは<code>na.action</code>関数が欠損値を置き換える場合にのみ有用です。
書き込まれる<em>テキスト</em>を指定する文字または式ベクトル。  他のオブジェクトは<code>as.graphicsAnnot</code>によって強制されます。
プロットのどの面（1=下、2=左、3=上、4=右）。
どのMARgin線上で、0から始めて外側に数える。
可能なら外側の余白を使う。
各文字列の位置をユーザー座標で指定する。  特定のテキスト項目に対応する<code>at</code>の成分が有限の値でない場合（デフォルト）、その位置は<code>adj</code>によって決定されます。
各文字列の読み方向の調整。  軸に平行な文字列の場合、<code>adj = 0</code> は左またはボトムアライメントを意味し、<code>adj = 1</code> は右またはトップアライメントを意味する。

<code>adj</code>が有限の値（デフォルト）でない場合、<code>par("las")</code>の値が調整を決定する。  軸に平行にプロットされた文字列の場合、デフォルトは文字列を中央に配置する。
(これは<code>adj</code>によって制御されます)。  軸に平行な文字列の場合、<code>padj = 0</code> は右または上のアライメントを意味し、<code>padj = 1</code> は左または下のアライメントを意味する。

<code>padj</code>が有限の値（デフォルト）でない場合、<code>par("las")</code>の値が調整を決定する。  軸に垂直にプロットされた文字列の場合、デフォルトは文字列を中央に配置する。
文字拡大係数。  <code>NULL</code> と <code>NA</code> は <code>1.0</code> と等価です。  <code>par("cex")</code> や <code>par("mfrow")</code> や <code>par("mfcol")</code> の設定によってスケーリングされない、絶対的な尺度です。  ベクトルでもよい。
使用する色。  ベクトルでもよい。  <code>NA</code>値（デフォルト）は<code>par("col")</code>を使用することを意味する。
テキストのフォント。  ベクトル。  <code>NA</code>値（デフォルト）は、<code>par("font")</code>を使用することを意味する。
<code>family</code>、<code>las</code>、<code>xpd</code>を含む、さらなるグラフィカルパラメータ(<code>par</code>を参照)。(後者は、<code>outer = TRUE</code>でない限り、図領域をデフォルトとし、そうでない場合はデバイス領域をデフォルトとします。  増やすことしかできない)。
行列またはデータフレームの数値列として与えられた点の座標。  論理列と因子列は、<code>data.matrix</code>と同じ方法で数値に変換されます。
は、<code>~ x + y + z</code>のような数式に変換されます。  各項は、ペアプロットでは別々の変数になるので、項は数値ベクトルでなければなりません。  (応答は別の変数として解釈されるが、特別な扱いはされないので、1つを使うと混乱する)。
<code>formula</code>の変数を取り出すdata.frame(またはリスト)。
プロットに使用するオブザベーションのサブセットを指定するオプションのベクトル。
データに<code>NA</code>が含まれる場合の処理を示す関数。  デフォルトでは、欠損値をパネル関数に渡しますが、<code>na.action = na.omit</code>を指定すると、いずれかの変数に欠損値がある場合、完全に欠損されます。
変数名
<code>function(x,y,・・・)</code>は、ディスプレイの各パネルの内容を表示するために使われます。
メソッドに渡す引数、またはメソッドから渡される引数。

また、<code>main</code>のような<code>plot</code>の引数としてグラフィカル・パラメータを与えることができる。  <code>par("oma")</code>は、指定されない限り、適切に設定されます。
横軸と縦軸にそれぞれプロットされる変数の(数値)インデックス。
対角線の下と上でそれぞれ使用される別々のパネル関数(または<code>NULL</code>)。
対角線上に適用されるオプションの<code>function(x, ...)</code>。
対角線上に適用されるオプションの <code>function(x, y, labels, cex, font, ...)</code>.
<code>y</code> テキストパネルのラベルの位置。
<code>main</code>が指定された場合、<code>line.main</code>はタイトルを描画する<code>mtext()</code>に<code>line</code>引数を与えます。  <code>line.main</code>を変更する際には、<code>oma</code>を指定するとよいでしょう。
テキスト・パネルのグラフィック・パラメータ。
を論理的に指定します。  レイアウトは1行目を上にしたマトリックスのようにするか、1行目を下にしたグラフのようにするか。  後者（デフォルトではない）は、基本的に対称な散布図行列になります。
サブプロット間の距離をマージンラインで指定します。
<code>log = "xy"</code> は全ての変数に対して対数軸を指定します。
<code>logical</code> (または整数) は、水平軸と垂直軸のラベリング方法を決定する。  trueの場合、軸のラベル付けはそれぞれ最初の(左上からの)行または列から始まる。
は、行列またはデータフレームの数値列として与えられた点の座標を表します。  論理列と因子列は、<code>data.matrix</code>と同じ方法で数値に変換されます。
は、<code>~ x + y + z</code>のような数式に変換されます。  各項は、ペアプロットでは別々の変数になるので、項は数値ベクトルでなければなりません。  (レスポンスは別の変数として解釈されますが、特別な扱いはされません。)
<code>formula</code>の変数を取り出すdata.frame(またはリスト)。
プロットに使用するオブザベーションのサブセットを指定するオプションのベクトル。
データに<code>NA</code>が含まれる場合の処理を示す関数。  デフォルトでは、欠損値をパネル関数に渡しますが、<code>na.action = na.omit</code>を指定すると、いずれかの変数に欠損値がある場合、完全に欠損されます。
変数名
<code>function(x,y,・・・)</code>は、ディスプレイの各パネルの内容を表示するために使われます。
メソッドに渡す引数、またはメソッドから渡される引数。

また、<code>main</code>のような<code>plot</code>の引数としてグラフィカル・パラメータを与えることができる。  <code>par("oma")</code>は、指定されない限り、適切に設定されます。
横軸と縦軸にそれぞれプロットされる変数の(数値)インデックス。
対角線の下と上でそれぞれ使用される別々のパネル関数(または<code>NULL</code>)。
対角線上に適用されるオプションの<code>function(x, ...)</code>。
対角線上に適用されるオプションの <code>function(x, y, labels, cex, font, ...)</code>.
<code>y</code> テキストパネルのラベルの位置。
<code>main</code>が指定された場合、<code>line.main</code>はタイトルを描画する<code>mtext()</code>に<code>line</code>引数を与えます。  <code>line.main</code>を変更する際には、<code>oma</code>を指定するとよいでしょう。
テキスト・パネルのグラフィック・パラメータ。
を論理的に指定します。  レイアウトは1行目を上にしたマトリックスのようにするか、1行目を下にしたグラフのようにするか。  後者（デフォルトではない）は、基本的に対称な散布図行列になります。
サブプロット間の距離をマージンラインで指定します。
<code>log = "xy"</code> は全ての変数に対して対数軸を指定します。
<code>logical</code> (または整数) は、水平軸と垂直軸のラベリング方法を決定する。  trueの場合、軸のラベル付けはそれぞれ最初の(左上からの)行または列から始まる。
同じ長さの数値ベクトル
<code>points</code> の色(複数可), 点の種類, 大きさを表す数値または文字コード; <code>par</code> も参照してください。
<code>lines</code> がスムージングを描画する際に使用する色.
<code>lowess</code>のスムージングパラメータ <code>f</code>, こちらを参照.
<code>lowess</code>のロバストネス反復回数。
<code>lines</code>のさらなる引数。
<code>tag = value</code> 形式の引数、またはタグ付き値のリスト。  タグは'Graphical Parameters'セクションで説明されているグラフィカルパラメータの名前でなければならない。
論理; <code>TRUE</code>で他の引数がない場合、<em>同じデバイス上で<code>par()</code>を呼び出すことで設定できるパラメータのみが返されます。
<code>z</code> の値が測定されるグリッド線の位置。  これらは昇順でなければならない。  デフォルトでは、0から1までの等間隔の値が使われる。  <code>x</code> が <code>list</code> の場合、その構成要素 <code>x$x</code> と <code>x$y</code> は、それぞれ <code>x</code> と <code>y</code> に使用される。
プロットされる値を含む行列 (<code>NA</code>s areallowed).  便宜上、<code>z</code>の代わりに<code>x</code>を使用できることに注意。
x-、y-、z-リミット。  これらはサーフェスの値の範囲をカバーするように選択されるべきである: '詳細'を参照。
軸のタイトル。  N.B.これらは文字列でなければなりません。  数値は文字列に強制されます。
<code>title</code>と同様に、メインとサブのタイトル。
<code>θ</code>は方位角、<code>phi</code>は大緯度を表します。
プロットボックスの中心からのアイポイントの距離。
<code>d</code> は透視変換の強さを変えるのに使われます。  <code>d</code>の値が1より大きいと遠近効果が弱くなり、1より小さいと遠近効果が誇張されます。
表示前に、サーフェスを定義する点のx,y,z座標は、区間[0,1]に変換されます。  もし <code>scale</code> が <code>TRUE</code> ならば、x, y, z 座標は別々に変換されます。  <code>scale</code>が<code>FALSE</code>の場合、座標はアスペクト比が保持されるようにスケーリングされます。これは、DEM情報のようなものをレンダリングするのに便利です。
<code>z</code>座標に適用される拡大係数。しばしば <code>0 &lt; expand &lt; 1</code> と共に使用され、<code>z</code>方向にプロットボックスを縮小します。
表面ファセットの色。  透明な色は無視されます。  これは<i>(nx-1)(ny-1)</i>ファセットにリサイクルされます。
デフォルトの<code>NULL</code>は、<code>par("fg")</code>に対応します。<code>NA</code>の値は、境界線の描画を無効にします。
<code>lheta</code>と<code>lphi</code>に有限の値が指定された場合、サーフェスは方位<code>lheta</code>と大緯度<code>lphi</code>で指定された方向から照らされているようにシェーディングされます。
ここで、<code>d</code>は、ファセットに垂直な単位ベクトルと光源の方向の単位ベクトルのドット積です。  <code>shade</code>の値が1に近いと点光源モデルに似たシェーディングが得られ、0に近いとシェーディングが得られません。  0.5から0.75の範囲の値は、昼光照明に近似します。
デフォルトは<code>TRUE</code>です。
ボックスに目盛りとラベルを追加するかどうか。  デフォルトは<code>TRUE</code>です。  もし<code>box</code>が<code>FALSE</code>の場合、目盛りやラベルは描画されません。
文字を描画します：<code>"simple"</code>は増加方向を示す軸に平行な矢印を描画します;<code>"detailed"</code>は2Dプロットと同様に通常の目盛りを描画します。
(おおよその)目盛りの数を指定します。  <code>ticktype</code>が<code>"simple"</code>の場合、効果はありません。
追加のグラフィックパラメータ (<code>par</code> を参照)。
<code>x</code> の値は、パイスライスの面積として表示されます。
スライスの名前を与える1つ以上の式または文字列。  他のオブジェクトは<code>as.graphicsAnnot</code>で強制されます。  空または<code>NA</code>(文字への強制の後)ラベルの場合、ラベルもポインティングラインも描画されない。
パイの円形の輪郭は、この数の辺を持つ多角形で近似されます。
パイは <i>-1</i> から <i>1</i> までの正方形の箱の中心に描かれる。  スライスを示す文字列が長い場合は、半径を小さくする必要があるかもしれない。
logicalはスライスを時計回りか反時計回り(つまり数学的に正の方向)のどちらで描くかを示す。
スライスの<em>開始角度</em>(indegrees)を指定する数値。<code>clockwise</code> が真で、<code>init.angle</code>のデフォルトが90 (度), (すなわち'12時')でない限り、デフォルトは0 (すなわち'3時')。
デフォルト値の<code>NULL</code>は、シェーディング線を描画しないことを意味します。<code>density</code>の値が正でない場合も、シェーディング線の描画は抑制されます。
シェーディングラインの傾きを指定します。
スライスを塗りつぶしたり陰影をつけるのに使われる色のベクトル。<code>par("fg")</code>が使用されたときに<code>density</code>が指定されない限り、6色のパステルカラーが使用されます。
(おそらくベクトル) 引数は、各スライスを描画する <code>polygon</code> に渡されます。
プロット全体のタイトル。
グラフィカルパラメータは<code>pie</code>に引数として与えることができます。  これらはメインタイトルとラベルにのみ影響します。
<code>x</code> と <code>y</code> 引数は、プロットの x と y の座標を指定します。  座標を定義する妥当な方法は何でもかまいません。  詳細は関数 <code>xy.coords</code> を参照して下さい。  別々に与える場合は、同じ長さでなければなりません。
希望するプロットのタイプを示す1文字の文字列。  詳細は <code>plot</code> を参照：<code>"p"</code> for points, <code>"l"</code> for lines, <code>"b"</code> for both points and lines, <code>"c"</code> for empty points joined by lines, <code>"o"</code> for overplotted points and lines, <code>"s"</code> and <code>"S"</code> for stair steps, <code>"h"</code> for histogram-like vertical lines.  最後に、<code>"n"</code>は点や線を生成しない。
プロットの x 限界 (x1, x2) を指定します。  <code>x1 &gt; x2</code> が許され、'逆軸'になることに注意してください。

デフォルト値の<code>NULL</code>は、プロットされる定数値の範囲を使用することを示します。
プロットのy限界。
x 軸が対数の場合は <code>"x"</code>、y 軸が対数の場合は <code>"y"</code>、両軸が対数の場合は <code>"xy"</code>または <code>"yx"</code>を含む文字列。
<code>title</code> も参照してください。
プロットのサブタイトル。
x軸のラベル、デフォルトは<code>x</code>の記述。
y軸のラベル、デフォルトは<code>y</code>の記述。
デフォルトの注釈(タイトル、x軸とy軸のラベル)をプロットに表示するかどうかを示す論理値。
両軸をプロット上に描画するかどうかを示す論理値。  片方の軸だけを抑制するには、グラフィカルパラメータ<code>"xaxt"</code>または<code>"yaxt"</code>を使用します。
プロットの周囲にボックスを描くかどうかを示す論理。
プロット軸が設定された後、プロットが行われる前に評価される'式'。  これは背景格子や散布図の平滑化を描画するのに便利です。  他の<code>plot</code>メソッドからこの引数を渡すと、評価されるのが早すぎてうまくいかないかもしれません。
この引数を他の<code>plot</code>メソッドから渡すと、評価されるのが早すぎてうまくいかないかもしれません。  <code>panel.first</code>に関するコメントを参照してください。
<i>y/x</i>アスペクト比は、<code>plot.window<//code>を参照。
2つの<code>axis()</code>呼び出しに<code>gap.axis</code>として渡される、<i>x/y</i>軸のギャップ係数 (デフォルトのように<code>axes</code>がtrueの場合)。
その他のグラフィカルパラメータ（下記の<code>par</code>とセクション「詳細」を参照）。
<code>x</code>と<code>y</code>引数は、プロットのx座標とy座標を指定します。  座標を定義する妥当な方法は何でもよい。  詳しくは、関数 <code>xy.coords</code> を参照して下さい。  別々に与える場合は、同じ長さでなければなりません。
希望するプロットのタイプを示す1文字の文字列。  詳細は <code>plot</code> を参照：<code>"p"</code> for points, <code>"l"</code> for lines, <code>"b"</code> for both points and lines, <code>"c"</code> for empty points joined by lines, <code>"o"</code> for overplotted points and lines, <code>"s"</code> and <code>"S"</code> for stair steps, <code>"h"</code> for histogram-like vertical lines.  最後に、<code>"n"</code>は点や線を生成しない。
プロットの x 限界 (x1, x2) を指定します。  <code>x1 &gt; x2</code> が許され、'逆軸'になることに注意してください。

デフォルト値の<code>NULL</code>は、プロットされる定数値の範囲を使用することを示します。
プロットのy限界。
x 軸が対数の場合は <code>"x"</code>、y 軸が対数の場合は <code>"y"</code>、両軸が対数の場合は <code>"xy"</code>または <code>"yx"</code>を含む文字列。
<code>title</code> も参照してください。
プロットのサブタイトル。
x軸のラベル、デフォルトは<code>x</code>の記述。
y軸のラベル、デフォルトは<code>y</code>の記述。
デフォルトの注釈(タイトル、x軸とy軸のラベル)をプロットに表示するかどうかを示す論理値。
両軸をプロット上に描画するかどうかを示す論理値。  片方の軸だけを抑制するには、グラフィカルパラメータ<code>"xaxt"</code>または<code>"yaxt"</code>を使用します。
プロットの周囲にボックスを描くかどうかを示す論理。
プロット軸が設定された後、プロットが行われる前に評価される'式'。  これは背景格子や散布図の平滑化を描画するのに便利です。  他の<code>plot</code>メソッドからこの引数を渡すと、評価されるのが早すぎてうまくいかないかもしれません。
この引数を他の<code>plot</code>メソッドから渡すと、評価されるのが早すぎてうまくいかないかもしれません。  <code>panel.first</code>についてのコメントを参照してください。
<i>y/x</i>アスペクト比は、<code>plot.window<//code>を参照。
2つの<code>axis()</code>呼び出しに<code>gap.axis</code>として渡される、<i>x/y</i>軸のギャップ係数 (デフォルトのように<code>axes</code>がtrueの場合)。
その他のグラフパラメータ（下記の<code>par</code>およびセクション「詳細」を参照）。
設計因子と任意で応答を含むデータフレーム、または<code>formula</code>または<code>terms</code>オブジェクト。
xで与えられていない場合は、応答。
各サブセットに適用される関数 (またはその名前)。  これは数値(ベクトル)入力に対して1つの数値を返さなければならない。
<code>x</code>で参照される変数を含むデータフレーム。
<code>col</code>のようなグラフィカルパラメータは、<code>par</code>を参照。
<code>plot.default</code>のようなy値の範囲。
x軸ラベル, <code>title</code>を参照.
スマート'デフォルトのy軸ラベル.
main title, <code>title</code>を参照。
新しいページを開始する前にユーザに尋ねるかどうかを示す論理値 - 複数のy軸の場合。
x軸の種類を示す文字。
軸が描画されるべきかどうかを示す論理。
X軸に目盛りを付けるかどうかを示す論理。
<code>x</code>と同じ長さのオブジェクトを評価する関数の名前、呼び出し、または<code>x</code>の関数として書かれた式。
ベクトル化」数値<span style="font-family：font-family: Courier New, Courier; color：font-family: Courier New, Courier; color: #666666;"><b>R</b></span>関数。
<code>plot</code>との互換性のため、<code>from</code>のエイリアス。
関数がプロットされる範囲。
整数; 評価するx値の数。
論理; もし<code>TRUE</code>なら、既に存在するプロットに追加する。もし<code>NA</code>なら、x軸の限界とlog-scalingのデフォルトを前のプロットから取って、新しいプロットを開始する。  nographicsデバイスがオープンされている場合、<code>FALSE</code>として扱われます。
<code>NULL</code>または長さ2の数値ベクトル; もし<code>NULL</code>でなければ、<code>c(from, to)</code>のデフォルトを提供し、<code>add = TRUE</code>でなければ、プロットのx-limitsを選択します - <code>plot.window</code>を参照してください。
プロットタイプ: <code>plot.default</code> を参照。
x軸に使用される名前を与える文字列。
ラベルとグラフパラメータも引数として指定できる。  <code>log</code>のデフォルトの解釈については'詳細'を参照。

<code>plot</code>の<code>"function"</code>メソッドでは、<code>...</code>は<code>curve</code>の<code>expr</code>以外の引数を含むことができます。
長さ2の数値ベクトルで、x座標とy座標の範囲を与える。
文字; どの軸を対数スケールにするかを示す。
数値, <b>asp</b>ect ratio y/xを与える。
関連するものは、<code>xaxs</code>, <code>yaxs</code>, <code>lab</code>です。
<code>xy.coords</code>から得られる4要素リスト。
1文字コード: <code>plot.default</code> を参照。<code>"p"</code>の同義語として<code>NULL</code>を受け付ける。
ポイントの種類を表す文字または整数コード、<code>points.default</code>を参照。
line type code, <code>lines</code> を参照。
<code>colors</code>,<code>palette</code> を参照。  ここで <code>NULL</code> は色 0 を意味する。
21:25:<code>points.default</code>をご覧下さい。
文字展開。
線幅、(塗りつぶされていない)プロットシンボルにも使用されます、<code>lines</code>と<code>points</code>を参照して下さい。
<code>xpd</code>、<code>lend</code>、<code>ljoin</code>、<code>lmitre</code>などのグラフィカルパラメータ。
プロットする点の座標ベクトル.
実際には、<code>plot.default</code>にあるような<code>type</code>のいずれかです。
さらにグラフィカルなパラメータを引数として与えることもできる。  詳細'を参照。
プロットする点の座標ベクトル.
実際には、<code>plot.default</code>と同様に、<code>type</code>sのいずれかです。
さらにグラフィカルなパラメータを引数として与えることもできる。  詳細'を参照のこと。
多角形の頂点の座標を含むベクトル。
陰影線の密度を1インチあたりの線で表す。  デフォルト値の<code>NULL</code>は、陰影線が描かれないことを意味します。<code>density</code>の値がゼロの場合は、陰影も塗りつぶしもないことを意味し、負の値と<code>NA</code>は陰影を抑制します(したがって、色塗りつぶしを許可します)。
シェーディングラインの傾きを度単位で指定します (反時計回り)。
ポリゴンを塗りつぶす色。デフォルトの <code>NA</code> は、<code>density</code> が指定されない限り、ポリゴンを塗りつぶさない。  (互換性のため、<code>NULL</code>は<code>NA</code>と等価です。) <code>density</code>が正の値で指定された場合、これは陰線の色になります。
ボーダーを描画する色。  デフォルトの<code>NULL</code>は、<code>par("fg")</code>を使用することを意味します。  <code>border = NA</code>を使用すると、ボーダーを省略することができる。

この場合、<code>FALSE</code>は<code>NA</code>（ボーダーは省略）と等価であり、<code>TRUE</code>は<code>NULL</code>（前景色を使用）と等価である、
<code>par</code> のように、使用される線種。
<code>xpd</code>, <code>lend</code>, <code>ljoin</code>, <code>lmitre</code> のようなグラフィカルパラメータを引数として与えることができます。
ポリゴンシェーディングモードを制御する論理。  デフォルトは <code>FALSE</code> です。
パスの頂点の座標を含むベクトル。
パスを塗りつぶす色。デフォルトは <code>NA</code> で、パスは塗りつぶされません。
境界を描画する色。  デフォルトの <code>NULL</code> は、<code>par("fg")</code> を使用することを意味する。  <code>border = NA</code> を使用すると、ボーダーを描画しない。

この場合、<code>FALSE</code>は<code>NA</code>（ボーダーは省略）と等価であり、<code>TRUE</code>は<code>NULL</code>（前景色を使用）と等価である、
<code>par</code> のように、使用される線種。
パスの塗りつぶしモードを指定する文字値: <code>"winding"</code>または<code>"evenodd"</code>のいずれか。
<code>xpd</code>, <code>lend</code>, <code>ljoin</code>, <code>lmitre</code> のようなグラフィカルパラメータを引数として与えることができる。
<code>raster</code> オブジェクト、または <code>as.raster</code> によって1つに強制されるオブジェクト。
左x位置のベクトル(またはスカラ)。
底面y位置のベクトル(またはスカラー).
右x位置のベクトル(またはスカラー).
上端y位置のベクトル（またはスカラー）.
回転角度（度単位、正のx軸から反時計回り、左下隅を中心として）。
描画時に画像に線形補間を適用するかどうかを示す論理ベクトル（またはスカラー）。
グラフィカルパラメータ。
左x位置のベクトル（またはスカラー）。
底辺y位置のベクトル（またはスカラー）。
右x位置のベクトル（またはスカラー）。
上部y位置のベクトル（またはスカラー）。
デフォルト値の<code>NULL</code>は、シェーディング線が描かれないことを意味します。<code>density</code>の値がゼロの場合は、シェーディング線がないことを意味し、負の値（および<code>NA</code>）は、シェーディングを抑制します（したがって、色塗りを許可します）。
シェーディング線の角度 (度)。
デフォルトの <code>NA</code> (または <code>NULL</code>) は、<code>density</code> が指定されない限り、塗りつぶさない、つまり透明な矩形を描くことを意味します。
矩形の境界の色。  デフォルトは<code>par("fg")</code>です。  シェーディングラインがある場合、<code>border = TRUE</code>は、シェーディングラインと同じ色をボーダーに使用することを意味します。
デフォルトは <code>"solid"</code> です。
ボーダーとシェーディングの線幅。  (例のように)<code>lwd = 0</code>の使用はデバイス依存であることに注意。
<code>xpd</code>、<code>lend</code>、<code>ljoin</code>、<code>lmitre</code>のようなグラフィカル・パラメータを引数として与えることができる。
数値ベクトル
'rug'を構成する目盛りの長さ。正の長さは、内側に目盛りを与える。
プロットボックスのどの側にラグをプロットするか。通常は 1 (下) または 3 (上)。
目盛りの線幅。  デバイスによっては、デフォルトの幅を<code>1</code>に丸めるものもあります。
目盛りの色。
クリップされた値に関する警告を表示するかどうかを示す論理値。
<code>line</code> や <code>pos</code> のような <code>axis</code> に渡される更なる引数。
行列の場合、各行は画面の左、右、下、上 (この順) の値を NDC 単位で持つ画面を記述します。
分割する画面を示す番号。  デフォルトは現在の画面があればその画面、なければデバイスの全領域。
論理: 選択された画面をクリアするか。
描画(<code>screen</code>)、消去(<code>erase.screen</code>)、閉じる(<code>close.screen</code>)ためにどの画面を準備するかを示す数字。  (<code>close.screen</code>はスクリーン番号のベクトルを受け取ります)。
スクリーンに描画する準備の一部として、スクリーンをビアシースすべきかどうかを示す論理値。
全てのスクリーンを閉じるべきかどうかを示す論理値。
描画する <b>from</b> 点の座標。
描画する点の<b>to</b>座標。  少なくとも1つは与えなければならない。
<code>par</code>にあるようなグラフィカルパラメータ、場合によってはベクトル。  <code>col</code> の <code>NA</code> 値は、セグメントを省略する。
<code>xpd</code> やライン特性 <code>lend</code>、<code>ljoin</code>、<code>lmitre</code> などの (<code>par</code> からの) さらなるグラフィカルパラメータ。
<code>x</code> と <code>y</code> 引数は、プロットの x と y の座標を指定します。  座標を定義する合理的な方法は何でもかまいません。  詳細は関数 <code>xy.coords</code> を参照して下さい。  別々に与えられる場合、それらは同じ長さでなければなりません。
長さ1(両方向)または2(xとyを別々に)の数値ベクトルで, 密度推定のための等間隔の格子点の数を指定します; <code>bkde2D()<//code> の<code>gridsize</code>として直接使用されます.
数値ベクトル (長さ 1 または 2) 平滑化帯域幅.<code>bandwidth</code>は、その後、関数<code>bkde2D</code>に渡されます。
関数は整数 <code>n</code> を引数にとり、<code>n</code> 色を返す。
密度画像に重ね合わせる点の数.  最も密度の低い領域から最初の <code>nrpoints</code> 点がプロットされる。  プロットにポイントを追加することで、外れ値を識別することができる。  すべての点をプロットする場合は、<code>nrpoints = Inf</code>を選択する。
<code>nrpoints &gt; 0</code>の場合、"低密度 "点の添字を返すことを示す<code>logical</code>。
<code>nrpoints &gt; 0</code> の場合、<code>points</code> に渡される引数: 点記号、文字拡大係数、色、<code>par</code> も参照。
濃度スケールをカラースケールにマッピングする関数.
<code>NULL</code> または <code>image</code> の後に (引数なしで) 呼び出される関数のいずれか.
<code>image</code> に渡される、軸ラベルとして使用される文字列。
軸の限界を指定する長さ2の数値ベクトル。
例えば、<code>add=TRUE</code> または <code>useRaster=TRUE</code>。
オブジェクト、デフォルトのメソッドは、単一の変数（説明変数と解釈される）または2ウェイテーブルのいずれかを期待する。  Seedetails.
従属変数と解釈される<code>"factor"</code>。
単一独立の<code>"factor"</code>と単一の説明変数を持つ<code>y ~ x</code>型の<code>"formula"</code>。
オプションのデータ・フレーム。
説明変数が数値の場合、どのように離散化するかを制御します。<code>breaks</code>は<code>hist</code>に渡され、引数のリストとなります。
2つのラベル間の距離がこの閾値を下回ると、それらは等距離にプロットされる。
バー間の垂直オフセット（単位：パーセント）。スピノグラムでは<code>0</code>に固定され、スパイン・プロットでは<code>2</code>にデフォルト設定されます。
従属変数の水準をどの順序でプロットするかを指定する文字または数値ベクトル.
<code>levels(y)</code>と同じ長さの塗りつぶし色のベクトル。デフォルトは<code>gray.colors</code>です。
注釈用文字列
x軸とy軸の注釈のための文字ベクトル。デフォルトは、それぞれ<code>levels(y)</code>と<code>levels(x)</code>です。スピノグラムの<code>xaxlabels</code>では、ブレークが使用されます。
xとyの値の範囲。
を論理的に指定します。  <code>FALSE</code>の場合、すべての軸(レベル名を含む)は抑制されます。
<code>rect</code> に渡される追加引数。
プロットに使用されるオブザベーションのサブセットを指定するオプションのベクトル。
デフォルトは<code>FALSE</code>です。
行列の場合, 各行は画面の左, 右, 下, 上(この順)の値をNDC単位で持つ画面を記述する.
分割する画面を示す番号。  デフォルトは現在の画面があればその画面、なければデバイスの全領域。
論理: 選択された画面をクリアするか。
描画(<code>screen</code>)、消去(<code>erase.screen</code>)、閉じる(<code>close.screen</code>)ためにどの画面を準備するかを示す数字。  (<code>close.screen</code>はスクリーン番号のベクトルを受け取ります)。
スクリーンに描画する準備の一部として、スクリーンをビアシースすべきかどうかを示す論理値。
全てのスクリーンを閉じるべきかどうかを示す論理値。
欠損値(<code>NA</code>)は許されるが、(スケーリングが必要であれば)0であるものとして扱われる。
論理フラグ: <code>TRUE</code>の場合、セグメントプロットは完全な円を描く。  そうでなければ、(上側の)半円のみを占める。
論理フラグ: <code>TRUE</code>の場合、データ行列の列は、各列の最大値が1、最小値が0になるように独立にスケーリングされる。 <code>FALSE</code>の場合、データは他のアルゴリズムによって範囲<i>[0, 1]</i>にスケーリングされたものと推定される。
論理フラグ: <code>TRUE</code>の場合, データの各変数に対応する半径が描画されます.
S関数の<code>stars</code>とは異なり、<code>labels = NULL</code>の場合、ラベルは作成されません。
デフォルトでは、<code>locations = NULL</code>の場合、セグメントプロットは矩形グリッドに配置されます。
<code>locations</code> が <code>NULL</code> の場合に使用する行と列の数を指定する整数。  デフォルトでは、<code>nrow == ncol</code>の場合、正方形のレイアウトが使用されます。
半径またはセグメントの長さのスケールファクタ。
ベクトルで、単位キーの x 座標と y 座標を指定します。
単位キーのこれらのセグメントにラベルを付けるための文字列のベクトル。  省略された場合は、<code>dimnames(x)</code>の第2成分が使用されます。
<code>par("xpd")</code>を参照。
ベクトルで、描画するx座標の範囲を指定します。
ベクトルで、描画するy座標の範囲を指定します。
ラベルの位置がダイアグラム間で上下に反転するかどうかを示す論理。デフォルトはヒューリスティックです。
論理的。もし<code>TRUE</code>ならセグメント図を描く。
色ベクトル (整数または文字。<code>par</code>を参照)。  <code>draw.segments = FALSE</code> の場合は無視されます。
色ベクトル (整数または文字, <code>par</code> を参照).  <code>draw.segments = TRUE</code> の場合は無視されます。
色ベクトル (整数または文字, <code>par</code> を参照).  <code>draw.segments = TRUE</code> の場合は無視されます。
論理フラグ: <code>TRUE</code> の場合、プロットに軸が追加されます。
論理フラグ: <code>TRUE</code>の場合、プロット領域を枠で囲む。
プロットのメインタイトル
プロットのサブタイトル
x軸のラベル
y軸のラベル
ラベルの文字拡大率
描画に使用する線幅
描画に使用する線種
<code>par(xpd=・)</code>を参照してください。
<code>par(mar = *)</code> への引数で、通常はデフォルトより小さい余白を選択する。
さらに、<code>plot()</code>の最初の呼び出しに渡される引数は、<code>plot.default</code>と<code>frame.plot</code>が真の場合の<code>box()</code>を参照。
logical, if <code>TRUE</code> <em>add</em> stars to current plot.
論理、もし <code>FALSE</code> なら、何もプロットされない。
数値ベクトル。
これはプロットの長さを制御します。
プロットの幅を指定します。
許容誤差。
次元が決定される文字または式ベクトル。  他のオブジェクトは<code>as.graphicsAnnot</code>によって強制されます。
<code>s</code>がどの単位で測定されるかを示す文字; <code>"user"</code>、<code>"inch"</code>、<code>"figure"</code>のいずれかでなければなりません。
数値の<b>c</b>文字の<b>ex</b>倍率; multipied by <code>par("cex")</code> y yst a final character size; デフォルトの<code>NULL</code>は<code>1</code>と等価です。
グラフィックパラメータ<code>"family"</code>を含むフォントに関する追加情報: <code>text</code>を参照。
プロットを生成するデータ。  デフォルトのメソッドでは、データは、1つの数値ベクトルとして指定することもできますし、数値ベクトルのリストとして指定することもできます。  <code>formula</code>法では、<code>y ~ g</code>という形式の記号的指定が与えられ、ベクトル<code>y</code>のオブザベーションが因子<code>g</code>の水準に従ってグループ化されることを示します。  <code>NA</code>はデータ中に許される。
<code>x</code>の変数が取り出されるべきdata.frame（またはリスト）。
プロットに使用するオブザベーションのサブセットを指定するオプションのベクトル。
データに<code>NA</code>が含まれる場合の処理を示す関数。  デフォルトは、応答またはグループのどちらかの欠損値を無視する。
デフォルトのメソッド、または<code>plot.window</code>、<code>points</code>、<code>axis</code>、<code>title</code>に渡される追加のパラメータは、プロットの外観を制御します。
デフォルトの<code>"overplot"</code>は、そのような点をオーバープロットしますが、<code>"jitter"</code>を指定して点をずらしたり、<code>"stack"</code>一致する点を積み重ねたりすることもできます。  最後の方法は、非常に粒度の細かいデータに対してのみ意味がある。
<code>method = "jitter"</code> が使用された場合、<code>jitter</code>は適用されるジッタリングの量を与える。
stackingが使用された場合、ポイントはこのmanyline-heights(シンボル幅)間隔でスタックされる。
verticalが<code>TRUE</code>の場合、プロットはデフォルトの水平方向ではなく、垂直方向に描画されます。
グループラベルは、各プロットの横に(または下に)印刷されます。
logical, もしtrueなら <em>add</em> 現在のプロットにチャートを追加します。
特に<code>add = TRUE</code>の場合; デフォルトは<code>1:n</code>で、<code>n</code>はボックスの数です。
labels: <code>title</code> を参照のこと。
軸ラベルを指定する別の方法: '詳細'を参照。
プロットの制限: <code>plot.window</code> を参照。
どの軸で対数スケールを使うか: <code>plot.default</code> を参照。
グラフィカルパラメータ: <code>par</code> を参照。
軸制御: <code>plot.default</code> を参照。
次元が決定される文字または式ベクトル。  他のオブジェクトは、<code>as.graphicsAnnot</code>によって強制される。
<code>s</code>がどの単位で測定されるかを示す文字; <code>"user"</code>、<code>"inch"</code>、<code>"figure"</code>のいずれかでなければなりません。
数値の<b>c</b>文字の<b>ex</b>倍率; multipied by <code>par("cex")</code> y yst a final character size; デフォルトの<code>NULL</code>は<code>1</code>と等価です。
グラフィックパラメータ<code>"family"</code>を含むフォントに関する追加情報: <code>text</code>を参照。
長さ<code>n</code>の<code>x</code>座標の数値ベクトル、または<code>plot.default</code>のような他の有効なプロット構造、<code>xy.coords</code>も参照して下さい。
長さ<code>n</code>の<code>y</code>座標の数値ベクトル.
長さ <code>n</code> の整数ベクトル.<code>number[i]</code> = <code>(x[i],y[i])</code>の複製数, 0かもしれません.<br>デフォルト(<code>missing(number)</code>): 点<code>x[], y[]</code>の正確な多重度を<code>xyTable()</code>で計算します.
対数座標スケールを示す文字、<code>plot.default</code>を参照。
<code>number</code>が計算される（すなわち、指定されない）場合、<code>x</code>と<code>y</code>は、乗数が計算される前に<code>digits</code>有効桁に丸められます。
それぞれx軸, y軸の文字ラベル.
<code>numeric(2)</code>は、x軸またはy軸の範囲を制限する。
logical;プロットを前のプロットの上に追加するか？ デフォルトは <code>FALSE</code> です。
logical; <code>TRUE</code>の場合、ひまわりをランダムに回転させる(アーティファクトを防ぐ)。
点(<code>number[i]==1</code>)とひまわりの中心に使用するプロット文字。
数値; 中心点の文字サイズ拡大(s. <code>pch</code>).
中心点の<em>縮小</em>係数は、<em>花の葉</em>がある場合、<code>cex / cex.fact<//code>が使われます。
<code>plot.default</code>に渡されるプロットシンボルの色。
ひまわりの葉のインチ数, 1[in] := 2.54[cm].Default: 1/8", 約3.2mm.
<code>par(col=)</code>;<code>col = "gold"</code> は本物のひまわりを連想させる。
数値; 葉のセグメントの線幅.
<code>plot</code> [if<code>add = FALSE</code>] へのさらなる引数、または他のメソッドへ、または他のメソッドから渡される引数。
<code>y ~ x</code> のような <code>formula</code>.
<code>formula</code>の変数を取得する data.frame（またはリスト）。
フィット処理に使用する観測値のサブセットを指定するオプションのベクトル.
データに<code>NA</code>が含まれる場合の処理を示す関数。  デフォルトは欠損値を無視する。
シンボルの中心のx座標とy座標は、<code>xy.coords</code>が受け付ける任意の方法で指定することができる。
円の半径を示すベクトル。
正方形の辺の長さを示すベクトル.
2列の行列.  最初の列は長方形の幅を与え，2番目の列は高さを与える．
3列以上の行列は，星の中心からの光線の長さを与える．  <code>NA</code>の値は0に置き換えられる.
3列または4列の行列.  最初の2列は温度計のシンボルの幅と高さを示す。3つの列がある場合、3番目は比率としてとられる：温度計はその底辺からこの比率の高さまで塗りつぶされる（色<code>fg</code>を使用）。  4つの列がある場合、3番目と4番目の列が比率としてとられ、温度計はこの2つの高さの比率の間で塗りつぶされる。  <code>fg</code>で塗りつぶされなかった部分は、<code>bg</code>で指定された背景色（デフォルトは透明）で塗りつぶされます。
5列の行列。  最初の2列はボックスの幅と高さ, 次の2列は下ヒゲと上ヒゲの長さ, 5列目は中央線が描かれるボックスの上方への割合 ([0,1] 以外の場合は警告).
<code>TRUE</code>、<code>FALSE</code> または正の数。
<code>add</code> が <code>TRUE</code> の場合、シンボルは既存のプロットに追加されます。
シンボルを描画する色。
指定された場合、シンボルは色で塗りつぶされ、ベクトル <code>bg</code> はシンボルの数にリサイクルされます。
<code>add</code>がtrueでない場合、プロットのxラベルを指定します。デフォルトは<code>x</code>に使用される<code>deparse</code>d式です。
プロットのyラベル。  <code>add = TRUE</code>の場合は使用されません。
プロットのメインタイトル。  <code>add = TRUE</code>の場合は未使用。
長さ 2 の数値ベクトルで、プロットの x リミットを指定します。  <code>add = TRUE</code> の場合は未使用。
長さ 2 の数値ベクトルで y の制限値を指定します.  <code>add = TRUE</code> の場合は未使用。
グラフィックパラメータは、プロットのアスペクト比 <code>asp</code> と同様に、この関数に渡すこともできます (<code>plot.window</code> を参照)。
テキスト<code>ラベル</code>を書き込む座標の数値ベクトル。  <code>x</code>と<code>y</code>の長さが異なる場合、短い方が再利用されます。
書き込まれる<em>テキスト</em>を指定する文字ベクトルまたは式。  <code>labels</code>が<code>x</code>と<code>y</code>より長い場合、座標は<code>labels</code>の長さにリサイクルされます。
<i>[0,1]</i>の中の1つか2つの値で、ラベルのx(そしてオプションでy)の調整('justification')を指定します。  ほとんどのデバイスでは、<i>[0, 1]</i>以外の値でも動作します。  以下を参照。
テキストの位置指定子。  指定された場合、これは与えられた<code>adj</code>値を上書きします。  <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>の値は、それぞれ指定された<code>(x,y)</code>座標の下、左、上、右の位置を示します。
<code>pos</code> が指定された場合、この値は指定された座標からのテキストラベルの距離('オフセット')を文字幅の端数で制御します。
<code>NULL</code> を指定すると現在のフォントファミリ、Hershey ベクトルフォントを指定すると長さ 2 の文字ベクトルになります。  ベクトルの最初の要素は書体を選択し、2番目の要素はスタイルを選択する。  <code>labels</code> が式の場合は無視される。
<code>NULL</code> と <code>NA</code> は <code>1.0</code> と等価です。
使用する色と(<code>vfont = NULL</code> の場合)フォント。  これらのデフォルトは、<code>par()</code>のグローバルグラフィカルパラメータの値です。
<code>srt</code>、<code>family</code>、<code>xpd</code>のような(<code>par</code>からの)さらなるグラフィカルパラメータ。
テキスト<code>ラベル</code>が書かれるべき座標の数値ベクトル。  <code>x</code>と<code>y</code>の長さが異なる場合、短い方が再利用される。
書き込まれる<em>テキスト</em>を指定する文字ベクトルまたは式。  <code>labels</code>が<code>x</code>と<code>y</code>より長い場合、座標は<code>labels</code>の長さにリサイクルされます。
<i>[0,1]</i>の中の1つか2つの値で、ラベルのx(そしてオプションでy)の調整('justification')を指定します。  ほとんどのデバイスでは、<i>[0, 1]</i>以外の値でも動作します。  以下を参照。
テキストの位置指定子。  指定された場合、これは与えられた<code>adj</code>値を上書きします。  <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>の値は、それぞれ指定された<code>(x,y)</code>座標の下、左、上、右の位置を示します。
<code>pos</code> が指定された場合、この値は指定された座標からのテキストラベルの距離('オフセット')を文字幅の端数で制御します。
<code>NULL</code> を指定すると現在のフォントファミリ、Hershey ベクトルフォントを指定すると長さ 2 の文字ベクトルになります。  ベクトルの最初の要素は書体を選択し、2番目の要素はスタイルを選択する。  <code>labels</code> が式の場合は無視される。
<code>NULL</code> と <code>NA</code> は <code>1.0</code> と等価です。
使用する色と(<code>vfont = NULL</code> の場合)フォント。  これらのデフォルトは、<code>par()</code>のグローバルグラフィカルパラメータの値です。
<code>srt</code>、<code>family</code>、<code>xpd</code>のような、さらなるグラフィカル・パラメータ（<code>par</code>から）。
メインタイトル（上部）は、フォント、サイズ（文字拡張）、色 <code>par(c("font.main", "cex.main", "col.main"))</code>を使用します。
フォント、サイズ、色を用いたサブタイトル（下部） <code>par(c("font.sub", "cex.sub", "col.sub"))</code>.
フォント、サイズ、色を使ったX軸ラベル <code>par(c("font.lab", "cex.lab", "col.lab"))</code>.
Y軸ラベル、<code>xlab</code>と同じフォント属性。
<code>line</code>に値を指定すると、ラベルのデフォルトの配置が上書きされ、プロットエッジからこの行数だけ外側に配置されます。
は論理値です。  <code>TRUE</code>の場合、タイトルはプロットの外側の余白に配置されます。
<code>par</code> からさらにグラフィカルなパラメータを指定します。  例えば、<code>col.main</code>や<code>cex.sub</code>の代わりに、<code>col.main</code>や<code>cex.sub</code>を使用します。  <code>xpd</code> はクリッピング領域を設定するのに使われます: <code>outer = TRUE</code>でない限り、デフォルトは図領域です。  <code>mgp</code>は、軸タイトルのデフォルトの配置を制御します。
数値ベクトル
長さ1または2の数値。
論理; <code>TRUE</code>の場合、ログスケールが有効な場合に警告が表示されます。
多角形の頂点の座標を含むベクトル。代替については<code>xy.coords</code>を参照してください。
制御点に対するスプラインの形状を制御する -1 から 1 までの値の数値ベクトル。
スプラインが開いた形状か閉じた形状かを示す論理値。
開いたXスプラインの場合、曲線を描くために最初と最後の制御点を複製するかどうかを示す論理値。閉じたXスプラインの場合は無視される。
logical: Xスプラインを描画するか。  falseの場合、曲線を描画する線分のセットが返され、何も描画されません。
曲線を描く色。   <code>border = NA</code> を使用すると、境界線が描画されません。
図形を塗りつぶす色。デフォルトは<code>NA</code>で、塗りつぶさない。
<code>lty</code>, <code>xpd</code>, <code>lend</code>, <code>ljoin</code>, <code>lmitre</code> のような図形パラメータを引数として与えることができる。
数値ベクトル
長さ 1 または 2 の数値。
論理; もし <code>TRUE</code> なら、ログスケールがアクティブな場合に警告が表示されます。
数値ベクトル
長さ1または2の数値。
論理; もし<code>TRUE</code>なら、ログスケールが有効な場合に警告が表示されます。
 n x m 行列 (m= 1 の場合はベクトル)
 m x p 行列 (m = 1 の場合はベクトル)
矩形行列またはデータフレーム（おそらく相関行列）
データ行列，データフレーム，またはベクトル（関数に依存）．
データ行列，データフレーム，またはベクトル
因子分析（fa）または主成分分析（principal）から返されるオブジェクト。
桁丸め
lowerCorのminlengthに省略される
ペアワイズ削除を行うか、または他のオプションの1つをcorにするか
相関行列の対角上のNAをチェックすべきか
"pearson"、"kendall"、"spearman"
ループ変数の現在値
ループが達成する最大値
どの関数がループしているか
キー反転される因子または成分（因子番号による）
char2numericのflag=TRUEは、数値であった変数にフラグを立てます。
この項目で可能な限りの情報を入力してください。
log関数の基数は何か（default=2、eは基数=exp(1)を意味する）
アクティブにするパッケージ(またはパッケージのリスト)の名前を指定し、すべての例をテストさせます。
このパッケージの依存関係を調べます。
どのタイプの依存関係を調べるか?
依存関係を調べ、そのすべての例をテストする。
これらの依存関係をテストしない
データフレームまたは行列から選択する
select from column with name from から select from column with name to です。
select from 列 from 列 to 列 to
正当なオブジェクトの文字列
データのdata.frameや行列、または共分散行列や相関行列。
キーが反転される項目がある場合は、すべての項目の方向を指定するか、どの項目を反転させるかのベクトルだけを指定する。
この実行を識別するための任意のテキスト文字列
は、項目の合計または項目の平均を反映する。  デフォルト値は mean。
カテゴリ度数を報告する場合に考慮するカテゴリ/項目の数。  デフォルトは10で、<code>link{response.frequencies}<//code>に渡されます。
デフォルトは、欠損値を除去し、一対の相関を見つけることです。
TRUE の場合、第1主成分を見つけ、負の負荷量を持つキー項目を反転させます。  この場合は警告を出す。
ブートストラップ信頼区間が必要な場合の反復回数
分散のない項目を削除し、警告を出す。
cor関数に渡すオプション"everything", "all.obs", "complete.obs", "na.or.complete", または "pairwise.complete.obs".デフォルトは "pairwise "である。
デフォルトでは、警告と項目が逆であったというメッセージを表示する。warnings = FALSEの場合、メッセージを表示しない。
信頼区間に使用する値
相関行列を入力として使う場合、オブザベーションの数を指定することで、信頼区間を求めることができる
欠損データをどのようにインピュートすべきか？まったくない、中央値、または平均値
尺度の項目数（r.barを求める）
信頼区間の幅 (pval/2 から 1-p.val/2)
alpha.ciに何桁使うか
データのdata.frameまたは行列，または共分散行列または相関行列
キーが反転される項目がある場合は、すべての項目の方向を指定するか、どの項目を反転させるかのベクトルだけを指定する。
この実行を識別するための任意のテキスト文字列
は、項目の合計または項目の平均を反映する。  デフォルト値は mean。
カテゴリ度数を報告する場合に考慮するカテゴリ/項目の数。  デフォルトは10で、<code>link{response.frequencies}<//code>に渡されます。
デフォルトは、欠損値を除去し、一対の相関を見つけることです。
TRUE の場合、第1主成分を見つけ、負の負荷量を持つキー項目を反転させます。  この場合は警告を出す。
ブートストラップ信頼区間が必要な場合の反復回数
分散のない項目を削除し、警告を出す。
cor関数に渡すオプション"everything", "all.obs", "complete.obs", "na.or.complete", または "pairwise.complete.obs".デフォルトは "pairwise "である。
デフォルトでは、警告と項目が逆であったというメッセージを表示する。warnings = FALSEの場合、メッセージを表示しない。
信頼区間に使用する値
相関行列を入力として使う場合、オブザベーションの数を指定することで、信頼区間を求めることができる
欠損データをどのようにインピュートすべきか？まったくない、中央値、または平均値
尺度の項目数（r.barを求める）
信頼区間の幅 (pval/2 から 1-p.val/2)
alpha.ciに使用する桁数
<code>setCor</code>, <code>mediate</code>, <code>omega</code>, または <code>fa</code> からのオブジェクト。
同じ型のオブジェクトは、ここでさらに供給することができる。
TP, FP, FN, TN 値の 4 x 1 ベクトルまたは 2 x 2 テーブル (下記参照)。
成功した結果または実際の症状の基本率（t が指定されていない場合）
候補または診断の選択率（tが指定されていない場合）
予測変数と結果変数の間のPhi相関係数（t が指定されていない場合）。
Valid Positives (成功した選択された応募者；正しい診断)の数 (tとPhiが指定されていない場合)
変数1と変数2の名前
"b"（両方）、"d"（決定理論）、"a"（auc）、または "n "どちらでもない。
Trueの場合、ノイズ分布は0を中心とする。
0のセル値は正しい値に置き換えられる。(これが必要な理由については<code>tetrachoric</code>を参照のこと)。
VPとFPの色の選択は、デフォルトは=c("blue", "red")ですが、色を避けたい場合はc("gray", "black")にすることもできます。
ベクトル、data.frame、または行列
<code>diff</code>を求める際に使用するラグ。
グループ化に使用するx data.frameの列。
欠損データは取り除くべきか？
autoRでの欠損データの扱い方
.
因数分解に適した相関行列またはデータ行列
1からnfactorsまでの因子が抽出される。nfactors がベクトルの場合、ベクトルで指定された因子の数だけが抽出されます。(例を参照)。
因子法。  デフォルトは 'minres' 因子分解です。  ただし、オリジナルのGoldberg論文との整合性を保つために、主成分法（fm ="pca"）も使用できる。
適用する回転のタイプ。  因子のデフォルトは oblimin です。  デフォルトがvarimaxである通常のpcaの呼び出しとは異なり、bassAckwardではpcaのデフォルトはobliminである。
どの因子スコアリング・アルゴリズムを使用するか。デフォルトは "tenBerge "で、その他に "regression "や "bartlett "がある。
もし、"tenBerge "以外のスコアリング・アルゴリズムを使用する場合、因子スコアのフィット不足のために相関を調整すべきでしょうか？
デフォルトではbassAckwardダイアグラムを描く
欠損データの扱い方。  use='pairwise "はペアワイズ完全相関を見つける。
どのような相関を見つけるか。  デフォルトはPearson。
ケースは重み付けされるべきか？  デフォルトはno。
テトラコリック相関またはポリコリック相関を見つける場合、空のセルにどのような補正を適用するか（デフォルトは0.5）。
bassAckwardが返すオブジェクト
各パスに表示する桁数
abs(cut) より大きい値がパス図に表示される。
ラベルは、bassAckward 関数の出力から取ることもできるし、リストとして指定することもできる。
余白は、図がきれいになるように、通常より少し大きく設定されます。
図のメインタイトル
TRUE の場合、要因に関連する項目を表示する。
TRUE の場合、因子負荷量によって項目を並べ替える
図を左から右に描くか、上から下に描くか。
同じレベルで因子間の相関を表示するかどうか
より見やすい図にするために、最も低い2つの水準で因子の名前を変更して並べ替える
TRUE の場合、この因子によって説明される分散のパーセンテージを表示します。
その他のグラフィック・パラメータ（例：cex）
相関行列または因数分解に適したデータ行列
1 から nfactors までの因子が抽出される。nfactors がベクトルの場合，ベクトルで指定された因子の数だけが抽出される．(例を参照)。
因子法。  デフォルトは 'minres' 因子分解です。  しかし、オリジナルのGoldbergの論文と一致させるために、主成分を使用することもできます (fm ="pca")。
適用する回転のタイプ。  因子のデフォルトは oblimin です。  デフォルトがvarimaxである通常のpcaの呼び出しとは異なり、bassAckwardではpcaのデフォルトはobliminである。
どの因子スコアリング・アルゴリズムを使用するか。デフォルトは "tenBerge "で、その他に "regression "や "bartlett "がある。
もし、"tenBerge "以外のスコアリング・アルゴリズムを使用する場合、因子スコアがフィットしないために相関を調整する必要がありますか？
デフォルトではbassAckwardダイアグラムを描く
欠損データの扱い方。  use='pairwise "はペアワイズ完全相関を見つける。
どのような相関を見つけるか。  デフォルトはPearson。
ケースは重み付けされるべきか？  デフォルトはno。
テトラコリック相関またはポリコリック相関を見つける場合、空のセルにどのような補正を適用するか（デフォルトは0.5）。
bassAckwardが返すオブジェクト
各パスに表示する桁数
abs(cut) より大きい値がパス図に表示される。
ラベルは、bassAckward 関数の出力から取ることもできるし、リストとして指定することもできる。
余白は、図がきれいになるように、通常より少し大きく設定されます。
図のメインタイトル
TRUE の場合、要因に関連する項目を表示する。
TRUE の場合、因子負荷量によって項目を並べ替える
図を左から右に描くか、上から下に描くか。
同じレベルで因子間の相関を表示するかどうか
より見やすい図にするために、最も低い2つの水準で因子の名前を変更して並べ替える
TRUE の場合、この因子によって説明される分散のパーセンテージを表示します。
その他のグラフィック・パラメータ（例：cex）
関数によってデータ行列またはデータフレーム。
bestScales と bestItems の経験的ターゲットとなる変数（名前または場所）。  別のオブジェクトでもよい。
min.itemからmax.itemまでの単位重み付けスケールと相関重み付けスケールを見つける。
これらはすべてfinal.multi.validオブジェクトにまとめられる。
予測されたr + delta * se of r &lt; max値が返されるアイテムを返します。
abs(x[,c1]) &gt;カット内のすべての値を返す。
加重尺度を求めるとき、0次相関を持つすべての項目を使用する &gt; wtd.cut
重み付き尺度を求めるとき、wtd.cutより&gt;大きいwtd.n項目を使う
生データ（相関を求める）または相関行列（raw=FALSE）
TRUEの場合、bestItemsの絶対値でソート
f$loadings 行列の rownames、またはデータ行列または相関行列の colnames に対応する rownames と、項目内容のエントリ（複数列でもよい）を持つ data.frame.
TRUE の場合、分散のない項目を削除
経験的尺度を構成する項目数、または (bestItems、bestn.itemsを表示)
他の基準との相関は、bestScalesのための公平なゲームですか？
最良の尺度、ひいては基準との相関を見つけるとき、欠損データをどのように扱うべきでしょうか？  デフォルトでは、欠損項目は削除されます。(つまり、ペアワイズ完全相関を使用します）。
ブートストラップ推定を何回実行するか．最良の項目関数をn.iter回複製し、各回およそ1-1/eの事例をサンプリングし、各反復の残りの1/eの事例で検証する。
folds &gt; 1の場合、これはk-folds検証である。  注意： n.iter &gt; 1をセットしてブートストラップ集計を行い、folds &gt; 1をセットしてk-foldsを行う。   
最終的なベストキーに項目を含めるために必要な反復の割合。
相関の確率の対数に基づいて項目を選択する。  これは、対になるケースの数が対ごとに大きく異なる場合にのみ効果がある。  
出力を表示するときは桁数を丸める。
関数によってはデータ行列またはデータフレーム。
bestScalesとbestItemsの経験的ターゲットとなる変数（名前または場所）。  別のオブジェクトでもよい。
min.itemからmax.itemまでの単位重み付けスケールと相関重み付けスケールを見つける。
これらはすべてfinal.multi.validオブジェクトにまとめられる。
予測されたr + delta * se of r &lt; max値が返されるアイテムを返します。
abs(x[,c1]) &gt;カット内のすべての値を返す。
加重尺度を求めるとき、0次相関を持つすべての項目を使用する &gt; wtd.cut
重み付き尺度を求めるとき、wtd.cutより&gt;大きいwtd.n項目を使う
生データ（相関を求める）または相関行列（raw=FALSE）
TRUEの場合、bestItemsの絶対値でソート
f$loadings 行列の rownames、またはデータ行列または相関行列の colnames に対応する rownames と、項目内容のエントリ（複数列でもよい）を持つ data.frame.
TRUE の場合、分散のない項目を削除
経験的尺度を構成する項目数、または (bestItems、bestn.itemsを表示)
他の基準との相関は、bestScalesのための公平なゲームですか？
最良の尺度、ひいては基準との相関を見つけるとき、欠損データをどのように扱うべきでしょうか？  デフォルトでは、欠損項目は削除されます。(つまり、ペアワイズ完全相関を使用します）。
ブートストラップ推定を何回実行するか．最良の項目関数をn.iter回複製し、各回およそ1-1/eの事例をサンプリングし、各反復の残りの1/eの事例で検証する。
folds &gt; 1の場合、これはk-folds検証である。  注意： n.iter &gt; 1をセットしてブートストラップ集計を行い、folds &gt; 1をセットしてk-foldsを行う。   
最終的なベストキーに項目を含めるために必要な反復の割合。
相関の確率の対数に基づいて項目を選択する。  これは、対になるケースの数が対ごとに大きく異なる場合にのみ効果がある。  
出力を表示するときは桁数を丸める。
データを指定するデータフレームまたは行列
プロットする変数
グループ化変数。
水平（デフォルト）または垂直バー
2つのグループの色 - デフォルトは青と赤
指定された場合、従属軸のラベル
TRUE の場合、数値を 0 から最大 -min の範囲にするために最小値を引く。  これは、高さを表示する場合に役立つ
適切な場合はx軸ラベル
そうでない場合はy軸ラベル
グラフ作成プログラムに渡すその他のパラメータ
荷重行列
荷重行列
荷重行列
どの回転を使用するか？
(Promaxの)バリマックス荷重を上げるべき乗
Promaxのさまざまな負荷量を上げるためのべき乗。
任意のターゲット行列，任意の重みで構成できるが，おそらく-1,0,1の重み．  もし見つからない場合，ターゲットは，すべての項目を最も負荷の高い因子に割り当てることによって決定される独立クラスター構造である．
行列が変換される値（主に0，1，NA）の行列．
初期回転行列
最適化ルーチン（GPArotationパッケージおよびPromaxのGPForth）に渡されるパラメータ。
最適化ルーチン（GPArotation パッケージの GPForth）に渡されるパラメータ。
最適化ルーチン（GPArotation パッケージの GPForth）に渡されるパラメータ
(faRotateなどに)渡すその他のパラメータには、以下のものがあります。 ターゲットリストまたは行列
数値変数のデータセット
サブセットのサイズは？デフォルトは NCOL (x)/4
標準の相関オプション。  "pairwise" は欠損データを許す
デフォルトはPearson相関、代替はpolychoric。  
<code>fa</code>、<code>fa.poly</code> または <code>principal</code>のscores=TRUEオプションの出力。
NULLの場合, プロット文字(pch)を指定して点を描画する.データ点を識別するには、labels= 1:n (nはオブザベーションの数)、または labels =rownames(data) (dataは因子分析で分析されたデータセット)を指定します。
データ・ラベルと因子ラベルのプロット・サイズのベクトル
2因子バイプロットのメイン・タイトル
2つ以上の因子をプロットする場合，因子スコアのヒストグラムの色
x スコアの限界．デフォルトはプラス/マイナス3シグマ．
得点のy限界。デフォルトはプラス/マイナス3シグマ。
因子負荷量のx限界値．
因子負荷量の y 限界値.デフォルトはプラスマイナス1.0.
3次元（またはそれ以上）のプロットを行う場合，どのサイズで "o "のプロットから". "のプロットに切り替えるべきか？
ヒストグラムの調整係数
データ点と因子負荷ラベルの色のベクトル
ラベルをプロットする場合、どの位置に置くべきか？1=下,2=左,3=上,4=右。もし見つからない場合は、データ点の代わりにラベルが印刷されることを想定しています。
 矢印の頭の長さ
pch=16は適度な大きさの点を与える。pch=". "は小さな点を与える。  色をつける場合は、pchを21から25の間で使う（例を参照）。
指定された因子だけをプロットする
abs(factor scores) &lt; cuts) (実際には，x と y のスコアの0からの距離)でケースをラベル付けしない。
2つの空間での共分散性を持つ変数にラベルを付けない &lt; cutl
スコアのグループ化変数のベクトル．  グループごとに異なる色とシンボルを表示する。
TRUE の場合、平滑散布図（データ点ではなく、密度を表示）を作成する。大きなデータセットにのみ有効です。
TRUE の場合、変数に矢印を引き、得点をプロットします。  FALSEの場合、得点に矢印を引き、変数をプロットします。
グラフィックスのその他のオプション
負荷量行列
負荷量行列
負荷量行列
どの回転を使用するか？
(Promaxの)バリマックス荷重を上げるべき乗
Promaxのさまざまな負荷量を上げるためのべき乗。
任意のターゲット行列，任意の重みで構成できるが，おそらく-1,0,1の重み．  もし見つからない場合，ターゲットは，すべての項目を最も負荷の高い因子に割り当てることによって決定される独立クラスター構造である．
行列が変換される値（主に0，1，NA）の行列．
初期回転行列
最適化ルーチン（GPArotationパッケージおよびPromaxのGPForth）に渡されるパラメータ。
最適化ルーチン（GPArotation パッケージの GPForth）に渡されるパラメータ。
最適化ルーチン（GPArotation パッケージの GPForth）に渡されるパラメータ
(faRotateなどに)渡す他のパラメータには、ターゲットリストまたは行列が含まれます。
入力は4つの形式のうちの1つです：

a) 2値データ（例えばbockデータセットのlsat6）のデータフレームまたはマトリックス、または多値の場合は離散数値（すなわち、あまり多くないレベル、例えばビッグ5データセット、bfi）、または双列および多列の場合は連続。

b) 細胞数または細胞頻度の2×2表（四分位法の場合）、または細胞数のn×m表（四分位法と多分位法の両方）。

c) 4つのセル周波数に対応する要素を持つベクトル（テトラコリックの場合）

d) 2つの限界度数（行と列）および併存疾患（テトラコリックの場合）の要素を持つベクトル。
離散スコアの（行列またはデータフレーム）．四分位法の場合，これらは二分位であるべきで，多分位法の場合はあまり多くないレベルであるべきで，双列の場合はあまり多くない(&lt;10?)カテゴリを持つ離散的な(例えば，項目応答)であるべきである．
tetrachoric,polychoric,polybi,mixed.corの入力セルがゼロの場合に連続性を補正するために使用する補正値。  連続性を補正する場合としない場合の効果については、例を参照のこと。
TRUEで、テトラコロリック/ポリコロリック行列が正定値でない場合、cor.smoothを用いて簡単な平滑化アルゴリズムを適用する。
対相関を求めるとき、タウパラメータの大域的な値(多少速くなる)と局所的な値(global=FALSE)のどちらを使うべきか？  global=TRUEは、1つの項目のペアについて、それらの項目の度数を用いて他のペアから情報を借用します。   これは、欠損データが多い場合に違いが生じます。global=FALSE、correct=TRUEで標本サイズが非常に小さい場合、この関数は失敗します（理由は未定です）。
他のパッケージが壊れないようにするために残しておいた、もう使われないオプション。
各ケースに適用する重みを指定するオブザベーション数の長さのベクトル。  NULLの場合は、すべてのケースで重みが1に相当する。  
 short=TRUEは、相関を表示するだけ、short=FALSEは、John Foxのhetcor関数がインストールされている場合、およびpolychoricを実行している場合、そのhetcor出力を表示します。
std.err=FALSEは標準誤差を報告しない（より速く）非推奨
プログレスバーを表示する（マルチコアでない場合）
 ML=FALSEは2ステップで素早く実行、ML=TRUEはより長い最尤法を実行 - 非常に遅い！非推奨
欠損データは削除すべきか
分散のないケースは、処理を進める前に警告とともに削除されます。
多項式で悩むカテゴリの最大数。  
polydiへの多値入力
polydiへの2値入力
多値変数のタウ値 - global=TRUE の場合
2値変数のタウ値 - globabl = TRUEの場合
無作為化する被験者数。  実験条件数の倍数でなければならない。
各 IV の条件数。  デフォルトは1つのIVに対して2水準。  複数のIVがある場合は、ベクトルで指定する。名前が与えられている場合はそれが使用され、そうでない場合はIVはIV1 ... とラベル付けされる。IVn
矩形行列またはデータフレーム（おそらく相関行列）．
データ行列，データフレーム，またはベクトル．
データ行列，データフレーム，またはベクトル
因子分析（fa）または主成分分析（principal）から返されるオブジェクト．
桁丸め
lowerCorのminlengthに省略される
ペアワイズ削除を行うか、または他のオプションの1つをcorにするか
相関行列の対角上のNAをチェックすべきか
"pearson"、"kendall"、"spearman"
ループ変数の現在値
ループが達成する最大値
どの関数がループしているか
キー反転される因子または成分（因子番号による）
char2numericのflag=TRUEは、数値であった変数にフラグを立てます。
この項目で可能な限りの情報を入力してください。
log関数の底は何か（default=2、eは底=exp(1)を意味する）
アクティブにするパッケージ(またはパッケージのリスト)の名前を指定し、すべての例をテストさせます。
このパッケージの依存関係を調べます。
どのタイプの依存関係を調べるか?
依存関係を調べ、そのすべての例をテストする。
これらの依存関係をテストしない
データフレームまたは行列から選択する
select from column with name from から select from column with name to です。
select from 列 from 列 to 列 to
正当なオブジェクトの文字列
 Pearson r
Fisher z
信頼区間のサンプルサイズ
tまたはgの自由度
信頼区間
pを両側pとして扱う
効果量（ヘッジのg）
スチューデントのt値
カイ2乗
相関行列を共分散行列に変換するために使用する標準偏差のベクトル
 シミュレーションする変数の数
シミュレーションする被験者数
 circum=TRUEはcircumplex構造，FALSEは単純構造
sim.sphericalの場合は，単純構造または球状構造
1次元目の平均負荷
2次元目の平均荷重
sim.sphericalにおける3次元目の平均負荷
一般因子の平均負荷 (default=0)
スキューを導入する場合，1次元目の中心からどれだけずれているか
2次元目にスキューを導入する
3次元目にスキューを導入する - sim.sphericalを使用する場合
 連続変数またはカテゴリ変数。  
 lowより小さい値は、強制的にlowになります（item.dichotでは0）。
 high より大きい値は，high に強制される（または item.dichot で 1）．
cutpoint より小さい値をすべて cutpoint に変更する。
カットポイントとは
sim.sphericalの第1因子の変数数
sim.sphericalの第2因子と第3因子の変数数
行列またはデータフレーム
連続値をカテゴリ値に変換する際にカットポイントとして使用するoldの値
oldのどの列をカテゴリ変数に変換するか。  見つからない場合は、すべての列が変換される。
シミュレーションする標本サイズのベクトル
シミュレーションする変数の数のベクトル
<code>simulation.circ</code>から得られるデータフレーム。
シミュレーションするサンプルサイズのベクトル
シミュレーションする変数の数のベクトル
<code>simulation.circ</code>の結果のデータフレーム
 負荷量の行列 <code>loads<//code>。
 負荷量行列か相関行列か <code>loading</code>。
 変数はソートされるべきか <code>sorting</code>?
時刻を最初の値とする観測値のデータフレームまたは行列（コードで指定されていない場合） 角度は、時間またはラジアンのいずれかで指定可能）
被験者識別変数
データの行列またはデータフレーム。  指定された場合、angle と code は変数名（または場所）。  例を参照。
グループによる比較を行う場合は、グループコードを指定する。
.

スプリット・ハーフ信頼度を求めるときに使用する、被験者ごとのオブザベーションの最小数。
信頼度は奇数と偶数の項目 (TRUE) または前半と後半の項目 (FALSE) に基づきます。  デフォルトは前半と後半。
時間帯は24時間のリズムを持つと仮定されるが、他のリズムが適合することもある。cosinor.periodを呼び出す場合は、範囲を指定することができる。
IDフィールドはどの列番号か
1つの変数に対して、どの特定の被験者番号をプロットするか
もしTRUEなら、最初の変数（角度）をプロットする
opti=TRUE: 反復最適化 (遅い) または opti=FALSE: 線形フィット (速い)
TRUEの場合、測定単位は24時間単位、それ以外はラジアン単位。
位相角と相関させる外部変数のセット
欠損データを除去するか？
デフォルトが機能しない場合は、y軸の範囲を指定する。
y軸のラベル
x軸のラベル
グラフィックのタイトル
複数の（スパゲッティ）プロットを行う場合、2つ目以降のプロットにはadd = TRUEを設定する。
複数（スパゲッティ）プロットを行う場合、1つ目以降のプロットにはmulti=TRUEを設定する。
線種をgraphicsに渡す
その他のグラフィックパラメータ
時刻を最初の値とする観測値のデータフレームまたは行列（コードで指定しない限り） 角度は時間またはラジアンのいずれかで指定可能）
被験者識別変数
データの行列またはデータフレーム。  指定された場合、angle と code は変数名（または場所）。  例を参照。
グループによる比較を行う場合は、グループコードを指定する。
.

スプリット・ハーフ信頼度を求めるときに使用する、被験者ごとのオブザベーションの最小数。
信頼度は奇数と偶数の項目 (TRUE) または前半と後半の項目 (FALSE) に基づきます。  デフォルトは前半と後半。
時間帯は24時間のリズムを持つと仮定されるが、他のリズムが適合することもある。cosinor.periodを呼び出す場合は、範囲を指定することができる。
IDフィールドはどの列番号か
1つの変数に対して、どの特定の被験者番号をプロットするか
もしTRUEなら、最初の変数（角度）をプロットする
opti=TRUE: 反復最適化 (遅い) または opti=FALSE: 線形フィット (速い)
TRUEの場合、測定単位は24時間単位、それ以外はラジアン単位。
位相角と相関させる外部変数のセット
欠損データを除去するか？
デフォルトが機能しない場合は、y軸の範囲を指定する。
y軸のラベル
x軸のラベル
グラフィックのタイトル
複数の（スパゲッティ）プロットを行う場合、2つ目以降のプロットにはadd = TRUEを設定する。
複数の（スパゲッティ）プロットを行う場合、1つ目以降のプロットにはmulti=TRUEを設定する。
線種をgraphicsに渡す
その他のグラフィックパラメータ
時刻を最初の値とする観測値のデータフレームまたは行列（コードで指定しない限り） 角度は時間またはラジアンのいずれかで指定可能）
被験者識別変数
データの行列またはデータフレーム。  指定された場合、angle と code は変数名（または場所）。  例を参照。
グループによる比較を行う場合は、グループコードを指定する。
.

スプリット・ハーフ信頼度を求めるときに使用する、被験者ごとのオブザベーションの最小数。
信頼度は奇数と偶数の項目 (TRUE) または前半と後半の項目 (FALSE) に基づきます。  デフォルトは前半と後半。
時間帯は24時間のリズムを持つものと仮定されるが、他のリズムが適合することもある。cosinor.periodを呼び出す場合は、範囲を指定することができる。
IDフィールドはどの列番号か
1つの変数に対して、どの特定の被験者番号をプロットするか
もしTRUEなら、最初の変数（角度）をプロットする
opti=TRUE: 反復最適化 (遅い) または opti=FALSE: 線形フィット (速い)
TRUEの場合、測定は24時間単位、それ以外はラジアン単位。
位相角と相関させる外部変数のセット
欠損データを除去するか？
デフォルトが機能しない場合は、y軸の範囲を指定する。
y軸のラベル
x軸のラベル
グラフィックのタイトル
複数の（スパゲッティ）プロットを行う場合、2つ目以降のプロットにはadd = TRUEを設定する。
複数（スパゲッティ）プロットを行う場合、1つ目以降のプロットにはmulti=TRUEを設定する。
線種をgraphicsに渡す
その他のグラフィックパラメータ
時刻を最初の値とする観測値のデータフレームまたは行列（コードで指定しない限り） 角度は時間またはラジアンのいずれかで指定可能）
被験者識別変数
データの行列またはデータフレーム。  指定された場合、angle と code は変数名（または場所）。  例を参照。
グループによる比較を行う場合は、グループコードを指定する。
.

スプリット・ハーフ信頼度を求めるときに使用する、被験者ごとのオブザベーションの最小数。
信頼度は奇数と偶数の項目 (TRUE) または前半と後半の項目 (FALSE) に基づきます。  デフォルトは前半と後半。
時間帯は24時間のリズムを持つと仮定されるが、他のリズムが適合することもある。cosinor.periodを呼び出す場合は、範囲を指定することができる。
IDフィールドはどの列番号か
1つの変数に対して、どの特定の被験者番号をプロットするか
もしTRUEなら、最初の変数（角度）をプロットする
opti=TRUE: 反復最適化 (遅い) または opti=FALSE: 線形フィット (速い)
TRUEの場合、測定は24時間単位、それ以外はラジアン単位。
位相角と相関させる外部変数のセット
欠損データを削除するか？
デフォルトが機能しない場合は、y軸の範囲を指定する。
y軸のラベル
x軸のラベル
グラフィックのタイトル
複数の（スパゲッティ）プロットを行う場合、2つ目以降のプロットにはadd = TRUEを設定する。
複数（スパゲッティ）プロットを行う場合は、1つ目以降のプロットにmulti=TRUEを設定する。
線種をgraphicsに渡す
その他のグラフィックパラメータ
時刻を最初の値とする観測値のデータフレームまたは行列（コードで指定しない限り） 角度は時間またはラジアンのいずれかで指定可能）
被験者識別変数
データの行列またはデータフレーム。  指定された場合、angle と code は変数名（または場所）。  例を参照。
グループによる比較を行う場合は、グループコードを指定する。
.

スプリット・ハーフ信頼度を求めるときに使用する、被験者ごとのオブザベーションの最小数。
信頼度は奇数と偶数の項目 (TRUE) または前半と後半の項目 (FALSE) に基づきます。  デフォルトは前半と後半。
時間帯は24時間のリズムを持つと仮定されるが、他のリズムが適合することもある。cosinor.periodを呼び出す場合は、範囲を指定することができる。
IDフィールドはどの列番号か
1つの変数に対して、どの特定の被験者番号をプロットするか
もしTRUEなら、最初の変数（角度）をプロットする
opti=TRUE: 反復最適化 (遅い) または opti=FALSE: 線形フィット (速い)
TRUEの場合、測定単位は24時間単位、そうでない場合はラジアン単位。
位相角と相関させる外部変数のセット
欠損データを除去するか？
デフォルトが機能しない場合は、y軸の範囲を指定する。
y軸のラベル
x軸のラベル
グラフィックのタイトル
複数の（スパゲッティ）プロットを行う場合、2つ目以降のプロットにはadd = TRUEを設定する。
複数（スパゲッティ）プロットを行う場合は、1つ目以降のプロットにmulti=TRUEを設定する。
線種をgraphicsに渡す
その他のグラフィックパラメータ
時刻を最初の値とする観測値のデータフレームまたは行列（コードで指定しない限り） 角度は時間またはラジアンのいずれかで指定可能）
被験者識別変数
データの行列またはデータフレーム。  指定された場合、angle と code は変数名（または場所）。  例を参照。
グループによる比較を行う場合は、グループコードを指定する。
.

スプリット・ハーフ信頼度を求めるときに使用する、被験者ごとのオブザベーションの最小数。
信頼度は奇数と偶数の項目 (TRUE) または前半と後半の項目 (FALSE) に基づきます。  デフォルトは前半と後半。
時間帯は24時間のリズムを持つものと仮定されるが、他のリズムが適合することもある。cosinor.periodを呼び出す場合は、範囲を指定することができる。
IDフィールドはどの列番号か
1つの変数に対して、どの特定の被験者番号をプロットするか
もしTRUEなら、最初の変数（角度）をプロットする
opti=TRUE: 反復最適化 (遅い) または opti=FALSE: 線形フィット (速い)
TRUEの場合、測定は24時間単位、それ以外はラジアン単位。
位相角と相関させる外部変数のセット
欠損データを削除するか？
デフォルトが機能しない場合は、y軸の範囲を指定する。
y軸のラベル
x軸のラベル
グラフィックのタイトル
複数の（スパゲッティ）プロットを行う場合、2つ目以降のプロットにはadd = TRUEを設定する。
複数（スパゲッティ）プロットを行う場合、1つ目以降のプロットにはmulti=TRUEを設定する。
線種をgraphicsに渡す
その他のグラフィックパラメータ
時刻を最初の値とする観測値のデータフレームまたは行列（コードで指定しない限り） 角度は時間またはラジアンのいずれかで指定可能）
被験者識別変数
データの行列またはデータフレーム。  指定された場合、angle と code は変数名（または場所）。  例を参照。
グループによる比較を行う場合は、グループコードを指定する。
.

スプリット・ハーフ信頼度を求めるときに使用する、被験者ごとのオブザベーションの最小数。
信頼度は奇数と偶数の項目 (TRUE) または前半と後半の項目 (FALSE) に基づきます。  デフォルトは前半と後半。
時間帯は24時間のリズムを持つものと仮定されるが、他のリズムが適合することもある。cosinor.periodを呼び出す場合は、範囲を指定することができる。
IDフィールドはどの列番号か
1つの変数に対して、どの特定の被験者番号をプロットするか
もしTRUEなら、最初の変数（角度）をプロットする
opti=TRUE: 反復最適化 (遅い) または opti=FALSE: 線形フィット (速い)
TRUEの場合、測定は24時間単位、それ以外はラジアン単位。
位相角と相関させる外部変数のセット
欠損データを削除するか？
デフォルトが機能しない場合は、y軸の範囲を指定する。
y軸のラベル
x軸のラベル
グラフィックのタイトル
複数の（スパゲッティ）プロットを行う場合、2つ目以降のプロットにはadd = TRUEを設定する。
複数（スパゲッティ）プロットを行う場合、1つ目以降のプロットにはmulti=TRUEを設定する。
線種をgraphicsに渡す
その他のグラフィックパラメータ
時刻を最初の値とする観測値のデータフレームまたは行列（コードで指定しない限り） 角度は時間またはラジアンのいずれかで指定可能）
被験者識別変数
データの行列またはデータフレーム。  指定された場合、angle と code は変数名（または場所）。  例を参照。
グループによる比較を行う場合は、グループコードを指定する。
.

スプリット・ハーフ信頼度を求めるときに使用する、被験者ごとのオブザベーションの最小数。
信頼度は奇数と偶数の項目 (TRUE) または前半と後半の項目 (FALSE) に基づきます。  デフォルトは前半と後半。
時間帯は24時間のリズムを持つものと仮定されるが、他のリズムが適合することもある。cosinor.periodを呼び出す場合は、範囲を指定することができる。
IDフィールドはどの列番号か
1つの変数に対して、どの特定の被験者番号をプロットするか
もしTRUEなら、最初の変数（角度）をプロットする
opti=TRUE: 反復最適化 (遅い) または opti=FALSE: 線形フィット (速い)
TRUEの場合、測定は24時間単位、それ以外はラジアン単位。
位相角と相関させる外部変数のセット
欠損データを削除するか？
デフォルトが機能しない場合は、y軸の範囲を指定する。
y軸のラベル
x軸のラベル
グラフィックのタイトル
複数の（スパゲッティ）プロットを行う場合、2つ目以降のプロットにはadd = TRUEを設定する。
複数（スパゲッティ）プロットを行う場合、1つ目以降のプロットにはmulti=TRUEを設定する。
線種をgraphicsに渡す
その他のグラフィックパラメータ
時刻を最初の値とする観測値のデータフレームまたは行列（コードで指定しない限り） 角度は時間またはラジアンのいずれかで指定可能）
被験者識別変数
データの行列またはデータフレーム。  指定された場合、angle と code は変数名（または場所）。  例を参照。
グループによる比較を行う場合は、グループコードを指定する。
.

スプリット・ハーフ信頼度を求めるときに使用する、被験者ごとのオブザベーションの最小数。
信頼度は奇数と偶数の項目 (TRUE) または前半と後半の項目 (FALSE) に基づきます。  デフォルトは前半と後半。
時間帯は24時間のリズムを持つものと仮定されるが、他のリズムが適合することもある。cosinor.periodを呼び出す場合は、範囲を指定することができる。
IDフィールドはどの列番号か
1つの変数に対して、どの特定の被験者番号をプロットするか
もしTRUEなら、最初の変数（角度）をプロットする
opti=TRUE: 反復最適化 (遅い) または opti=FALSE: 線形フィット (速い)
TRUEの場合、測定は24時間単位、それ以外はラジアン単位。
位相角と相関させる外部変数のセット
欠損データを削除するか？
デフォルトが機能しない場合は、y軸の範囲を指定する。
y軸のラベル
x軸のラベル
グラフィックのタイトル
複数の（スパゲッティ）プロットを行う場合、2つ目以降のプロットにはadd = TRUEを設定する。
複数（スパゲッティ）プロットを行う場合、1つ目以降のプロットにはmulti=TRUEを設定する。
線種をgraphicsに渡す
その他のグラフィックパラメータ
時刻を最初の値とする観測値のデータフレームまたは行列（コードで指定しない限り） 角度は時間またはラジアンのいずれかで指定可能）
被験者識別変数
データの行列またはデータフレーム。  指定された場合、angle と code は変数名（または場所）。  例を参照。
グループによる比較を行う場合は、グループコードを指定する。
.

スプリット・ハーフ信頼度を求めるときに使用する、被験者ごとのオブザベーションの最小数。
信頼度は奇数と偶数の項目 (TRUE) または前半と後半の項目 (FALSE) に基づきます。  デフォルトは前半と後半。
時間帯は24時間のリズムを持つものと仮定されるが、他のリズムが適合することもある。cosinor.periodを呼び出す場合は、範囲を指定することができる。
IDフィールドはどの列番号か
1つの変数に対して、どの特定の被験者番号をプロットするか
もしTRUEなら、最初の変数（角度）をプロットする
opti=TRUE: 反復最適化 (遅い) または opti=FALSE: 線形フィット (速い)
TRUEの場合、測定単位は24時間単位、それ以外はラジアン単位。
位相角と相関させる外部変数のセット
欠損データを削除するか？
デフォルトが機能しない場合は、y軸の範囲を指定する。
y軸のラベル
x軸のラベル
グラフィックのタイトル
複数の（スパゲッティ）プロットを行う場合、2つ目以降のプロットにはadd = TRUEを設定する。
複数（スパゲッティ）プロットを行う場合、1つ目以降のプロットにはmulti=TRUEを設定する。
線種をgraphicsに渡す
その他のグラフィックパラメータ
スケール/クラスタキーのリスト、またはクラスタキーの行列
相関行列
相関行列または生データ行列のいずれか
statsByからの出力。  scoreByに必要。
 TRUEを指定すると、生相関と減衰補正相関の両方が表示される。
相関行列の共同性推定値として二乗重相関を使うべきか？
SMC=TRUEの場合、項目のsmcsを関数に渡すか、計算する。
TRUEの場合、平均項目間相関に基づいて欠損尺度の相関をインプットし、そうでない場合はNAを返す。
そうでない場合は NA を返します。オーバーラップの補正に平均 r を使用しますか？ そうでない場合は smcs を返します。
デフォルトでは、採点キーに含まれる項目の統計量のみを求める。これにより、悪い項目が採点キーの集合に含まれていない場合、その項目を含む行列からスコアを見つけることができます。
相関を定義するために必要な対のオブザベーションの最小数（scoreBy の場合）
scoreBy で使用される行列が正半定値でない場合、平滑化すべきか？
適合される元の相関行列
 クラスタ負荷量 - つまり、項目の重複を補正したクラスタと個々の項目の相関。
クラスター構造
 対角行列もフィットすべきか？  
 クラスタキー：-1,0,1のクラスタ重み行列
 相関行列
信頼性を補正
共同性の推定として二乗重相関を使用し、そうでなければ各変数の最大の相関を使用する
負荷量を含む因子分析またはクラスター分析の出力、または項目ごとのクラスター相関の行列。または kmeans クラスタ分析の出力。
 クラスタ・メンバーシップのベクトル
 絶対負荷量が &gt;カットの場合、項目をクラスタに割り当てます。
row.namesが存在する場合はプロットに追加され、存在しない場合はlabelsを指定できます。  labels =NULL で行名がない場合、変数は行番号でラベル付けされる)。
 任意のタイトル
ほとんど同じ因子負荷量をプロットする場合，ポイントをジッタリングして "ジグル "させると便利なことがある．デフォルトは、ジグルしない。
jiggle=TRUE の場合、ポイントはどれくらいジッタリングされるべきか？
因子とクラスターは、pch+1から始まる異なるpch値で表示されます。
2次元プロットのラベルのテキストの位置。1=下, 2=左, 3=上, 4=右
点にラベルを追加する場合，点だけでなくラベルも表示すべきか．  多くの点の場合は、点を表示せず、ラベルだけを表示する方がよい。
プロットする因子/クラスターを指定する
任意のタイトル - タイトルと冗長
プロットするその他のオプション
クラスタ割り当てのベクトル、またはクラスタのベクトルを含む "kmeans "クラスのオブジェクト。
データ・フレームまたは行列（数式モードで指定可能）
2値グループ化変数（数式入力で指定可能（例を参照））。
group2で定義された各サブグループに対して cohen.dを適用（数式でも指定可能）
数式モードを使用し、特定の変数を指定する場合（例を参照）
効果量
d.robustで平均と標準偏差を求める際に使用されるトリミングの量
第1群と第2群の合計標本サイズ
1群の標本サイズ（1群のみの場合）
2群の標本サイズ
2つの分散をプールする
スチューデントのt統計量
1-αは信頼区間の幅
相関ではなく共分散行列を求める
効果量に変換される相関
グループ1の平均
第2群の平均
第1群の標準偏差
第2群の標準偏差
cohen.dの結果を並べ替えるべきか（並べ替えるとしたらどの方向に並べ替えるべきか）。方向は "減少 "か "増加 "か。
説明されている項目は何か？
cohen.dでマハラノビス距離を求める。
データフレームまたは行列（数式モードで指定可能）
何らかの二項グループ化変数（数式入力で指定可能（例参照）
group2で定義された各サブグループに対して cohen.dを適用（数式でも指定可能）
数式モードを使用し、特定の変数を指定する場合（例を参照）
効果量
d.robustで平均と標準偏差を求める際に使用されるトリミングの量
第1群と第2群の合計標本サイズ
1群の標本サイズ（1群のみの場合）
2群の標本サイズ
2つの分散をプールする
スチューデントのt統計量
1-αは信頼区間の幅
相関ではなく共分散行列を求める
効果量に変換される相関
グループ1の平均
第2群の平均
第1群の標準偏差
第2群の標準偏差
cohen.dの結果を並べ替えるべきか（並べ替えるとしたらどの方向に並べ替えるべきか）。方向は "減少 "か "増加 "か。
説明されている項目は何か？
cohen.dでマハラノビス距離を求める。
データフレームまたは行列（数式モードで指定可能）
何らかの二項グループ化変数（数式入力で指定可能（例参照）
group2で定義された各サブグループに対して cohen.dを適用（数式でも指定可能）
数式モードを使用し、特定の変数を指定する場合（例を参照）
効果量
d.robustで平均と標準偏差を求める際に使用されるトリミングの量
第1群と第2群の合計標本サイズ
1群の標本サイズ（1群のみの場合）
2群の標本サイズ
2つの分散をプールする
スチューデントのt統計量
1-αは信頼区間の幅
相関ではなく共分散行列を求める
効果量に変換される相関
グループ1の平均
第2群の平均
第1群の標準偏差
第2群の標準偏差
cohen.dの結果を並べ替えるべきか（並べ替えるとしたらどの方向に並べ替えるべきか）。方向は "減少 "か "増加 "か。
説明されている項目は何か？
cohen.dでマハラノビス距離を求める。
1からpまでのカテゴリー値を持つ2×nのデータか、p×pの表のどちらか。  データ配列の場合は表が求まる。
重みの p x p 行列。  指定されない場合、0 (対角) および (対角からの距離) ^2 に設定される。
オブザベーションの数（入力が正方行列の場合）。
信頼区間の確率水準
x または y のいくつかの水準が完全に欠損している場合に水準を指定する。  例を参照
 因子負荷量の行列または因子負荷量の行列のリスト
 因子負荷量の2番目の行列（x がリストの場合，y は空でもよい）
反映に使用される項目の中点．データから求められる場合は NULL.
一般化距離の指数．(r=1は街区, r=2はユークリッド, r=100以上は最大距離を強調)
診断カテゴリー1の割合
診断カテゴリー2の割合
併存疾患の割合（診断カテゴリー1と2）
カテゴリー1と2の名前
 シミュレーションする変数の数
シミュレーションする被験者数
 circum=TRUEはcircumplex構造、FALSEは単純構造
sim.sphericalの単純構造または球状構造
1次元目の平均負荷
2次元目の平均荷重
sim.sphericalにおける3次元目の平均負荷
一般因子の平均負荷（デフォルト=0）
スキューを導入する場合，1次元目の中心からどれだけずれているか
2次元目にスキューを導入する
3次元目にスキューを導入する - sim.sphericalを使用する場合
 連続変数またはカテゴリ変数。  
 lowより小さい値は、強制的にlowになります（item.dichotでは0になります）。
 high より大きい値は，high に強制される（または item.dichot で 1）．
cutpoint より小さい値をすべて cutpoint に変更する。
カットポイントとは
sim.sphericalの第1因子の変数数
sim.sphericalの第2因子と第3因子の変数数
行列またはデータフレーム
連続値をカテゴリ値に変換する際にカットポイントとして使用するoldの値
oldのどの列をカテゴリ変数に変換するか。  見つからない場合は，すべての列が変換される。
シミュレーションする被験者の数。NULL の場合，母集団モデルを返す
 検定の因子負荷量のベクトル
誤差分散のベクトル - NULL の場合， error = 1 - 負荷 2.
short=TRUE: ただ検定相関を与えるだけ， short=FALSE: 暗黙のパターン行列と同様に，観察された検定スコアを報告する．
 連続変数またはカテゴリ変数（離散変数）．  
 Lowより小さい値はLowに強制される
 highより大きい値はhighに強制される。
指定され、かつ categorical = TRUE の場合、結果の連続出力を cuts の値でカットする。
 因子負荷量の行列，または因子負荷量の行列のリスト．
 因子負荷量の2番目の行列（x がリストの場合，y は空でもよい）．
反映に使用する項目の中間点．データから求められる場合は NULL.
一般化距離の指数．(r=1は街区、r=2はユークリッド、r=100以上は最大距離を強調)
生データ，またはブートストラップを行わない場合は相関行列．
NULL の場合，生の相関の信頼区間が求められる．  そうでない場合、相関行列に適用されたキー（<code>cluster.cor</code>に似たロジックですが、ベルやホイッスルはありません）から複合尺度が形成され、それらの複合尺度の相互相関の信頼区間が求められます。
ブートストラップの反復回数。テトラコリック相関やポリコリック相関を使用する場合、これは非常に時間がかかります。
上下の信頼領域は，分布の1-pを含む．
true の場合，重複する尺度間の相関は，項目の重複のために補正される．
FALSEの場合、指定された手法（デフォルトはPearson）を用いて相関を求める。  TRUE の場合、ポリコーリック相関が（ゆっくりと）求められます。  polychoric関数はマルチコアを使用し、corCiも同様に使用するため、使用するコア数はoptions("mc.cores")^2となる。
"pearson", "spearman", "kendall"
相関を確率値でスケーリングした相関プロットを表示する。  信頼区間で行列を表示するには、<code>cor.plot.upperLowerCi<//code>を使用します。
cisの省略形で使用する最小の長さは何ですか？デフォルトは5です。
相関行列から信頼区間を求める場合、nを指定してください。
軸に関するその他のパラメータ (例えば、フォントサイズを変更する cex.axis、プロット中の数字を回転させる srt)
相関行列または<code>fa</code>, <code>principal</code>または<code>omega</code>の出力。  
<code>cor.ci</code> から返されるオブジェクト。
相関の数値を表示する。(2019年9月現在）デフォルトはTRUE。
デフォルトはTRUEで、色はcolorRampPaletteの赤から白、青までの色を使用しますが、colors=FALSEはグレースケールを使用します。
使用す る シ ェ ーデ ィ ン グのレベル数。  デフォルトは 51。
タイトル。デフォルトは "correlation plot"。
色付けする値の範囲 - デフォルトは -1 から 1。 NULL を指定すると、デフォルトは観測された相関の最小値と最大値になります。
色の凡例(キー)が右側に表示される。
NULL の場合は列名と行名を使用し、そうでない場合はラベルを使用する。
凡例にいくつのカテゴリをラベル付けするか？
終了時にグラフィックパラメータを元に戻す
数値をpvalsでスケーリングし、cutの値に基づいて分類する。
pval &lt; cutsで定義されたカテゴリーで数値をスケーリングする。
数値の大きさを有意水準でスケーリングすべきか？
プロットする変数のサブセットを選択
文字サイズ。  変数の数が多い場合は少し小さくする。
非常に長いラベルや大きなフォントを使用する場合、余白を調整できるようにする。
対角線上の行列は描画すべきか、空白のままか？
対角線を表示すべきか？
デフォルトでは、非対称行列が与えられた場合、pair.wise completeを用いて相関を求め、それを表示します。  非対称行列を表示したい場合は、対称行列をFALSEに指定してください。
魔法のastricksを使って相関の「有意性」を表示したい場合は、stars=TRUEを指定します。
有意性を表示する場合、多重検定を調整すべきか？  デフォルトでは、対角線の下に0次確率を表示し、対角線の上に'ホルム'補正を用いて調整します。adjustは、公称アルファ信頼区間(adjust =FALSE)またはBonferonni修正信頼区間(adjust=TRUE)を表示するために、corPlotUpperLowerCIでも使用されます。
x軸ラベルの向き (1 = 水平, 0, 軸に平行, 2, 軸に垂直)
y軸ラベルの向き（1 = 水平, 0, 軸に平行, 2 軸に垂直）
デフォルトでは、図の下に描画する。  xaxis=3 の場合、図の上に描画されます。
色のグラデーション：例えば、gr &lt;- colorRampPalette(c("#B52127", "white", "#2171B5"))を使うと、（一部の人には）少し好ましい色になります。次の例を参照してください。
透明度 (0 = 完全に、1 = 透明でない)。デフォルト値0.75は、数字を使った場合に、やや見栄えのよいプロットを作成します。
NULLでない場合は、行/列ラベルに使用する最大文字数。
軸に関するその他のパラメータ (例えば、フォントサイズを変更する cex.axis、プロット内の数値を回転させる srt)
相関行列または<code>fa</code>, <code>principal</code>または<code>omega</code>の出力。  
<code>cor.ci</code> から返されるオブジェクト。
相関の数値を表示する。(2019年9月現在）デフォルトはTRUE。
デフォルトはTRUEで、色はcolorRampPaletteの赤から白、青までの色を使用しますが、colors=FALSEはグレースケールを使用します。
使用するシ ェ ーデ ィ ン グのレベル数。  デフォルトは 51。
タイトル。デフォルトは "correlation plot"。
色付けする値の範囲 - デフォルトは -1 から 1。 NULL を指定すると、デフォルトは観測された相関の最小値と最大値になります。
色の凡例(キー)が右側に表示される。
NULL の場合は列名と行名を使用し、そうでない場合はラベルを使用する。
凡例にいくつのカテゴリをラベル付けするか？
終了時にグラフィックパラメータを元に戻す
数値をpvalsでスケーリングし、cutの値に基づいて分類する。
pval &lt; cutsで定義されたカテゴリーで数値をスケーリングする。
数値の大きさを有意水準でスケーリングすべきか？
プロットする変数のサブセットを選択
文字サイズ。  変数の数が多い場合は、少し小さくする。
非常に長いラベルや大きなフォントを使用する場合、余白を調整できるようにする。
対角線上の行列は描画すべきか、空白のままか？
対角線を表示すべきか？
デフォルトでは、非対称行列が与えられた場合、pair.wise completeを用いて相関を求め、それを表示します。  非対称行列を表示したい場合は、対称行列をFALSEに指定してください。
魔法のastricksを使って相関の「有意性」を表示したい場合は、stars=TRUEを指定します。
有意性を表示する場合、多重検定を調整すべきか？  デフォルトでは、対角線の下に0次確率を表示し、対角線の上に'ホルム'補正を用いて調整します。adjustは、公称アルファ信頼区間(adjust =FALSE)またはBonferonni修正信頼区間(adjust=TRUE)を表示するために、corPlotUpperLowerCIでも使用されます。
x軸ラベルの向き (1 = 水平, 0, 軸に平行, 2, 軸に垂直)
y軸ラベルの向き（1 = 水平, 0, 軸に平行, 2 軸に垂直）
デフォルトでは、図の下に描画する。  xaxis=3 の場合、図の上に描画されます。
色のグラデーション：例えば、gr &lt;- colorRampPalette(c("#B52127", "white", "#2171B5"))を使うと、（一部の人には）少し好ましい色になります。次の例を参照してください。
透明度 (0 = 完全に、1 = 透明でない)。デフォルト値0.75は、数字を使った場合に、やや見栄えのよいプロットを作成します。
NULLでない場合は、行/列ラベルに使用する最大文字数。
軸に関するその他のパラメータ (例えば、フォントサイズを変更する cex.axis、プロット内の数値を回転させる srt)
相関行列または生データ行列
許容される最小固有値
.

すべてのabs(残差)を報告 &gt; cut
相関行列または生データ行列.
許容できる最小固有値
.

すべてのabs(残差)を報告 &gt; cut
行列またはデータフレーム
分析する変数
重みのセット（標本サイズなど）
標本の標準偏差（標準誤差で重み付けする場合に使用）
レポート相関（デフォルト）または共分散
矩形行列またはデータフレーム（おそらく相関行列）
データ行列，データフレーム，またはベクトル（関数に依存）．
データ行列，データフレーム，またはベクトル
因子分析（fa）または主成分分析（principal）から返されるオブジェクト。
桁丸め
lowerCorのminlengthに省略される
ペアワイズ削除を行うか、または他のオプションの1つをcorにするか
相関行列の対角上のNAをチェックすべきか
"pearson"、"kendall"、"spearman"
ループ変数の現在値
ループが達成する最大値
どの関数がループしているか
キー反転される因子または成分（因子番号による）
char2numericのflag=TRUEは、数値であった変数にフラグを立てます。
この項目で可能な限りの情報を入力してください。
log関数の底は何か（default=2、eは底=exp(1)を意味する）
アクティブにするパッケージ(またはパッケージのリスト)の名前を指定し、すべての例をテストさせます。
このパッケージの依存関係を調べます。
どのタイプの依存関係を調べるか?
依存関係を調べ、そのすべての例をテストする。
これらの依存関係をテストしない
データフレームまたは行列から選択する
select from column with name from から select from column with name to です。
select from 列 from 列 to 列 to
正当なオブジェクトの文字列
 Pearson r
Fisher z
信頼区間のサンプルサイズ
tまたはgの自由度
信頼区間
pを両側pとして扱う
効果量（ヘッジのg）
スチューデントのt値
カイ2乗
相関行列を共分散行列に変換するために使用される標準偏差のベクトル
正方ならば相関行列と仮定され，そうでなければ相関が最初に求められる．
生データ，またはブートストラップを行わない場合は相関行列
NULL の場合，生の相関の信頼区間が求められる．  そうでない場合は、相関行列に適用されたキー（<code>cluster.cor</code>に似たロジックですが、ベルやホイッスルはありません）から複合尺度が形成され、それらの複合尺度の相互相関の信頼区間が求められます。
ブートストラップの反復回数。テトラコリック相関やポリコリック相関を使用する場合、これは非常に時間がかかります。
上下の信頼領域は，分布の1-pを含む．
true の場合，重複する尺度間の相関は，項目の重複のために補正される．
FALSEの場合、指定された手法（デフォルトはPearson）を用いて相関を求める。  TRUE の場合、ポリコーリック相関が（ゆっくりと）求められます。  polychoric関数はマルチコアを使用し、corCiも同様にマルチコアを使用するため、使用するコア数はoptions("mc.cores")^2となる。
"pearson", "spearman", "kendall"
相関を確率値でスケーリングした相関プロットを表示する。  信頼区間で行列を表示するには、<code>cor.plot.upperLowerCi<//code>を使用します。
cisの省略形で使用する最小の長さは何ですか？デフォルトは5です。
相関行列から信頼区間を求める場合、nを指定してください。
軸に関するその他のパラメータ（例えば、フォントサイズを変更するcex.axis、プロット内の数値を回転させるsrt）。
data.frameまたはデータ行列
デフォルトでは、相関行列を返す。  covar が TRUE なら、共分散行列と ML 適合関数を含むリストを返す。
show=TRUEの場合、欠損のパターンを表示するだけで、FIMLは行わない。  FIMLのプロセスを理解するのに便利です。
<code>fa</code>, <code>principal</code>, <code>omega</code>の相関行列または出力。  
<code>cor.ci</code> から返されるオブジェクト。
相関の数値を表示する。(2019年9月現在）デフォルトはTRUE。
デフォルトはTRUEで、色はcolorRampPaletteの赤から白、青までの色を使用しますが、colors=FALSEはグレースケールを使用します。
使用するシ ェ ーデ ィ ン グのレベル数。  デフォルトは 51。
タイトル。デフォルトは "correlation plot"。
色付けする値の範囲 - デフォルトは -1 から 1。 NULL を指定すると、デフォルトは観測された相関の最小値と最大値になります。
色の凡例(キー)が右側に表示される。
NULL の場合は列名と行名を使用し、そうでない場合はラベルを使用する。
凡例にいくつのカテゴリをラベル付けするか？
終了時にグラフィックパラメータを元に戻す
数値をpvalsでスケーリングし、cutの値に基づいて分類する。
pval &lt; cutsで定義されたカテゴリーで数値をスケーリングする。
数値の大きさを有意水準でスケーリングすべきか？
プロットする変数のサブセットを選択
文字サイズ。  変数の数が多い場合は少し小さくする。
非常に長いラベルや大きなフォントを使用する場合、余白を調整できるようにする。
対角線上の行列は描画すべきか、空白のままか？
対角線を表示すべきか？
デフォルトでは、非対称行列が与えられた場合、pair.wise completeを用いて相関を求め、それを表示します。  非対称行列を表示したい場合は、対称性をFALSEに指定してください。
魔法のastricksを使って相関の「有意性」を表示したい場合は、stars=TRUEを指定します。
有意性を表示する場合、多重検定を調整すべきか？  デフォルトでは、対角線の下に0次確率を表示し、対角線の上に'ホルム'補正を用いて調整します。adjustは、公称アルファ信頼区間(adjust =FALSE)またはBonferonni修正信頼区間(adjust=TRUE)を表示するために、corPlotUpperLowerCIでも使用されます。
x軸ラベルの向き (1 = 水平, 0, 軸に平行, 2, 軸に垂直)
y軸ラベルの向き（1 = 水平, 0, 軸に平行, 2 軸に垂直）
デフォルトでは、図の下に描画する。  xaxis=3 の場合、図の上に描画されます。
色のグラデーション：例えば、gr &lt;- colorRampPalette(c("#B52127", "white", "#2171B5"))を使うと、（一部の人には）少し好ましい色になります。次の例を参照してください。
透明度 (0 = 完全に、1 = 透明でない)。デフォルト値0.75は、数字を使った場合に、やや見栄えのよいプロットを作成します。
NULLでない場合は、行/列ラベルに使用する最大文字数。
軸に関するその他のパラメータ (例えば、フォントサイズを変更するcex.axis、プロット内の数値を回転させるsrt)
相関行列または<code>fa</code>, <code>principal</code>または<code>omega</code>の出力。  
<code>cor.ci</code> から返されるオブジェクト。
相関の数値を表示する。(2019年9月現在）デフォルトはTRUE。
デフォルトはTRUEで、色はcolorRampPaletteの赤から白、青までの色を使用しますが、colors=FALSEはグレースケールを使用します。
使用するシ ェ ーデ ィ ン グのレベル数。  デフォルトは 51。
タイトル。デフォルトは "correlation plot"。
色付けする値の範囲 - デフォルトは -1 から 1。 NULL を指定すると、デフォルトは観測された相関の最小値と最大値になります。
色の凡例(キー)が右側に表示される。
NULL の場合は列名と行名を使用し、そうでない場合はラベルを使用する。
凡例にいくつのカテゴリをラベル付けするか？
終了時にグラフィックパラメータを元に戻す
数値をpvalsでスケーリングし、cutの値に基づいて分類する。
pval &lt; cutsで定義されたカテゴリーで数値をスケーリングする。
数値の大きさを有意水準でスケーリングすべきか？
プロットする変数のサブセットを選択
文字サイズ。  変数の数が多い場合は少し小さくする。
非常に長いラベルや大きなフォントを使用する場合、余白を調整できるようにする。
対角線上の行列は描画すべきか、空白のままか？
対角線を表示すべきか？
デフォルトでは、非対称行列が与えられた場合、pair.wise completeを用いて相関を求め、それを表示します。  非対称行列を表示したい場合は、対称行列をFALSEに指定してください。
魔法のastricksを使って相関の「有意性」を表示したい場合は、stars=TRUEを指定します。
有意性を表示する場合、多重検定を調整すべきか？  デフォルトでは、対角線の下に0次確率を表示し、対角線の上に'ホルム'補正を用いて調整します。adjustは、公称アルファ信頼区間(adjust =FALSE)またはBonferonni修正信頼区間(adjust=TRUE)を表示するために、corPlotUpperLowerCIでも使用されます。
x軸ラベルの向き (1 = 水平, 0, 軸に平行, 2, 軸に垂直)
y軸ラベルの向き（1 = 水平, 0, 軸に平行, 2 軸に垂直）
デフォルトでは、図の下に描画する。  xaxis=3 の場合、図の上に描画されます。
色のグラデーション：例えば、gr &lt;- colorRampPalette(c("#B52127", "white", "#2171B5"))を使うと、（一部の人には）少し好ましい色になります。次の例を参照してください。
透明度 (0 = 完全に、1 = 透明でない)。デフォルト値0.75は、数字を使った場合に、やや見栄えのよいプロットを作成します。
NULLでない場合は、行/列ラベルに使用する最大文字数。
軸に関するその他のパラメータ (例えば、フォントサイズを変更する cex.axis、プロット内の数値を回転させる srt)
行列またはデータフレーム
xと同じ行数の2番目の行列またはデータフレーム。
use="pairwise" はデフォルト値で，症例のペアワイズ削除を行います．use="complete" は，完全な症例のみを選択します．
method="pearson" がデフォルト値．  corに渡される選択肢は、"spearman "と "kendall "である。  最後の2つは、特に大きなデータ集合ではかなり遅い。
多重検定の調整には何を使うべきか？("holm", "hochberg", "hommel", "bonferroni", "BH", "BY", "fdr", "none").なぜ "bonferroni "ではなく "holm "を使うのかについては、<code>p.adjust<//code>を参照のこと）。
信頼区間のアルファ水準
相関行列
corr.pを使用する場合はオブザベーションの数。（corr.testから返されるような）行列、またはスケーラのどちらでもよい。偏相関の有意性を求める場合は n - np に設定。(下記参照）。
デフォルトでは信頼区間が求められる。  しかし、これは、特に大きな問題では、顕著なスピードダウンにつながる。  したがって、rs, ts, psだけの場合は、ci=FALSEに設定してください。
省略形の最小の長さ。  デフォルトは5です。
デフォルトでは， method="spearman" と method="kendall" の確率は正規理論によって求められる．  normal=="FALSE "の場合、cor.testが繰り返し呼び出される。  これはより遅いですが、より正確なp値が得られます。 exactはFALSEに設定され、同値の問題を考慮すると、小さな標本の正確なp値は求められないことを意味します。
行列またはデータフレーム
x と同じ行数の2番目の行列またはデータフレーム。
use="pairwise" はデフォルト値で，症例のペアワイズ削除を行う．
method="pearson" がデフォルト値．  corに渡される選択肢は、"spearman "と "kendall "である。  最後の2つは、特に大きなデータ集合ではかなり遅い。
多重検定の調整には何を使うべきか？("holm", "hochberg", "hommel", "bonferroni", "BH", "BY", "fdr", "none").なぜ "bonferroni "ではなく "holm "を使うのかについては、<code>p.adjust<//code>を参照のこと）。
信頼区間のアルファ水準
相関行列
corr.pを使用する場合はオブザベーションの数。（corr.testから返されるような）行列、またはスケーラのどちらでもよい。偏相関の有意性を求める場合は n - np に設定。(下記参照）。
デフォルトでは信頼区間が求められる。  しかし、これは、特に大きな問題では、顕著なスピードダウンにつながる。  したがって、rs, ts, psだけの場合は、ci=FALSEに設定してください。
省略形の最小の長さ。  デフォルトは5です。
デフォルトでは， method="spearman" と method="kendall" の確率は正規理論によって求められる．  normal=="FALSE "の場合、cor.testが繰り返し呼び出される。  これは、より遅いですが、より正確なp値が得られます。 exactをFALSEに設定すると、同値の問題を考慮すると、小さい標本の正確なp値は求められません。
 生の相関行列
 信頼度のベクトル
相関行列。(R1が矩形でなく、 cor=TRUE の場合、相関が求められる)。
相関行列．  R2 が矩形でなく， cor=TRUE ならば，相関が求められる．R2 が NULL の場合， R1 が恒等行列であるかどうかだけを検定する．
R1 のサンプルサイズ
R2の標本サイズ
相関をフィッシャーz変換するか？
デフォルトでは、入力行列が対称行列でない場合、相関行列に変換されます。  つまり、生データと同じように扱われます。  cor=FALSE の場合、入力行列は相関行列とみなされます。
相関行列。(Rが正方でない場合、相関が見つかり、警告が出される。
サンプル・サイズ（指定がない場合は 100 とみなされる）。
行列の対角を 1 に置き換え、相関行列とする。
相関行列。(R1が矩形でなく、cor=TRUEの場合、相関が見つかる)。
相関行列。  R2 が矩形でなく， cor=TRUE ならば，相関が見つかる．R2 が NULL の場合， R1 が恒等行列であるかどうかだけを検定する．
R1 のサンプルサイズ
R2の標本サイズ
相関をフィッシャーz変換するか？
デフォルトでは、入力行列が対称行列でない場合、相関行列に変換されます。  つまり、生データと同じように扱われます。  cor=FALSE の場合、入力行列は相関行列とみなされます。
相関行列。(R1が矩形でなく、cor=TRUEの場合、相関が求められる)。
相関行列。  R2 が矩形でなく，かつ cor=TRUE ならば，相関が求められる．R2 が NULL の場合， R1 が恒等行列であるかどうかだけを検定する．
R1 のサンプルサイズ
R2の標本サイズ
相関をフィッシャーz変換するか？
デフォルトでは、入力行列が対称行列でない場合、相関行列に変換されます。  つまり、生データと同じように扱われます。  cor=FALSE の場合、入力行列は相関行列とみなされます。
相関行列。(R1が矩形でなく、cor=TRUEの場合、相関が求められる)。
相関行列。  R2 が矩形でなく，かつ cor=TRUE ならば，相関が求められる．R2 が NULL の場合， R1 が恒等行列であるかどうかだけを検定する．
R1 のサンプルサイズ
R2の標本サイズ
相関をフィッシャーz変換するか？
デフォルトでは、入力行列が対称行列でない場合、相関行列に変換されます。  つまり、生データと同じように扱われます。  cor=FALSE の場合、入力行列は相関行列とみなされます。
時刻を最初の値とする観測値のデータ・フレームまたは行列（コードで指定されていない場合） 角度は、時間またはラジアンとして指定できる）。
被験者識別変数
データの行列またはデータフレーム。  指定された場合、angle と code は変数名（または場所）。  例を参照。
グループによる比較を行う場合は、グループコードを指定する。
.

スプリット・ハーフ信頼度を求めるときに使用する、被験者ごとのオブザベーションの最小数。
信頼度は奇数と偶数の項目 (TRUE) または前半と後半の項目 (FALSE) に基づきます。  デフォルトは前半と後半。
時間帯は24時間のリズムを持つものと仮定されるが、他のリズムが適合することもある。cosinor.periodを呼び出す場合は、範囲を指定することができる。
IDフィールドはどの列番号か
1つの変数に対して、どの特定の被験者番号をプロットするか
もしTRUEなら、最初の変数（角度）をプロットする
opti=TRUE: 反復最適化 (遅い) または opti=FALSE: 線形フィット (速い)
TRUEの場合、測定は24時間単位、それ以外はラジアン単位。
位相角と相関させる外部変数のセット
欠損データを除去するか？
デフォルトが機能しない場合は、y軸の範囲を指定する。
y軸のラベル
x軸のラベル
グラフィックのタイトル
複数の（スパゲッティ）プロットを行う場合、2つ目以降のプロットにはadd = TRUEを設定する。
複数（スパゲッティ）プロットを行う場合は、1つ目以降のプロットにmulti=TRUEを設定する。
線種をgraphicsに渡す
その他のグラフィックパラメータ
時刻を最初の値とする観測値のデータフレームまたは行列（コードで指定しない限り） 角度は時間またはラジアンのいずれかで指定可能）
被験者識別変数
データの行列またはデータフレーム。  指定された場合、angle と code は変数名（または場所）。  例を参照。
グループによる比較を行う場合は、グループコードを指定する。
.

スプリット・ハーフ信頼度を求めるときに使用する、被験者ごとのオブザベーションの最小数。
信頼度は奇数と偶数の項目 (TRUE) または前半と後半の項目 (FALSE) に基づきます。  デフォルトは前半と後半。
時間帯は24時間のリズムを持つものと仮定されるが、他のリズムが適合することもある。cosinor.periodを呼び出す場合は、範囲を指定することができる。
IDフィールドはどの列番号か
1つの変数に対して、どの特定の被験者番号をプロットするか
TRUEならば、最初の変数（角度）をプロットする。
opti=TRUE: 反復最適化 (遅い) または opti=FALSE: 線形フィット (速い)
TRUEの場合、測定は24時間単位、それ以外はラジアン単位。
位相角と相関させる外部変数のセット
欠損データを削除するか？
デフォルトが機能しない場合は、y軸の範囲を指定する。
y軸のラベル
x軸のラベル
グラフィックのタイトル
複数の（スパゲッティ）プロットを行う場合、2つ目以降のプロットにはadd = TRUEを設定する。
複数の（スパゲッティ）プロットを行う場合、1つ目以降のプロットにはmulti=TRUEを設定する。
線種をgraphicsに渡す
その他のグラフィックパラメータ
時刻を最初の値とする観測値のデータフレームまたは行列（コードで指定しない限り） 角度は時間またはラジアンのいずれかで指定可能）
被験者識別変数
データの行列またはデータフレーム。  指定された場合、angle と code は変数名（または場所）。  例を参照。
グループによる比較を行う場合は、グループコードを指定する。
.

スプリット・ハーフ信頼度を求めるときに使用する、被験者ごとのオブザベーションの最小数。
信頼度は奇数と偶数の項目 (TRUE) または前半と後半の項目 (FALSE) に基づきます。  デフォルトは前半と後半。
時間帯は24時間のリズムを持つものと仮定されるが、他のリズムが適合することもある。cosinor.periodを呼び出す場合は、範囲を指定することができる。
IDフィールドはどの列番号か
1つの変数に対して、どの特定の被験者番号をプロットするか
もしTRUEなら、最初の変数（角度）をプロットする
opti=TRUE: 反復最適化 (遅い) または opti=FALSE: 線形フィット (速い)
TRUEの場合、測定は24時間単位、それ以外はラジアン単位。
位相角と相関させる外部変数のセット
欠損データを削除するか？
デフォルトが機能しない場合は、y軸の範囲を指定する。
y軸のラベル
x軸のラベル
グラフィックのタイトル
複数の（スパゲッティ）プロットを行う場合、2つ目以降のプロットにはadd = TRUEを設定する。
複数（スパゲッティ）プロットを行う場合、1つ目以降のプロットにはmulti=TRUEを設定する。
線種をgraphicsに渡す
その他のグラフィックパラメータ
 入力行列。通常は、相関させる準備ができたデータ行列。
 オプションの2番目の入力行列
TRUEならば対角線を報告し，そうでなければ対角線をNAで埋める。
その他のパラメータ
min エントリを持つ項目ペアの数を数える
エントリが &lt;= min である項目ペアの表を表示する
どの項目がどの尺度に属するかを指定するkeys.list。
記述またはインプットされる相関行列
セルのサイズがcutより小さい項目ペアと番号を報告する
TRUE の場合，すべての NA 相関を，その尺度内または尺度間の平均相関に置き換える
対角線上外側の行列を描画するか、空白にするか？
NULLの場合は列と行の名前を使用し、そうでない場合はラベルを使用する。
色の凡例（キー）を右側に示す。
凡例にはいくつのカテゴリーを表示するか。
colors=TRUEは、colorRampPaletteの赤から白、 青までの色を使用します。
NULLでない場合は、行/列ラベルに使用する最大文字数。
x 軸ラベルの向き (1 = 水平、0 は軸に平行、2 は軸に垂直)
y軸ラベルの向き（1 = 水平、0, 軸に平行、2 軸に垂直）。
タイトル。デフォルトは "Relative Frequencies" （相対周波数）。
色のグラデーション: 例えば、gr &lt;- colorRampPalette(c("#B52127", "white", "#2171B5"))は、（一部の人にとって）少し好ましい色を生成します。<code>corPlot</code>の最後から次の例を参照してください。  
pairwiseCount を用いてペアワイズ・オブザベーションの数をカウントすべきか、それとも単に行列のカウントをプロットすべきか？
pairwiseSampleでサンプリングする変数数のサンプルサイズ
3つのオプション：'式'形式（lmと同様）、またはy集合の列番号（例えば、c(2,4,6)）またはy集合の列名（例えば、c("Flags", "Addition")）のいずれか。それぞれについての注釈と例を参照のこと。
 xとyは、lmの数式スタイルを使用して設定することもできる。
相関の行列または data.frame、正方形でない場合は生データ。
分散/共分散行列または相関行列
媒介変数（<code>mmediate</code>を参照）の集合の列名または番号。
共変量集合の列名または番号。
指定された場合、信頼区間などが計算される。
pairwise"(デフォルト)または "complete "ケース(lm関数と一致)を使用して相関を求める。
標準化ベータ（相関に基づく）または生bs（共分散に基づく）をレポート。
z は、部分相関（TRUE）または部分相関（デフォルト）が見つかった場合に指定されます。
データは相関行列かデータ行列か？
行列入力の場合は， matReg のデータの平均のベクトル．
setCor.diagramのタイトル
FALSEの場合、正方行列はデータ行列としてではなく、相関行列として扱われます。変数と同じ数のケースを持つようなまれなケースでは、square=TRUE を設定します。
setCorの出力は，図を描くのに使うことができる
setCor.diagramには何桁の数字が表示されますか?
x と y のセットの間の重み付けされていない行列の相関を表示しますか?
交互作用項を見つける前に、x 変数をゼロ・センタリングします。
ベータ係数の信頼区間のp値
デフォルトでは，setCor は結果のプロットを作成する．
図中の変数を表示するボックスのテキストサイズ
矢印の数字のテキストサイズ、デフォルトはcex
setCor.diagramの追加グラフィカル・パラメータ
setCorまたはbestScalesから得られるオブジェクト
bestScalesオブジェクトを使用する場合、使用するキーのセット（"best.key", "weights", "optimal.key", "optimal.weights")
crossValidationの未実装オプション
type="b "は線と点の両方を描画します。
xラベルの向き（3つで垂直にする）
x ラベルを省略する場合、最小何文字にするか。
NULLでない場合、適切な位置に凡例を描く
matPlot で使用するプロット文字
matPlot で使用する色
matPlot で使用する線の種類
matPlot の線にどのようなラベルを付けるか。  (デフォルトは変数の colnames)。
矩形行列またはデータフレーム (おそらく相関行列)
データ行列，データフレーム，またはベクトル．
データ行列，データフレーム，またはベクトル
因子分析（fa）または主成分分析（principal）から返されるオブジェクト。
桁丸め
lowerCorのminlengthに省略される
ペアワイズ削除を行うか、または他のオプションの1つをcorにするか
相関行列の対角上のNAをチェックすべきか
"pearson"、"kendall"、"spearman"
ループ変数の現在値
ループが達成する最大値
どの関数がループしているか
キー反転される因子または成分（因子番号による）
char2numericのflag=TRUEは、数値であった変数にフラグを立てます。
この項目で可能な限りの情報を入力してください。
log関数の基数は何か（default=2、eは基数=exp(1)を意味する）
アクティブにするパッケージ(またはパッケージのリスト)の名前を指定し、すべての例をテストさせます。
このパッケージの依存関係を調べます。
どのタイプの依存関係を調べるか?
依存関係を調べ、そのすべての例をテストする。
これらの依存関係をテストしない
データフレームまたは行列から選択する
select from column with name from から select from column with name to です。
select from 列 from 列 to 列 to
正当なオブジェクトの文字列
シミュレートするアクションの数
シミュレートする時間の長さ
キューの強さのベクトル
手がかりと行動傾向の関連行列
抑制行列
 消費行列
行動傾向の初期値
行動、傾向、両方、または状態図を表示
速い時間ごとに表示（スキップ
期待値の行列
傾向の開始値
傾向の開始値のベクトル
2×2のグラフで2つのプロットを比較できるようにする
システムが時間とともに学習（自己強化）できるようにする
ある行動をしたときの報酬の強さ
シミュレーションするアクションの数
シミュレーションする時間の長さ
キューの強さのベクトル
手がかりと行動傾向の関連マトリックス
抑制行列
 消費行列
行動傾向の初期値
行動、傾向、両方、または状態図を表示
速い時間ごとに表示（スキップ
期待値の行列
傾向の開始値
傾向の開始値のベクトル
2×2のグラフで2つのプロットを比較できるようにする
システムが時間とともに学習（自己強化）できるようにする
ある行動をしたときの報酬の強さ
データフレームまたは行列（数式モードで指定可能）
二項グループ変数（数式入力で指定可能（例参照）
group2で定義された各サブグループに対して cohen.dを適用（数式でも指定可能）
数式モードを使用し、特定の変数を指定する場合（例を参照）
効果量
d.robustで平均と標準偏差を求める際に使用されるトリミングの量
第1群と第2群の）合計標本サイズ
1群の標本サイズ（1群のみの場合）
2群の標本サイズ
2つの分散をプールする
